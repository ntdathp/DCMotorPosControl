
PID_STR_LQR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d290  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800d420  0800d420  0000e420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db90  0800db90  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800db90  0800db90  0000eb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db98  0800db98  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db98  0800db98  0000eb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db9c  0800db9c  0000eb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800dba0  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1e8  2**0
                  CONTENTS
 10 .bss          00000504  200001e8  200001e8  0000f1e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200006ec  200006ec  0000f1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eac0  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002496  00000000  00000000  0001dcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00020170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b00  00000000  00000000  00020fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002233e  00000000  00000000  00021ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a3a  00000000  00000000  00043df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce220  00000000  00000000  00054830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122a50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000567c  00000000  00000000  00122a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00128110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d408 	.word	0x0800d408

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800d408 	.word	0x0800d408

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <Motor_Control_STR_step>:
static RT_MODEL_Motor_Control_STR_T Motor_Control_STR_M_;
RT_MODEL_Motor_Control_STR_T *const Motor_Control_STR_M = &Motor_Control_STR_M_;

/* Model step function */
void Motor_Control_STR_step(void)
{
 8000fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fec:	b0fc      	sub	sp, #496	@ 0x1f0
 8000fee:	af00      	add	r7, sp, #0
  int32_T tmp_1;

  /* SwitchCase: '<Root>/Switch Case' incorporates:
   *  Inport: '<Root>/Case'
   */
  rtb_Sum = trunc(Case);
 8000ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80011e8 <Motor_Control_STR_step+0x200>)
 8000ff2:	ed93 7b00 	vldr	d7, [r3]
 8000ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffa:	eef0 0a67 	vmov.f32	s1, s15
 8000ffe:	f00a fc65 	bl	800b8cc <trunc>
 8001002:	ed87 0b74 	vstr	d0, [r7, #464]	@ 0x1d0
  if (rtIsNaN(rtb_Sum) || rtIsInf(rtb_Sum)) {
 8001006:	ed97 0b74 	vldr	d0, [r7, #464]	@ 0x1d0
 800100a:	f001 fa95 	bl	8002538 <rtIsNaN>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <Motor_Control_STR_step+0x3a>
 8001014:	ed97 0b74 	vldr	d0, [r7, #464]	@ 0x1d0
 8001018:	f001 fa6a 	bl	80024f0 <rtIsInf>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <Motor_Control_STR_step+0x48>
    rtb_Sum = 0.0;
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
 800102e:	e007      	b.n	8001040 <Motor_Control_STR_step+0x58>
  } else {
    rtb_Sum = fmod(rtb_Sum, 4.294967296E+9);
 8001030:	ed9f 1b69 	vldr	d1, [pc, #420]	@ 80011d8 <Motor_Control_STR_step+0x1f0>
 8001034:	ed97 0b74 	vldr	d0, [r7, #464]	@ 0x1d0
 8001038:	f00a faaa 	bl	800b590 <fmod>
 800103c:	ed87 0b74 	vstr	d0, [r7, #464]	@ 0x1d0
  }

  switch (rtb_Sum < 0.0 ? -(int32_T)(uint32_T)-rtb_Sum : (int32_T)(uint32_T)
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 800104c:	f7ff fd46 	bl	8000adc <__aeabi_dcmplt>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00c      	beq.n	8001070 <Motor_Control_STR_step+0x88>
 8001056:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 800105a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800105e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001062:	4620      	mov	r0, r4
 8001064:	4629      	mov	r1, r5
 8001066:	f7ff fd9f 	bl	8000ba8 <__aeabi_d2uiz>
 800106a:	4603      	mov	r3, r0
 800106c:	425b      	negs	r3, r3
 800106e:	e004      	b.n	800107a <Motor_Control_STR_step+0x92>
 8001070:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8001074:	f7ff fd98 	bl	8000ba8 <__aeabi_d2uiz>
 8001078:	4603      	mov	r3, r0
 800107a:	2b03      	cmp	r3, #3
 800107c:	f000 87f2 	beq.w	8002064 <Motor_Control_STR_step+0x107c>
 8001080:	2b03      	cmp	r3, #3
 8001082:	f301 804d 	bgt.w	8002120 <Motor_Control_STR_step+0x1138>
 8001086:	2b01      	cmp	r3, #1
 8001088:	d004      	beq.n	8001094 <Motor_Control_STR_step+0xac>
 800108a:	2b02      	cmp	r3, #2
 800108c:	f000 80c0 	beq.w	8001210 <Motor_Control_STR_step+0x228>
    /* End of Outputs for SubSystem: '<Root>/Switch Case Action Subsystem2' */
    break;
  }

  /* End of SwitchCase: '<Root>/Switch Case' */
}
 8001090:	f001 b846 	b.w	8002120 <Motor_Control_STR_step+0x1138>
    rtb_Sum_o = Setpoint - Sensor;
 8001094:	4b55      	ldr	r3, [pc, #340]	@ (80011ec <Motor_Control_STR_step+0x204>)
 8001096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800109a:	4b55      	ldr	r3, [pc, #340]	@ (80011f0 <Motor_Control_STR_step+0x208>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff f8f2 	bl	8000288 <__aeabi_dsub>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    rtb_NProdOut = (rtb_Sum_o * Kd - Motor_Control_STR_DW.Filter_DSTATE) * 100.0;
 80010ac:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <Motor_Control_STR_step+0x20c>)
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80010b6:	f7ff fa9f 	bl	80005f8 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	4b4d      	ldr	r3, [pc, #308]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 80010c4:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80010c8:	f7ff f8de 	bl	8000288 <__aeabi_dsub>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b48      	ldr	r3, [pc, #288]	@ (80011fc <Motor_Control_STR_step+0x214>)
 80010da:	f7ff fa8d 	bl	80005f8 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
    rtb_Sum = (rtb_Sum_o * Kp + Motor_Control_STR_DW.Integrator_DSTATE) +
 80010e6:	4b46      	ldr	r3, [pc, #280]	@ (8001200 <Motor_Control_STR_step+0x218>)
 80010e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ec:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80010f0:	f7ff fa82 	bl	80005f8 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	4b3e      	ldr	r3, [pc, #248]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 80010fe:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8001102:	f7ff f8c3 	bl	800028c <__adddf3>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 800110e:	f7ff f8bd 	bl	800028c <__adddf3>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
    if (rtb_Sum > 100.0) {
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <Motor_Control_STR_step+0x214>)
 8001120:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8001124:	f7ff fcf8 	bl	8000b18 <__aeabi_dcmpgt>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <Motor_Control_STR_step+0x154>
      pwm1 = 100.0;
 800112e:	4935      	ldr	r1, [pc, #212]	@ (8001204 <Motor_Control_STR_step+0x21c>)
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <Motor_Control_STR_step+0x214>)
 8001136:	e9c1 2300 	strd	r2, r3, [r1]
 800113a:	e015      	b.n	8001168 <Motor_Control_STR_step+0x180>
    } else if (rtb_Sum < -100.0) {
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b31      	ldr	r3, [pc, #196]	@ (8001208 <Motor_Control_STR_step+0x220>)
 8001142:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8001146:	f7ff fcc9 	bl	8000adc <__aeabi_dcmplt>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <Motor_Control_STR_step+0x176>
      pwm1 = -100.0;
 8001150:	492c      	ldr	r1, [pc, #176]	@ (8001204 <Motor_Control_STR_step+0x21c>)
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <Motor_Control_STR_step+0x220>)
 8001158:	e9c1 2300 	strd	r2, r3, [r1]
 800115c:	e004      	b.n	8001168 <Motor_Control_STR_step+0x180>
      pwm1 = rtb_Sum;
 800115e:	4929      	ldr	r1, [pc, #164]	@ (8001204 <Motor_Control_STR_step+0x21c>)
 8001160:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8001164:	e9c1 2300 	strd	r2, r3, [r1]
    Motor_Control_STR_DW.Filter_DSTATE += 0.005 * rtb_NProdOut;
 8001168:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 800116a:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	@ 0xe0
 800116e:	a31c      	add	r3, pc, #112	@ (adr r3, 80011e0 <Motor_Control_STR_step+0x1f8>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8001178:	f7ff fa3e 	bl	80005f8 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	f7ff f882 	bl	800028c <__adddf3>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	491a      	ldr	r1, [pc, #104]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 800118e:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
    Motor_Control_STR_DW.Integrator_DSTATE += rtb_Sum_o * Ki * 0.005;
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 8001194:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	@ 0xe8
 8001198:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <Motor_Control_STR_step+0x224>)
 800119a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119e:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80011a2:	f7ff fa29 	bl	80005f8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80011e0 <Motor_Control_STR_step+0x1f8>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fa20 	bl	80005f8 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff f864 	bl	800028c <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	490b      	ldr	r1, [pc, #44]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 80011ca:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
    break;
 80011ce:	f000 bfa7 	b.w	8002120 <Motor_Control_STR_step+0x1138>
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	00000000 	.word	0x00000000
 80011dc:	41f00000 	.word	0x41f00000
 80011e0:	47ae147b 	.word	0x47ae147b
 80011e4:	3f747ae1 	.word	0x3f747ae1
 80011e8:	20000210 	.word	0x20000210
 80011ec:	20000218 	.word	0x20000218
 80011f0:	20000208 	.word	0x20000208
 80011f4:	20000230 	.word	0x20000230
 80011f8:	20000288 	.word	0x20000288
 80011fc:	40590000 	.word	0x40590000
 8001200:	20000220 	.word	0x20000220
 8001204:	20000260 	.word	0x20000260
 8001208:	c0590000 	.word	0xc0590000
 800120c:	20000228 	.word	0x20000228
    rtb_Sum_o = pwm2;
 8001210:	4b94      	ldr	r3, [pc, #592]	@ (8001464 <Motor_Control_STR_step+0x47c>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    rtb_NProdOut = Motor_Control_STR_DW.UnitDelay6_DSTATE;
 800121a:	4b93      	ldr	r3, [pc, #588]	@ (8001468 <Motor_Control_STR_step+0x480>)
 800121c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001220:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
    PHI[0] = -Motor_Control_STR_DW.UnitDelay6_DSTATE;
 8001224:	4b90      	ldr	r3, [pc, #576]	@ (8001468 <Motor_Control_STR_step+0x480>)
 8001226:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800122a:	4690      	mov	r8, r2
 800122c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001230:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001234:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001238:	e9c3 8900 	strd	r8, r9, [r3]
    PHI[1] = -Motor_Control_STR_DW.UnitDelay5_DSTATE;
 800123c:	4b8a      	ldr	r3, [pc, #552]	@ (8001468 <Motor_Control_STR_step+0x480>)
 800123e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001242:	4692      	mov	sl, r2
 8001244:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001248:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800124c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001250:	e9c3 ab02 	strd	sl, fp, [r3, #8]
    PHI[2] = pwm2;
 8001254:	4b83      	ldr	r3, [pc, #524]	@ (8001464 <Motor_Control_STR_step+0x47c>)
 8001256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800125a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800125e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001262:	e9c3 0104 	strd	r0, r1, [r3, #16]
    PHI[3] = Motor_Control_STR_DW.UnitDelay2_DSTATE;
 8001266:	4b80      	ldr	r3, [pc, #512]	@ (8001468 <Motor_Control_STR_step+0x480>)
 8001268:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800126c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001270:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001274:	e9c3 0106 	strd	r0, r1, [r3, #24]
    rtb_Sum = Sensor - (((-Motor_Control_STR_DW.UnitDelay6_DSTATE *
 8001278:	4b7c      	ldr	r3, [pc, #496]	@ (800146c <Motor_Control_STR_step+0x484>)
 800127a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800127e:	4b7a      	ldr	r3, [pc, #488]	@ (8001468 <Motor_Control_STR_step+0x480>)
 8001280:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001284:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001286:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800128a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] +
 800128c:	4b76      	ldr	r3, [pc, #472]	@ (8001468 <Motor_Control_STR_step+0x480>)
 800128e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
    rtb_Sum = Sensor - (((-Motor_Control_STR_DW.UnitDelay6_DSTATE *
 8001292:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001296:	f7ff f9af 	bl	80005f8 <__aeabi_dmul>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4614      	mov	r4, r2
 80012a0:	461d      	mov	r5, r3
                          -Motor_Control_STR_DW.UnitDelay5_DSTATE *
 80012a2:	4b71      	ldr	r3, [pc, #452]	@ (8001468 <Motor_Control_STR_step+0x480>)
 80012a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80012aa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[1]) + pwm2 *
 80012b0:	4b6d      	ldr	r3, [pc, #436]	@ (8001468 <Motor_Control_STR_step+0x480>)
 80012b2:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
                          -Motor_Control_STR_DW.UnitDelay5_DSTATE *
 80012b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80012ba:	f7ff f99d 	bl	80005f8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] +
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7fe ffe1 	bl	800028c <__adddf3>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	461d      	mov	r5, r3
                         Motor_Control_STR_DW.UnitDelay_DSTATE_j[2]) +
 80012d2:	4b65      	ldr	r3, [pc, #404]	@ (8001468 <Motor_Control_STR_step+0x480>)
 80012d4:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[1]) + pwm2 *
 80012d8:	4b62      	ldr	r3, [pc, #392]	@ (8001464 <Motor_Control_STR_step+0x47c>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff f98b 	bl	80005f8 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4620      	mov	r0, r4
 80012e8:	4629      	mov	r1, r5
 80012ea:	f7fe ffcf 	bl	800028c <__adddf3>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4614      	mov	r4, r2
 80012f4:	461d      	mov	r5, r3
                        Motor_Control_STR_DW.UnitDelay2_DSTATE *
 80012f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001468 <Motor_Control_STR_step+0x480>)
 80012f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                        Motor_Control_STR_DW.UnitDelay_DSTATE_j[3]);
 80012fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001468 <Motor_Control_STR_step+0x480>)
 80012fe:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
                        Motor_Control_STR_DW.UnitDelay2_DSTATE *
 8001302:	f7ff f979 	bl	80005f8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
                         Motor_Control_STR_DW.UnitDelay_DSTATE_j[2]) +
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7fe ffbd 	bl	800028c <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
    rtb_Sum = Sensor - (((-Motor_Control_STR_DW.UnitDelay6_DSTATE *
 8001316:	4640      	mov	r0, r8
 8001318:	4649      	mov	r1, r9
 800131a:	f7fe ffb5 	bl	8000288 <__aeabi_dsub>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
    q2 = 0.0;
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    for (i = 0; i < 4; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001338:	e084      	b.n	8001444 <Motor_Control_STR_step+0x45c>
      PHI_tmp = i << 2;
 800133a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      q2 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 8001344:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001348:	3301      	adds	r3, #1
 800134a:	4a47      	ldr	r2, [pc, #284]	@ (8001468 <Motor_Control_STR_step+0x480>)
 800134c:	3304      	adds	r3, #4
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	e9d3 0100 	ldrd	r0, r1, [r3]
               -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 8001356:	4b44      	ldr	r3, [pc, #272]	@ (8001468 <Motor_Control_STR_step+0x480>)
 8001358:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800135c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800135e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001362:	63fb      	str	r3, [r7, #60]	@ 0x3c
      q2 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 8001364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001368:	f7ff f946 	bl	80005f8 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4614      	mov	r4, r2
 8001372:	461d      	mov	r5, r3
               Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 8001374:	4a3c      	ldr	r2, [pc, #240]	@ (8001468 <Motor_Control_STR_step+0x480>)
 8001376:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800137a:	3304      	adds	r3, #4
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4413      	add	r3, r2
 8001380:	e9d3 0100 	ldrd	r0, r1, [r3]
               -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 8001384:	4b38      	ldr	r3, [pc, #224]	@ (8001468 <Motor_Control_STR_step+0x480>)
 8001386:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800138a:	633a      	str	r2, [r7, #48]	@ 0x30
 800138c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001390:	637b      	str	r3, [r7, #52]	@ 0x34
               Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 8001392:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001396:	f7ff f92f 	bl	80005f8 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
               -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 800139e:	4620      	mov	r0, r4
 80013a0:	4629      	mov	r1, r5
 80013a2:	f7fe ff73 	bl	800028c <__adddf3>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4614      	mov	r4, r2
 80013ac:	461d      	mov	r5, r3
              Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 80013ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80013b2:	3302      	adds	r3, #2
 80013b4:	4a2c      	ldr	r2, [pc, #176]	@ (8001468 <Motor_Control_STR_step+0x480>)
 80013b6:	3304      	adds	r3, #4
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4413      	add	r3, r2
 80013bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c0:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <Motor_Control_STR_step+0x47c>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f917 	bl	80005f8 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
               -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7fe ff5b 	bl	800028c <__adddf3>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4614      	mov	r4, r2
 80013dc:	461d      	mov	r5, r3
             Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 80013de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80013e2:	3303      	adds	r3, #3
 80013e4:	4a20      	ldr	r2, [pc, #128]	@ (8001468 <Motor_Control_STR_step+0x480>)
 80013e6:	3304      	adds	r3, #4
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	e9d3 0100 	ldrd	r0, r1, [r3]
             Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 80013f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <Motor_Control_STR_step+0x480>)
 80013f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
             Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 80013f6:	f7ff f8ff 	bl	80005f8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
              Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	f7fe ff43 	bl	800028c <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
             Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 800140e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001412:	f5a3 72c0 	sub.w	r2, r3, #384	@ 0x180
 8001416:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4413      	add	r3, r2
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f8e9 	bl	80005f8 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
      q2 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 800142a:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 800142e:	f7fe ff2d 	bl	800028c <__adddf3>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    for (i = 0; i < 4; i++) {
 800143a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800143e:	3301      	adds	r3, #1
 8001440:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001444:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001448:	2b03      	cmp	r3, #3
 800144a:	f77f af76 	ble.w	800133a <Motor_Control_STR_step+0x352>
    PHI_0 = 0.0;
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
    for (i = 0; i < 4; i++) {
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001460:	e12a      	b.n	80016b8 <Motor_Control_STR_step+0x6d0>
 8001462:	bf00      	nop
 8001464:	20000258 	.word	0x20000258
 8001468:	20000288 	.word	0x20000288
 800146c:	20000208 	.word	0x20000208
      b_gamma = ((Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 4] *
 8001470:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001474:	3304      	adds	r3, #4
 8001476:	4ac0      	ldr	r2, [pc, #768]	@ (8001778 <Motor_Control_STR_step+0x790>)
 8001478:	3304      	adds	r3, #4
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 8001482:	4bbd      	ldr	r3, [pc, #756]	@ (8001778 <Motor_Control_STR_step+0x790>)
 8001484:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001488:	62ba      	str	r2, [r7, #40]	@ 0x28
 800148a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      b_gamma = ((Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 4] *
 8001490:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001494:	f7ff f8b0 	bl	80005f8 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4614      	mov	r4, r2
 800149e:	461d      	mov	r5, r3
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[i] *
 80014a0:	4ab5      	ldr	r2, [pc, #724]	@ (8001778 <Motor_Control_STR_step+0x790>)
 80014a2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80014a6:	3304      	adds	r3, #4
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 80014b0:	4bb1      	ldr	r3, [pc, #708]	@ (8001778 <Motor_Control_STR_step+0x790>)
 80014b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014b6:	623a      	str	r2, [r7, #32]
 80014b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[i] *
 80014be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014c2:	f7ff f899 	bl	80005f8 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 80014ca:	4620      	mov	r0, r4
 80014cc:	4629      	mov	r1, r5
 80014ce:	f7fe fedd 	bl	800028c <__adddf3>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4614      	mov	r4, r2
 80014d8:	461d      	mov	r5, r3
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 8] * pwm2) +
 80014da:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80014de:	3308      	adds	r3, #8
 80014e0:	4aa5      	ldr	r2, [pc, #660]	@ (8001778 <Motor_Control_STR_step+0x790>)
 80014e2:	3304      	adds	r3, #4
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ec:	4ba3      	ldr	r3, [pc, #652]	@ (800177c <Motor_Control_STR_step+0x794>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f881 	bl	80005f8 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 80014fa:	4620      	mov	r0, r4
 80014fc:	4629      	mov	r1, r5
 80014fe:	f7fe fec5 	bl	800028c <__adddf3>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4614      	mov	r4, r2
 8001508:	461d      	mov	r5, r3
        Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 12] *
 800150a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800150e:	330c      	adds	r3, #12
 8001510:	4a99      	ldr	r2, [pc, #612]	@ (8001778 <Motor_Control_STR_step+0x790>)
 8001512:	3304      	adds	r3, #4
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	e9d3 0100 	ldrd	r0, r1, [r3]
        Motor_Control_STR_DW.UnitDelay2_DSTATE;
 800151c:	4b96      	ldr	r3, [pc, #600]	@ (8001778 <Motor_Control_STR_step+0x790>)
 800151e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 12] *
 8001522:	f7ff f869 	bl	80005f8 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
      b_gamma = ((Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 4] *
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7fe fead 	bl	800028c <__adddf3>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
      Theta_tmp[i] = b_gamma;
 800153a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800153e:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 8001542:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	18d1      	adds	r1, r2, r3
 800154a:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 800154e:	e9c1 2300 	strd	r2, r3, [r1]
      PHI_tmp = i << 2;
 8001552:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      PHI_0 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 800155c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001560:	3301      	adds	r3, #1
 8001562:	4a85      	ldr	r2, [pc, #532]	@ (8001778 <Motor_Control_STR_step+0x790>)
 8001564:	3304      	adds	r3, #4
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 800156e:	4b82      	ldr	r3, [pc, #520]	@ (8001778 <Motor_Control_STR_step+0x790>)
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	61ba      	str	r2, [r7, #24]
 8001576:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800157a:	61fb      	str	r3, [r7, #28]
      PHI_0 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 800157c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001580:	f7ff f83a 	bl	80005f8 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4614      	mov	r4, r2
 800158a:	461d      	mov	r5, r3
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 800158c:	4a7a      	ldr	r2, [pc, #488]	@ (8001778 <Motor_Control_STR_step+0x790>)
 800158e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001592:	3304      	adds	r3, #4
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 800159c:	4b76      	ldr	r3, [pc, #472]	@ (8001778 <Motor_Control_STR_step+0x790>)
 800159e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015a2:	613a      	str	r2, [r7, #16]
 80015a4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015a8:	617b      	str	r3, [r7, #20]
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 80015aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015ae:	f7ff f823 	bl	80005f8 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 80015b6:	4620      	mov	r0, r4
 80015b8:	4629      	mov	r1, r5
 80015ba:	f7fe fe67 	bl	800028c <__adddf3>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4614      	mov	r4, r2
 80015c4:	461d      	mov	r5, r3
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 80015c6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80015ca:	3302      	adds	r3, #2
 80015cc:	4a6a      	ldr	r2, [pc, #424]	@ (8001778 <Motor_Control_STR_step+0x790>)
 80015ce:	3304      	adds	r3, #4
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d8:	4b68      	ldr	r3, [pc, #416]	@ (800177c <Motor_Control_STR_step+0x794>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff f80b 	bl	80005f8 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7fe fe4f 	bl	800028c <__adddf3>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4614      	mov	r4, r2
 80015f4:	461d      	mov	r5, r3
                Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 80015f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80015fa:	3303      	adds	r3, #3
 80015fc:	4a5e      	ldr	r2, [pc, #376]	@ (8001778 <Motor_Control_STR_step+0x790>)
 80015fe:	3304      	adds	r3, #4
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	e9d3 0100 	ldrd	r0, r1, [r3]
                Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 8001608:	4b5b      	ldr	r3, [pc, #364]	@ (8001778 <Motor_Control_STR_step+0x790>)
 800160a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 800160e:	f7fe fff3 	bl	80005f8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 8001616:	4620      	mov	r0, r4
 8001618:	4629      	mov	r1, r5
 800161a:	f7fe fe37 	bl	800028c <__adddf3>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
                Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 8001626:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800162a:	f5a3 72c0 	sub.w	r2, r3, #384	@ 0x180
 800162e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe ffdd 	bl	80005f8 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
      PHI_0 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 8001642:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8001646:	f7fe fe21 	bl	800028c <__adddf3>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
      Motor_Control_STR_B.Theta[i] = b_gamma / (q2 + 0.99) * rtb_Sum +
 8001652:	a345      	add	r3, pc, #276	@ (adr r3, 8001768 <Motor_Control_STR_step+0x780>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 800165c:	f7fe fe16 	bl	800028c <__adddf3>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8001668:	f7ff f8f0 	bl	800084c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8001678:	f7fe ffbe 	bl	80005f8 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
        Motor_Control_STR_DW.UnitDelay_DSTATE_j[i];
 8001684:	4a3c      	ldr	r2, [pc, #240]	@ (8001778 <Motor_Control_STR_step+0x790>)
 8001686:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800168a:	3314      	adds	r3, #20
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
      Motor_Control_STR_B.Theta[i] = b_gamma / (q2 + 0.99) * rtb_Sum +
 8001694:	f7fe fdfa 	bl	800028c <__adddf3>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	4a37      	ldr	r2, [pc, #220]	@ (8001780 <Motor_Control_STR_step+0x798>)
 80016a2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4413      	add	r3, r2
 80016aa:	e9c3 0100 	strd	r0, r1, [r3]
    for (i = 0; i < 4; i++) {
 80016ae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80016b2:	3301      	adds	r3, #1
 80016b4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80016b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80016bc:	2b03      	cmp	r3, #3
 80016be:	f77f aed7 	ble.w	8001470 <Motor_Control_STR_step+0x488>
    rtb_Sum = Setpoint - Sensor;
 80016c2:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <Motor_Control_STR_step+0x79c>)
 80016c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe fddb 	bl	8000288 <__aeabi_dsub>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
    rtb_UnitDelay_j = Motor_Control_STR_DW.UnitDelay_DSTATE_c;
 80016da:	4b27      	ldr	r3, [pc, #156]	@ (8001778 <Motor_Control_STR_step+0x790>)
 80016dc:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80016e0:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
    rtb_UnitDelay3_b = Motor_Control_STR_DW.UnitDelay3_DSTATE_i;
 80016e4:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <Motor_Control_STR_step+0x790>)
 80016e6:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 80016ea:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
    if (xi < 1.0) {
 80016ee:	4b27      	ldr	r3, [pc, #156]	@ (800178c <Motor_Control_STR_step+0x7a4>)
 80016f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <Motor_Control_STR_step+0x7a8>)
 80016fa:	f7ff f9ef 	bl	8000adc <__aeabi_dcmplt>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8089 	beq.w	8001818 <Motor_Control_STR_step+0x830>
      d1 = exp(-xi * 4.0 * 0.005) * -2.0 * cos(sqrt(1.0 - xi * xi) * 0.02);
 8001706:	4b21      	ldr	r3, [pc, #132]	@ (800178c <Motor_Control_STR_step+0x7a4>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 800171a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800171e:	f7fe ff6b 	bl	80005f8 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	a311      	add	r3, pc, #68	@ (adr r3, 8001770 <Motor_Control_STR_step+0x788>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe ff62 	bl	80005f8 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	ec43 2b17 	vmov	d7, r2, r3
 800173c:	eeb0 0a47 	vmov.f32	s0, s14
 8001740:	eef0 0a67 	vmov.f32	s1, s15
 8001744:	f009 fedc 	bl	800b500 <exp>
 8001748:	ec51 0b10 	vmov	r0, r1, d0
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001754:	f7fe ff50 	bl	80005f8 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4614      	mov	r4, r2
 800175e:	461d      	mov	r5, r3
 8001760:	e01a      	b.n	8001798 <Motor_Control_STR_step+0x7b0>
 8001762:	bf00      	nop
 8001764:	f3af 8000 	nop.w
 8001768:	7ae147ae 	.word	0x7ae147ae
 800176c:	3fefae14 	.word	0x3fefae14
 8001770:	47ae147b 	.word	0x47ae147b
 8001774:	3f747ae1 	.word	0x3f747ae1
 8001778:	20000288 	.word	0x20000288
 800177c:	20000258 	.word	0x20000258
 8001780:	20000268 	.word	0x20000268
 8001784:	20000218 	.word	0x20000218
 8001788:	20000208 	.word	0x20000208
 800178c:	20000248 	.word	0x20000248
 8001790:	3ff00000 	.word	0x3ff00000
 8001794:	40100000 	.word	0x40100000
 8001798:	4b1d      	ldr	r3, [pc, #116]	@ (8001810 <Motor_Control_STR_step+0x828>)
 800179a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179e:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <Motor_Control_STR_step+0x828>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe ff28 	bl	80005f8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	f04f 0000 	mov.w	r0, #0
 80017b0:	4918      	ldr	r1, [pc, #96]	@ (8001814 <Motor_Control_STR_step+0x82c>)
 80017b2:	f7fe fd69 	bl	8000288 <__aeabi_dsub>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	ec43 2b17 	vmov	d7, r2, r3
 80017be:	eeb0 0a47 	vmov.f32	s0, s14
 80017c2:	eef0 0a67 	vmov.f32	s1, s15
 80017c6:	f009 ff11 	bl	800b5ec <sqrt>
 80017ca:	ec51 0b10 	vmov	r0, r1, d0
 80017ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8001808 <Motor_Control_STR_step+0x820>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe ff10 	bl	80005f8 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	ec43 2b17 	vmov	d7, r2, r3
 80017e0:	eeb0 0a47 	vmov.f32	s0, s14
 80017e4:	eef0 0a67 	vmov.f32	s1, s15
 80017e8:	f009 ff2e 	bl	800b648 <cos>
 80017ec:	ec53 2b10 	vmov	r2, r3, d0
 80017f0:	4620      	mov	r0, r4
 80017f2:	4629      	mov	r1, r5
 80017f4:	f7fe ff00 	bl	80005f8 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
 8001800:	e06d      	b.n	80018de <Motor_Control_STR_step+0x8f6>
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	47ae147b 	.word	0x47ae147b
 800180c:	3f947ae1 	.word	0x3f947ae1
 8001810:	20000248 	.word	0x20000248
 8001814:	3ff00000 	.word	0x3ff00000
      d1 = exp(-xi * 4.0 * 0.005) * -2.0 * cosh(sqrt(xi * xi - 1.0) * 0.02);
 8001818:	4bc1      	ldr	r3, [pc, #772]	@ (8001b20 <Motor_Control_STR_step+0xb38>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	603a      	str	r2, [r7, #0]
 8001820:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4bbe      	ldr	r3, [pc, #760]	@ (8001b24 <Motor_Control_STR_step+0xb3c>)
 800182c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001830:	f7fe fee2 	bl	80005f8 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	a3b4      	add	r3, pc, #720	@ (adr r3, 8001b10 <Motor_Control_STR_step+0xb28>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7fe fed9 	bl	80005f8 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	ec43 2b17 	vmov	d7, r2, r3
 800184e:	eeb0 0a47 	vmov.f32	s0, s14
 8001852:	eef0 0a67 	vmov.f32	s1, s15
 8001856:	f009 fe53 	bl	800b500 <exp>
 800185a:	ec51 0b10 	vmov	r0, r1, d0
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001866:	f7fe fec7 	bl	80005f8 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4614      	mov	r4, r2
 8001870:	461d      	mov	r5, r3
 8001872:	4bab      	ldr	r3, [pc, #684]	@ (8001b20 <Motor_Control_STR_step+0xb38>)
 8001874:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001878:	4ba9      	ldr	r3, [pc, #676]	@ (8001b20 <Motor_Control_STR_step+0xb38>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe febb 	bl	80005f8 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4ba6      	ldr	r3, [pc, #664]	@ (8001b28 <Motor_Control_STR_step+0xb40>)
 8001890:	f7fe fcfa 	bl	8000288 <__aeabi_dsub>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	ec43 2b17 	vmov	d7, r2, r3
 800189c:	eeb0 0a47 	vmov.f32	s0, s14
 80018a0:	eef0 0a67 	vmov.f32	s1, s15
 80018a4:	f009 fea2 	bl	800b5ec <sqrt>
 80018a8:	ec51 0b10 	vmov	r0, r1, d0
 80018ac:	a39a      	add	r3, pc, #616	@ (adr r3, 8001b18 <Motor_Control_STR_step+0xb30>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe fea1 	bl	80005f8 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	ec43 2b17 	vmov	d7, r2, r3
 80018be:	eeb0 0a47 	vmov.f32	s0, s14
 80018c2:	eef0 0a67 	vmov.f32	s1, s15
 80018c6:	f009 fde7 	bl	800b498 <cosh>
 80018ca:	ec53 2b10 	vmov	r2, r3, d0
 80018ce:	4620      	mov	r0, r4
 80018d0:	4629      	mov	r1, r5
 80018d2:	f7fe fe91 	bl	80005f8 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    q2 = Motor_Control_STR_B.Theta[2] + Motor_Control_STR_B.Theta[3];
 80018de:	4b93      	ldr	r3, [pc, #588]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 80018e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80018e4:	4b91      	ldr	r3, [pc, #580]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 80018e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018ea:	f7fe fccf 	bl	800028c <__adddf3>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    q2 = (((exp(-2.0 * xi * 4.0 * 0.005) * Motor_Control_STR_B.Theta[2] -
 80018f6:	4b8a      	ldr	r3, [pc, #552]	@ (8001b20 <Motor_Control_STR_step+0xb38>)
 80018f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001904:	f7fe fe78 	bl	80005f8 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	4b83      	ldr	r3, [pc, #524]	@ (8001b24 <Motor_Control_STR_step+0xb3c>)
 8001916:	f7fe fe6f 	bl	80005f8 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	a37b      	add	r3, pc, #492	@ (adr r3, 8001b10 <Motor_Control_STR_step+0xb28>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe66 	bl	80005f8 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	ec43 2b17 	vmov	d7, r2, r3
 8001934:	eeb0 0a47 	vmov.f32	s0, s14
 8001938:	eef0 0a67 	vmov.f32	s1, s15
 800193c:	f009 fde0 	bl	800b500 <exp>
 8001940:	ec51 0b10 	vmov	r0, r1, d0
 8001944:	4b79      	ldr	r3, [pc, #484]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001946:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800194a:	f7fe fe55 	bl	80005f8 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4614      	mov	r4, r2
 8001954:	461d      	mov	r5, r3
            Motor_Control_STR_B.Theta[3] * d1) - Motor_Control_STR_B.Theta[3]) *
 8001956:	4b75      	ldr	r3, [pc, #468]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001958:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800195c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001960:	f7fe fe4a 	bl	80005f8 <__aeabi_dmul>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
    q2 = (((exp(-2.0 * xi * 4.0 * 0.005) * Motor_Control_STR_B.Theta[2] -
 8001968:	4620      	mov	r0, r4
 800196a:	4629      	mov	r1, r5
 800196c:	f7fe fc8c 	bl	8000288 <__aeabi_dsub>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
            Motor_Control_STR_B.Theta[3] * d1) - Motor_Control_STR_B.Theta[3]) *
 8001978:	4b6c      	ldr	r3, [pc, #432]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 800197a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800197e:	f7fe fc83 	bl	8000288 <__aeabi_dsub>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
          Motor_Control_STR_B.Theta[3] + (Motor_Control_STR_B.Theta[0] *
 800198a:	4b68      	ldr	r3, [pc, #416]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 800198c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
            Motor_Control_STR_B.Theta[3] * d1) - Motor_Control_STR_B.Theta[3]) *
 8001990:	f7fe fe32 	bl	80005f8 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4614      	mov	r4, r2
 800199a:	461d      	mov	r5, r3
          Motor_Control_STR_B.Theta[3] + (Motor_Control_STR_B.Theta[0] *
 800199c:	4b63      	ldr	r3, [pc, #396]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 800199e:	e9d3 0100 	ldrd	r0, r1, [r3]
           Motor_Control_STR_B.Theta[3] - Motor_Control_STR_B.Theta[1] *
 80019a2:	4b62      	ldr	r3, [pc, #392]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 80019a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
          Motor_Control_STR_B.Theta[3] + (Motor_Control_STR_B.Theta[0] *
 80019a8:	f7fe fe26 	bl	80005f8 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4690      	mov	r8, r2
 80019b2:	4699      	mov	r9, r3
           Motor_Control_STR_B.Theta[3] - Motor_Control_STR_B.Theta[1] *
 80019b4:	4b5d      	ldr	r3, [pc, #372]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 80019b6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
           Motor_Control_STR_B.Theta[2]) * q2) * Motor_Control_STR_B.Theta[1] /
 80019ba:	4b5c      	ldr	r3, [pc, #368]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 80019bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
           Motor_Control_STR_B.Theta[3] - Motor_Control_STR_B.Theta[1] *
 80019c0:	f7fe fe1a 	bl	80005f8 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4640      	mov	r0, r8
 80019ca:	4649      	mov	r1, r9
 80019cc:	f7fe fc5c 	bl	8000288 <__aeabi_dsub>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
           Motor_Control_STR_B.Theta[2]) * q2) * Motor_Control_STR_B.Theta[1] /
 80019d8:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 80019dc:	f7fe fe0c 	bl	80005f8 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
          Motor_Control_STR_B.Theta[3] + (Motor_Control_STR_B.Theta[0] *
 80019e4:	4620      	mov	r0, r4
 80019e6:	4629      	mov	r1, r5
 80019e8:	f7fe fc50 	bl	800028c <__adddf3>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
           Motor_Control_STR_B.Theta[2]) * q2) * Motor_Control_STR_B.Theta[1] /
 80019f4:	4b4d      	ldr	r3, [pc, #308]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 80019f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019fa:	f7fe fdfd 	bl	80005f8 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4614      	mov	r4, r2
 8001a04:	461d      	mov	r5, r3
      (((Motor_Control_STR_B.Theta[0] * Motor_Control_STR_B.Theta[2] *
 8001a06:	4b49      	ldr	r3, [pc, #292]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001a08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0c:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001a0e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a12:	f7fe fdf1 	bl	80005f8 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
         Motor_Control_STR_B.Theta[3] - Motor_Control_STR_B.Theta[2] *
 8001a1e:	4b43      	ldr	r3, [pc, #268]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001a20:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
      (((Motor_Control_STR_B.Theta[0] * Motor_Control_STR_B.Theta[2] *
 8001a24:	f7fe fde8 	bl	80005f8 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	4699      	mov	r9, r3
         Motor_Control_STR_B.Theta[3] - Motor_Control_STR_B.Theta[2] *
 8001a30:	4b3e      	ldr	r3, [pc, #248]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001a32:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
         Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[1]) -
 8001a36:	4b3d      	ldr	r3, [pc, #244]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001a38:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
         Motor_Control_STR_B.Theta[3] - Motor_Control_STR_B.Theta[2] *
 8001a3c:	f7fe fddc 	bl	80005f8 <__aeabi_dmul>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
         Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[1]) -
 8001a48:	4b38      	ldr	r3, [pc, #224]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001a4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a4e:	f7fe fdd3 	bl	80005f8 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
         Motor_Control_STR_B.Theta[3] - Motor_Control_STR_B.Theta[2] *
 8001a56:	4640      	mov	r0, r8
 8001a58:	4649      	mov	r1, r9
 8001a5a:	f7fe fc15 	bl	8000288 <__aeabi_dsub>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4690      	mov	r8, r2
 8001a64:	4699      	mov	r9, r3
        Motor_Control_STR_B.Theta[3] * Motor_Control_STR_B.Theta[3]) * q2);
 8001a66:	4b31      	ldr	r3, [pc, #196]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001a68:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001a6e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a72:	f7fe fdc1 	bl	80005f8 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
         Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[1]) -
 8001a7a:	4640      	mov	r0, r8
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	f7fe fc03 	bl	8000288 <__aeabi_dsub>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
        Motor_Control_STR_B.Theta[3] * Motor_Control_STR_B.Theta[3]) * q2);
 8001a8a:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8001a8e:	f7fe fdb3 	bl	80005f8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
    q2 = (((exp(-2.0 * xi * 4.0 * 0.005) * Motor_Control_STR_B.Theta[2] -
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f7fe fed7 	bl	800084c <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    b_gamma = q2 * Motor_Control_STR_B.Theta[3] / Motor_Control_STR_B.Theta[1];
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001aa8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001aac:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8001ab0:	f7fe fda2 	bl	80005f8 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001abe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ac2:	f7fe fec3 	bl	800084c <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    d1 = ((((Motor_Control_STR_B.Theta[1] / Motor_Control_STR_B.Theta[3] -
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001ad0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ad4:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001ad6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ada:	f7fe feb7 	bl	800084c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4614      	mov	r4, r2
 8001ae4:	461d      	mov	r5, r3
             ((Motor_Control_STR_B.Theta[2] / Motor_Control_STR_B.Theta[3] -
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001ae8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001aec:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001aee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001af2:	f7fe feab 	bl	800084c <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4690      	mov	r8, r2
 8001afc:	4699      	mov	r9, r3
               Motor_Control_STR_B.Theta[0] / Motor_Control_STR_B.Theta[1]) +
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <Motor_Control_STR_step+0xb44>)
 8001b06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b0a:	f7fe fe9f 	bl	800084c <__aeabi_ddiv>
 8001b0e:	e00f      	b.n	8001b30 <Motor_Control_STR_step+0xb48>
 8001b10:	47ae147b 	.word	0x47ae147b
 8001b14:	3f747ae1 	.word	0x3f747ae1
 8001b18:	47ae147b 	.word	0x47ae147b
 8001b1c:	3f947ae1 	.word	0x3f947ae1
 8001b20:	20000248 	.word	0x20000248
 8001b24:	40100000 	.word	0x40100000
 8001b28:	3ff00000 	.word	0x3ff00000
 8001b2c:	20000268 	.word	0x20000268
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
             ((Motor_Control_STR_B.Theta[2] / Motor_Control_STR_B.Theta[3] -
 8001b34:	4640      	mov	r0, r8
 8001b36:	4649      	mov	r1, r9
 8001b38:	f7fe fba6 	bl	8000288 <__aeabi_dsub>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
               Motor_Control_STR_B.Theta[0] / Motor_Control_STR_B.Theta[1]) +
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4baa      	ldr	r3, [pc, #680]	@ (8001df4 <Motor_Control_STR_step+0xe0c>)
 8001b4a:	f7fe fb9f 	bl	800028c <__adddf3>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
              1.0) * q2) * Motor_Control_STR_DW.UnitDelay_DSTATE_c + (((d1 + 1.0)
 8001b56:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8001b5a:	f7fe fd4d 	bl	80005f8 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
    d1 = ((((Motor_Control_STR_B.Theta[1] / Motor_Control_STR_B.Theta[3] -
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
 8001b66:	f7fe fb8f 	bl	8000288 <__aeabi_dsub>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
              1.0) * q2) * Motor_Control_STR_DW.UnitDelay_DSTATE_c + (((d1 + 1.0)
 8001b72:	4ba1      	ldr	r3, [pc, #644]	@ (8001df8 <Motor_Control_STR_step+0xe10>)
 8001b74:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8001b78:	f7fe fd3e 	bl	80005f8 <__aeabi_dmul>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4614      	mov	r4, r2
 8001b82:	461d      	mov	r5, r3
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b9a      	ldr	r3, [pc, #616]	@ (8001df4 <Motor_Control_STR_step+0xe0c>)
 8001b8a:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8001b8e:	f7fe fb7d 	bl	800028c <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
              - Motor_Control_STR_B.Theta[0]) - b_gamma) /
 8001b9a:	4b98      	ldr	r3, [pc, #608]	@ (8001dfc <Motor_Control_STR_step+0xe14>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fb72 	bl	8000288 <__aeabi_dsub>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8001bb0:	f7fe fb6a 	bl	8000288 <__aeabi_dsub>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
            Motor_Control_STR_B.Theta[2] * rtb_Sum) + q2 *
 8001bbc:	4b8f      	ldr	r3, [pc, #572]	@ (8001dfc <Motor_Control_STR_step+0xe14>)
 8001bbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
              - Motor_Control_STR_B.Theta[0]) - b_gamma) /
 8001bc2:	f7fe fe43 	bl	800084c <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
            Motor_Control_STR_B.Theta[2] * rtb_Sum) + q2 *
 8001bce:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8001bd2:	f7fe fd11 	bl	80005f8 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
              1.0) * q2) * Motor_Control_STR_DW.UnitDelay_DSTATE_c + (((d1 + 1.0)
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fb55 	bl	800028c <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4614      	mov	r4, r2
 8001be8:	461d      	mov	r5, r3
           Motor_Control_STR_DW.UnitDelay2_DSTATE_a) + (1.0 - b_gamma) *
 8001bea:	4b83      	ldr	r3, [pc, #524]	@ (8001df8 <Motor_Control_STR_step+0xe10>)
 8001bec:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
            Motor_Control_STR_B.Theta[2] * rtb_Sum) + q2 *
 8001bf0:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8001bf4:	f7fe fd00 	bl	80005f8 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	f7fe fb44 	bl	800028c <__adddf3>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
           Motor_Control_STR_DW.UnitDelay2_DSTATE_a) + (1.0 - b_gamma) *
 8001c0c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8001c10:	f04f 0000 	mov.w	r0, #0
 8001c14:	4977      	ldr	r1, [pc, #476]	@ (8001df4 <Motor_Control_STR_step+0xe0c>)
 8001c16:	f7fe fb37 	bl	8000288 <__aeabi_dsub>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
          Motor_Control_STR_DW.UnitDelay3_DSTATE_i) + b_gamma *
 8001c22:	4b75      	ldr	r3, [pc, #468]	@ (8001df8 <Motor_Control_STR_step+0xe10>)
 8001c24:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
           Motor_Control_STR_DW.UnitDelay2_DSTATE_a) + (1.0 - b_gamma) *
 8001c28:	f7fe fce6 	bl	80005f8 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4620      	mov	r0, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	f7fe fb2a 	bl	800028c <__adddf3>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	461d      	mov	r5, r3
      Motor_Control_STR_DW.UnitDelay1_DSTATE_j;
 8001c40:	4b6d      	ldr	r3, [pc, #436]	@ (8001df8 <Motor_Control_STR_step+0xe10>)
 8001c42:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
          Motor_Control_STR_DW.UnitDelay3_DSTATE_i) + b_gamma *
 8001c46:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8001c4a:	f7fe fcd5 	bl	80005f8 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
    d1 = ((((Motor_Control_STR_B.Theta[1] / Motor_Control_STR_B.Theta[3] -
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fb19 	bl	800028c <__adddf3>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    if (d1 > 100.0) {
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b66      	ldr	r3, [pc, #408]	@ (8001e00 <Motor_Control_STR_step+0xe18>)
 8001c68:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8001c6c:	f7fe ff54 	bl	8000b18 <__aeabi_dcmpgt>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <Motor_Control_STR_step+0xc9c>
      pwm2 = 100.0;
 8001c76:	4963      	ldr	r1, [pc, #396]	@ (8001e04 <Motor_Control_STR_step+0xe1c>)
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b60      	ldr	r3, [pc, #384]	@ (8001e00 <Motor_Control_STR_step+0xe18>)
 8001c7e:	e9c1 2300 	strd	r2, r3, [r1]
 8001c82:	e015      	b.n	8001cb0 <Motor_Control_STR_step+0xcc8>
    } else if (d1 < -100.0) {
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b5f      	ldr	r3, [pc, #380]	@ (8001e08 <Motor_Control_STR_step+0xe20>)
 8001c8a:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8001c8e:	f7fe ff25 	bl	8000adc <__aeabi_dcmplt>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <Motor_Control_STR_step+0xcbe>
      pwm2 = -100.0;
 8001c98:	495a      	ldr	r1, [pc, #360]	@ (8001e04 <Motor_Control_STR_step+0xe1c>)
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e08 <Motor_Control_STR_step+0xe20>)
 8001ca0:	e9c1 2300 	strd	r2, r3, [r1]
 8001ca4:	e004      	b.n	8001cb0 <Motor_Control_STR_step+0xcc8>
      pwm2 = d1;
 8001ca6:	4957      	ldr	r1, [pc, #348]	@ (8001e04 <Motor_Control_STR_step+0xe1c>)
 8001ca8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001cac:	e9c1 2300 	strd	r2, r3, [r1]
    Motor_Control_STR_DW.UnitDelay2_DSTATE = rtb_Sum_o;
 8001cb0:	4951      	ldr	r1, [pc, #324]	@ (8001df8 <Motor_Control_STR_step+0xe10>)
 8001cb2:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8001cb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Motor_Control_STR_DW.UnitDelay6_DSTATE = Sensor;
 8001cba:	4b54      	ldr	r3, [pc, #336]	@ (8001e0c <Motor_Control_STR_step+0xe24>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	494d      	ldr	r1, [pc, #308]	@ (8001df8 <Motor_Control_STR_step+0xe10>)
 8001cc2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    Motor_Control_STR_DW.UnitDelay5_DSTATE = rtb_NProdOut;
 8001cc6:	494c      	ldr	r1, [pc, #304]	@ (8001df8 <Motor_Control_STR_step+0xe10>)
 8001cc8:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8001ccc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    b_gamma = Theta_tmp[0];
 8001cd0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001cd4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    rtb_Sum_o = Theta_tmp[1];
 8001ce0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001ce4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001ce8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cec:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    rtb_NProdOut = Theta_tmp[2];
 8001cf0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001cf4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001cf8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001cfc:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
    Theta_tmp_1 = Theta_tmp[3];
 8001d00:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001d04:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001d08:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d0c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    for (i = 0; i < 4; i++) {
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001d16:	e064      	b.n	8001de2 <Motor_Control_STR_step+0xdfa>
      q2 = PHI[i];
 8001d18:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001d1c:	f5a3 72c0 	sub.w	r2, r3, #384	@ 0x180
 8001d20:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
      PHI_tmp = i << 2;
 8001d30:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      Theta_tmp_0[PHI_tmp] = b_gamma * q2;
 8001d3a:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8001d3e:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8001d42:	f7fe fc59 	bl	80005f8 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 8001d4e:	00c9      	lsls	r1, r1, #3
 8001d50:	f501 71d0 	add.w	r1, r1, #416	@ 0x1a0
 8001d54:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001d58:	4401      	add	r1, r0
 8001d5a:	39e0      	subs	r1, #224	@ 0xe0
 8001d5c:	e9c1 2300 	strd	r2, r3, [r1]
      Theta_tmp_0[PHI_tmp + 1] = rtb_Sum_o * q2;
 8001d60:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001d64:	1c5c      	adds	r4, r3, #1
 8001d66:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8001d6a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 8001d6e:	f7fe fc43 	bl	80005f8 <__aeabi_dmul>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	00e1      	lsls	r1, r4, #3
 8001d78:	f501 71d0 	add.w	r1, r1, #416	@ 0x1a0
 8001d7c:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001d80:	4401      	add	r1, r0
 8001d82:	39e0      	subs	r1, #224	@ 0xe0
 8001d84:	e9c1 2300 	strd	r2, r3, [r1]
      Theta_tmp_0[PHI_tmp + 2] = rtb_NProdOut * q2;
 8001d88:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001d8c:	1c9c      	adds	r4, r3, #2
 8001d8e:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8001d92:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8001d96:	f7fe fc2f 	bl	80005f8 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	00e1      	lsls	r1, r4, #3
 8001da0:	f501 71d0 	add.w	r1, r1, #416	@ 0x1a0
 8001da4:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001da8:	4401      	add	r1, r0
 8001daa:	39e0      	subs	r1, #224	@ 0xe0
 8001dac:	e9c1 2300 	strd	r2, r3, [r1]
      Theta_tmp_0[PHI_tmp + 3] = Theta_tmp_1 * q2;
 8001db0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001db4:	1cdc      	adds	r4, r3, #3
 8001db6:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8001dba:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8001dbe:	f7fe fc1b 	bl	80005f8 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	00e1      	lsls	r1, r4, #3
 8001dc8:	f501 71d0 	add.w	r1, r1, #416	@ 0x1a0
 8001dcc:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001dd0:	4401      	add	r1, r0
 8001dd2:	39e0      	subs	r1, #224	@ 0xe0
 8001dd4:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 4; i++) {
 8001dd8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001de2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	dd96      	ble.n	8001d18 <Motor_Control_STR_step+0xd30>
    for (i = 0; i < 4; i++) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001df0:	e0e0      	b.n	8001fb4 <Motor_Control_STR_step+0xfcc>
 8001df2:	bf00      	nop
 8001df4:	3ff00000 	.word	0x3ff00000
 8001df8:	20000288 	.word	0x20000288
 8001dfc:	20000268 	.word	0x20000268
 8001e00:	40590000 	.word	0x40590000
 8001e04:	20000258 	.word	0x20000258
 8001e08:	c0590000 	.word	0xc0590000
 8001e0c:	20000208 	.word	0x20000208
      b_gamma = Theta_tmp_0[i + 4];
 8001e10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e14:	3304      	adds	r3, #4
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8001e1c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001e20:	4413      	add	r3, r2
 8001e22:	3be0      	subs	r3, #224	@ 0xe0
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
      rtb_Sum_o = Theta_tmp_0[i];
 8001e2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8001e36:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3be0      	subs	r3, #224	@ 0xe0
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
      rtb_NProdOut = Theta_tmp_0[i + 8];
 8001e46:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e4a:	3308      	adds	r3, #8
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8001e52:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001e56:	4413      	add	r3, r2
 8001e58:	3be0      	subs	r3, #224	@ 0xe0
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
      Theta_tmp_1 = Theta_tmp_0[i + 12];
 8001e62:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e66:	330c      	adds	r3, #12
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8001e6e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001e72:	4413      	add	r3, r2
 8001e74:	3be0      	subs	r3, #224	@ 0xe0
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      for (PHI_tmp = 0; PHI_tmp < 4; PHI_tmp++) {
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8001e84:	e08c      	b.n	8001fa0 <Motor_Control_STR_step+0xfb8>
        tmp_0 = PHI_tmp << 2;
 8001e86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        tmp_1 = tmp_0 + i;
 8001e90:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001e94:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e98:	4413      	add	r3, r2
 8001e9a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        tmp[tmp_1] = Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_1] -
 8001e9e:	4aa8      	ldr	r2, [pc, #672]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 8001ea0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	e9d3 4500 	ldrd	r4, r5, [r3]
          (((Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 1] * b_gamma +
 8001eae:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	4aa2      	ldr	r2, [pc, #648]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec0:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8001ec4:	f7fe fb98 	bl	80005f8 <__aeabi_dmul>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4690      	mov	r8, r2
 8001ece:	4699      	mov	r9, r3
             Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0] * rtb_Sum_o) +
 8001ed0:	4a9b      	ldr	r2, [pc, #620]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 8001ed2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee0:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8001ee4:	f7fe fb88 	bl	80005f8 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
          (((Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 1] * b_gamma +
 8001eec:	4640      	mov	r0, r8
 8001eee:	4649      	mov	r1, r9
 8001ef0:	f7fe f9cc 	bl	800028c <__adddf3>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4690      	mov	r8, r2
 8001efa:	4699      	mov	r9, r3
            Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 2] * rtb_NProdOut) +
 8001efc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001f00:	3302      	adds	r3, #2
 8001f02:	4a8f      	ldr	r2, [pc, #572]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 8001f04:	3304      	adds	r3, #4
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f0e:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8001f12:	f7fe fb71 	bl	80005f8 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
             Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0] * rtb_Sum_o) +
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	f7fe f9b5 	bl	800028c <__adddf3>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4690      	mov	r8, r2
 8001f28:	4699      	mov	r9, r3
           Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 3] * Theta_tmp_1) /
 8001f2a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001f2e:	3303      	adds	r3, #3
 8001f30:	4a83      	ldr	r2, [pc, #524]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 8001f32:	3304      	adds	r3, #4
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f3c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001f40:	f7fe fb5a 	bl	80005f8 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
            Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 2] * rtb_NProdOut) +
 8001f48:	4640      	mov	r0, r8
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	f7fe f99e 	bl	800028c <__adddf3>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4690      	mov	r8, r2
 8001f56:	4699      	mov	r9, r3
          (PHI_0 + 0.99);
 8001f58:	a375      	add	r3, pc, #468	@ (adr r3, 8002130 <Motor_Control_STR_step+0x1148>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8001f62:	f7fe f993 	bl	800028c <__adddf3>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
           Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 3] * Theta_tmp_1) /
 8001f6a:	4640      	mov	r0, r8
 8001f6c:	4649      	mov	r1, r9
 8001f6e:	f7fe fc6d 	bl	800084c <__aeabi_ddiv>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
        tmp[tmp_1] = Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_1] -
 8001f76:	4620      	mov	r0, r4
 8001f78:	4629      	mov	r1, r5
 8001f7a:	f7fe f985 	bl	8000288 <__aeabi_dsub>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8001f86:	f5a1 70b0 	sub.w	r0, r1, #352	@ 0x160
 8001f8a:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 8001f8e:	00c9      	lsls	r1, r1, #3
 8001f90:	4401      	add	r1, r0
 8001f92:	e9c1 2300 	strd	r2, r3, [r1]
      for (PHI_tmp = 0; PHI_tmp < 4; PHI_tmp++) {
 8001f96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8001fa0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	f77f af6e 	ble.w	8001e86 <Motor_Control_STR_step+0xe9e>
    for (i = 0; i < 4; i++) {
 8001faa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001fb4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	f77f af29 	ble.w	8001e10 <Motor_Control_STR_step+0xe28>
    for (i = 0; i < 16; i++) {
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001fc4:	e01d      	b.n	8002002 <Motor_Control_STR_step+0x101a>
      Motor_Control_STR_DW.UnitDelay1_DSTATE[i] = 1.0101010101010102 * tmp[i];
 8001fc6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001fca:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8001fce:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fda:	a357      	add	r3, pc, #348	@ (adr r3, 8002138 <Motor_Control_STR_step+0x1150>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe fb0a 	bl	80005f8 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4855      	ldr	r0, [pc, #340]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 8001fea:	f8d7 11c8 	ldr.w	r1, [r7, #456]	@ 0x1c8
 8001fee:	3104      	adds	r1, #4
 8001ff0:	00c9      	lsls	r1, r1, #3
 8001ff2:	4401      	add	r1, r0
 8001ff4:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 16; i++) {
 8001ff8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002002:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002006:	2b0f      	cmp	r3, #15
 8002008:	dddd      	ble.n	8001fc6 <Motor_Control_STR_step+0xfde>
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] = Motor_Control_STR_B.Theta[0];
 800200a:	4b4e      	ldr	r3, [pc, #312]	@ (8002144 <Motor_Control_STR_step+0x115c>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	494b      	ldr	r1, [pc, #300]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 8002012:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[1] = Motor_Control_STR_B.Theta[1];
 8002016:	4b4b      	ldr	r3, [pc, #300]	@ (8002144 <Motor_Control_STR_step+0x115c>)
 8002018:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800201c:	4948      	ldr	r1, [pc, #288]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 800201e:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[2] = Motor_Control_STR_B.Theta[2];
 8002022:	4b48      	ldr	r3, [pc, #288]	@ (8002144 <Motor_Control_STR_step+0x115c>)
 8002024:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002028:	4945      	ldr	r1, [pc, #276]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 800202a:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[3] = Motor_Control_STR_B.Theta[3];
 800202e:	4b45      	ldr	r3, [pc, #276]	@ (8002144 <Motor_Control_STR_step+0x115c>)
 8002030:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002034:	4942      	ldr	r1, [pc, #264]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 8002036:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
    Motor_Control_STR_DW.UnitDelay_DSTATE_c = rtb_Sum;
 800203a:	4941      	ldr	r1, [pc, #260]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 800203c:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8002040:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
    Motor_Control_STR_DW.UnitDelay2_DSTATE_a = rtb_UnitDelay_j;
 8002044:	493e      	ldr	r1, [pc, #248]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 8002046:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 800204a:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
    Motor_Control_STR_DW.UnitDelay3_DSTATE_i = d1;
 800204e:	493c      	ldr	r1, [pc, #240]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 8002050:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8002054:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    Motor_Control_STR_DW.UnitDelay1_DSTATE_j = rtb_UnitDelay3_b;
 8002058:	4939      	ldr	r1, [pc, #228]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 800205a:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 800205e:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    break;
 8002062:	e05d      	b.n	8002120 <Motor_Control_STR_step+0x1138>
    rtb_Sum = (Setpoint - Sensor) * K1 + (Sensor -
 8002064:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <Motor_Control_STR_step+0x1160>)
 8002066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800206a:	4b38      	ldr	r3, [pc, #224]	@ (800214c <Motor_Control_STR_step+0x1164>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f7fe f90a 	bl	8000288 <__aeabi_dsub>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	4b34      	ldr	r3, [pc, #208]	@ (8002150 <Motor_Control_STR_step+0x1168>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe fab9 	bl	80005f8 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4614      	mov	r4, r2
 800208c:	461d      	mov	r5, r3
 800208e:	4b2f      	ldr	r3, [pc, #188]	@ (800214c <Motor_Control_STR_step+0x1164>)
 8002090:	e9d3 0100 	ldrd	r0, r1, [r3]
      Motor_Control_STR_DW.UnitDelay_DSTATE) * K2;
 8002094:	4b2a      	ldr	r3, [pc, #168]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Sum = (Setpoint - Sensor) * K1 + (Sensor -
 800209a:	f7fe f8f5 	bl	8000288 <__aeabi_dsub>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
      Motor_Control_STR_DW.UnitDelay_DSTATE) * K2;
 80020a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002154 <Motor_Control_STR_step+0x116c>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	f7fe faa4 	bl	80005f8 <__aeabi_dmul>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
    rtb_Sum = (Setpoint - Sensor) * K1 + (Sensor -
 80020b4:	4620      	mov	r0, r4
 80020b6:	4629      	mov	r1, r5
 80020b8:	f7fe f8e8 	bl	800028c <__adddf3>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
    if (rtb_Sum > 100.0) {
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <Motor_Control_STR_step+0x1170>)
 80020ca:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80020ce:	f7fe fd23 	bl	8000b18 <__aeabi_dcmpgt>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <Motor_Control_STR_step+0x10fe>
      pwm3 = 100.0;
 80020d8:	4920      	ldr	r1, [pc, #128]	@ (800215c <Motor_Control_STR_step+0x1174>)
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <Motor_Control_STR_step+0x1170>)
 80020e0:	e9c1 2300 	strd	r2, r3, [r1]
 80020e4:	e015      	b.n	8002112 <Motor_Control_STR_step+0x112a>
    } else if (rtb_Sum < -100.0) {
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <Motor_Control_STR_step+0x1178>)
 80020ec:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80020f0:	f7fe fcf4 	bl	8000adc <__aeabi_dcmplt>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <Motor_Control_STR_step+0x1120>
      pwm3 = -100.0;
 80020fa:	4918      	ldr	r1, [pc, #96]	@ (800215c <Motor_Control_STR_step+0x1174>)
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <Motor_Control_STR_step+0x1178>)
 8002102:	e9c1 2300 	strd	r2, r3, [r1]
 8002106:	e004      	b.n	8002112 <Motor_Control_STR_step+0x112a>
      pwm3 = rtb_Sum;
 8002108:	4914      	ldr	r1, [pc, #80]	@ (800215c <Motor_Control_STR_step+0x1174>)
 800210a:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 800210e:	e9c1 2300 	strd	r2, r3, [r1]
    Motor_Control_STR_DW.UnitDelay_DSTATE = Sensor;
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <Motor_Control_STR_step+0x1164>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	4909      	ldr	r1, [pc, #36]	@ (8002140 <Motor_Control_STR_step+0x1158>)
 800211a:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 800211e:	bf00      	nop
}
 8002120:	bf00      	nop
 8002122:	f507 77f8 	add.w	r7, r7, #496	@ 0x1f0
 8002126:	46bd      	mov	sp, r7
 8002128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800212c:	f3af 8000 	nop.w
 8002130:	7ae147ae 	.word	0x7ae147ae
 8002134:	3fefae14 	.word	0x3fefae14
 8002138:	ad40a57f 	.word	0xad40a57f
 800213c:	3ff0295f 	.word	0x3ff0295f
 8002140:	20000288 	.word	0x20000288
 8002144:	20000268 	.word	0x20000268
 8002148:	20000218 	.word	0x20000218
 800214c:	20000208 	.word	0x20000208
 8002150:	20000238 	.word	0x20000238
 8002154:	20000240 	.word	0x20000240
 8002158:	40590000 	.word	0x40590000
 800215c:	20000250 	.word	0x20000250
 8002160:	c0590000 	.word	0xc0590000
 8002164:	00000000 	.word	0x00000000

08002168 <Motor_Control_STR_initialize>:

/* Model initialize function */
void Motor_Control_STR_initialize(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 800216c:	2008      	movs	r0, #8
 800216e:	f000 f97b 	bl	8002468 <rt_InitInfAndNaN>

  /* initialize error status */
  rtmSetErrorStatus(Motor_Control_STR_M, (NULL));
 8002172:	4b43      	ldr	r3, [pc, #268]	@ (8002280 <Motor_Control_STR_initialize+0x118>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

  /* block I/O */
  (void) memset(((void *) &Motor_Control_STR_B), 0,
 8002178:	2220      	movs	r2, #32
 800217a:	2100      	movs	r1, #0
 800217c:	4841      	ldr	r0, [pc, #260]	@ (8002284 <Motor_Control_STR_initialize+0x11c>)
 800217e:	f006 fb3e 	bl	80087fe <memset>
                sizeof(B_Motor_Control_STR_T));

  /* exported global signals */
  pwm3 = 0.0;
 8002182:	4941      	ldr	r1, [pc, #260]	@ (8002288 <Motor_Control_STR_initialize+0x120>)
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9c1 2300 	strd	r2, r3, [r1]
  pwm2 = 0.0;
 8002190:	493e      	ldr	r1, [pc, #248]	@ (800228c <Motor_Control_STR_initialize+0x124>)
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	e9c1 2300 	strd	r2, r3, [r1]
  pwm1 = 0.0;
 800219e:	493c      	ldr	r1, [pc, #240]	@ (8002290 <Motor_Control_STR_initialize+0x128>)
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	e9c1 2300 	strd	r2, r3, [r1]

  /* states (dwork) */
  (void) memset((void *)&Motor_Control_STR_DW, 0,
 80021ac:	22f0      	movs	r2, #240	@ 0xf0
 80021ae:	2100      	movs	r1, #0
 80021b0:	4838      	ldr	r0, [pc, #224]	@ (8002294 <Motor_Control_STR_initialize+0x12c>)
 80021b2:	f006 fb24 	bl	80087fe <memset>
                sizeof(DW_Motor_Control_STR_T));

  /* external inputs */
  Sensor = 0.0;
 80021b6:	4938      	ldr	r1, [pc, #224]	@ (8002298 <Motor_Control_STR_initialize+0x130>)
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	e9c1 2300 	strd	r2, r3, [r1]
  Case = 0.0;
 80021c4:	4935      	ldr	r1, [pc, #212]	@ (800229c <Motor_Control_STR_initialize+0x134>)
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9c1 2300 	strd	r2, r3, [r1]
  Setpoint = 0.0;
 80021d2:	4933      	ldr	r1, [pc, #204]	@ (80022a0 <Motor_Control_STR_initialize+0x138>)
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9c1 2300 	strd	r2, r3, [r1]
  Kp = 0.0;
 80021e0:	4930      	ldr	r1, [pc, #192]	@ (80022a4 <Motor_Control_STR_initialize+0x13c>)
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	e9c1 2300 	strd	r2, r3, [r1]
  Ki = 0.0;
 80021ee:	492e      	ldr	r1, [pc, #184]	@ (80022a8 <Motor_Control_STR_initialize+0x140>)
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	e9c1 2300 	strd	r2, r3, [r1]
  Kd = 0.0;
 80021fc:	492b      	ldr	r1, [pc, #172]	@ (80022ac <Motor_Control_STR_initialize+0x144>)
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e9c1 2300 	strd	r2, r3, [r1]
  K1 = 0.0;
 800220a:	4929      	ldr	r1, [pc, #164]	@ (80022b0 <Motor_Control_STR_initialize+0x148>)
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	e9c1 2300 	strd	r2, r3, [r1]
  K2 = 0.0;
 8002218:	4926      	ldr	r1, [pc, #152]	@ (80022b4 <Motor_Control_STR_initialize+0x14c>)
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9c1 2300 	strd	r2, r3, [r1]
  xi = 0.0;
 8002226:	4924      	ldr	r1, [pc, #144]	@ (80022b8 <Motor_Control_STR_initialize+0x150>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9c1 2300 	strd	r2, r3, [r1]

  /* SystemInitialize for IfAction SubSystem: '<Root>/Switch Case Action Subsystem' */
  /* InitializeConditions for UnitDelay: '<S5>/Unit Delay1' */
  memcpy(&Motor_Control_STR_DW.UnitDelay1_DSTATE[0],
 8002234:	2280      	movs	r2, #128	@ 0x80
 8002236:	4921      	ldr	r1, [pc, #132]	@ (80022bc <Motor_Control_STR_initialize+0x154>)
 8002238:	4821      	ldr	r0, [pc, #132]	@ (80022c0 <Motor_Control_STR_initialize+0x158>)
 800223a:	f006 fbf0 	bl	8008a1e <memcpy>
         &Motor_Control_STR_ConstP.UnitDelay1_InitialCondition[0], sizeof(real_T)
         << 4U);

  /* InitializeConditions for UnitDelay: '<S5>/Unit Delay' */
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] = -1.0;
 800223e:	4915      	ldr	r1, [pc, #84]	@ (8002294 <Motor_Control_STR_initialize+0x12c>)
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	4b1f      	ldr	r3, [pc, #124]	@ (80022c4 <Motor_Control_STR_initialize+0x15c>)
 8002246:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[1] = 0.1;
 800224a:	4912      	ldr	r1, [pc, #72]	@ (8002294 <Motor_Control_STR_initialize+0x12c>)
 800224c:	a30a      	add	r3, pc, #40	@ (adr r3, 8002278 <Motor_Control_STR_initialize+0x110>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[2] = 0.1;
 8002256:	490f      	ldr	r1, [pc, #60]	@ (8002294 <Motor_Control_STR_initialize+0x12c>)
 8002258:	a307      	add	r3, pc, #28	@ (adr r3, 8002278 <Motor_Control_STR_initialize+0x110>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[3] = 1.0;
 8002262:	490c      	ldr	r1, [pc, #48]	@ (8002294 <Motor_Control_STR_initialize+0x12c>)
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <Motor_Control_STR_initialize+0x160>)
 800226a:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8

  /* End of SystemInitialize for SubSystem: '<Root>/Switch Case Action Subsystem' */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	f3af 8000 	nop.w
 8002278:	9999999a 	.word	0x9999999a
 800227c:	3fb99999 	.word	0x3fb99999
 8002280:	20000378 	.word	0x20000378
 8002284:	20000268 	.word	0x20000268
 8002288:	20000250 	.word	0x20000250
 800228c:	20000258 	.word	0x20000258
 8002290:	20000260 	.word	0x20000260
 8002294:	20000288 	.word	0x20000288
 8002298:	20000208 	.word	0x20000208
 800229c:	20000210 	.word	0x20000210
 80022a0:	20000218 	.word	0x20000218
 80022a4:	20000220 	.word	0x20000220
 80022a8:	20000228 	.word	0x20000228
 80022ac:	20000230 	.word	0x20000230
 80022b0:	20000238 	.word	0x20000238
 80022b4:	20000240 	.word	0x20000240
 80022b8:	20000248 	.word	0x20000248
 80022bc:	0800d450 	.word	0x0800d450
 80022c0:	200002a8 	.word	0x200002a8
 80022c4:	bff00000 	.word	0xbff00000
 80022c8:	3ff00000 	.word	0x3ff00000

080022cc <Motor_Control_STR_terminate>:

/* Model terminate function */
void Motor_Control_STR_terminate(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* (no terminate code required) */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80022e2:	2340      	movs	r3, #64	@ 0x40
 80022e4:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d10b      	bne.n	8002310 <rtGetInf+0x34>
    inf = rtGetInfF();
 80022f8:	f000 f820 	bl	800233c <rtGetInfF>
 80022fc:	ee10 3a10 	vmov	r3, s0
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f921 	bl	8000548 <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800230e:	e007      	b.n	8002320 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <rtGetInf+0x5c>)
 8002312:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8002314:	2300      	movs	r3, #0
 8002316:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 8002318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800231c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 8002320:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002324:	ec43 2b17 	vmov	d7, r2, r3
}
 8002328:	eeb0 0a47 	vmov.f32	s0, s14
 800232c:	eef0 0a67 	vmov.f32	s1, s15
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	7ff00000 	.word	0x7ff00000

0800233c <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8002342:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8002346:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	ee07 3a90 	vmov	s15, r3
}
 800234e:	eeb0 0a67 	vmov.f32	s0, s15
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002362:	2340      	movs	r3, #64	@ 0x40
 8002364:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b20      	cmp	r3, #32
 8002376:	d10b      	bne.n	8002390 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 8002378:	f000 f820 	bl	80023bc <rtGetMinusInfF>
 800237c:	ee10 3a10 	vmov	r3, s0
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8e1 	bl	8000548 <__aeabi_f2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800238e:	e007      	b.n	80023a0 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <rtGetMinusInf+0x5c>)
 8002392:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8002394:	2300      	movs	r3, #0
 8002396:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 8002398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800239c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 80023a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80023a8:	eeb0 0a47 	vmov.f32	s0, s14
 80023ac:	eef0 0a67 	vmov.f32	s1, s15
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	fff00000 	.word	0xfff00000

080023bc <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 80023c2:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <rtGetMinusInfF+0x20>)
 80023c4:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	ee07 3a90 	vmov	s15, r3
}
 80023cc:	eeb0 0a67 	vmov.f32	s0, s15
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	ff800000 	.word	0xff800000

080023e0 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80023e6:	2340      	movs	r3, #64	@ 0x40
 80023e8:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d10b      	bne.n	8002414 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 80023fc:	f000 f820 	bl	8002440 <rtGetNaNF>
 8002400:	ee10 3a10 	vmov	r3, s0
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f89f 	bl	8000548 <__aeabi_f2d>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002412:	e007      	b.n	8002424 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <rtGetNaN+0x5c>)
 8002416:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8002418:	2300      	movs	r3, #0
 800241a:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800241c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002420:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 8002424:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002428:	ec43 2b17 	vmov	d7, r2, r3
}
 800242c:	eeb0 0a47 	vmov.f32	s0, s14
 8002430:	eef0 0a67 	vmov.f32	s1, s15
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	fff80000 	.word	0xfff80000

08002440 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <rtGetNaNF+0x24>)
 800244e:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	ee07 3a90 	vmov	s15, r3
}
 8002456:	eeb0 0a67 	vmov.f32	s0, s15
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	ffc00000 	.word	0xffc00000

08002468 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8002470:	f7ff ffb6 	bl	80023e0 <rtGetNaN>
 8002474:	eeb0 7a40 	vmov.f32	s14, s0
 8002478:	eef0 7a60 	vmov.f32	s15, s1
 800247c:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <rt_InitInfAndNaN+0x70>)
 800247e:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 8002482:	f7ff ffdd 	bl	8002440 <rtGetNaNF>
 8002486:	eef0 7a40 	vmov.f32	s15, s0
 800248a:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <rt_InitInfAndNaN+0x74>)
 800248c:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 8002490:	f7ff ff24 	bl	80022dc <rtGetInf>
 8002494:	eeb0 7a40 	vmov.f32	s14, s0
 8002498:	eef0 7a60 	vmov.f32	s15, s1
 800249c:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <rt_InitInfAndNaN+0x78>)
 800249e:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 80024a2:	f7ff ff4b 	bl	800233c <rtGetInfF>
 80024a6:	eef0 7a40 	vmov.f32	s15, s0
 80024aa:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <rt_InitInfAndNaN+0x7c>)
 80024ac:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 80024b0:	f7ff ff54 	bl	800235c <rtGetMinusInf>
 80024b4:	eeb0 7a40 	vmov.f32	s14, s0
 80024b8:	eef0 7a60 	vmov.f32	s15, s1
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <rt_InitInfAndNaN+0x80>)
 80024be:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 80024c2:	f7ff ff7b 	bl	80023bc <rtGetMinusInfF>
 80024c6:	eef0 7a40 	vmov.f32	s15, s0
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <rt_InitInfAndNaN+0x84>)
 80024cc:	edc3 7a00 	vstr	s15, [r3]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000390 	.word	0x20000390
 80024dc:	200003a0 	.word	0x200003a0
 80024e0:	20000380 	.word	0x20000380
 80024e4:	20000398 	.word	0x20000398
 80024e8:	20000388 	.word	0x20000388
 80024ec:	2000039c 	.word	0x2000039c

080024f0 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <rtIsInf+0x40>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002504:	f7fe fae0 	bl	8000ac8 <__aeabi_dcmpeq>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <rtIsInf+0x32>
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <rtIsInf+0x44>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002518:	f7fe fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <rtIsInf+0x36>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <rtIsInf+0x38>
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000380 	.word	0x20000380
 8002534:	20000388 	.word	0x20000388

08002538 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002546:	2340      	movs	r3, #64	@ 0x40
 8002548:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b20      	cmp	r3, #32
 800254e:	d10b      	bne.n	8002568 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 8002550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002554:	f7fe fb48 	bl	8000be8 <__aeabi_d2f>
 8002558:	4603      	mov	r3, r0
 800255a:	ee00 3a10 	vmov	s0, r3
 800255e:	f000 f821 	bl	80025a4 <rtIsNaNF>
 8002562:	4603      	mov	r3, r0
 8002564:	75fb      	strb	r3, [r7, #23]
 8002566:	e015      	b.n	8002594 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 8002568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800256c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <rtIsNaN+0x68>)
 8002574:	4013      	ands	r3, r2
 8002576:	4a0a      	ldr	r2, [pc, #40]	@ (80025a0 <rtIsNaN+0x68>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d109      	bne.n	8002590 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 8002586:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <rtIsNaN+0x5a>
 8002590:	2300      	movs	r3, #0
 8002592:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002594:	7dfb      	ldrb	r3, [r7, #23]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	7ff00000 	.word	0x7ff00000

080025a4 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f003 43ff 	and.w	r3, r3, #2139095040	@ 0x7f800000
 80025b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80025bc:	d106      	bne.n	80025cc <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <rtIsNaNF+0x28>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <rtIsNaNF+0x2a>
 80025cc:	2300      	movs	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <rt_OneStep>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void rt_OneStep(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  static boolean_T OverrunFlag = false;

  /* Disable interrupts here */

  /* Check for overrun */
  if (OverrunFlag) {
 80025e0:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <rt_OneStep+0x28>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <rt_OneStep+0x16>
    rtmSetErrorStatus(Motor_Control_STR_M, "Overrun");
 80025e8:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <rt_OneStep+0x2c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a07      	ldr	r2, [pc, #28]	@ (800260c <rt_OneStep+0x30>)
 80025ee:	601a      	str	r2, [r3, #0]
    return;
 80025f0:	e007      	b.n	8002602 <rt_OneStep+0x26>
  }

  OverrunFlag = true;
 80025f2:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <rt_OneStep+0x28>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
  /* Save FPU context here (if necessary) */
  /* Re-enable timer or interrupt here */
  /* Set model inputs here */

  /* Step the model */
  Motor_Control_STR_step();
 80025f8:	f7fe fcf6 	bl	8000fe8 <Motor_Control_STR_step>

  /* Get model outputs here */

  /* Indicate task complete */
  OverrunFlag = false;
 80025fc:	4b01      	ldr	r3, [pc, #4]	@ (8002604 <rt_OneStep+0x28>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]

  /* Disable interrupts here */
  /* Restore FPU context here (if necessary) */
  /* Enable interrupts here */
}
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000596 	.word	0x20000596
 8002608:	0800d448 	.word	0x0800d448
 800260c:	0800d420 	.word	0x0800d420

08002610 <float_to_string>:

void float_to_string(float number, char *buffer) {
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	@ 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	ed87 0a01 	vstr	s0, [r7, #4]
 800261a:	6038      	str	r0, [r7, #0]
    int int_part = (int)number;
 800261c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002624:	ee17 3a90 	vmov	r3, s15
 8002628:	61fb      	str	r3, [r7, #28]
    int decimal_part = (int)((number - int_part) * 100);
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002634:	ed97 7a01 	vldr	s14, [r7, #4]
 8002638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800277c <float_to_string+0x16c>
 8002640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002648:	ee17 3a90 	vmov	r3, s15
 800264c:	61bb      	str	r3, [r7, #24]
    if (decimal_part < 0) decimal_part = -decimal_part;
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	da02      	bge.n	800265a <float_to_string+0x4a>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	425b      	negs	r3, r3
 8002658:	61bb      	str	r3, [r7, #24]

    int index = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]

    if (number < 0) {
 800265e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	d50a      	bpl.n	8002682 <float_to_string+0x72>
        buffer[index++] = '-';
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	617a      	str	r2, [r7, #20]
 8002672:	461a      	mov	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4413      	add	r3, r2
 8002678:	222d      	movs	r2, #45	@ 0x2d
 800267a:	701a      	strb	r2, [r3, #0]
        int_part = -int_part;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	425b      	negs	r3, r3
 8002680:	61fb      	str	r3, [r7, #28]
    }

    int temp = int_part;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	613b      	str	r3, [r7, #16]
    int len = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
    while (temp > 0) {
 800268a:	e00a      	b.n	80026a2 <float_to_string+0x92>
        temp /= 10;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4a3c      	ldr	r2, [pc, #240]	@ (8002780 <float_to_string+0x170>)
 8002690:	fb82 1203 	smull	r1, r2, r2, r3
 8002694:	1092      	asrs	r2, r2, #2
 8002696:	17db      	asrs	r3, r3, #31
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	613b      	str	r3, [r7, #16]
        len++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3301      	adds	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
    while (temp > 0) {
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	dcf1      	bgt.n	800268c <float_to_string+0x7c>
    }

    for (int i = len - 1; i >= 0; i--) {
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	e020      	b.n	80026f2 <float_to_string+0xe2>
        buffer[index + i] = (int_part % 10) + '0';
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	4b33      	ldr	r3, [pc, #204]	@ (8002780 <float_to_string+0x170>)
 80026b4:	fb83 1302 	smull	r1, r3, r3, r2
 80026b8:	1099      	asrs	r1, r3, #2
 80026ba:	17d3      	asrs	r3, r2, #31
 80026bc:	1ac9      	subs	r1, r1, r3
 80026be:	460b      	mov	r3, r1
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	1ad1      	subs	r1, r2, r3
 80026c8:	b2ca      	uxtb	r2, r1
 80026ca:	6979      	ldr	r1, [r7, #20]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	440b      	add	r3, r1
 80026d0:	4619      	mov	r1, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	440b      	add	r3, r1
 80026d6:	3230      	adds	r2, #48	@ 0x30
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	701a      	strb	r2, [r3, #0]
        int_part /= 10;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	4a28      	ldr	r2, [pc, #160]	@ (8002780 <float_to_string+0x170>)
 80026e0:	fb82 1203 	smull	r1, r2, r2, r3
 80026e4:	1092      	asrs	r2, r2, #2
 80026e6:	17db      	asrs	r3, r3, #31
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	61fb      	str	r3, [r7, #28]
    for (int i = len - 1; i >= 0; i--) {
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	dadb      	bge.n	80026b0 <float_to_string+0xa0>
    }
    index += len > 0 ? len : 1;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	bfb8      	it	lt
 80026fe:	2301      	movlt	r3, #1
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	4413      	add	r3, r2
 8002704:	617b      	str	r3, [r7, #20]
    buffer[index++] = '.';
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	617a      	str	r2, [r7, #20]
 800270c:	461a      	mov	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	222e      	movs	r2, #46	@ 0x2e
 8002714:	701a      	strb	r2, [r3, #0]

    buffer[index++] = (decimal_part / 10) + '0';
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <float_to_string+0x170>)
 800271a:	fb82 1203 	smull	r1, r2, r2, r3
 800271e:	1092      	asrs	r2, r2, #2
 8002720:	17db      	asrs	r3, r3, #31
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	b2da      	uxtb	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	1c59      	adds	r1, r3, #1
 800272a:	6179      	str	r1, [r7, #20]
 800272c:	4619      	mov	r1, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	440b      	add	r3, r1
 8002732:	3230      	adds	r2, #48	@ 0x30
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
    buffer[index++] = (decimal_part % 10) + '0';
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <float_to_string+0x170>)
 800273c:	fb83 1302 	smull	r1, r3, r3, r2
 8002740:	1099      	asrs	r1, r3, #2
 8002742:	17d3      	asrs	r3, r2, #31
 8002744:	1ac9      	subs	r1, r1, r3
 8002746:	460b      	mov	r3, r1
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	1ad1      	subs	r1, r2, r3
 8002750:	b2ca      	uxtb	r2, r1
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	1c59      	adds	r1, r3, #1
 8002756:	6179      	str	r1, [r7, #20]
 8002758:	4619      	mov	r1, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	440b      	add	r3, r1
 800275e:	3230      	adds	r2, #48	@ 0x30
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]
    buffer[index] = '\0';
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4413      	add	r3, r2
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
}
 800276e:	bf00      	nop
 8002770:	3724      	adds	r7, #36	@ 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	42c80000 	.word	0x42c80000
 8002780:	66666667 	.word	0x66666667

08002784 <process_buffers>:

void process_buffers(float dposition, float sp, char *cposition, char *csp, char *result) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	ed87 0a05 	vstr	s0, [r7, #20]
 800278e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
    if (dposition != 0) {
 8002798:	edd7 7a05 	vldr	s15, [r7, #20]
 800279c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a4:	d005      	beq.n	80027b2 <process_buffers+0x2e>
        float_to_string(dposition, cposition);
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	ed97 0a05 	vldr	s0, [r7, #20]
 80027ac:	f7ff ff30 	bl	8002610 <float_to_string>
 80027b0:	e002      	b.n	80027b8 <process_buffers+0x34>
    } else {
        cposition[0] = '\0';
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
    }

    if (sp != 0) {
 80027b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80027bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c4:	d005      	beq.n	80027d2 <process_buffers+0x4e>
        float_to_string(sp, csp);
 80027c6:	68b8      	ldr	r0, [r7, #8]
 80027c8:	ed97 0a04 	vldr	s0, [r7, #16]
 80027cc:	f7ff ff20 	bl	8002610 <float_to_string>
 80027d0:	e002      	b.n	80027d8 <process_buffers+0x54>
    } else {
        csp[0] = '\0';
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
    }

    result[0] = '\0';
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
    strcat(result, "Y, ");
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fd fd46 	bl	8000270 <strlen>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	4a17      	ldr	r2, [pc, #92]	@ (800284c <process_buffers+0xc8>)
 80027ee:	6810      	ldr	r0, [r2, #0]
 80027f0:	6018      	str	r0, [r3, #0]
    if (cposition[0] != '\0') {
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00f      	beq.n	800281a <process_buffers+0x96>
        strcat(result, cposition);
 80027fa:	68f9      	ldr	r1, [r7, #12]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f006 f806 	bl	800880e <strcat>
        strcat(result, ", ");
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fd fd34 	bl	8000270 <strlen>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	4a0f      	ldr	r2, [pc, #60]	@ (8002850 <process_buffers+0xcc>)
 8002812:	8811      	ldrh	r1, [r2, #0]
 8002814:	7892      	ldrb	r2, [r2, #2]
 8002816:	8019      	strh	r1, [r3, #0]
 8002818:	709a      	strb	r2, [r3, #2]
    }
    if (csp[0] != '\0') {
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <process_buffers+0xa6>
        strcat(result, csp);
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f005 fff2 	bl	800880e <strcat>
    }
    strcat(result, "\r\n");
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fd fd20 	bl	8000270 <strlen>
 8002830:	4603      	mov	r3, r0
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4413      	add	r3, r2
 8002838:	4a06      	ldr	r2, [pc, #24]	@ (8002854 <process_buffers+0xd0>)
 800283a:	8811      	ldrh	r1, [r2, #0]
 800283c:	7892      	ldrb	r2, [r2, #2]
 800283e:	8019      	strh	r1, [r3, #0]
 8002840:	709a      	strb	r2, [r3, #2]
}
 8002842:	bf00      	nop
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	0800d428 	.word	0x0800d428
 8002850:	0800d42c 	.word	0x0800d42c
 8002854:	0800d430 	.word	0x0800d430

08002858 <StrCompare>:

bool StrCompare(char *pBuff, uint8_t *pSample, uint8_t nSize)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < nSize; i++)
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e00e      	b.n	800288a <StrCompare+0x32>
    {
        if(pBuff[i] != pSample[i])
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4413      	add	r3, r2
 8002872:	781a      	ldrb	r2, [r3, #0]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	440b      	add	r3, r1
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <StrCompare+0x2c>
        {
            return false;
 8002880:	2300      	movs	r3, #0
 8002882:	e007      	b.n	8002894 <StrCompare+0x3c>
    for (int i = 0; i < nSize; i++)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	429a      	cmp	r2, r3
 8002890:	dbec      	blt.n	800286c <StrCompare+0x14>
        }
    }
    return true;
 8002892:	2301      	movs	r3, #1
}
 8002894:	4618      	mov	r0, r3
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <process_uart_string>:

void process_uart_string(char *uart_string, UART_Data *data) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
    char *token;

    memset(data, 0, sizeof(UART_Data));
 80028aa:	2214      	movs	r2, #20
 80028ac:	2100      	movs	r1, #0
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	f005 ffa5 	bl	80087fe <memset>

    token = strtok(uart_string, ",");
 80028b4:	4976      	ldr	r1, [pc, #472]	@ (8002a90 <process_uart_string+0x1f0>)
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f005 ffde 	bl	8008878 <strtok>
 80028bc:	60b8      	str	r0, [r7, #8]
    if (token) {
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <process_uart_string+0x36>
        strncpy(data->type, token, 3);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2203      	movs	r2, #3
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f005 ffc0 	bl	8008850 <strncpy>
        data->type[3] = '\0';
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	70da      	strb	r2, [r3, #3]
    }

    token = strtok(NULL, ",");
 80028d6:	496e      	ldr	r1, [pc, #440]	@ (8002a90 <process_uart_string+0x1f0>)
 80028d8:	2000      	movs	r0, #0
 80028da:	f005 ffcd 	bl	8008878 <strtok>
 80028de:	60b8      	str	r0, [r7, #8]
    if (token) data->sp = atof(token);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <process_uart_string+0x5e>
 80028e6:	68b8      	ldr	r0, [r7, #8]
 80028e8:	f004 f9de 	bl	8006ca8 <atof>
 80028ec:	ec53 2b10 	vmov	r2, r3, d0
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe f978 	bl	8000be8 <__aeabi_d2f>
 80028f8:	4602      	mov	r2, r0
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	605a      	str	r2, [r3, #4]

    if (StrCompare(data->type, (uint8_t *)"PID", 3)) {
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2203      	movs	r2, #3
 8002902:	4964      	ldr	r1, [pc, #400]	@ (8002a94 <process_uart_string+0x1f4>)
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ffa7 	bl	8002858 <StrCompare>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d043      	beq.n	8002998 <process_uart_string+0xf8>
        Case = 1.0;
 8002910:	4961      	ldr	r1, [pc, #388]	@ (8002a98 <process_uart_string+0x1f8>)
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	4b61      	ldr	r3, [pc, #388]	@ (8002a9c <process_uart_string+0x1fc>)
 8002918:	e9c1 2300 	strd	r2, r3, [r1]
        token = strtok(NULL, ",");
 800291c:	495c      	ldr	r1, [pc, #368]	@ (8002a90 <process_uart_string+0x1f0>)
 800291e:	2000      	movs	r0, #0
 8002920:	f005 ffaa 	bl	8008878 <strtok>
 8002924:	60b8      	str	r0, [r7, #8]
        if (token) data->value1 = atof(token);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00b      	beq.n	8002944 <process_uart_string+0xa4>
 800292c:	68b8      	ldr	r0, [r7, #8]
 800292e:	f004 f9bb 	bl	8006ca8 <atof>
 8002932:	ec53 2b10 	vmov	r2, r3, d0
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe f955 	bl	8000be8 <__aeabi_d2f>
 800293e:	4602      	mov	r2, r0
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	609a      	str	r2, [r3, #8]

        token = strtok(NULL, ",");
 8002944:	4952      	ldr	r1, [pc, #328]	@ (8002a90 <process_uart_string+0x1f0>)
 8002946:	2000      	movs	r0, #0
 8002948:	f005 ff96 	bl	8008878 <strtok>
 800294c:	60b8      	str	r0, [r7, #8]
        if (token) data->value2 = atof(token);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00b      	beq.n	800296c <process_uart_string+0xcc>
 8002954:	68b8      	ldr	r0, [r7, #8]
 8002956:	f004 f9a7 	bl	8006ca8 <atof>
 800295a:	ec53 2b10 	vmov	r2, r3, d0
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	f7fe f941 	bl	8000be8 <__aeabi_d2f>
 8002966:	4602      	mov	r2, r0
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	60da      	str	r2, [r3, #12]

        token = strtok(NULL, ",");
 800296c:	4948      	ldr	r1, [pc, #288]	@ (8002a90 <process_uart_string+0x1f0>)
 800296e:	2000      	movs	r0, #0
 8002970:	f005 ff82 	bl	8008878 <strtok>
 8002974:	60b8      	str	r0, [r7, #8]
        if (token) data->value3 = atof(token);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8084 	beq.w	8002a86 <process_uart_string+0x1e6>
 800297e:	68b8      	ldr	r0, [r7, #8]
 8002980:	f004 f992 	bl	8006ca8 <atof>
 8002984:	ec53 2b10 	vmov	r2, r3, d0
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f92c 	bl	8000be8 <__aeabi_d2f>
 8002990:	4602      	mov	r2, r0
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	611a      	str	r2, [r3, #16]
    	while (txbuf[count] != '\0' && txbuf[count] != '\n') {
    		count++;
    	}
    	HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
    }
}
 8002996:	e076      	b.n	8002a86 <process_uart_string+0x1e6>
    else if (StrCompare(data->type, (uint8_t *)"STR", 3)) {
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2203      	movs	r2, #3
 800299c:	4940      	ldr	r1, [pc, #256]	@ (8002aa0 <process_uart_string+0x200>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff5a 	bl	8002858 <StrCompare>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <process_uart_string+0x11a>
        Case = 2.0;
 80029aa:	493b      	ldr	r1, [pc, #236]	@ (8002a98 <process_uart_string+0x1f8>)
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029b4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80029b8:	e065      	b.n	8002a86 <process_uart_string+0x1e6>
    else if (StrCompare(data->type, (uint8_t *)"LQR", 3)) {
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2203      	movs	r2, #3
 80029be:	4939      	ldr	r1, [pc, #228]	@ (8002aa4 <process_uart_string+0x204>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff49 	bl	8002858 <StrCompare>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02e      	beq.n	8002a2a <process_uart_string+0x18a>
        Case = 3.0;
 80029cc:	4932      	ldr	r1, [pc, #200]	@ (8002a98 <process_uart_string+0x1f8>)
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	4b35      	ldr	r3, [pc, #212]	@ (8002aa8 <process_uart_string+0x208>)
 80029d4:	e9c1 2300 	strd	r2, r3, [r1]
        token = strtok(NULL, ",");
 80029d8:	492d      	ldr	r1, [pc, #180]	@ (8002a90 <process_uart_string+0x1f0>)
 80029da:	2000      	movs	r0, #0
 80029dc:	f005 ff4c 	bl	8008878 <strtok>
 80029e0:	60b8      	str	r0, [r7, #8]
        if (token) data->value1 = atof(token);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <process_uart_string+0x160>
 80029e8:	68b8      	ldr	r0, [r7, #8]
 80029ea:	f004 f95d 	bl	8006ca8 <atof>
 80029ee:	ec53 2b10 	vmov	r2, r3, d0
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	f7fe f8f7 	bl	8000be8 <__aeabi_d2f>
 80029fa:	4602      	mov	r2, r0
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	609a      	str	r2, [r3, #8]
        token = strtok(NULL, ",");
 8002a00:	4923      	ldr	r1, [pc, #140]	@ (8002a90 <process_uart_string+0x1f0>)
 8002a02:	2000      	movs	r0, #0
 8002a04:	f005 ff38 	bl	8008878 <strtok>
 8002a08:	60b8      	str	r0, [r7, #8]
        if (token) data->value2 = atof(token);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d03a      	beq.n	8002a86 <process_uart_string+0x1e6>
 8002a10:	68b8      	ldr	r0, [r7, #8]
 8002a12:	f004 f949 	bl	8006ca8 <atof>
 8002a16:	ec53 2b10 	vmov	r2, r3, d0
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f7fe f8e3 	bl	8000be8 <__aeabi_d2f>
 8002a22:	4602      	mov	r2, r0
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	60da      	str	r2, [r3, #12]
}
 8002a28:	e02d      	b.n	8002a86 <process_uart_string+0x1e6>
    else if (StrCompare(data->type, (uint8_t *)"C", 1)) {
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	491f      	ldr	r1, [pc, #124]	@ (8002aac <process_uart_string+0x20c>)
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff11 	bl	8002858 <StrCompare>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d024      	beq.n	8002a86 <process_uart_string+0x1e6>
    	int count = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
    	process_buffers(0.0, 0.0, cposition, csp, txbuf);
 8002a40:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab0 <process_uart_string+0x210>)
 8002a42:	491c      	ldr	r1, [pc, #112]	@ (8002ab4 <process_uart_string+0x214>)
 8002a44:	481c      	ldr	r0, [pc, #112]	@ (8002ab8 <process_uart_string+0x218>)
 8002a46:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8002abc <process_uart_string+0x21c>
 8002a4a:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8002abc <process_uart_string+0x21c>
 8002a4e:	f7ff fe99 	bl	8002784 <process_buffers>
    	while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002a52:	e002      	b.n	8002a5a <process_uart_string+0x1ba>
    		count++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3301      	adds	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
    	while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002a5a:	4a15      	ldr	r2, [pc, #84]	@ (8002ab0 <process_uart_string+0x210>)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <process_uart_string+0x1d2>
 8002a66:	4a12      	ldr	r2, [pc, #72]	@ (8002ab0 <process_uart_string+0x210>)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b0a      	cmp	r3, #10
 8002a70:	d1f0      	bne.n	8002a54 <process_uart_string+0x1b4>
    	HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	490c      	ldr	r1, [pc, #48]	@ (8002ab0 <process_uart_string+0x210>)
 8002a80:	480f      	ldr	r0, [pc, #60]	@ (8002ac0 <process_uart_string+0x220>)
 8002a82:	f003 f90b 	bl	8005c9c <HAL_UART_Transmit>
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	0800d434 	.word	0x0800d434
 8002a94:	0800d438 	.word	0x0800d438
 8002a98:	20000210 	.word	0x20000210
 8002a9c:	3ff00000 	.word	0x3ff00000
 8002aa0:	0800d43c 	.word	0x0800d43c
 8002aa4:	0800d440 	.word	0x0800d440
 8002aa8:	40080000 	.word	0x40080000
 8002aac:	0800d444 	.word	0x0800d444
 8002ab0:	20000564 	.word	0x20000564
 8002ab4:	20000558 	.word	0x20000558
 8002ab8:	2000054c 	.word	0x2000054c
 8002abc:	00000000 	.word	0x00000000
 8002ac0:	2000047c 	.word	0x2000047c

08002ac4 <motor_set_duty>:


void motor_set_duty(int32_t iduty)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    if (iduty >= 0)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db10      	blt.n	8002af4 <motor_set_duty+0x30>
    {
    	MOTOR_CONTROL_REGISTER = iduty;
 8002ad2:	4b14      	ldr	r3, [pc, #80]	@ (8002b24 <motor_set_duty+0x60>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	635a      	str	r2, [r3, #52]	@ 0x34
    	HAL_GPIO_WritePin(DIR_Port, FOWARD_Pin, 1);
 8002ada:	2201      	movs	r2, #1
 8002adc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ae0:	4811      	ldr	r0, [pc, #68]	@ (8002b28 <motor_set_duty+0x64>)
 8002ae2:	f001 fa7f 	bl	8003fe4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(DIR_Port, BACKWARD_Pin, 0);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002aec:	480e      	ldr	r0, [pc, #56]	@ (8002b28 <motor_set_duty+0x64>)
 8002aee:	f001 fa79 	bl	8003fe4 <HAL_GPIO_WritePin>
    {
    	MOTOR_CONTROL_REGISTER = abs(iduty);
    	HAL_GPIO_WritePin(DIR_Port, FOWARD_Pin, 0);
    	HAL_GPIO_WritePin(DIR_Port, BACKWARD_Pin, 1);
    }
}
 8002af2:	e013      	b.n	8002b1c <motor_set_duty+0x58>
    	MOTOR_CONTROL_REGISTER = abs(iduty);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002afa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002afe:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <motor_set_duty+0x60>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	635a      	str	r2, [r3, #52]	@ 0x34
    	HAL_GPIO_WritePin(DIR_Port, FOWARD_Pin, 0);
 8002b04:	2200      	movs	r2, #0
 8002b06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b0a:	4807      	ldr	r0, [pc, #28]	@ (8002b28 <motor_set_duty+0x64>)
 8002b0c:	f001 fa6a 	bl	8003fe4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(DIR_Port, BACKWARD_Pin, 1);
 8002b10:	2201      	movs	r2, #1
 8002b12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b16:	4804      	ldr	r0, [pc, #16]	@ (8002b28 <motor_set_duty+0x64>)
 8002b18:	f001 fa64 	bl	8003fe4 <HAL_GPIO_WritePin>
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	200003ec 	.word	0x200003ec
 8002b28:	40020400 	.word	0x40020400

08002b2c <motor_read_encoder>:

void motor_read_encoder(float dpos, TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b36:	6038      	str	r0, [r7, #0]
	icounter = htim->Instance->CNT;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	b21a      	sxth	r2, r3
 8002b40:	4b10      	ldr	r3, [pc, #64]	@ (8002b84 <motor_read_encoder+0x58>)
 8002b42:	801a      	strh	r2, [r3, #0]
	dpos += (float)icounter / (float)PPR * NUMBER_OF_DEGREES_ON_A_CIRCLE;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	@ (8002b84 <motor_read_encoder+0x58>)
 8002b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b52:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8002b88 <motor_read_encoder+0x5c>
 8002b56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b5a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002b8c <motor_read_encoder+0x60>
 8002b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b62:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6a:	edc7 7a01 	vstr	s15, [r7, #4]
	htim->Instance->CNT = 0;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000540 	.word	0x20000540
 8002b88:	4639a000 	.word	0x4639a000
 8002b8c:	43b40000 	.word	0x43b40000

08002b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b94:	f000 fe74 	bl	8003880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b98:	f000 f832 	bl	8002c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b9c:	f000 f9c2 	bl	8002f24 <MX_GPIO_Init>
  MX_UART4_Init();
 8002ba0:	f000 f996 	bl	8002ed0 <MX_UART4_Init>
  MX_TIM1_Init();
 8002ba4:	f000 f894 	bl	8002cd0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002ba8:	f000 f8ea 	bl	8002d80 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002bac:	f000 f942 	bl	8002e34 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&INTERUPT_TIMER);
 8002bb0:	480f      	ldr	r0, [pc, #60]	@ (8002bf0 <main+0x60>)
 8002bb2:	f001 ff19 	bl	80049e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&ECODER_TIMER, TIM_CHANNEL_1);
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	480e      	ldr	r0, [pc, #56]	@ (8002bf4 <main+0x64>)
 8002bba:	f002 f943 	bl	8004e44 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&ECODER_TIMER, TIM_CHANNEL_2);
 8002bbe:	2104      	movs	r1, #4
 8002bc0:	480c      	ldr	r0, [pc, #48]	@ (8002bf4 <main+0x64>)
 8002bc2:	f002 f93f 	bl	8004e44 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&PWM_TIMER, TIM_CHANNEL_1);
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	480b      	ldr	r0, [pc, #44]	@ (8002bf8 <main+0x68>)
 8002bca:	f001 ffcd 	bl	8004b68 <HAL_TIM_PWM_Start>

  Motor_Control_STR_initialize();
 8002bce:	f7ff facb 	bl	8002168 <Motor_Control_STR_initialize>

  xi = 0.99;
 8002bd2:	490a      	ldr	r1, [pc, #40]	@ (8002bfc <main+0x6c>)
 8002bd4:	a304      	add	r3, pc, #16	@ (adr r3, 8002be8 <main+0x58>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bde:	bf00      	nop
 8002be0:	e7fd      	b.n	8002bde <main+0x4e>
 8002be2:	bf00      	nop
 8002be4:	f3af 8000 	nop.w
 8002be8:	7ae147ae 	.word	0x7ae147ae
 8002bec:	3fefae14 	.word	0x3fefae14
 8002bf0:	20000434 	.word	0x20000434
 8002bf4:	200003a4 	.word	0x200003a4
 8002bf8:	200003ec 	.word	0x200003ec
 8002bfc:	20000248 	.word	0x20000248

08002c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b094      	sub	sp, #80	@ 0x50
 8002c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c06:	f107 0320 	add.w	r3, r7, #32
 8002c0a:	2230      	movs	r2, #48	@ 0x30
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f005 fdf5 	bl	80087fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c14:	f107 030c 	add.w	r3, r7, #12
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	4b27      	ldr	r3, [pc, #156]	@ (8002cc8 <SystemClock_Config+0xc8>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	4a26      	ldr	r2, [pc, #152]	@ (8002cc8 <SystemClock_Config+0xc8>)
 8002c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c34:	4b24      	ldr	r3, [pc, #144]	@ (8002cc8 <SystemClock_Config+0xc8>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c40:	2300      	movs	r3, #0
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	4b21      	ldr	r3, [pc, #132]	@ (8002ccc <SystemClock_Config+0xcc>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a20      	ldr	r2, [pc, #128]	@ (8002ccc <SystemClock_Config+0xcc>)
 8002c4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <SystemClock_Config+0xcc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c60:	2301      	movs	r3, #1
 8002c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c64:	2310      	movs	r3, #16
 8002c66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002c70:	2310      	movs	r3, #16
 8002c72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002c74:	23c0      	movs	r3, #192	@ 0xc0
 8002c76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c80:	f107 0320 	add.w	r3, r7, #32
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 f9c7 	bl	8004018 <HAL_RCC_OscConfig>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c90:	f000 fb66 	bl	8003360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c94:	230f      	movs	r3, #15
 8002c96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = 2;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ca8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	2105      	movs	r1, #5
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 fc29 	bl	8004508 <HAL_RCC_ClockConfig>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002cbc:	f000 fb50 	bl	8003360 <Error_Handler>
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3750      	adds	r7, #80	@ 0x50
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40007000 	.word	0x40007000

08002cd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08c      	sub	sp, #48	@ 0x30
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	2224      	movs	r2, #36	@ 0x24
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f005 fd8d 	bl	80087fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cec:	4b22      	ldr	r3, [pc, #136]	@ (8002d78 <MX_TIM1_Init+0xa8>)
 8002cee:	4a23      	ldr	r2, [pc, #140]	@ (8002d7c <MX_TIM1_Init+0xac>)
 8002cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cf2:	4b21      	ldr	r3, [pc, #132]	@ (8002d78 <MX_TIM1_Init+0xa8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d78 <MX_TIM1_Init+0xa8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <MX_TIM1_Init+0xa8>)
 8002d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d06:	4b1c      	ldr	r3, [pc, #112]	@ (8002d78 <MX_TIM1_Init+0xa8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <MX_TIM1_Init+0xa8>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d12:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <MX_TIM1_Init+0xa8>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d20:	2301      	movs	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d30:	2301      	movs	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002d3c:	f107 030c 	add.w	r3, r7, #12
 8002d40:	4619      	mov	r1, r3
 8002d42:	480d      	ldr	r0, [pc, #52]	@ (8002d78 <MX_TIM1_Init+0xa8>)
 8002d44:	f001 ffd8 	bl	8004cf8 <HAL_TIM_Encoder_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002d4e:	f000 fb07 	bl	8003360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4806      	ldr	r0, [pc, #24]	@ (8002d78 <MX_TIM1_Init+0xa8>)
 8002d60:	f002 febc 	bl	8005adc <HAL_TIMEx_MasterConfigSynchronization>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002d6a:	f000 faf9 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d6e:	bf00      	nop
 8002d70:	3730      	adds	r7, #48	@ 0x30
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200003a4 	.word	0x200003a4
 8002d7c:	40010000 	.word	0x40010000

08002d80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	@ 0x28
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d86:	f107 0320 	add.w	r3, r7, #32
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	611a      	str	r2, [r3, #16]
 8002d9e:	615a      	str	r2, [r3, #20]
 8002da0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002da2:	4b22      	ldr	r3, [pc, #136]	@ (8002e2c <MX_TIM3_Init+0xac>)
 8002da4:	4a22      	ldr	r2, [pc, #136]	@ (8002e30 <MX_TIM3_Init+0xb0>)
 8002da6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 111;
 8002da8:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <MX_TIM3_Init+0xac>)
 8002daa:	226f      	movs	r2, #111	@ 0x6f
 8002dac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dae:	4b1f      	ldr	r3, [pc, #124]	@ (8002e2c <MX_TIM3_Init+0xac>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <MX_TIM3_Init+0xac>)
 8002db6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <MX_TIM3_Init+0xac>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e2c <MX_TIM3_Init+0xac>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002dc8:	4818      	ldr	r0, [pc, #96]	@ (8002e2c <MX_TIM3_Init+0xac>)
 8002dca:	f001 fe7d 	bl	8004ac8 <HAL_TIM_PWM_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002dd4:	f000 fac4 	bl	8003360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002de0:	f107 0320 	add.w	r3, r7, #32
 8002de4:	4619      	mov	r1, r3
 8002de6:	4811      	ldr	r0, [pc, #68]	@ (8002e2c <MX_TIM3_Init+0xac>)
 8002de8:	f002 fe78 	bl	8005adc <HAL_TIMEx_MasterConfigSynchronization>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002df2:	f000 fab5 	bl	8003360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df6:	2360      	movs	r3, #96	@ 0x60
 8002df8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4807      	ldr	r0, [pc, #28]	@ (8002e2c <MX_TIM3_Init+0xac>)
 8002e0e:	f002 f997 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002e18:	f000 faa2 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e1c:	4803      	ldr	r0, [pc, #12]	@ (8002e2c <MX_TIM3_Init+0xac>)
 8002e1e:	f000 fb5f 	bl	80034e0 <HAL_TIM_MspPostInit>

}
 8002e22:	bf00      	nop
 8002e24:	3728      	adds	r7, #40	@ 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200003ec 	.word	0x200003ec
 8002e30:	40000400 	.word	0x40000400

08002e34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e48:	463b      	mov	r3, r7
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e52:	4a1e      	ldr	r2, [pc, #120]	@ (8002ecc <MX_TIM4_Init+0x98>)
 8002e54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8002e56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e58:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002e5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002e64:	4b18      	ldr	r3, [pc, #96]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e66:	2263      	movs	r2, #99	@ 0x63
 8002e68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e70:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e76:	4814      	ldr	r0, [pc, #80]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e78:	f001 fd66 	bl	8004948 <HAL_TIM_Base_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002e82:	f000 fa6d 	bl	8003360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	4619      	mov	r1, r3
 8002e92:	480d      	ldr	r0, [pc, #52]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e94:	f002 fa16 	bl	80052c4 <HAL_TIM_ConfigClockSource>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002e9e:	f000 fa5f 	bl	8003360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002eaa:	463b      	mov	r3, r7
 8002eac:	4619      	mov	r1, r3
 8002eae:	4806      	ldr	r0, [pc, #24]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002eb0:	f002 fe14 	bl	8005adc <HAL_TIMEx_MasterConfigSynchronization>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002eba:	f000 fa51 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000434 	.word	0x20000434
 8002ecc:	40000800 	.word	0x40000800

08002ed0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ed4:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <MX_UART4_Init+0x4c>)
 8002ed6:	4a12      	ldr	r2, [pc, #72]	@ (8002f20 <MX_UART4_Init+0x50>)
 8002ed8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002eda:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <MX_UART4_Init+0x4c>)
 8002edc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ee0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <MX_UART4_Init+0x4c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <MX_UART4_Init+0x4c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002eee:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <MX_UART4_Init+0x4c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002ef4:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <MX_UART4_Init+0x4c>)
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002efa:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <MX_UART4_Init+0x4c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <MX_UART4_Init+0x4c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f06:	4805      	ldr	r0, [pc, #20]	@ (8002f1c <MX_UART4_Init+0x4c>)
 8002f08:	f002 fe78 	bl	8005bfc <HAL_UART_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002f12:	f000 fa25 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2000047c 	.word	0x2000047c
 8002f20:	40004c00 	.word	0x40004c00

08002f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	@ 0x28
 8002f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	4b27      	ldr	r3, [pc, #156]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	4a26      	ldr	r2, [pc, #152]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4a:	4b24      	ldr	r3, [pc, #144]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f66:	4b1d      	ldr	r3, [pc, #116]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b19      	ldr	r3, [pc, #100]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	4a18      	ldr	r2, [pc, #96]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002f7c:	f043 0310 	orr.w	r3, r3, #16
 8002f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f82:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	4b12      	ldr	r3, [pc, #72]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	4a11      	ldr	r2, [pc, #68]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002fdc <MX_GPIO_Init+0xb8>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002faa:	2200      	movs	r2, #0
 8002fac:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002fb0:	480b      	ldr	r0, [pc, #44]	@ (8002fe0 <MX_GPIO_Init+0xbc>)
 8002fb2:	f001 f817 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002fb6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4804      	ldr	r0, [pc, #16]	@ (8002fe0 <MX_GPIO_Init+0xbc>)
 8002fd0:	f000 fe6c 	bl	8003cac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fd4:	bf00      	nop
 8002fd6:	3728      	adds	r7, #40	@ 0x28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40020400 	.word	0x40020400

08002fe4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Timer In
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if (htim->Instance == INTERUPT_TIMER_INSTANCE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4ba0      	ldr	r3, [pc, #640]	@ (8003274 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f040 816c 	bne.w	80032d2 <HAL_TIM_PeriodElapsedCallback+0x2ee>
  {
	  int count = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
	 // Read encoder (add PWM Set Duty)
	  motor_read_encoder(dposition, &ECODER_TIMER);
 8002ffe:	4b9e      	ldr	r3, [pc, #632]	@ (8003278 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003000:	edd3 7a00 	vldr	s15, [r3]
 8003004:	489d      	ldr	r0, [pc, #628]	@ (800327c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003006:	eeb0 0a67 	vmov.f32	s0, s15
 800300a:	f7ff fd8f 	bl	8002b2c <motor_read_encoder>
	 // switch case
	  switch ((int)Case) {
 800300e:	4b9c      	ldr	r3, [pc, #624]	@ (8003280 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	f7fd fd9e 	bl	8000b58 <__aeabi_d2iz>
 800301c:	4603      	mov	r3, r0
 800301e:	2b03      	cmp	r3, #3
 8003020:	f000 80c4 	beq.w	80031ac <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8003024:	2b03      	cmp	r3, #3
 8003026:	f300 814d 	bgt.w	80032c4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 800302a:	2b01      	cmp	r3, #1
 800302c:	d002      	beq.n	8003034 <HAL_TIM_PeriodElapsedCallback+0x50>
 800302e:	2b02      	cmp	r3, #2
 8003030:	d06d      	beq.n	800310e <HAL_TIM_PeriodElapsedCallback+0x12a>
 8003032:	e147      	b.n	80032c4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
	          case 1:
	        	  Setpoint = t_data.sp;
 8003034:	4b93      	ldr	r3, [pc, #588]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fd fa85 	bl	8000548 <__aeabi_f2d>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4991      	ldr	r1, [pc, #580]	@ (8003288 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003044:	e9c1 2300 	strd	r2, r3, [r1]
	        	  Sensor = dposition;
 8003048:	4b8b      	ldr	r3, [pc, #556]	@ (8003278 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fa7b 	bl	8000548 <__aeabi_f2d>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	498d      	ldr	r1, [pc, #564]	@ (800328c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003058:	e9c1 2300 	strd	r2, r3, [r1]
	              Kp = t_data.value1;
 800305c:	4b89      	ldr	r3, [pc, #548]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fa71 	bl	8000548 <__aeabi_f2d>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4989      	ldr	r1, [pc, #548]	@ (8003290 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800306c:	e9c1 2300 	strd	r2, r3, [r1]
	              Ki = t_data.value2;
 8003070:	4b84      	ldr	r3, [pc, #528]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd fa67 	bl	8000548 <__aeabi_f2d>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4985      	ldr	r1, [pc, #532]	@ (8003294 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003080:	e9c1 2300 	strd	r2, r3, [r1]
	              Kd = t_data.value3;
 8003084:	4b7f      	ldr	r3, [pc, #508]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa5d 	bl	8000548 <__aeabi_f2d>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4981      	ldr	r1, [pc, #516]	@ (8003298 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003094:	e9c1 2300 	strd	r2, r3, [r1]
	              rt_OneStep();
 8003098:	f7ff faa0 	bl	80025dc <rt_OneStep>
	              iu = (int)pwm1;
 800309c:	4b7f      	ldr	r3, [pc, #508]	@ (800329c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f7fd fd57 	bl	8000b58 <__aeabi_d2iz>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4a7c      	ldr	r2, [pc, #496]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80030ae:	6013      	str	r3, [r2, #0]
	              motor_set_duty(iu);
 80030b0:	4b7b      	ldr	r3, [pc, #492]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fd05 	bl	8002ac4 <motor_set_duty>


	        	  process_buffers(dposition, t_data.sp, cposition, csp, txbuf);
 80030ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003278 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	4b70      	ldr	r3, [pc, #448]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80030c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80030c6:	4a77      	ldr	r2, [pc, #476]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80030c8:	4977      	ldr	r1, [pc, #476]	@ (80032a8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80030ca:	4878      	ldr	r0, [pc, #480]	@ (80032ac <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80030cc:	eef0 0a47 	vmov.f32	s1, s14
 80030d0:	eeb0 0a67 	vmov.f32	s0, s15
 80030d4:	f7ff fb56 	bl	8002784 <process_buffers>
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 80030d8:	e002      	b.n	80030e0 <HAL_TIM_PeriodElapsedCallback+0xfc>
	        	  	        count++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3301      	adds	r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 80030e0:	4a70      	ldr	r2, [pc, #448]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_TIM_PeriodElapsedCallback+0x114>
 80030ec:	4a6d      	ldr	r2, [pc, #436]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b0a      	cmp	r3, #10
 80030f6:	d1f0      	bne.n	80030da <HAL_TIM_PeriodElapsedCallback+0xf6>
	        	  	    }
	        	  HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	4967      	ldr	r1, [pc, #412]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003106:	486a      	ldr	r0, [pc, #424]	@ (80032b0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003108:	f002 fdc8 	bl	8005c9c <HAL_UART_Transmit>
	              break;
 800310c:	e0e1      	b.n	80032d2 <HAL_TIM_PeriodElapsedCallback+0x2ee>
	          case 2:
	        	  Setpoint = t_data.sp;
 800310e:	4b5d      	ldr	r3, [pc, #372]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fa18 	bl	8000548 <__aeabi_f2d>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	495a      	ldr	r1, [pc, #360]	@ (8003288 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800311e:	e9c1 2300 	strd	r2, r3, [r1]
	        	  Sensor = dposition;
 8003122:	4b55      	ldr	r3, [pc, #340]	@ (8003278 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fa0e 	bl	8000548 <__aeabi_f2d>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4956      	ldr	r1, [pc, #344]	@ (800328c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003132:	e9c1 2300 	strd	r2, r3, [r1]
	        	  rt_OneStep();
 8003136:	f7ff fa51 	bl	80025dc <rt_OneStep>
	        	  iu = (int)pwm2;
 800313a:	4b5e      	ldr	r3, [pc, #376]	@ (80032b4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	f7fd fd08 	bl	8000b58 <__aeabi_d2iz>
 8003148:	4603      	mov	r3, r0
 800314a:	4a55      	ldr	r2, [pc, #340]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800314c:	6013      	str	r3, [r2, #0]
	        	  motor_set_duty(iu);
 800314e:	4b54      	ldr	r3, [pc, #336]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fcb6 	bl	8002ac4 <motor_set_duty>

	        	  process_buffers(dposition, t_data.sp, cposition, csp, txbuf);
 8003158:	4b47      	ldr	r3, [pc, #284]	@ (8003278 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800315a:	edd3 7a00 	vldr	s15, [r3]
 800315e:	4b49      	ldr	r3, [pc, #292]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003160:	ed93 7a01 	vldr	s14, [r3, #4]
 8003164:	4a4f      	ldr	r2, [pc, #316]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003166:	4950      	ldr	r1, [pc, #320]	@ (80032a8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003168:	4850      	ldr	r0, [pc, #320]	@ (80032ac <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800316a:	eef0 0a47 	vmov.f32	s1, s14
 800316e:	eeb0 0a67 	vmov.f32	s0, s15
 8003172:	f7ff fb07 	bl	8002784 <process_buffers>
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8003176:	e002      	b.n	800317e <HAL_TIM_PeriodElapsedCallback+0x19a>
	        	  	        count++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 800317e:	4a49      	ldr	r2, [pc, #292]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 800318a:	4a46      	ldr	r2, [pc, #280]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b0a      	cmp	r3, #10
 8003194:	d1f0      	bne.n	8003178 <HAL_TIM_PeriodElapsedCallback+0x194>
	        	  	    }
	        	  HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	b29b      	uxth	r3, r3
 800319a:	3301      	adds	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
 80031a2:	4940      	ldr	r1, [pc, #256]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80031a4:	4842      	ldr	r0, [pc, #264]	@ (80032b0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80031a6:	f002 fd79 	bl	8005c9c <HAL_UART_Transmit>
	              break;
 80031aa:	e092      	b.n	80032d2 <HAL_TIM_PeriodElapsedCallback+0x2ee>
	          case 3:
	        	  Setpoint = t_data.sp;
 80031ac:	4b35      	ldr	r3, [pc, #212]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd f9c9 	bl	8000548 <__aeabi_f2d>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4933      	ldr	r1, [pc, #204]	@ (8003288 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80031bc:	e9c1 2300 	strd	r2, r3, [r1]
	        	  Sensor = dposition;
 80031c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003278 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd f9bf 	bl	8000548 <__aeabi_f2d>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	492f      	ldr	r1, [pc, #188]	@ (800328c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80031d0:	e9c1 2300 	strd	r2, r3, [r1]
	              K1 = t_data.value1;
 80031d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f9b5 	bl	8000548 <__aeabi_f2d>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4935      	ldr	r1, [pc, #212]	@ (80032b8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80031e4:	e9c1 2300 	strd	r2, r3, [r1]
	              K2 = t_data.value2;
 80031e8:	4b26      	ldr	r3, [pc, #152]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd f9ab 	bl	8000548 <__aeabi_f2d>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4931      	ldr	r1, [pc, #196]	@ (80032bc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80031f8:	e9c1 2300 	strd	r2, r3, [r1]
	        	  rt_OneStep();
 80031fc:	f7ff f9ee 	bl	80025dc <rt_OneStep>
	        	  iu = (int)pwm3;
 8003200:	4b2f      	ldr	r3, [pc, #188]	@ (80032c0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8003202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003206:	4610      	mov	r0, r2
 8003208:	4619      	mov	r1, r3
 800320a:	f7fd fca5 	bl	8000b58 <__aeabi_d2iz>
 800320e:	4603      	mov	r3, r0
 8003210:	4a23      	ldr	r2, [pc, #140]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003212:	6013      	str	r3, [r2, #0]
	        	  motor_set_duty(iu);
 8003214:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fc53 	bl	8002ac4 <motor_set_duty>

	        	  process_buffers(dposition, t_data.sp, cposition, csp, txbuf);
 800321e:	4b16      	ldr	r3, [pc, #88]	@ (8003278 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	4b17      	ldr	r3, [pc, #92]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003226:	ed93 7a01 	vldr	s14, [r3, #4]
 800322a:	4a1e      	ldr	r2, [pc, #120]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800322c:	491e      	ldr	r1, [pc, #120]	@ (80032a8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800322e:	481f      	ldr	r0, [pc, #124]	@ (80032ac <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003230:	eef0 0a47 	vmov.f32	s1, s14
 8003234:	eeb0 0a67 	vmov.f32	s0, s15
 8003238:	f7ff faa4 	bl	8002784 <process_buffers>
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 800323c:	e002      	b.n	8003244 <HAL_TIM_PeriodElapsedCallback+0x260>
	        	  	        count++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3301      	adds	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8003244:	4a17      	ldr	r2, [pc, #92]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4413      	add	r3, r2
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_TIM_PeriodElapsedCallback+0x278>
 8003250:	4a14      	ldr	r2, [pc, #80]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b0a      	cmp	r3, #10
 800325a:	d1f0      	bne.n	800323e <HAL_TIM_PeriodElapsedCallback+0x25a>
	        	  	    }
	        	  HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	b29b      	uxth	r3, r3
 8003260:	3301      	adds	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	490e      	ldr	r1, [pc, #56]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800326a:	4811      	ldr	r0, [pc, #68]	@ (80032b0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800326c:	f002 fd16 	bl	8005c9c <HAL_UART_Transmit>
	              break;
 8003270:	e02f      	b.n	80032d2 <HAL_TIM_PeriodElapsedCallback+0x2ee>
 8003272:	bf00      	nop
 8003274:	20000434 	.word	0x20000434
 8003278:	20000544 	.word	0x20000544
 800327c:	200003a4 	.word	0x200003a4
 8003280:	20000210 	.word	0x20000210
 8003284:	200004c4 	.word	0x200004c4
 8003288:	20000218 	.word	0x20000218
 800328c:	20000208 	.word	0x20000208
 8003290:	20000220 	.word	0x20000220
 8003294:	20000228 	.word	0x20000228
 8003298:	20000230 	.word	0x20000230
 800329c:	20000260 	.word	0x20000260
 80032a0:	20000548 	.word	0x20000548
 80032a4:	20000564 	.word	0x20000564
 80032a8:	20000558 	.word	0x20000558
 80032ac:	2000054c 	.word	0x2000054c
 80032b0:	2000047c 	.word	0x2000047c
 80032b4:	20000258 	.word	0x20000258
 80032b8:	20000238 	.word	0x20000238
 80032bc:	20000240 	.word	0x20000240
 80032c0:	20000250 	.word	0x20000250
	          default:
	        	  dposition = 0;
 80032c4:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
	        	  Motor_Control_STR_terminate();
 80032cc:	f7fe fffe 	bl	80022cc <Motor_Control_STR_terminate>
	              break;
 80032d0:	bf00      	nop
	      }

  }
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000544 	.word	0x20000544

080032e0 <HAL_UART_RxCpltCallback>:

// UART Interupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART_COM_INSTANCE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b17      	ldr	r3, [pc, #92]	@ (800334c <HAL_UART_RxCpltCallback+0x6c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d122      	bne.n	800333a <HAL_UART_RxCpltCallback+0x5a>
	{
		if (urx != '\n')
 80032f4:	4b16      	ldr	r3, [pc, #88]	@ (8003350 <HAL_UART_RxCpltCallback+0x70>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b0a      	cmp	r3, #10
 80032fa:	d00d      	beq.n	8003318 <HAL_UART_RxCpltCallback+0x38>
		{
			urx_buff[urx_index] = urx;
 80032fc:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <HAL_UART_RxCpltCallback+0x74>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	4b13      	ldr	r3, [pc, #76]	@ (8003350 <HAL_UART_RxCpltCallback+0x70>)
 8003304:	7819      	ldrb	r1, [r3, #0]
 8003306:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <HAL_UART_RxCpltCallback+0x78>)
 8003308:	5499      	strb	r1, [r3, r2]
			urx_index++;
 800330a:	4b12      	ldr	r3, [pc, #72]	@ (8003354 <HAL_UART_RxCpltCallback+0x74>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4b10      	ldr	r3, [pc, #64]	@ (8003354 <HAL_UART_RxCpltCallback+0x74>)
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e010      	b.n	800333a <HAL_UART_RxCpltCallback+0x5a>
		}
		else
		{
			urx_buff[urx_index] = urx;
 8003318:	4b0e      	ldr	r3, [pc, #56]	@ (8003354 <HAL_UART_RxCpltCallback+0x74>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <HAL_UART_RxCpltCallback+0x70>)
 8003320:	7819      	ldrb	r1, [r3, #0]
 8003322:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <HAL_UART_RxCpltCallback+0x78>)
 8003324:	5499      	strb	r1, [r3, r2]
			urx_index++;
 8003326:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <HAL_UART_RxCpltCallback+0x74>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <HAL_UART_RxCpltCallback+0x74>)
 8003330:	701a      	strb	r2, [r3, #0]
			process_uart_string((char *)urx_buff, &t_data);
 8003332:	490a      	ldr	r1, [pc, #40]	@ (800335c <HAL_UART_RxCpltCallback+0x7c>)
 8003334:	4808      	ldr	r0, [pc, #32]	@ (8003358 <HAL_UART_RxCpltCallback+0x78>)
 8003336:	f7ff fab3 	bl	80028a0 <process_uart_string>
		}
	}
	HAL_UART_Receive_IT(&UART_COM, &urx, 1);
 800333a:	2201      	movs	r2, #1
 800333c:	4904      	ldr	r1, [pc, #16]	@ (8003350 <HAL_UART_RxCpltCallback+0x70>)
 800333e:	4803      	ldr	r0, [pc, #12]	@ (800334c <HAL_UART_RxCpltCallback+0x6c>)
 8003340:	f002 fd37 	bl	8005db2 <HAL_UART_Receive_IT>
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	2000047c 	.word	0x2000047c
 8003350:	200004d9 	.word	0x200004d9
 8003354:	200004d8 	.word	0x200004d8
 8003358:	200004dc 	.word	0x200004dc
 800335c:	200004c4 	.word	0x200004c4

08003360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003364:	b672      	cpsid	i
}
 8003366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <Error_Handler+0x8>

0800336c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	4b10      	ldr	r3, [pc, #64]	@ (80033b8 <HAL_MspInit+0x4c>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337a:	4a0f      	ldr	r2, [pc, #60]	@ (80033b8 <HAL_MspInit+0x4c>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003380:	6453      	str	r3, [r2, #68]	@ 0x44
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <HAL_MspInit+0x4c>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <HAL_MspInit+0x4c>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	4a08      	ldr	r2, [pc, #32]	@ (80033b8 <HAL_MspInit+0x4c>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	@ 0x40
 800339e:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <HAL_MspInit+0x4c>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800

080033bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	@ 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a19      	ldr	r2, [pc, #100]	@ (8003440 <HAL_TIM_Encoder_MspInit+0x84>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d12c      	bne.n	8003438 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	4b18      	ldr	r3, [pc, #96]	@ (8003444 <HAL_TIM_Encoder_MspInit+0x88>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	4a17      	ldr	r2, [pc, #92]	@ (8003444 <HAL_TIM_Encoder_MspInit+0x88>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ee:	4b15      	ldr	r3, [pc, #84]	@ (8003444 <HAL_TIM_Encoder_MspInit+0x88>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <HAL_TIM_Encoder_MspInit+0x88>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	4a10      	ldr	r2, [pc, #64]	@ (8003444 <HAL_TIM_Encoder_MspInit+0x88>)
 8003404:	f043 0310 	orr.w	r3, r3, #16
 8003408:	6313      	str	r3, [r2, #48]	@ 0x30
 800340a:	4b0e      	ldr	r3, [pc, #56]	@ (8003444 <HAL_TIM_Encoder_MspInit+0x88>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003416:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800341a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003428:	2301      	movs	r3, #1
 800342a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	4619      	mov	r1, r3
 8003432:	4805      	ldr	r0, [pc, #20]	@ (8003448 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003434:	f000 fc3a 	bl	8003cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003438:	bf00      	nop
 800343a:	3728      	adds	r7, #40	@ 0x28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40010000 	.word	0x40010000
 8003444:	40023800 	.word	0x40023800
 8003448:	40021000 	.word	0x40021000

0800344c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0b      	ldr	r2, [pc, #44]	@ (8003488 <HAL_TIM_PWM_MspInit+0x3c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10d      	bne.n	800347a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b0a      	ldr	r3, [pc, #40]	@ (800348c <HAL_TIM_PWM_MspInit+0x40>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	4a09      	ldr	r2, [pc, #36]	@ (800348c <HAL_TIM_PWM_MspInit+0x40>)
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	6413      	str	r3, [r2, #64]	@ 0x40
 800346e:	4b07      	ldr	r3, [pc, #28]	@ (800348c <HAL_TIM_PWM_MspInit+0x40>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40000400 	.word	0x40000400
 800348c:	40023800 	.word	0x40023800

08003490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0e      	ldr	r2, [pc, #56]	@ (80034d8 <HAL_TIM_Base_MspInit+0x48>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d115      	bne.n	80034ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <HAL_TIM_Base_MspInit+0x4c>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	4a0c      	ldr	r2, [pc, #48]	@ (80034dc <HAL_TIM_Base_MspInit+0x4c>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b2:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <HAL_TIM_Base_MspInit+0x4c>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2101      	movs	r1, #1
 80034c2:	201e      	movs	r0, #30
 80034c4:	f000 fb29 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80034c8:	201e      	movs	r0, #30
 80034ca:	f000 fb42 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40023800 	.word	0x40023800

080034e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 030c 	add.w	r3, r7, #12
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <HAL_TIM_MspPostInit+0x68>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d11d      	bne.n	800353e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	4b11      	ldr	r3, [pc, #68]	@ (800354c <HAL_TIM_MspPostInit+0x6c>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	4a10      	ldr	r2, [pc, #64]	@ (800354c <HAL_TIM_MspPostInit+0x6c>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6313      	str	r3, [r2, #48]	@ 0x30
 8003512:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <HAL_TIM_MspPostInit+0x6c>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800351e:	2340      	movs	r3, #64	@ 0x40
 8003520:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800352e:	2302      	movs	r3, #2
 8003530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003532:	f107 030c 	add.w	r3, r7, #12
 8003536:	4619      	mov	r1, r3
 8003538:	4805      	ldr	r0, [pc, #20]	@ (8003550 <HAL_TIM_MspPostInit+0x70>)
 800353a:	f000 fbb7 	bl	8003cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800353e:	bf00      	nop
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40000400 	.word	0x40000400
 800354c:	40023800 	.word	0x40023800
 8003550:	40020000 	.word	0x40020000

08003554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	@ 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1d      	ldr	r2, [pc, #116]	@ (80035e8 <HAL_UART_MspInit+0x94>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d133      	bne.n	80035de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ec <HAL_UART_MspInit+0x98>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	4a1b      	ldr	r2, [pc, #108]	@ (80035ec <HAL_UART_MspInit+0x98>)
 8003580:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003584:	6413      	str	r3, [r2, #64]	@ 0x40
 8003586:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <HAL_UART_MspInit+0x98>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	4b15      	ldr	r3, [pc, #84]	@ (80035ec <HAL_UART_MspInit+0x98>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	4a14      	ldr	r2, [pc, #80]	@ (80035ec <HAL_UART_MspInit+0x98>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a2:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <HAL_UART_MspInit+0x98>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035ae:	2303      	movs	r3, #3
 80035b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b2:	2302      	movs	r3, #2
 80035b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ba:	2303      	movs	r3, #3
 80035bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035be:	2308      	movs	r3, #8
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c2:	f107 0314 	add.w	r3, r7, #20
 80035c6:	4619      	mov	r1, r3
 80035c8:	4809      	ldr	r0, [pc, #36]	@ (80035f0 <HAL_UART_MspInit+0x9c>)
 80035ca:	f000 fb6f 	bl	8003cac <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2100      	movs	r1, #0
 80035d2:	2034      	movs	r0, #52	@ 0x34
 80035d4:	f000 faa1 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80035d8:	2034      	movs	r0, #52	@ 0x34
 80035da:	f000 faba 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80035de:	bf00      	nop
 80035e0:	3728      	adds	r7, #40	@ 0x28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40004c00 	.word	0x40004c00
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40020000 	.word	0x40020000

080035f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035f8:	bf00      	nop
 80035fa:	e7fd      	b.n	80035f8 <NMI_Handler+0x4>

080035fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003600:	bf00      	nop
 8003602:	e7fd      	b.n	8003600 <HardFault_Handler+0x4>

08003604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003608:	bf00      	nop
 800360a:	e7fd      	b.n	8003608 <MemManage_Handler+0x4>

0800360c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003610:	bf00      	nop
 8003612:	e7fd      	b.n	8003610 <BusFault_Handler+0x4>

08003614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <UsageFault_Handler+0x4>

0800361c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800364a:	f000 f96b 	bl	8003924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003658:	4802      	ldr	r0, [pc, #8]	@ (8003664 <TIM4_IRQHandler+0x10>)
 800365a:	f001 fc81 	bl	8004f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000434 	.word	0x20000434

08003668 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800366c:	4802      	ldr	r0, [pc, #8]	@ (8003678 <UART4_IRQHandler+0x10>)
 800366e:	f002 fbc5 	bl	8005dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	2000047c 	.word	0x2000047c

0800367c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return 1;
 8003680:	2301      	movs	r3, #1
}
 8003682:	4618      	mov	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <_kill>:

int _kill(int pid, int sig)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003696:	f005 f995 	bl	80089c4 <__errno>
 800369a:	4603      	mov	r3, r0
 800369c:	2216      	movs	r2, #22
 800369e:	601a      	str	r2, [r3, #0]
  return -1;
 80036a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <_exit>:

void _exit (int status)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036b4:	f04f 31ff 	mov.w	r1, #4294967295
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ffe7 	bl	800368c <_kill>
  while (1) {}    /* Make sure we hang here */
 80036be:	bf00      	nop
 80036c0:	e7fd      	b.n	80036be <_exit+0x12>

080036c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	e00a      	b.n	80036ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036d4:	f3af 8000 	nop.w
 80036d8:	4601      	mov	r1, r0
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	60ba      	str	r2, [r7, #8]
 80036e0:	b2ca      	uxtb	r2, r1
 80036e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3301      	adds	r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	dbf0      	blt.n	80036d4 <_read+0x12>
  }

  return len;
 80036f2:	687b      	ldr	r3, [r7, #4]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	e009      	b.n	8003722 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	60ba      	str	r2, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	3301      	adds	r3, #1
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	429a      	cmp	r2, r3
 8003728:	dbf1      	blt.n	800370e <_write+0x12>
  }
  return len;
 800372a:	687b      	ldr	r3, [r7, #4]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <_close>:

int _close(int file)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800373c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800375c:	605a      	str	r2, [r3, #4]
  return 0;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <_isatty>:

int _isatty(int file)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003774:	2301      	movs	r3, #1
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003782:	b480      	push	{r7}
 8003784:	b085      	sub	sp, #20
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037a4:	4a14      	ldr	r2, [pc, #80]	@ (80037f8 <_sbrk+0x5c>)
 80037a6:	4b15      	ldr	r3, [pc, #84]	@ (80037fc <_sbrk+0x60>)
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037b0:	4b13      	ldr	r3, [pc, #76]	@ (8003800 <_sbrk+0x64>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037b8:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <_sbrk+0x64>)
 80037ba:	4a12      	ldr	r2, [pc, #72]	@ (8003804 <_sbrk+0x68>)
 80037bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037be:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <_sbrk+0x64>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4413      	add	r3, r2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d207      	bcs.n	80037dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037cc:	f005 f8fa 	bl	80089c4 <__errno>
 80037d0:	4603      	mov	r3, r0
 80037d2:	220c      	movs	r2, #12
 80037d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	e009      	b.n	80037f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <_sbrk+0x64>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037e2:	4b07      	ldr	r3, [pc, #28]	@ (8003800 <_sbrk+0x64>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	4a05      	ldr	r2, [pc, #20]	@ (8003800 <_sbrk+0x64>)
 80037ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ee:	68fb      	ldr	r3, [r7, #12]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20020000 	.word	0x20020000
 80037fc:	00000400 	.word	0x00000400
 8003800:	20000598 	.word	0x20000598
 8003804:	200006f0 	.word	0x200006f0

08003808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <SystemInit+0x20>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003812:	4a05      	ldr	r2, [pc, #20]	@ (8003828 <SystemInit+0x20>)
 8003814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800382c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003864 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003830:	f7ff ffea 	bl	8003808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003834:	480c      	ldr	r0, [pc, #48]	@ (8003868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003836:	490d      	ldr	r1, [pc, #52]	@ (800386c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003838:	4a0d      	ldr	r2, [pc, #52]	@ (8003870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800383a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800383c:	e002      	b.n	8003844 <LoopCopyDataInit>

0800383e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800383e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003842:	3304      	adds	r3, #4

08003844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003848:	d3f9      	bcc.n	800383e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800384a:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800384c:	4c0a      	ldr	r4, [pc, #40]	@ (8003878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800384e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003850:	e001      	b.n	8003856 <LoopFillZerobss>

08003852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003854:	3204      	adds	r2, #4

08003856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003858:	d3fb      	bcc.n	8003852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800385a:	f005 f8b9 	bl	80089d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800385e:	f7ff f997 	bl	8002b90 <main>
  bx  lr    
 8003862:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800386c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003870:	0800dba0 	.word	0x0800dba0
  ldr r2, =_sbss
 8003874:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003878:	200006ec 	.word	0x200006ec

0800387c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800387c:	e7fe      	b.n	800387c <ADC_IRQHandler>
	...

08003880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003884:	4b0e      	ldr	r3, [pc, #56]	@ (80038c0 <HAL_Init+0x40>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0d      	ldr	r2, [pc, #52]	@ (80038c0 <HAL_Init+0x40>)
 800388a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800388e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003890:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <HAL_Init+0x40>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a0a      	ldr	r2, [pc, #40]	@ (80038c0 <HAL_Init+0x40>)
 8003896:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800389a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800389c:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <HAL_Init+0x40>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a07      	ldr	r2, [pc, #28]	@ (80038c0 <HAL_Init+0x40>)
 80038a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038a8:	2003      	movs	r0, #3
 80038aa:	f000 f92b 	bl	8003b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038ae:	200f      	movs	r0, #15
 80038b0:	f000 f808 	bl	80038c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038b4:	f7ff fd5a 	bl	800336c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40023c00 	.word	0x40023c00

080038c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038cc:	4b12      	ldr	r3, [pc, #72]	@ (8003918 <HAL_InitTick+0x54>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b12      	ldr	r3, [pc, #72]	@ (800391c <HAL_InitTick+0x58>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	4619      	mov	r1, r3
 80038d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038da:	fbb3 f3f1 	udiv	r3, r3, r1
 80038de:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f943 	bl	8003b6e <HAL_SYSTICK_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00e      	b.n	8003910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b0f      	cmp	r3, #15
 80038f6:	d80a      	bhi.n	800390e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038f8:	2200      	movs	r2, #0
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f000 f90b 	bl	8003b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003904:	4a06      	ldr	r2, [pc, #24]	@ (8003920 <HAL_InitTick+0x5c>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000000 	.word	0x20000000
 800391c:	20000008 	.word	0x20000008
 8003920:	20000004 	.word	0x20000004

08003924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003928:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <HAL_IncTick+0x20>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_IncTick+0x24>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4413      	add	r3, r2
 8003934:	4a04      	ldr	r2, [pc, #16]	@ (8003948 <HAL_IncTick+0x24>)
 8003936:	6013      	str	r3, [r2, #0]
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000008 	.word	0x20000008
 8003948:	2000059c 	.word	0x2000059c

0800394c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return uwTick;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <HAL_GetTick+0x14>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	2000059c 	.word	0x2000059c

08003964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003974:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003980:	4013      	ands	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800398c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003996:	4a04      	ldr	r2, [pc, #16]	@ (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	60d3      	str	r3, [r2, #12]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b0:	4b04      	ldr	r3, [pc, #16]	@ (80039c4 <__NVIC_GetPriorityGrouping+0x18>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 0307 	and.w	r3, r3, #7
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	db0b      	blt.n	80039f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4907      	ldr	r1, [pc, #28]	@ (8003a00 <__NVIC_EnableIRQ+0x38>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2001      	movs	r0, #1
 80039ea:	fa00 f202 	lsl.w	r2, r0, r2
 80039ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000e100 	.word	0xe000e100

08003a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	db0a      	blt.n	8003a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	490c      	ldr	r1, [pc, #48]	@ (8003a50 <__NVIC_SetPriority+0x4c>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	440b      	add	r3, r1
 8003a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a2c:	e00a      	b.n	8003a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4908      	ldr	r1, [pc, #32]	@ (8003a54 <__NVIC_SetPriority+0x50>)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	3b04      	subs	r3, #4
 8003a3c:	0112      	lsls	r2, r2, #4
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	440b      	add	r3, r1
 8003a42:	761a      	strb	r2, [r3, #24]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	@ 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f1c3 0307 	rsb	r3, r3, #7
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	bf28      	it	cs
 8003a76:	2304      	movcs	r3, #4
 8003a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d902      	bls.n	8003a88 <NVIC_EncodePriority+0x30>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3b03      	subs	r3, #3
 8003a86:	e000      	b.n	8003a8a <NVIC_EncodePriority+0x32>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	43d9      	mvns	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	4313      	orrs	r3, r2
         );
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	@ 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ad0:	d301      	bcc.n	8003ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00f      	b.n	8003af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <SysTick_Config+0x40>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ade:	210f      	movs	r1, #15
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	f7ff ff8e 	bl	8003a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae8:	4b05      	ldr	r3, [pc, #20]	@ (8003b00 <SysTick_Config+0x40>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aee:	4b04      	ldr	r3, [pc, #16]	@ (8003b00 <SysTick_Config+0x40>)
 8003af0:	2207      	movs	r2, #7
 8003af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	e000e010 	.word	0xe000e010

08003b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff29 	bl	8003964 <__NVIC_SetPriorityGrouping>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	4603      	mov	r3, r0
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b2c:	f7ff ff3e 	bl	80039ac <__NVIC_GetPriorityGrouping>
 8003b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7ff ff8e 	bl	8003a58 <NVIC_EncodePriority>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff5d 	bl	8003a04 <__NVIC_SetPriority>
}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff31 	bl	80039c8 <__NVIC_EnableIRQ>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ffa2 	bl	8003ac0 <SysTick_Config>
 8003b7c:	4603      	mov	r3, r0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b94:	f7ff feda 	bl	800394c <HAL_GetTick>
 8003b98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d008      	beq.n	8003bb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2280      	movs	r2, #128	@ 0x80
 8003baa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e052      	b.n	8003c5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0216 	bic.w	r2, r2, #22
 8003bc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d103      	bne.n	8003be8 <HAL_DMA_Abort+0x62>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0208 	bic.w	r2, r2, #8
 8003bf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c08:	e013      	b.n	8003c32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c0a:	f7ff fe9f 	bl	800394c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b05      	cmp	r3, #5
 8003c16:	d90c      	bls.n	8003c32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2203      	movs	r2, #3
 8003c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e015      	b.n	8003c5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e4      	bne.n	8003c0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c44:	223f      	movs	r2, #63	@ 0x3f
 8003c46:	409a      	lsls	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d004      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2280      	movs	r2, #128	@ 0x80
 8003c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e00c      	b.n	8003c9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2205      	movs	r2, #5
 8003c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	@ 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	e16b      	b.n	8003fa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cc8:	2201      	movs	r2, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	f040 815a 	bne.w	8003f9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d005      	beq.n	8003cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d130      	bne.n	8003d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d34:	2201      	movs	r2, #1
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 0201 	and.w	r2, r3, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d017      	beq.n	8003d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	2203      	movs	r2, #3
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d123      	bne.n	8003df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	08da      	lsrs	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3208      	adds	r2, #8
 8003db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	220f      	movs	r2, #15
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	08da      	lsrs	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3208      	adds	r2, #8
 8003dea:	69b9      	ldr	r1, [r7, #24]
 8003dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 0203 	and.w	r2, r3, #3
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80b4 	beq.w	8003f9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	4b60      	ldr	r3, [pc, #384]	@ (8003fb8 <HAL_GPIO_Init+0x30c>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8003fb8 <HAL_GPIO_Init+0x30c>)
 8003e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e42:	4b5d      	ldr	r3, [pc, #372]	@ (8003fb8 <HAL_GPIO_Init+0x30c>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e4e:	4a5b      	ldr	r2, [pc, #364]	@ (8003fbc <HAL_GPIO_Init+0x310>)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	3302      	adds	r3, #2
 8003e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a52      	ldr	r2, [pc, #328]	@ (8003fc0 <HAL_GPIO_Init+0x314>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d02b      	beq.n	8003ed2 <HAL_GPIO_Init+0x226>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a51      	ldr	r2, [pc, #324]	@ (8003fc4 <HAL_GPIO_Init+0x318>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d025      	beq.n	8003ece <HAL_GPIO_Init+0x222>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a50      	ldr	r2, [pc, #320]	@ (8003fc8 <HAL_GPIO_Init+0x31c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01f      	beq.n	8003eca <HAL_GPIO_Init+0x21e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8003fcc <HAL_GPIO_Init+0x320>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d019      	beq.n	8003ec6 <HAL_GPIO_Init+0x21a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4e      	ldr	r2, [pc, #312]	@ (8003fd0 <HAL_GPIO_Init+0x324>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_GPIO_Init+0x216>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8003fd4 <HAL_GPIO_Init+0x328>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00d      	beq.n	8003ebe <HAL_GPIO_Init+0x212>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8003fd8 <HAL_GPIO_Init+0x32c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <HAL_GPIO_Init+0x20e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4b      	ldr	r2, [pc, #300]	@ (8003fdc <HAL_GPIO_Init+0x330>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_GPIO_Init+0x20a>
 8003eb2:	2307      	movs	r3, #7
 8003eb4:	e00e      	b.n	8003ed4 <HAL_GPIO_Init+0x228>
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	e00c      	b.n	8003ed4 <HAL_GPIO_Init+0x228>
 8003eba:	2306      	movs	r3, #6
 8003ebc:	e00a      	b.n	8003ed4 <HAL_GPIO_Init+0x228>
 8003ebe:	2305      	movs	r3, #5
 8003ec0:	e008      	b.n	8003ed4 <HAL_GPIO_Init+0x228>
 8003ec2:	2304      	movs	r3, #4
 8003ec4:	e006      	b.n	8003ed4 <HAL_GPIO_Init+0x228>
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e004      	b.n	8003ed4 <HAL_GPIO_Init+0x228>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e002      	b.n	8003ed4 <HAL_GPIO_Init+0x228>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_GPIO_Init+0x228>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	f002 0203 	and.w	r2, r2, #3
 8003eda:	0092      	lsls	r2, r2, #2
 8003edc:	4093      	lsls	r3, r2
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ee4:	4935      	ldr	r1, [pc, #212]	@ (8003fbc <HAL_GPIO_Init+0x310>)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	3302      	adds	r3, #2
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe0 <HAL_GPIO_Init+0x334>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f16:	4a32      	ldr	r2, [pc, #200]	@ (8003fe0 <HAL_GPIO_Init+0x334>)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f1c:	4b30      	ldr	r3, [pc, #192]	@ (8003fe0 <HAL_GPIO_Init+0x334>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f40:	4a27      	ldr	r2, [pc, #156]	@ (8003fe0 <HAL_GPIO_Init+0x334>)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f46:	4b26      	ldr	r3, [pc, #152]	@ (8003fe0 <HAL_GPIO_Init+0x334>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe0 <HAL_GPIO_Init+0x334>)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f70:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_GPIO_Init+0x334>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f94:	4a12      	ldr	r2, [pc, #72]	@ (8003fe0 <HAL_GPIO_Init+0x334>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b0f      	cmp	r3, #15
 8003fa4:	f67f ae90 	bls.w	8003cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	3724      	adds	r7, #36	@ 0x24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40013800 	.word	0x40013800
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	40020400 	.word	0x40020400
 8003fc8:	40020800 	.word	0x40020800
 8003fcc:	40020c00 	.word	0x40020c00
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40021400 	.word	0x40021400
 8003fd8:	40021800 	.word	0x40021800
 8003fdc:	40021c00 	.word	0x40021c00
 8003fe0:	40013c00 	.word	0x40013c00

08003fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff4:	787b      	ldrb	r3, [r7, #1]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ffa:	887a      	ldrh	r2, [r7, #2]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004000:	e003      	b.n	800400a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	041a      	lsls	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	619a      	str	r2, [r3, #24]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e267      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d075      	beq.n	8004122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004036:	4b88      	ldr	r3, [pc, #544]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b04      	cmp	r3, #4
 8004040:	d00c      	beq.n	800405c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004042:	4b85      	ldr	r3, [pc, #532]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800404a:	2b08      	cmp	r3, #8
 800404c:	d112      	bne.n	8004074 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404e:	4b82      	ldr	r3, [pc, #520]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800405a:	d10b      	bne.n	8004074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405c:	4b7e      	ldr	r3, [pc, #504]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d05b      	beq.n	8004120 <HAL_RCC_OscConfig+0x108>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d157      	bne.n	8004120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e242      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800407c:	d106      	bne.n	800408c <HAL_RCC_OscConfig+0x74>
 800407e:	4b76      	ldr	r3, [pc, #472]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a75      	ldr	r2, [pc, #468]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e01d      	b.n	80040c8 <HAL_RCC_OscConfig+0xb0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCC_OscConfig+0x98>
 8004096:	4b70      	ldr	r3, [pc, #448]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6f      	ldr	r2, [pc, #444]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800409c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e00b      	b.n	80040c8 <HAL_RCC_OscConfig+0xb0>
 80040b0:	4b69      	ldr	r3, [pc, #420]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a68      	ldr	r2, [pc, #416]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4b66      	ldr	r3, [pc, #408]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a65      	ldr	r2, [pc, #404]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d013      	beq.n	80040f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7ff fc3c 	bl	800394c <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7ff fc38 	bl	800394c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	@ 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e207      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0xc0>
 80040f6:	e014      	b.n	8004122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7ff fc28 	bl	800394c <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7ff fc24 	bl	800394c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	@ 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e1f3      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	4b51      	ldr	r3, [pc, #324]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0xe8>
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d063      	beq.n	80041f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800412e:	4b4a      	ldr	r3, [pc, #296]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800413a:	4b47      	ldr	r3, [pc, #284]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004142:	2b08      	cmp	r3, #8
 8004144:	d11c      	bne.n	8004180 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004146:	4b44      	ldr	r3, [pc, #272]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d116      	bne.n	8004180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	4b41      	ldr	r3, [pc, #260]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_RCC_OscConfig+0x152>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d001      	beq.n	800416a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e1c7      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416a:	4b3b      	ldr	r3, [pc, #236]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4937      	ldr	r1, [pc, #220]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417e:	e03a      	b.n	80041f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004188:	4b34      	ldr	r3, [pc, #208]	@ (800425c <HAL_RCC_OscConfig+0x244>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7ff fbdd 	bl	800394c <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004196:	f7ff fbd9 	bl	800394c <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e1a8      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b4:	4b28      	ldr	r3, [pc, #160]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4925      	ldr	r1, [pc, #148]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	600b      	str	r3, [r1, #0]
 80041c8:	e015      	b.n	80041f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ca:	4b24      	ldr	r3, [pc, #144]	@ (800425c <HAL_RCC_OscConfig+0x244>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7ff fbbc 	bl	800394c <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d8:	f7ff fbb8 	bl	800394c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e187      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d036      	beq.n	8004270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d016      	beq.n	8004238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420a:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <HAL_RCC_OscConfig+0x248>)
 800420c:	2201      	movs	r2, #1
 800420e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7ff fb9c 	bl	800394c <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004218:	f7ff fb98 	bl	800394c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e167      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422a:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800422c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x200>
 8004236:	e01b      	b.n	8004270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004238:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <HAL_RCC_OscConfig+0x248>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423e:	f7ff fb85 	bl	800394c <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004244:	e00e      	b.n	8004264 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004246:	f7ff fb81 	bl	800394c <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d907      	bls.n	8004264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e150      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
 8004258:	40023800 	.word	0x40023800
 800425c:	42470000 	.word	0x42470000
 8004260:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	4b88      	ldr	r3, [pc, #544]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ea      	bne.n	8004246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8097 	beq.w	80043ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427e:	2300      	movs	r3, #0
 8004280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004282:	4b81      	ldr	r3, [pc, #516]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10f      	bne.n	80042ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	4b7d      	ldr	r3, [pc, #500]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	4a7c      	ldr	r2, [pc, #496]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429c:	6413      	str	r3, [r2, #64]	@ 0x40
 800429e:	4b7a      	ldr	r3, [pc, #488]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042aa:	2301      	movs	r3, #1
 80042ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ae:	4b77      	ldr	r3, [pc, #476]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d118      	bne.n	80042ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ba:	4b74      	ldr	r3, [pc, #464]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a73      	ldr	r2, [pc, #460]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c6:	f7ff fb41 	bl	800394c <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ce:	f7ff fb3d 	bl	800394c <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e10c      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e0:	4b6a      	ldr	r3, [pc, #424]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d106      	bne.n	8004302 <HAL_RCC_OscConfig+0x2ea>
 80042f4:	4b64      	ldr	r3, [pc, #400]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f8:	4a63      	ldr	r2, [pc, #396]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004300:	e01c      	b.n	800433c <HAL_RCC_OscConfig+0x324>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b05      	cmp	r3, #5
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0x30c>
 800430a:	4b5f      	ldr	r3, [pc, #380]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430e:	4a5e      	ldr	r2, [pc, #376]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004310:	f043 0304 	orr.w	r3, r3, #4
 8004314:	6713      	str	r3, [r2, #112]	@ 0x70
 8004316:	4b5c      	ldr	r3, [pc, #368]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431a:	4a5b      	ldr	r2, [pc, #364]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6713      	str	r3, [r2, #112]	@ 0x70
 8004322:	e00b      	b.n	800433c <HAL_RCC_OscConfig+0x324>
 8004324:	4b58      	ldr	r3, [pc, #352]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004328:	4a57      	ldr	r2, [pc, #348]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004330:	4b55      	ldr	r3, [pc, #340]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004334:	4a54      	ldr	r2, [pc, #336]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004336:	f023 0304 	bic.w	r3, r3, #4
 800433a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d015      	beq.n	8004370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7ff fb02 	bl	800394c <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434c:	f7ff fafe 	bl	800394c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0cb      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004362:	4b49      	ldr	r3, [pc, #292]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0ee      	beq.n	800434c <HAL_RCC_OscConfig+0x334>
 800436e:	e014      	b.n	800439a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004370:	f7ff faec 	bl	800394c <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004376:	e00a      	b.n	800438e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004378:	f7ff fae8 	bl	800394c <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0b5      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438e:	4b3e      	ldr	r3, [pc, #248]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1ee      	bne.n	8004378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d105      	bne.n	80043ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a0:	4b39      	ldr	r3, [pc, #228]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	4a38      	ldr	r2, [pc, #224]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80a1 	beq.w	80044f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b6:	4b34      	ldr	r3, [pc, #208]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d05c      	beq.n	800447c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d141      	bne.n	800444e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ca:	4b31      	ldr	r3, [pc, #196]	@ (8004490 <HAL_RCC_OscConfig+0x478>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7ff fabc 	bl	800394c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d8:	f7ff fab8 	bl	800394c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e087      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	4b27      	ldr	r3, [pc, #156]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	019b      	lsls	r3, r3, #6
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	3b01      	subs	r3, #1
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	061b      	lsls	r3, r3, #24
 800441a:	491b      	ldr	r1, [pc, #108]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800441c:	4313      	orrs	r3, r2
 800441e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004420:	4b1b      	ldr	r3, [pc, #108]	@ (8004490 <HAL_RCC_OscConfig+0x478>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7ff fa91 	bl	800394c <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442e:	f7ff fa8d 	bl	800394c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e05c      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004440:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x416>
 800444c:	e054      	b.n	80044f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <HAL_RCC_OscConfig+0x478>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7ff fa7a 	bl	800394c <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7ff fa76 	bl	800394c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e045      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x444>
 800447a:	e03d      	b.n	80044f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d107      	bne.n	8004494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e038      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
 8004488:	40023800 	.word	0x40023800
 800448c:	40007000 	.word	0x40007000
 8004490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004494:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <HAL_RCC_OscConfig+0x4ec>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d028      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d121      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d11a      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044c4:	4013      	ands	r3, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d111      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	3b01      	subs	r3, #1
 80044de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800

08004508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0cc      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800451c:	4b68      	ldr	r3, [pc, #416]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d90c      	bls.n	8004544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b65      	ldr	r3, [pc, #404]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b63      	ldr	r3, [pc, #396]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0b8      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d020      	beq.n	8004592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800455c:	4b59      	ldr	r3, [pc, #356]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a58      	ldr	r2, [pc, #352]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004566:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004574:	4b53      	ldr	r3, [pc, #332]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a52      	ldr	r2, [pc, #328]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800457e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004580:	4b50      	ldr	r3, [pc, #320]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	494d      	ldr	r1, [pc, #308]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d044      	beq.n	8004628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b47      	ldr	r3, [pc, #284]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d119      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e07f      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d003      	beq.n	80045c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c6:	4b3f      	ldr	r3, [pc, #252]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e06f      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d6:	4b3b      	ldr	r3, [pc, #236]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e067      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e6:	4b37      	ldr	r3, [pc, #220]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4934      	ldr	r1, [pc, #208]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f8:	f7ff f9a8 	bl	800394c <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7ff f9a4 	bl	800394c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e04f      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	4b2b      	ldr	r3, [pc, #172]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 020c 	and.w	r2, r3, #12
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	429a      	cmp	r2, r3
 8004626:	d1eb      	bne.n	8004600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004628:	4b25      	ldr	r3, [pc, #148]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d20c      	bcs.n	8004650 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004636:	4b22      	ldr	r3, [pc, #136]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463e:	4b20      	ldr	r3, [pc, #128]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e032      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800465c:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4916      	ldr	r1, [pc, #88]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800467a:	4b12      	ldr	r3, [pc, #72]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	490e      	ldr	r1, [pc, #56]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800468e:	f000 f821 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8004692:	4602      	mov	r2, r0
 8004694:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	490a      	ldr	r1, [pc, #40]	@ (80046c8 <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	5ccb      	ldrb	r3, [r1, r3]
 80046a2:	fa22 f303 	lsr.w	r3, r2, r3
 80046a6:	4a09      	ldr	r2, [pc, #36]	@ (80046cc <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046aa:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <HAL_RCC_ClockConfig+0x1c8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff f908 	bl	80038c4 <HAL_InitTick>

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40023c00 	.word	0x40023c00
 80046c4:	40023800 	.word	0x40023800
 80046c8:	0800d4d0 	.word	0x0800d4d0
 80046cc:	20000000 	.word	0x20000000
 80046d0:	20000004 	.word	0x20000004

080046d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d8:	b094      	sub	sp, #80	@ 0x50
 80046da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ec:	4b79      	ldr	r3, [pc, #484]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d00d      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x40>
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	f200 80e1 	bhi.w	80048c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x34>
 8004702:	2b04      	cmp	r3, #4
 8004704:	d003      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0x3a>
 8004706:	e0db      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4b73      	ldr	r3, [pc, #460]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800470a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800470c:	e0db      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800470e:	4b73      	ldr	r3, [pc, #460]	@ (80048dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004710:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004712:	e0d8      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004714:	4b6f      	ldr	r3, [pc, #444]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800471c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471e:	4b6d      	ldr	r3, [pc, #436]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d063      	beq.n	80047f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800472a:	4b6a      	ldr	r3, [pc, #424]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	099b      	lsrs	r3, r3, #6
 8004730:	2200      	movs	r2, #0
 8004732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004734:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473c:	633b      	str	r3, [r7, #48]	@ 0x30
 800473e:	2300      	movs	r3, #0
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
 8004742:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004746:	4622      	mov	r2, r4
 8004748:	462b      	mov	r3, r5
 800474a:	f04f 0000 	mov.w	r0, #0
 800474e:	f04f 0100 	mov.w	r1, #0
 8004752:	0159      	lsls	r1, r3, #5
 8004754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004758:	0150      	lsls	r0, r2, #5
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4621      	mov	r1, r4
 8004760:	1a51      	subs	r1, r2, r1
 8004762:	6139      	str	r1, [r7, #16]
 8004764:	4629      	mov	r1, r5
 8004766:	eb63 0301 	sbc.w	r3, r3, r1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004778:	4659      	mov	r1, fp
 800477a:	018b      	lsls	r3, r1, #6
 800477c:	4651      	mov	r1, sl
 800477e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004782:	4651      	mov	r1, sl
 8004784:	018a      	lsls	r2, r1, #6
 8004786:	4651      	mov	r1, sl
 8004788:	ebb2 0801 	subs.w	r8, r2, r1
 800478c:	4659      	mov	r1, fp
 800478e:	eb63 0901 	sbc.w	r9, r3, r1
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800479e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047a6:	4690      	mov	r8, r2
 80047a8:	4699      	mov	r9, r3
 80047aa:	4623      	mov	r3, r4
 80047ac:	eb18 0303 	adds.w	r3, r8, r3
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	462b      	mov	r3, r5
 80047b4:	eb49 0303 	adc.w	r3, r9, r3
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047c6:	4629      	mov	r1, r5
 80047c8:	024b      	lsls	r3, r1, #9
 80047ca:	4621      	mov	r1, r4
 80047cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047d0:	4621      	mov	r1, r4
 80047d2:	024a      	lsls	r2, r1, #9
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047da:	2200      	movs	r2, #0
 80047dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047e4:	f7fc fa50 	bl	8000c88 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4613      	mov	r3, r2
 80047ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f0:	e058      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f2:	4b38      	ldr	r3, [pc, #224]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	099b      	lsrs	r3, r3, #6
 80047f8:	2200      	movs	r2, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	4611      	mov	r1, r2
 80047fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	2300      	movs	r3, #0
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
 8004808:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800480c:	4642      	mov	r2, r8
 800480e:	464b      	mov	r3, r9
 8004810:	f04f 0000 	mov.w	r0, #0
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	0159      	lsls	r1, r3, #5
 800481a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800481e:	0150      	lsls	r0, r2, #5
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4641      	mov	r1, r8
 8004826:	ebb2 0a01 	subs.w	sl, r2, r1
 800482a:	4649      	mov	r1, r9
 800482c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800483c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004840:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004844:	ebb2 040a 	subs.w	r4, r2, sl
 8004848:	eb63 050b 	sbc.w	r5, r3, fp
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	00eb      	lsls	r3, r5, #3
 8004856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800485a:	00e2      	lsls	r2, r4, #3
 800485c:	4614      	mov	r4, r2
 800485e:	461d      	mov	r5, r3
 8004860:	4643      	mov	r3, r8
 8004862:	18e3      	adds	r3, r4, r3
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	464b      	mov	r3, r9
 8004868:	eb45 0303 	adc.w	r3, r5, r3
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800487a:	4629      	mov	r1, r5
 800487c:	028b      	lsls	r3, r1, #10
 800487e:	4621      	mov	r1, r4
 8004880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004884:	4621      	mov	r1, r4
 8004886:	028a      	lsls	r2, r1, #10
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800488e:	2200      	movs	r2, #0
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	61fa      	str	r2, [r7, #28]
 8004894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004898:	f7fc f9f6 	bl	8000c88 <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4613      	mov	r3, r2
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048a4:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	3301      	adds	r3, #1
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80048b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048be:	e002      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048c0:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3750      	adds	r7, #80	@ 0x50
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	007a1200 	.word	0x007a1200

080048e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e4:	4b03      	ldr	r3, [pc, #12]	@ (80048f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e6:	681b      	ldr	r3, [r3, #0]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000000 	.word	0x20000000

080048f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048fc:	f7ff fff0 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8004900:	4602      	mov	r2, r0
 8004902:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	0a9b      	lsrs	r3, r3, #10
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	4903      	ldr	r1, [pc, #12]	@ (800491c <HAL_RCC_GetPCLK1Freq+0x24>)
 800490e:	5ccb      	ldrb	r3, [r1, r3]
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40023800 	.word	0x40023800
 800491c:	0800d4e0 	.word	0x0800d4e0

08004920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004924:	f7ff ffdc 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8004928:	4602      	mov	r2, r0
 800492a:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	0b5b      	lsrs	r3, r3, #13
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	4903      	ldr	r1, [pc, #12]	@ (8004944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004936:	5ccb      	ldrb	r3, [r1, r3]
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40023800 	.word	0x40023800
 8004944:	0800d4e0 	.word	0x0800d4e0

08004948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e041      	b.n	80049de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fe fd8e 	bl	8003490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	4619      	mov	r1, r3
 8004986:	4610      	mov	r0, r2
 8004988:	f000 fd8c 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d001      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e04e      	b.n	8004a9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	@ (8004aac <HAL_TIM_Base_Start_IT+0xc4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d022      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x80>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2a:	d01d      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x80>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d018      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x80>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x80>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00e      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x80>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004abc <HAL_TIM_Base_Start_IT+0xd4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x80>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a19      	ldr	r2, [pc, #100]	@ (8004ac0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x80>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a18      	ldr	r2, [pc, #96]	@ (8004ac4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d111      	bne.n	8004a8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d010      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	e007      	b.n	8004a9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800
 8004ab8:	40000c00 	.word	0x40000c00
 8004abc:	40010400 	.word	0x40010400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40001800 	.word	0x40001800

08004ac8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e041      	b.n	8004b5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fe fcac 	bl	800344c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f000 fccc 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_TIM_PWM_Start+0x24>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e022      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x6a>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d109      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0x3e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e015      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x6a>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d109      	bne.n	8004bc0 <HAL_TIM_PWM_Start+0x58>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e008      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x6a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e07c      	b.n	8004cd4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_PWM_Start+0x82>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004be8:	e013      	b.n	8004c12 <HAL_TIM_PWM_Start+0xaa>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_PWM_Start+0x92>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bf8:	e00b      	b.n	8004c12 <HAL_TIM_PWM_Start+0xaa>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_PWM_Start+0xa2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c08:	e003      	b.n	8004c12 <HAL_TIM_PWM_Start+0xaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2201      	movs	r2, #1
 8004c18:	6839      	ldr	r1, [r7, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 ff38 	bl	8005a90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2d      	ldr	r2, [pc, #180]	@ (8004cdc <HAL_TIM_PWM_Start+0x174>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <HAL_TIM_PWM_Start+0xcc>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce0 <HAL_TIM_PWM_Start+0x178>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_TIM_PWM_Start+0xd0>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <HAL_TIM_PWM_Start+0xd2>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a22      	ldr	r2, [pc, #136]	@ (8004cdc <HAL_TIM_PWM_Start+0x174>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d022      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c60:	d01d      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce4 <HAL_TIM_PWM_Start+0x17c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce8 <HAL_TIM_PWM_Start+0x180>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cec <HAL_TIM_PWM_Start+0x184>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a16      	ldr	r2, [pc, #88]	@ (8004ce0 <HAL_TIM_PWM_Start+0x178>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a18      	ldr	r2, [pc, #96]	@ (8004cf0 <HAL_TIM_PWM_Start+0x188>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a16      	ldr	r2, [pc, #88]	@ (8004cf4 <HAL_TIM_PWM_Start+0x18c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d111      	bne.n	8004cc2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b06      	cmp	r3, #6
 8004cae:	d010      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc0:	e007      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40010400 	.word	0x40010400
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40001800 	.word	0x40001800

08004cf8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e097      	b.n	8004e3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fe fb4b 	bl	80033bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d3c:	f023 0307 	bic.w	r3, r3, #7
 8004d40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f000 fba9 	bl	80054a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004d98:	f023 030c 	bic.w	r3, r3, #12
 8004d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004da4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	4313      	orrs	r3, r2
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	011a      	lsls	r2, r3, #4
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	031b      	lsls	r3, r3, #12
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004dd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	4313      	orrs	r3, r2
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d110      	bne.n	8004e96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d102      	bne.n	8004e80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e7a:	7b7b      	ldrb	r3, [r7, #13]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d001      	beq.n	8004e84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e069      	b.n	8004f58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e94:	e031      	b.n	8004efa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d110      	bne.n	8004ebe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e9c:	7bbb      	ldrb	r3, [r7, #14]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d102      	bne.n	8004ea8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ea2:	7b3b      	ldrb	r3, [r7, #12]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d001      	beq.n	8004eac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e055      	b.n	8004f58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ebc:	e01d      	b.n	8004efa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d108      	bne.n	8004ed6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ec4:	7bbb      	ldrb	r3, [r7, #14]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d105      	bne.n	8004ed6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eca:	7b7b      	ldrb	r3, [r7, #13]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d102      	bne.n	8004ed6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ed0:	7b3b      	ldrb	r3, [r7, #12]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d001      	beq.n	8004eda <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e03e      	b.n	8004f58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_TIM_Encoder_Start+0xc4>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d008      	beq.n	8004f18 <HAL_TIM_Encoder_Start+0xd4>
 8004f06:	e00f      	b.n	8004f28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fdbd 	bl	8005a90 <TIM_CCxChannelCmd>
      break;
 8004f16:	e016      	b.n	8004f46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	2104      	movs	r1, #4
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fdb5 	bl	8005a90 <TIM_CCxChannelCmd>
      break;
 8004f26:	e00e      	b.n	8004f46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fdad 	bl	8005a90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	2104      	movs	r1, #4
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fda6 	bl	8005a90 <TIM_CCxChannelCmd>
      break;
 8004f44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d020      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01b      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0202 	mvn.w	r2, #2
 8004f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa5b 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa4d 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fa5e 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d020      	beq.n	8005010 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01b      	beq.n	8005010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0204 	mvn.w	r2, #4
 8004fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fa35 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 8004ffc:	e005      	b.n	800500a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa27 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fa38 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d020      	beq.n	800505c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01b      	beq.n	800505c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0208 	mvn.w	r2, #8
 800502c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2204      	movs	r2, #4
 8005032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa0f 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 8005048:	e005      	b.n	8005056 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa01 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fa12 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b00      	cmp	r3, #0
 8005064:	d020      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01b      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0210 	mvn.w	r2, #16
 8005078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2208      	movs	r2, #8
 800507e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f9e9 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 8005094:	e005      	b.n	80050a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f9db 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f9ec 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00c      	beq.n	80050cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0201 	mvn.w	r2, #1
 80050c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fd ff8c 	bl	8002fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00c      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d007      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fd7c 	bl	8005be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800510c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9bd 	bl	800548e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0220 	mvn.w	r2, #32
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fd4e 	bl	8005bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800515a:	2302      	movs	r3, #2
 800515c:	e0ae      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b0c      	cmp	r3, #12
 800516a:	f200 809f 	bhi.w	80052ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800516e:	a201      	add	r2, pc, #4	@ (adr r2, 8005174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	080051a9 	.word	0x080051a9
 8005178:	080052ad 	.word	0x080052ad
 800517c:	080052ad 	.word	0x080052ad
 8005180:	080052ad 	.word	0x080052ad
 8005184:	080051e9 	.word	0x080051e9
 8005188:	080052ad 	.word	0x080052ad
 800518c:	080052ad 	.word	0x080052ad
 8005190:	080052ad 	.word	0x080052ad
 8005194:	0800522b 	.word	0x0800522b
 8005198:	080052ad 	.word	0x080052ad
 800519c:	080052ad 	.word	0x080052ad
 80051a0:	080052ad 	.word	0x080052ad
 80051a4:	0800526b 	.word	0x0800526b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fa24 	bl	80055fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0208 	orr.w	r2, r2, #8
 80051c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0204 	bic.w	r2, r2, #4
 80051d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6999      	ldr	r1, [r3, #24]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	619a      	str	r2, [r3, #24]
      break;
 80051e6:	e064      	b.n	80052b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fa74 	bl	80056dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6999      	ldr	r1, [r3, #24]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	021a      	lsls	r2, r3, #8
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	619a      	str	r2, [r3, #24]
      break;
 8005228:	e043      	b.n	80052b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fac9 	bl	80057c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0208 	orr.w	r2, r2, #8
 8005244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0204 	bic.w	r2, r2, #4
 8005254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69d9      	ldr	r1, [r3, #28]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	61da      	str	r2, [r3, #28]
      break;
 8005268:	e023      	b.n	80052b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fb1d 	bl	80058b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69d9      	ldr	r1, [r3, #28]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	021a      	lsls	r2, r3, #8
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	61da      	str	r2, [r3, #28]
      break;
 80052aa:	e002      	b.n	80052b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	75fb      	strb	r3, [r7, #23]
      break;
 80052b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_TIM_ConfigClockSource+0x1c>
 80052dc:	2302      	movs	r3, #2
 80052de:	e0b4      	b.n	800544a <HAL_TIM_ConfigClockSource+0x186>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005318:	d03e      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0xd4>
 800531a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800531e:	f200 8087 	bhi.w	8005430 <HAL_TIM_ConfigClockSource+0x16c>
 8005322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005326:	f000 8086 	beq.w	8005436 <HAL_TIM_ConfigClockSource+0x172>
 800532a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800532e:	d87f      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x16c>
 8005330:	2b70      	cmp	r3, #112	@ 0x70
 8005332:	d01a      	beq.n	800536a <HAL_TIM_ConfigClockSource+0xa6>
 8005334:	2b70      	cmp	r3, #112	@ 0x70
 8005336:	d87b      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b60      	cmp	r3, #96	@ 0x60
 800533a:	d050      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x11a>
 800533c:	2b60      	cmp	r3, #96	@ 0x60
 800533e:	d877      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b50      	cmp	r3, #80	@ 0x50
 8005342:	d03c      	beq.n	80053be <HAL_TIM_ConfigClockSource+0xfa>
 8005344:	2b50      	cmp	r3, #80	@ 0x50
 8005346:	d873      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b40      	cmp	r3, #64	@ 0x40
 800534a:	d058      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x13a>
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d86f      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b30      	cmp	r3, #48	@ 0x30
 8005352:	d064      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x15a>
 8005354:	2b30      	cmp	r3, #48	@ 0x30
 8005356:	d86b      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b20      	cmp	r3, #32
 800535a:	d060      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x15a>
 800535c:	2b20      	cmp	r3, #32
 800535e:	d867      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d05c      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x15a>
 8005364:	2b10      	cmp	r3, #16
 8005366:	d05a      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x15a>
 8005368:	e062      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800537a:	f000 fb69 	bl	8005a50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800538c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	609a      	str	r2, [r3, #8]
      break;
 8005396:	e04f      	b.n	8005438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053a8:	f000 fb52 	bl	8005a50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053ba:	609a      	str	r2, [r3, #8]
      break;
 80053bc:	e03c      	b.n	8005438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ca:	461a      	mov	r2, r3
 80053cc:	f000 fac6 	bl	800595c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2150      	movs	r1, #80	@ 0x50
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fb1f 	bl	8005a1a <TIM_ITRx_SetConfig>
      break;
 80053dc:	e02c      	b.n	8005438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ea:	461a      	mov	r2, r3
 80053ec:	f000 fae5 	bl	80059ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2160      	movs	r1, #96	@ 0x60
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fb0f 	bl	8005a1a <TIM_ITRx_SetConfig>
      break;
 80053fc:	e01c      	b.n	8005438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800540a:	461a      	mov	r2, r3
 800540c:	f000 faa6 	bl	800595c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2140      	movs	r1, #64	@ 0x40
 8005416:	4618      	mov	r0, r3
 8005418:	f000 faff 	bl	8005a1a <TIM_ITRx_SetConfig>
      break;
 800541c:	e00c      	b.n	8005438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4619      	mov	r1, r3
 8005428:	4610      	mov	r0, r2
 800542a:	f000 faf6 	bl	8005a1a <TIM_ITRx_SetConfig>
      break;
 800542e:	e003      	b.n	8005438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
      break;
 8005434:	e000      	b.n	8005438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005448:	7bfb      	ldrb	r3, [r7, #15]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a46      	ldr	r2, [pc, #280]	@ (80055d0 <TIM_Base_SetConfig+0x12c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c2:	d00f      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a43      	ldr	r2, [pc, #268]	@ (80055d4 <TIM_Base_SetConfig+0x130>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a42      	ldr	r2, [pc, #264]	@ (80055d8 <TIM_Base_SetConfig+0x134>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a41      	ldr	r2, [pc, #260]	@ (80055dc <TIM_Base_SetConfig+0x138>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a40      	ldr	r2, [pc, #256]	@ (80055e0 <TIM_Base_SetConfig+0x13c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d108      	bne.n	80054f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a35      	ldr	r2, [pc, #212]	@ (80055d0 <TIM_Base_SetConfig+0x12c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d02b      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005504:	d027      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a32      	ldr	r2, [pc, #200]	@ (80055d4 <TIM_Base_SetConfig+0x130>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d023      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a31      	ldr	r2, [pc, #196]	@ (80055d8 <TIM_Base_SetConfig+0x134>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01f      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a30      	ldr	r2, [pc, #192]	@ (80055dc <TIM_Base_SetConfig+0x138>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01b      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2f      	ldr	r2, [pc, #188]	@ (80055e0 <TIM_Base_SetConfig+0x13c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d017      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2e      	ldr	r2, [pc, #184]	@ (80055e4 <TIM_Base_SetConfig+0x140>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a2d      	ldr	r2, [pc, #180]	@ (80055e8 <TIM_Base_SetConfig+0x144>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00f      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2c      	ldr	r2, [pc, #176]	@ (80055ec <TIM_Base_SetConfig+0x148>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00b      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a2b      	ldr	r2, [pc, #172]	@ (80055f0 <TIM_Base_SetConfig+0x14c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d007      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2a      	ldr	r2, [pc, #168]	@ (80055f4 <TIM_Base_SetConfig+0x150>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a29      	ldr	r2, [pc, #164]	@ (80055f8 <TIM_Base_SetConfig+0x154>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d108      	bne.n	8005568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800555c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a10      	ldr	r2, [pc, #64]	@ (80055d0 <TIM_Base_SetConfig+0x12c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0xf8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a12      	ldr	r2, [pc, #72]	@ (80055e0 <TIM_Base_SetConfig+0x13c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d103      	bne.n	80055a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f023 0201 	bic.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	611a      	str	r2, [r3, #16]
  }
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800
 80055dc:	40000c00 	.word	0x40000c00
 80055e0:	40010400 	.word	0x40010400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	40014400 	.word	0x40014400
 80055ec:	40014800 	.word	0x40014800
 80055f0:	40001800 	.word	0x40001800
 80055f4:	40001c00 	.word	0x40001c00
 80055f8:	40002000 	.word	0x40002000

080055fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f023 0201 	bic.w	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800562a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f023 0302 	bic.w	r3, r3, #2
 8005644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a20      	ldr	r2, [pc, #128]	@ (80056d4 <TIM_OC1_SetConfig+0xd8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_OC1_SetConfig+0x64>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a1f      	ldr	r2, [pc, #124]	@ (80056d8 <TIM_OC1_SetConfig+0xdc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d10c      	bne.n	800567a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f023 0308 	bic.w	r3, r3, #8
 8005666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f023 0304 	bic.w	r3, r3, #4
 8005678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a15      	ldr	r2, [pc, #84]	@ (80056d4 <TIM_OC1_SetConfig+0xd8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d003      	beq.n	800568a <TIM_OC1_SetConfig+0x8e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a14      	ldr	r2, [pc, #80]	@ (80056d8 <TIM_OC1_SetConfig+0xdc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d111      	bne.n	80056ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	621a      	str	r2, [r3, #32]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40010400 	.word	0x40010400

080056dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f023 0210 	bic.w	r2, r3, #16
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	021b      	lsls	r3, r3, #8
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f023 0320 	bic.w	r3, r3, #32
 8005726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a22      	ldr	r2, [pc, #136]	@ (80057c0 <TIM_OC2_SetConfig+0xe4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC2_SetConfig+0x68>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a21      	ldr	r2, [pc, #132]	@ (80057c4 <TIM_OC2_SetConfig+0xe8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d10d      	bne.n	8005760 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800574a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800575e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a17      	ldr	r2, [pc, #92]	@ (80057c0 <TIM_OC2_SetConfig+0xe4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d003      	beq.n	8005770 <TIM_OC2_SetConfig+0x94>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a16      	ldr	r2, [pc, #88]	@ (80057c4 <TIM_OC2_SetConfig+0xe8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d113      	bne.n	8005798 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800577e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40010400 	.word	0x40010400

080057c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0303 	bic.w	r3, r3, #3
 80057fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a21      	ldr	r2, [pc, #132]	@ (80058a8 <TIM_OC3_SetConfig+0xe0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_OC3_SetConfig+0x66>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a20      	ldr	r2, [pc, #128]	@ (80058ac <TIM_OC3_SetConfig+0xe4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d10d      	bne.n	800584a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a16      	ldr	r2, [pc, #88]	@ (80058a8 <TIM_OC3_SetConfig+0xe0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <TIM_OC3_SetConfig+0x92>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a15      	ldr	r2, [pc, #84]	@ (80058ac <TIM_OC3_SetConfig+0xe4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d113      	bne.n	8005882 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	40010000 	.word	0x40010000
 80058ac:	40010400 	.word	0x40010400

080058b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	031b      	lsls	r3, r3, #12
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a12      	ldr	r2, [pc, #72]	@ (8005954 <TIM_OC4_SetConfig+0xa4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_OC4_SetConfig+0x68>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a11      	ldr	r2, [pc, #68]	@ (8005958 <TIM_OC4_SetConfig+0xa8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d109      	bne.n	800592c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800591e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	019b      	lsls	r3, r3, #6
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40010000 	.word	0x40010000
 8005958:	40010400 	.word	0x40010400

0800595c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f023 0201 	bic.w	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f023 030a 	bic.w	r3, r3, #10
 8005998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	621a      	str	r2, [r3, #32]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b087      	sub	sp, #28
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f023 0210 	bic.w	r2, r3, #16
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	031b      	lsls	r3, r3, #12
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f043 0307 	orr.w	r3, r3, #7
 8005a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	609a      	str	r2, [r3, #8]
}
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	021a      	lsls	r2, r3, #8
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	609a      	str	r2, [r3, #8]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1a      	ldr	r2, [r3, #32]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e05a      	b.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a21      	ldr	r2, [pc, #132]	@ (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d022      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b40:	d01d      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1d      	ldr	r2, [pc, #116]	@ (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d018      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00e      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a18      	ldr	r2, [pc, #96]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d009      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d004      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a15      	ldr	r2, [pc, #84]	@ (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d10c      	bne.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00
 8005bc8:	40010400 	.word	0x40010400
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40001800 	.word	0x40001800

08005bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e042      	b.n	8005c94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fd fc96 	bl	8003554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	@ 0x24
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fdbd 	bl	80067c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695a      	ldr	r2, [r3, #20]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08a      	sub	sp, #40	@ 0x28
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d175      	bne.n	8005da8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_UART_Transmit+0x2c>
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e06e      	b.n	8005daa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2221      	movs	r2, #33	@ 0x21
 8005cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cda:	f7fd fe37 	bl	800394c <HAL_GetTick>
 8005cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf4:	d108      	bne.n	8005d08 <HAL_UART_Transmit+0x6c>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	e003      	b.n	8005d10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d10:	e02e      	b.n	8005d70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2180      	movs	r1, #128	@ 0x80
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fb1f 	bl	8006360 <UART_WaitOnFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e03a      	b.n	8005daa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10b      	bne.n	8005d52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	e007      	b.n	8005d62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	781a      	ldrb	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1cb      	bne.n	8005d12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2200      	movs	r2, #0
 8005d82:	2140      	movs	r1, #64	@ 0x40
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 faeb 	bl	8006360 <UART_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e006      	b.n	8005daa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e000      	b.n	8005daa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
  }
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d112      	bne.n	8005df2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <HAL_UART_Receive_IT+0x26>
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e00b      	b.n	8005df4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	461a      	mov	r2, r3
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fb12 	bl	8006412 <UART_Start_Receive_IT>
 8005dee:	4603      	mov	r3, r0
 8005df0:	e000      	b.n	8005df4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
  }
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b0ba      	sub	sp, #232	@ 0xe8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10f      	bne.n	8005e62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <HAL_UART_IRQHandler+0x66>
 8005e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fbf2 	bl	8006644 <UART_Receive_IT>
      return;
 8005e60:	e25b      	b.n	800631a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80de 	beq.w	8006028 <HAL_UART_IRQHandler+0x22c>
 8005e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 80d1 	beq.w	8006028 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <HAL_UART_IRQHandler+0xae>
 8005e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea2:	f043 0201 	orr.w	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <HAL_UART_IRQHandler+0xd2>
 8005eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec6:	f043 0202 	orr.w	r2, r3, #2
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00b      	beq.n	8005ef2 <HAL_UART_IRQHandler+0xf6>
 8005eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eea:	f043 0204 	orr.w	r2, r3, #4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d011      	beq.n	8005f22 <HAL_UART_IRQHandler+0x126>
 8005efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d105      	bne.n	8005f16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	f043 0208 	orr.w	r2, r3, #8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 81f2 	beq.w	8006310 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <HAL_UART_IRQHandler+0x14e>
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fb7d 	bl	8006644 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f54:	2b40      	cmp	r3, #64	@ 0x40
 8005f56:	bf0c      	ite	eq
 8005f58:	2301      	moveq	r3, #1
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d103      	bne.n	8005f76 <HAL_UART_IRQHandler+0x17a>
 8005f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d04f      	beq.n	8006016 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fa85 	bl	8006486 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f86:	2b40      	cmp	r3, #64	@ 0x40
 8005f88:	d141      	bne.n	800600e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3314      	adds	r3, #20
 8005f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3314      	adds	r3, #20
 8005fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1d9      	bne.n	8005f8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d013      	beq.n	8006006 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80061dc <HAL_UART_IRQHandler+0x3e0>)
 8005fe4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fd fe3b 	bl	8003c66 <HAL_DMA_Abort_IT>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d016      	beq.n	8006024 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006000:	4610      	mov	r0, r2
 8006002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006004:	e00e      	b.n	8006024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f994 	bl	8006334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600c:	e00a      	b.n	8006024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f990 	bl	8006334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006014:	e006      	b.n	8006024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f98c 	bl	8006334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006022:	e175      	b.n	8006310 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006024:	bf00      	nop
    return;
 8006026:	e173      	b.n	8006310 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602c:	2b01      	cmp	r3, #1
 800602e:	f040 814f 	bne.w	80062d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006036:	f003 0310 	and.w	r3, r3, #16
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 8148 	beq.w	80062d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8141 	beq.w	80062d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800604e:	2300      	movs	r3, #0
 8006050:	60bb      	str	r3, [r7, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606e:	2b40      	cmp	r3, #64	@ 0x40
 8006070:	f040 80b6 	bne.w	80061e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8145 	beq.w	8006314 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800608e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006092:	429a      	cmp	r2, r3
 8006094:	f080 813e 	bcs.w	8006314 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800609e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060aa:	f000 8088 	beq.w	80061be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80060da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1d9      	bne.n	80060ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3314      	adds	r3, #20
 8006100:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800610a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800610c:	f023 0301 	bic.w	r3, r3, #1
 8006110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3314      	adds	r3, #20
 800611a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800611e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006122:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006126:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e1      	bne.n	80060fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3314      	adds	r3, #20
 800613c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800614c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800615a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800615c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006160:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e3      	bne.n	8006136 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800618c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80061a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80061a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e3      	bne.n	800617c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fd fce4 	bl	8003b86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2202      	movs	r2, #2
 80061c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f8b7 	bl	8006348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061da:	e09b      	b.n	8006314 <HAL_UART_IRQHandler+0x518>
 80061dc:	0800654d 	.word	0x0800654d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 808e 	beq.w	8006318 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8089 	beq.w	8006318 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800621c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800622a:	647a      	str	r2, [r7, #68]	@ 0x44
 800622c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3314      	adds	r3, #20
 8006244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	623b      	str	r3, [r7, #32]
   return(result);
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3314      	adds	r3, #20
 800625e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006262:	633a      	str	r2, [r7, #48]	@ 0x30
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e3      	bne.n	800623e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	60fb      	str	r3, [r7, #12]
   return(result);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0310 	bic.w	r3, r3, #16
 800629a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80062a8:	61fa      	str	r2, [r7, #28]
 80062aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	617b      	str	r3, [r7, #20]
   return(result);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e3      	bne.n	8006284 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f83d 	bl	8006348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062ce:	e023      	b.n	8006318 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d009      	beq.n	80062f0 <HAL_UART_IRQHandler+0x4f4>
 80062dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f943 	bl	8006574 <UART_Transmit_IT>
    return;
 80062ee:	e014      	b.n	800631a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00e      	beq.n	800631a <HAL_UART_IRQHandler+0x51e>
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f983 	bl	8006614 <UART_EndTransmit_IT>
    return;
 800630e:	e004      	b.n	800631a <HAL_UART_IRQHandler+0x51e>
    return;
 8006310:	bf00      	nop
 8006312:	e002      	b.n	800631a <HAL_UART_IRQHandler+0x51e>
      return;
 8006314:	bf00      	nop
 8006316:	e000      	b.n	800631a <HAL_UART_IRQHandler+0x51e>
      return;
 8006318:	bf00      	nop
  }
}
 800631a:	37e8      	adds	r7, #232	@ 0xe8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006370:	e03b      	b.n	80063ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006378:	d037      	beq.n	80063ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637a:	f7fd fae7 	bl	800394c <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	6a3a      	ldr	r2, [r7, #32]
 8006386:	429a      	cmp	r2, r3
 8006388:	d302      	bcc.n	8006390 <UART_WaitOnFlagUntilTimeout+0x30>
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e03a      	b.n	800640a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d023      	beq.n	80063ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b80      	cmp	r3, #128	@ 0x80
 80063a6:	d020      	beq.n	80063ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b40      	cmp	r3, #64	@ 0x40
 80063ac:	d01d      	beq.n	80063ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d116      	bne.n	80063ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f857 	bl	8006486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2208      	movs	r2, #8
 80063dc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e00f      	b.n	800640a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4013      	ands	r3, r2
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	bf0c      	ite	eq
 80063fa:	2301      	moveq	r3, #1
 80063fc:	2300      	movne	r3, #0
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	429a      	cmp	r2, r3
 8006406:	d0b4      	beq.n	8006372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	4613      	mov	r3, r2
 800641e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2222      	movs	r2, #34	@ 0x22
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006456:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695a      	ldr	r2, [r3, #20]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0220 	orr.w	r2, r2, #32
 8006476:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006486:	b480      	push	{r7}
 8006488:	b095      	sub	sp, #84	@ 0x54
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	330c      	adds	r3, #12
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800649e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	330c      	adds	r3, #12
 80064ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80064b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e5      	bne.n	800648e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3314      	adds	r3, #20
 80064c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	f023 0301 	bic.w	r3, r3, #1
 80064d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3314      	adds	r3, #20
 80064e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e5      	bne.n	80064c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d119      	bne.n	8006532 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	60bb      	str	r3, [r7, #8]
   return(result);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f023 0310 	bic.w	r3, r3, #16
 8006514:	647b      	str	r3, [r7, #68]	@ 0x44
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	330c      	adds	r3, #12
 800651c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800651e:	61ba      	str	r2, [r7, #24]
 8006520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6979      	ldr	r1, [r7, #20]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	613b      	str	r3, [r7, #16]
   return(result);
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e5      	bne.n	80064fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006540:	bf00      	nop
 8006542:	3754      	adds	r7, #84	@ 0x54
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff fee4 	bl	8006334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800656c:	bf00      	nop
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b21      	cmp	r3, #33	@ 0x21
 8006586:	d13e      	bne.n	8006606 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006590:	d114      	bne.n	80065bc <UART_Transmit_IT+0x48>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d110      	bne.n	80065bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	1c9a      	adds	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	621a      	str	r2, [r3, #32]
 80065ba:	e008      	b.n	80065ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	1c59      	adds	r1, r3, #1
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6211      	str	r1, [r2, #32]
 80065c6:	781a      	ldrb	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	4619      	mov	r1, r3
 80065dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10f      	bne.n	8006602 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006600:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	e000      	b.n	8006608 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006606:	2302      	movs	r3, #2
  }
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800662a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff fe73 	bl	8006320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	@ 0x30
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b22      	cmp	r3, #34	@ 0x22
 8006656:	f040 80ae 	bne.w	80067b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006662:	d117      	bne.n	8006694 <UART_Receive_IT+0x50>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d113      	bne.n	8006694 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006674:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006682:	b29a      	uxth	r2, r3
 8006684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006686:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668c:	1c9a      	adds	r2, r3, #2
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	629a      	str	r2, [r3, #40]	@ 0x28
 8006692:	e026      	b.n	80066e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006698:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800669a:	2300      	movs	r3, #0
 800669c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a6:	d007      	beq.n	80066b8 <UART_Receive_IT+0x74>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <UART_Receive_IT+0x82>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	e008      	b.n	80066d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	4619      	mov	r1, r3
 80066f0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d15d      	bne.n	80067b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0220 	bic.w	r2, r2, #32
 8006704:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006714:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695a      	ldr	r2, [r3, #20]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006738:	2b01      	cmp	r3, #1
 800673a:	d135      	bne.n	80067a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	613b      	str	r3, [r7, #16]
   return(result);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f023 0310 	bic.w	r3, r3, #16
 8006758:	627b      	str	r3, [r7, #36]	@ 0x24
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006762:	623a      	str	r2, [r7, #32]
 8006764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	69f9      	ldr	r1, [r7, #28]
 8006768:	6a3a      	ldr	r2, [r7, #32]
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e5      	bne.n	8006742 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b10      	cmp	r3, #16
 8006782:	d10a      	bne.n	800679a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff fdd1 	bl	8006348 <HAL_UARTEx_RxEventCallback>
 80067a6:	e002      	b.n	80067ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7fc fd99 	bl	80032e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e002      	b.n	80067b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e000      	b.n	80067b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
  }
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3730      	adds	r7, #48	@ 0x30
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067c4:	b0c0      	sub	sp, #256	@ 0x100
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067dc:	68d9      	ldr	r1, [r3, #12]
 80067de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	ea40 0301 	orr.w	r3, r0, r1
 80067e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	431a      	orrs	r2, r3
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006818:	f021 010c 	bic.w	r1, r1, #12
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006826:	430b      	orrs	r3, r1
 8006828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800682a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800683a:	6999      	ldr	r1, [r3, #24]
 800683c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	ea40 0301 	orr.w	r3, r0, r1
 8006846:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	4b8f      	ldr	r3, [pc, #572]	@ (8006a8c <UART_SetConfig+0x2cc>)
 8006850:	429a      	cmp	r2, r3
 8006852:	d005      	beq.n	8006860 <UART_SetConfig+0xa0>
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b8d      	ldr	r3, [pc, #564]	@ (8006a90 <UART_SetConfig+0x2d0>)
 800685c:	429a      	cmp	r2, r3
 800685e:	d104      	bne.n	800686a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006860:	f7fe f85e 	bl	8004920 <HAL_RCC_GetPCLK2Freq>
 8006864:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006868:	e003      	b.n	8006872 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800686a:	f7fe f845 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 800686e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800687c:	f040 810c 	bne.w	8006a98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006884:	2200      	movs	r2, #0
 8006886:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800688a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800688e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006892:	4622      	mov	r2, r4
 8006894:	462b      	mov	r3, r5
 8006896:	1891      	adds	r1, r2, r2
 8006898:	65b9      	str	r1, [r7, #88]	@ 0x58
 800689a:	415b      	adcs	r3, r3
 800689c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800689e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80068a2:	4621      	mov	r1, r4
 80068a4:	eb12 0801 	adds.w	r8, r2, r1
 80068a8:	4629      	mov	r1, r5
 80068aa:	eb43 0901 	adc.w	r9, r3, r1
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068c2:	4690      	mov	r8, r2
 80068c4:	4699      	mov	r9, r3
 80068c6:	4623      	mov	r3, r4
 80068c8:	eb18 0303 	adds.w	r3, r8, r3
 80068cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068d0:	462b      	mov	r3, r5
 80068d2:	eb49 0303 	adc.w	r3, r9, r3
 80068d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068ee:	460b      	mov	r3, r1
 80068f0:	18db      	adds	r3, r3, r3
 80068f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80068f4:	4613      	mov	r3, r2
 80068f6:	eb42 0303 	adc.w	r3, r2, r3
 80068fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80068fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006900:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006904:	f7fa f9c0 	bl	8000c88 <__aeabi_uldivmod>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4b61      	ldr	r3, [pc, #388]	@ (8006a94 <UART_SetConfig+0x2d4>)
 800690e:	fba3 2302 	umull	r2, r3, r3, r2
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	011c      	lsls	r4, r3, #4
 8006916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800691a:	2200      	movs	r2, #0
 800691c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006920:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006924:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006928:	4642      	mov	r2, r8
 800692a:	464b      	mov	r3, r9
 800692c:	1891      	adds	r1, r2, r2
 800692e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006930:	415b      	adcs	r3, r3
 8006932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006938:	4641      	mov	r1, r8
 800693a:	eb12 0a01 	adds.w	sl, r2, r1
 800693e:	4649      	mov	r1, r9
 8006940:	eb43 0b01 	adc.w	fp, r3, r1
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006958:	4692      	mov	sl, r2
 800695a:	469b      	mov	fp, r3
 800695c:	4643      	mov	r3, r8
 800695e:	eb1a 0303 	adds.w	r3, sl, r3
 8006962:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006966:	464b      	mov	r3, r9
 8006968:	eb4b 0303 	adc.w	r3, fp, r3
 800696c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800697c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006984:	460b      	mov	r3, r1
 8006986:	18db      	adds	r3, r3, r3
 8006988:	643b      	str	r3, [r7, #64]	@ 0x40
 800698a:	4613      	mov	r3, r2
 800698c:	eb42 0303 	adc.w	r3, r2, r3
 8006990:	647b      	str	r3, [r7, #68]	@ 0x44
 8006992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006996:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800699a:	f7fa f975 	bl	8000c88 <__aeabi_uldivmod>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4611      	mov	r1, r2
 80069a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006a94 <UART_SetConfig+0x2d4>)
 80069a6:	fba3 2301 	umull	r2, r3, r3, r1
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	2264      	movs	r2, #100	@ 0x64
 80069ae:	fb02 f303 	mul.w	r3, r2, r3
 80069b2:	1acb      	subs	r3, r1, r3
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80069ba:	4b36      	ldr	r3, [pc, #216]	@ (8006a94 <UART_SetConfig+0x2d4>)
 80069bc:	fba3 2302 	umull	r2, r3, r3, r2
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069c8:	441c      	add	r4, r3
 80069ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80069d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	1891      	adds	r1, r2, r2
 80069e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069e4:	415b      	adcs	r3, r3
 80069e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069ec:	4641      	mov	r1, r8
 80069ee:	1851      	adds	r1, r2, r1
 80069f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80069f2:	4649      	mov	r1, r9
 80069f4:	414b      	adcs	r3, r1
 80069f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a04:	4659      	mov	r1, fp
 8006a06:	00cb      	lsls	r3, r1, #3
 8006a08:	4651      	mov	r1, sl
 8006a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a0e:	4651      	mov	r1, sl
 8006a10:	00ca      	lsls	r2, r1, #3
 8006a12:	4610      	mov	r0, r2
 8006a14:	4619      	mov	r1, r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	4642      	mov	r2, r8
 8006a1a:	189b      	adds	r3, r3, r2
 8006a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a20:	464b      	mov	r3, r9
 8006a22:	460a      	mov	r2, r1
 8006a24:	eb42 0303 	adc.w	r3, r2, r3
 8006a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a40:	460b      	mov	r3, r1
 8006a42:	18db      	adds	r3, r3, r3
 8006a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a46:	4613      	mov	r3, r2
 8006a48:	eb42 0303 	adc.w	r3, r2, r3
 8006a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a56:	f7fa f917 	bl	8000c88 <__aeabi_uldivmod>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <UART_SetConfig+0x2d4>)
 8006a60:	fba3 1302 	umull	r1, r3, r3, r2
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	2164      	movs	r1, #100	@ 0x64
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	3332      	adds	r3, #50	@ 0x32
 8006a72:	4a08      	ldr	r2, [pc, #32]	@ (8006a94 <UART_SetConfig+0x2d4>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	f003 0207 	and.w	r2, r3, #7
 8006a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4422      	add	r2, r4
 8006a86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a88:	e106      	b.n	8006c98 <UART_SetConfig+0x4d8>
 8006a8a:	bf00      	nop
 8006a8c:	40011000 	.word	0x40011000
 8006a90:	40011400 	.word	0x40011400
 8006a94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006aa2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006aa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006aaa:	4642      	mov	r2, r8
 8006aac:	464b      	mov	r3, r9
 8006aae:	1891      	adds	r1, r2, r2
 8006ab0:	6239      	str	r1, [r7, #32]
 8006ab2:	415b      	adcs	r3, r3
 8006ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aba:	4641      	mov	r1, r8
 8006abc:	1854      	adds	r4, r2, r1
 8006abe:	4649      	mov	r1, r9
 8006ac0:	eb43 0501 	adc.w	r5, r3, r1
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	00eb      	lsls	r3, r5, #3
 8006ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ad2:	00e2      	lsls	r2, r4, #3
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	4643      	mov	r3, r8
 8006ada:	18e3      	adds	r3, r4, r3
 8006adc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	eb45 0303 	adc.w	r3, r5, r3
 8006ae6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006af6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b06:	4629      	mov	r1, r5
 8006b08:	008b      	lsls	r3, r1, #2
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b10:	4621      	mov	r1, r4
 8006b12:	008a      	lsls	r2, r1, #2
 8006b14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b18:	f7fa f8b6 	bl	8000c88 <__aeabi_uldivmod>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4b60      	ldr	r3, [pc, #384]	@ (8006ca4 <UART_SetConfig+0x4e4>)
 8006b22:	fba3 2302 	umull	r2, r3, r3, r2
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	011c      	lsls	r4, r3, #4
 8006b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	464b      	mov	r3, r9
 8006b40:	1891      	adds	r1, r2, r2
 8006b42:	61b9      	str	r1, [r7, #24]
 8006b44:	415b      	adcs	r3, r3
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	1851      	adds	r1, r2, r1
 8006b50:	6139      	str	r1, [r7, #16]
 8006b52:	4649      	mov	r1, r9
 8006b54:	414b      	adcs	r3, r1
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b64:	4659      	mov	r1, fp
 8006b66:	00cb      	lsls	r3, r1, #3
 8006b68:	4651      	mov	r1, sl
 8006b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b6e:	4651      	mov	r1, sl
 8006b70:	00ca      	lsls	r2, r1, #3
 8006b72:	4610      	mov	r0, r2
 8006b74:	4619      	mov	r1, r3
 8006b76:	4603      	mov	r3, r0
 8006b78:	4642      	mov	r2, r8
 8006b7a:	189b      	adds	r3, r3, r2
 8006b7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b80:	464b      	mov	r3, r9
 8006b82:	460a      	mov	r2, r1
 8006b84:	eb42 0303 	adc.w	r3, r2, r3
 8006b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	008b      	lsls	r3, r1, #2
 8006ba8:	4641      	mov	r1, r8
 8006baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bae:	4641      	mov	r1, r8
 8006bb0:	008a      	lsls	r2, r1, #2
 8006bb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006bb6:	f7fa f867 	bl	8000c88 <__aeabi_uldivmod>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4b38      	ldr	r3, [pc, #224]	@ (8006ca4 <UART_SetConfig+0x4e4>)
 8006bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	2264      	movs	r2, #100	@ 0x64
 8006bca:	fb02 f303 	mul.w	r3, r2, r3
 8006bce:	1acb      	subs	r3, r1, r3
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	3332      	adds	r3, #50	@ 0x32
 8006bd4:	4a33      	ldr	r2, [pc, #204]	@ (8006ca4 <UART_SetConfig+0x4e4>)
 8006bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006be0:	441c      	add	r4, r3
 8006be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006be6:	2200      	movs	r2, #0
 8006be8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bea:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	1891      	adds	r1, r2, r2
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	415b      	adcs	r3, r3
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c00:	4641      	mov	r1, r8
 8006c02:	1851      	adds	r1, r2, r1
 8006c04:	6039      	str	r1, [r7, #0]
 8006c06:	4649      	mov	r1, r9
 8006c08:	414b      	adcs	r3, r1
 8006c0a:	607b      	str	r3, [r7, #4]
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c18:	4659      	mov	r1, fp
 8006c1a:	00cb      	lsls	r3, r1, #3
 8006c1c:	4651      	mov	r1, sl
 8006c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c22:	4651      	mov	r1, sl
 8006c24:	00ca      	lsls	r2, r1, #3
 8006c26:	4610      	mov	r0, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	189b      	adds	r3, r3, r2
 8006c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c32:	464b      	mov	r3, r9
 8006c34:	460a      	mov	r2, r1
 8006c36:	eb42 0303 	adc.w	r3, r2, r3
 8006c3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c46:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	f04f 0300 	mov.w	r3, #0
 8006c50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c54:	4649      	mov	r1, r9
 8006c56:	008b      	lsls	r3, r1, #2
 8006c58:	4641      	mov	r1, r8
 8006c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c5e:	4641      	mov	r1, r8
 8006c60:	008a      	lsls	r2, r1, #2
 8006c62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c66:	f7fa f80f 	bl	8000c88 <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca4 <UART_SetConfig+0x4e4>)
 8006c70:	fba3 1302 	umull	r1, r3, r3, r2
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	2164      	movs	r1, #100	@ 0x64
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	3332      	adds	r3, #50	@ 0x32
 8006c82:	4a08      	ldr	r2, [pc, #32]	@ (8006ca4 <UART_SetConfig+0x4e4>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	f003 020f 	and.w	r2, r3, #15
 8006c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4422      	add	r2, r4
 8006c96:	609a      	str	r2, [r3, #8]
}
 8006c98:	bf00      	nop
 8006c9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ca4:	51eb851f 	.word	0x51eb851f

08006ca8 <atof>:
 8006ca8:	2100      	movs	r1, #0
 8006caa:	f000 be0b 	b.w	80078c4 <strtod>

08006cae <sulp>:
 8006cae:	b570      	push	{r4, r5, r6, lr}
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	460d      	mov	r5, r1
 8006cb4:	ec45 4b10 	vmov	d0, r4, r5
 8006cb8:	4616      	mov	r6, r2
 8006cba:	f003 fcf9 	bl	800a6b0 <__ulp>
 8006cbe:	ec51 0b10 	vmov	r0, r1, d0
 8006cc2:	b17e      	cbz	r6, 8006ce4 <sulp+0x36>
 8006cc4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd09      	ble.n	8006ce4 <sulp+0x36>
 8006cd0:	051b      	lsls	r3, r3, #20
 8006cd2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006cd6:	2400      	movs	r4, #0
 8006cd8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006cdc:	4622      	mov	r2, r4
 8006cde:	462b      	mov	r3, r5
 8006ce0:	f7f9 fc8a 	bl	80005f8 <__aeabi_dmul>
 8006ce4:	ec41 0b10 	vmov	d0, r0, r1
 8006ce8:	bd70      	pop	{r4, r5, r6, pc}
 8006cea:	0000      	movs	r0, r0
 8006cec:	0000      	movs	r0, r0
	...

08006cf0 <_strtod_l>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	b09f      	sub	sp, #124	@ 0x7c
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	921a      	str	r2, [sp, #104]	@ 0x68
 8006cfe:	9005      	str	r0, [sp, #20]
 8006d00:	f04f 0a00 	mov.w	sl, #0
 8006d04:	f04f 0b00 	mov.w	fp, #0
 8006d08:	460a      	mov	r2, r1
 8006d0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d0c:	7811      	ldrb	r1, [r2, #0]
 8006d0e:	292b      	cmp	r1, #43	@ 0x2b
 8006d10:	d04a      	beq.n	8006da8 <_strtod_l+0xb8>
 8006d12:	d838      	bhi.n	8006d86 <_strtod_l+0x96>
 8006d14:	290d      	cmp	r1, #13
 8006d16:	d832      	bhi.n	8006d7e <_strtod_l+0x8e>
 8006d18:	2908      	cmp	r1, #8
 8006d1a:	d832      	bhi.n	8006d82 <_strtod_l+0x92>
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	d03b      	beq.n	8006d98 <_strtod_l+0xa8>
 8006d20:	2200      	movs	r2, #0
 8006d22:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006d24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d26:	782a      	ldrb	r2, [r5, #0]
 8006d28:	2a30      	cmp	r2, #48	@ 0x30
 8006d2a:	f040 80b3 	bne.w	8006e94 <_strtod_l+0x1a4>
 8006d2e:	786a      	ldrb	r2, [r5, #1]
 8006d30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d34:	2a58      	cmp	r2, #88	@ 0x58
 8006d36:	d16e      	bne.n	8006e16 <_strtod_l+0x126>
 8006d38:	9302      	str	r3, [sp, #8]
 8006d3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	4a8e      	ldr	r2, [pc, #568]	@ (8006f7c <_strtod_l+0x28c>)
 8006d44:	9805      	ldr	r0, [sp, #20]
 8006d46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d48:	a919      	add	r1, sp, #100	@ 0x64
 8006d4a:	f002 fda3 	bl	8009894 <__gethex>
 8006d4e:	f010 060f 	ands.w	r6, r0, #15
 8006d52:	4604      	mov	r4, r0
 8006d54:	d005      	beq.n	8006d62 <_strtod_l+0x72>
 8006d56:	2e06      	cmp	r6, #6
 8006d58:	d128      	bne.n	8006dac <_strtod_l+0xbc>
 8006d5a:	3501      	adds	r5, #1
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006d60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f040 858e 	bne.w	8007886 <_strtod_l+0xb96>
 8006d6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d6c:	b1cb      	cbz	r3, 8006da2 <_strtod_l+0xb2>
 8006d6e:	4652      	mov	r2, sl
 8006d70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006d74:	ec43 2b10 	vmov	d0, r2, r3
 8006d78:	b01f      	add	sp, #124	@ 0x7c
 8006d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7e:	2920      	cmp	r1, #32
 8006d80:	d1ce      	bne.n	8006d20 <_strtod_l+0x30>
 8006d82:	3201      	adds	r2, #1
 8006d84:	e7c1      	b.n	8006d0a <_strtod_l+0x1a>
 8006d86:	292d      	cmp	r1, #45	@ 0x2d
 8006d88:	d1ca      	bne.n	8006d20 <_strtod_l+0x30>
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006d8e:	1c51      	adds	r1, r2, #1
 8006d90:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d92:	7852      	ldrb	r2, [r2, #1]
 8006d94:	2a00      	cmp	r2, #0
 8006d96:	d1c5      	bne.n	8006d24 <_strtod_l+0x34>
 8006d98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f040 8570 	bne.w	8007882 <_strtod_l+0xb92>
 8006da2:	4652      	mov	r2, sl
 8006da4:	465b      	mov	r3, fp
 8006da6:	e7e5      	b.n	8006d74 <_strtod_l+0x84>
 8006da8:	2100      	movs	r1, #0
 8006daa:	e7ef      	b.n	8006d8c <_strtod_l+0x9c>
 8006dac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006dae:	b13a      	cbz	r2, 8006dc0 <_strtod_l+0xd0>
 8006db0:	2135      	movs	r1, #53	@ 0x35
 8006db2:	a81c      	add	r0, sp, #112	@ 0x70
 8006db4:	f003 fd76 	bl	800a8a4 <__copybits>
 8006db8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dba:	9805      	ldr	r0, [sp, #20]
 8006dbc:	f003 f944 	bl	800a048 <_Bfree>
 8006dc0:	3e01      	subs	r6, #1
 8006dc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006dc4:	2e04      	cmp	r6, #4
 8006dc6:	d806      	bhi.n	8006dd6 <_strtod_l+0xe6>
 8006dc8:	e8df f006 	tbb	[pc, r6]
 8006dcc:	201d0314 	.word	0x201d0314
 8006dd0:	14          	.byte	0x14
 8006dd1:	00          	.byte	0x00
 8006dd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006dd6:	05e1      	lsls	r1, r4, #23
 8006dd8:	bf48      	it	mi
 8006dda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006dde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006de2:	0d1b      	lsrs	r3, r3, #20
 8006de4:	051b      	lsls	r3, r3, #20
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1bb      	bne.n	8006d62 <_strtod_l+0x72>
 8006dea:	f001 fdeb 	bl	80089c4 <__errno>
 8006dee:	2322      	movs	r3, #34	@ 0x22
 8006df0:	6003      	str	r3, [r0, #0]
 8006df2:	e7b6      	b.n	8006d62 <_strtod_l+0x72>
 8006df4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006df8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006dfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e04:	e7e7      	b.n	8006dd6 <_strtod_l+0xe6>
 8006e06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006f84 <_strtod_l+0x294>
 8006e0a:	e7e4      	b.n	8006dd6 <_strtod_l+0xe6>
 8006e0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006e10:	f04f 3aff 	mov.w	sl, #4294967295
 8006e14:	e7df      	b.n	8006dd6 <_strtod_l+0xe6>
 8006e16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	2b30      	cmp	r3, #48	@ 0x30
 8006e20:	d0f9      	beq.n	8006e16 <_strtod_l+0x126>
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d09d      	beq.n	8006d62 <_strtod_l+0x72>
 8006e26:	2301      	movs	r3, #1
 8006e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e2e:	2300      	movs	r3, #0
 8006e30:	9308      	str	r3, [sp, #32]
 8006e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e34:	461f      	mov	r7, r3
 8006e36:	220a      	movs	r2, #10
 8006e38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e3a:	7805      	ldrb	r5, [r0, #0]
 8006e3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006e40:	b2d9      	uxtb	r1, r3
 8006e42:	2909      	cmp	r1, #9
 8006e44:	d928      	bls.n	8006e98 <_strtod_l+0x1a8>
 8006e46:	494e      	ldr	r1, [pc, #312]	@ (8006f80 <_strtod_l+0x290>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f001 fcef 	bl	800882c <strncmp>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d032      	beq.n	8006eb8 <_strtod_l+0x1c8>
 8006e52:	2000      	movs	r0, #0
 8006e54:	462a      	mov	r2, r5
 8006e56:	4681      	mov	r9, r0
 8006e58:	463d      	mov	r5, r7
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2a65      	cmp	r2, #101	@ 0x65
 8006e5e:	d001      	beq.n	8006e64 <_strtod_l+0x174>
 8006e60:	2a45      	cmp	r2, #69	@ 0x45
 8006e62:	d114      	bne.n	8006e8e <_strtod_l+0x19e>
 8006e64:	b91d      	cbnz	r5, 8006e6e <_strtod_l+0x17e>
 8006e66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e68:	4302      	orrs	r2, r0
 8006e6a:	d095      	beq.n	8006d98 <_strtod_l+0xa8>
 8006e6c:	2500      	movs	r5, #0
 8006e6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006e70:	1c62      	adds	r2, r4, #1
 8006e72:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e74:	7862      	ldrb	r2, [r4, #1]
 8006e76:	2a2b      	cmp	r2, #43	@ 0x2b
 8006e78:	d077      	beq.n	8006f6a <_strtod_l+0x27a>
 8006e7a:	2a2d      	cmp	r2, #45	@ 0x2d
 8006e7c:	d07b      	beq.n	8006f76 <_strtod_l+0x286>
 8006e7e:	f04f 0c00 	mov.w	ip, #0
 8006e82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006e86:	2909      	cmp	r1, #9
 8006e88:	f240 8082 	bls.w	8006f90 <_strtod_l+0x2a0>
 8006e8c:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e8e:	f04f 0800 	mov.w	r8, #0
 8006e92:	e0a2      	b.n	8006fda <_strtod_l+0x2ea>
 8006e94:	2300      	movs	r3, #0
 8006e96:	e7c7      	b.n	8006e28 <_strtod_l+0x138>
 8006e98:	2f08      	cmp	r7, #8
 8006e9a:	bfd5      	itete	le
 8006e9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006e9e:	9908      	ldrgt	r1, [sp, #32]
 8006ea0:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ea4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006ea8:	f100 0001 	add.w	r0, r0, #1
 8006eac:	bfd4      	ite	le
 8006eae:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006eb0:	9308      	strgt	r3, [sp, #32]
 8006eb2:	3701      	adds	r7, #1
 8006eb4:	9019      	str	r0, [sp, #100]	@ 0x64
 8006eb6:	e7bf      	b.n	8006e38 <_strtod_l+0x148>
 8006eb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ebe:	785a      	ldrb	r2, [r3, #1]
 8006ec0:	b37f      	cbz	r7, 8006f22 <_strtod_l+0x232>
 8006ec2:	4681      	mov	r9, r0
 8006ec4:	463d      	mov	r5, r7
 8006ec6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006eca:	2b09      	cmp	r3, #9
 8006ecc:	d912      	bls.n	8006ef4 <_strtod_l+0x204>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e7c4      	b.n	8006e5c <_strtod_l+0x16c>
 8006ed2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ed8:	785a      	ldrb	r2, [r3, #1]
 8006eda:	3001      	adds	r0, #1
 8006edc:	2a30      	cmp	r2, #48	@ 0x30
 8006ede:	d0f8      	beq.n	8006ed2 <_strtod_l+0x1e2>
 8006ee0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	f200 84d3 	bhi.w	8007890 <_strtod_l+0xba0>
 8006eea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eec:	930c      	str	r3, [sp, #48]	@ 0x30
 8006eee:	4681      	mov	r9, r0
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	4605      	mov	r5, r0
 8006ef4:	3a30      	subs	r2, #48	@ 0x30
 8006ef6:	f100 0301 	add.w	r3, r0, #1
 8006efa:	d02a      	beq.n	8006f52 <_strtod_l+0x262>
 8006efc:	4499      	add	r9, r3
 8006efe:	eb00 0c05 	add.w	ip, r0, r5
 8006f02:	462b      	mov	r3, r5
 8006f04:	210a      	movs	r1, #10
 8006f06:	4563      	cmp	r3, ip
 8006f08:	d10d      	bne.n	8006f26 <_strtod_l+0x236>
 8006f0a:	1c69      	adds	r1, r5, #1
 8006f0c:	4401      	add	r1, r0
 8006f0e:	4428      	add	r0, r5
 8006f10:	2808      	cmp	r0, #8
 8006f12:	dc16      	bgt.n	8006f42 <_strtod_l+0x252>
 8006f14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f16:	230a      	movs	r3, #10
 8006f18:	fb03 2300 	mla	r3, r3, r0, r2
 8006f1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e018      	b.n	8006f54 <_strtod_l+0x264>
 8006f22:	4638      	mov	r0, r7
 8006f24:	e7da      	b.n	8006edc <_strtod_l+0x1ec>
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	f103 0301 	add.w	r3, r3, #1
 8006f2c:	dc03      	bgt.n	8006f36 <_strtod_l+0x246>
 8006f2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006f30:	434e      	muls	r6, r1
 8006f32:	960a      	str	r6, [sp, #40]	@ 0x28
 8006f34:	e7e7      	b.n	8006f06 <_strtod_l+0x216>
 8006f36:	2b10      	cmp	r3, #16
 8006f38:	bfde      	ittt	le
 8006f3a:	9e08      	ldrle	r6, [sp, #32]
 8006f3c:	434e      	mulle	r6, r1
 8006f3e:	9608      	strle	r6, [sp, #32]
 8006f40:	e7e1      	b.n	8006f06 <_strtod_l+0x216>
 8006f42:	280f      	cmp	r0, #15
 8006f44:	dceb      	bgt.n	8006f1e <_strtod_l+0x22e>
 8006f46:	9808      	ldr	r0, [sp, #32]
 8006f48:	230a      	movs	r3, #10
 8006f4a:	fb03 2300 	mla	r3, r3, r0, r2
 8006f4e:	9308      	str	r3, [sp, #32]
 8006f50:	e7e5      	b.n	8006f1e <_strtod_l+0x22e>
 8006f52:	4629      	mov	r1, r5
 8006f54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f56:	1c50      	adds	r0, r2, #1
 8006f58:	9019      	str	r0, [sp, #100]	@ 0x64
 8006f5a:	7852      	ldrb	r2, [r2, #1]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	460d      	mov	r5, r1
 8006f60:	e7b1      	b.n	8006ec6 <_strtod_l+0x1d6>
 8006f62:	f04f 0900 	mov.w	r9, #0
 8006f66:	2301      	movs	r3, #1
 8006f68:	e77d      	b.n	8006e66 <_strtod_l+0x176>
 8006f6a:	f04f 0c00 	mov.w	ip, #0
 8006f6e:	1ca2      	adds	r2, r4, #2
 8006f70:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f72:	78a2      	ldrb	r2, [r4, #2]
 8006f74:	e785      	b.n	8006e82 <_strtod_l+0x192>
 8006f76:	f04f 0c01 	mov.w	ip, #1
 8006f7a:	e7f8      	b.n	8006f6e <_strtod_l+0x27e>
 8006f7c:	0800d500 	.word	0x0800d500
 8006f80:	0800d4e8 	.word	0x0800d4e8
 8006f84:	7ff00000 	.word	0x7ff00000
 8006f88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f8a:	1c51      	adds	r1, r2, #1
 8006f8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f8e:	7852      	ldrb	r2, [r2, #1]
 8006f90:	2a30      	cmp	r2, #48	@ 0x30
 8006f92:	d0f9      	beq.n	8006f88 <_strtod_l+0x298>
 8006f94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006f98:	2908      	cmp	r1, #8
 8006f9a:	f63f af78 	bhi.w	8006e8e <_strtod_l+0x19e>
 8006f9e:	3a30      	subs	r2, #48	@ 0x30
 8006fa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fa2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fa4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006fa6:	f04f 080a 	mov.w	r8, #10
 8006faa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fac:	1c56      	adds	r6, r2, #1
 8006fae:	9619      	str	r6, [sp, #100]	@ 0x64
 8006fb0:	7852      	ldrb	r2, [r2, #1]
 8006fb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006fb6:	f1be 0f09 	cmp.w	lr, #9
 8006fba:	d939      	bls.n	8007030 <_strtod_l+0x340>
 8006fbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006fbe:	1a76      	subs	r6, r6, r1
 8006fc0:	2e08      	cmp	r6, #8
 8006fc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006fc6:	dc03      	bgt.n	8006fd0 <_strtod_l+0x2e0>
 8006fc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006fca:	4588      	cmp	r8, r1
 8006fcc:	bfa8      	it	ge
 8006fce:	4688      	movge	r8, r1
 8006fd0:	f1bc 0f00 	cmp.w	ip, #0
 8006fd4:	d001      	beq.n	8006fda <_strtod_l+0x2ea>
 8006fd6:	f1c8 0800 	rsb	r8, r8, #0
 8006fda:	2d00      	cmp	r5, #0
 8006fdc:	d14e      	bne.n	800707c <_strtod_l+0x38c>
 8006fde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fe0:	4308      	orrs	r0, r1
 8006fe2:	f47f aebe 	bne.w	8006d62 <_strtod_l+0x72>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f47f aed6 	bne.w	8006d98 <_strtod_l+0xa8>
 8006fec:	2a69      	cmp	r2, #105	@ 0x69
 8006fee:	d028      	beq.n	8007042 <_strtod_l+0x352>
 8006ff0:	dc25      	bgt.n	800703e <_strtod_l+0x34e>
 8006ff2:	2a49      	cmp	r2, #73	@ 0x49
 8006ff4:	d025      	beq.n	8007042 <_strtod_l+0x352>
 8006ff6:	2a4e      	cmp	r2, #78	@ 0x4e
 8006ff8:	f47f aece 	bne.w	8006d98 <_strtod_l+0xa8>
 8006ffc:	499b      	ldr	r1, [pc, #620]	@ (800726c <_strtod_l+0x57c>)
 8006ffe:	a819      	add	r0, sp, #100	@ 0x64
 8007000:	f002 fe6a 	bl	8009cd8 <__match>
 8007004:	2800      	cmp	r0, #0
 8007006:	f43f aec7 	beq.w	8006d98 <_strtod_l+0xa8>
 800700a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b28      	cmp	r3, #40	@ 0x28
 8007010:	d12e      	bne.n	8007070 <_strtod_l+0x380>
 8007012:	4997      	ldr	r1, [pc, #604]	@ (8007270 <_strtod_l+0x580>)
 8007014:	aa1c      	add	r2, sp, #112	@ 0x70
 8007016:	a819      	add	r0, sp, #100	@ 0x64
 8007018:	f002 fe72 	bl	8009d00 <__hexnan>
 800701c:	2805      	cmp	r0, #5
 800701e:	d127      	bne.n	8007070 <_strtod_l+0x380>
 8007020:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007022:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007026:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800702a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800702e:	e698      	b.n	8006d62 <_strtod_l+0x72>
 8007030:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007032:	fb08 2101 	mla	r1, r8, r1, r2
 8007036:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800703a:	920e      	str	r2, [sp, #56]	@ 0x38
 800703c:	e7b5      	b.n	8006faa <_strtod_l+0x2ba>
 800703e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007040:	e7da      	b.n	8006ff8 <_strtod_l+0x308>
 8007042:	498c      	ldr	r1, [pc, #560]	@ (8007274 <_strtod_l+0x584>)
 8007044:	a819      	add	r0, sp, #100	@ 0x64
 8007046:	f002 fe47 	bl	8009cd8 <__match>
 800704a:	2800      	cmp	r0, #0
 800704c:	f43f aea4 	beq.w	8006d98 <_strtod_l+0xa8>
 8007050:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007052:	4989      	ldr	r1, [pc, #548]	@ (8007278 <_strtod_l+0x588>)
 8007054:	3b01      	subs	r3, #1
 8007056:	a819      	add	r0, sp, #100	@ 0x64
 8007058:	9319      	str	r3, [sp, #100]	@ 0x64
 800705a:	f002 fe3d 	bl	8009cd8 <__match>
 800705e:	b910      	cbnz	r0, 8007066 <_strtod_l+0x376>
 8007060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007062:	3301      	adds	r3, #1
 8007064:	9319      	str	r3, [sp, #100]	@ 0x64
 8007066:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007288 <_strtod_l+0x598>
 800706a:	f04f 0a00 	mov.w	sl, #0
 800706e:	e678      	b.n	8006d62 <_strtod_l+0x72>
 8007070:	4882      	ldr	r0, [pc, #520]	@ (800727c <_strtod_l+0x58c>)
 8007072:	f001 fce5 	bl	8008a40 <nan>
 8007076:	ec5b ab10 	vmov	sl, fp, d0
 800707a:	e672      	b.n	8006d62 <_strtod_l+0x72>
 800707c:	eba8 0309 	sub.w	r3, r8, r9
 8007080:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007082:	9309      	str	r3, [sp, #36]	@ 0x24
 8007084:	2f00      	cmp	r7, #0
 8007086:	bf08      	it	eq
 8007088:	462f      	moveq	r7, r5
 800708a:	2d10      	cmp	r5, #16
 800708c:	462c      	mov	r4, r5
 800708e:	bfa8      	it	ge
 8007090:	2410      	movge	r4, #16
 8007092:	f7f9 fa37 	bl	8000504 <__aeabi_ui2d>
 8007096:	2d09      	cmp	r5, #9
 8007098:	4682      	mov	sl, r0
 800709a:	468b      	mov	fp, r1
 800709c:	dc13      	bgt.n	80070c6 <_strtod_l+0x3d6>
 800709e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f43f ae5e 	beq.w	8006d62 <_strtod_l+0x72>
 80070a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a8:	dd78      	ble.n	800719c <_strtod_l+0x4ac>
 80070aa:	2b16      	cmp	r3, #22
 80070ac:	dc5f      	bgt.n	800716e <_strtod_l+0x47e>
 80070ae:	4974      	ldr	r1, [pc, #464]	@ (8007280 <_strtod_l+0x590>)
 80070b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070b8:	4652      	mov	r2, sl
 80070ba:	465b      	mov	r3, fp
 80070bc:	f7f9 fa9c 	bl	80005f8 <__aeabi_dmul>
 80070c0:	4682      	mov	sl, r0
 80070c2:	468b      	mov	fp, r1
 80070c4:	e64d      	b.n	8006d62 <_strtod_l+0x72>
 80070c6:	4b6e      	ldr	r3, [pc, #440]	@ (8007280 <_strtod_l+0x590>)
 80070c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80070d0:	f7f9 fa92 	bl	80005f8 <__aeabi_dmul>
 80070d4:	4682      	mov	sl, r0
 80070d6:	9808      	ldr	r0, [sp, #32]
 80070d8:	468b      	mov	fp, r1
 80070da:	f7f9 fa13 	bl	8000504 <__aeabi_ui2d>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4650      	mov	r0, sl
 80070e4:	4659      	mov	r1, fp
 80070e6:	f7f9 f8d1 	bl	800028c <__adddf3>
 80070ea:	2d0f      	cmp	r5, #15
 80070ec:	4682      	mov	sl, r0
 80070ee:	468b      	mov	fp, r1
 80070f0:	ddd5      	ble.n	800709e <_strtod_l+0x3ae>
 80070f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f4:	1b2c      	subs	r4, r5, r4
 80070f6:	441c      	add	r4, r3
 80070f8:	2c00      	cmp	r4, #0
 80070fa:	f340 8096 	ble.w	800722a <_strtod_l+0x53a>
 80070fe:	f014 030f 	ands.w	r3, r4, #15
 8007102:	d00a      	beq.n	800711a <_strtod_l+0x42a>
 8007104:	495e      	ldr	r1, [pc, #376]	@ (8007280 <_strtod_l+0x590>)
 8007106:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800710a:	4652      	mov	r2, sl
 800710c:	465b      	mov	r3, fp
 800710e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007112:	f7f9 fa71 	bl	80005f8 <__aeabi_dmul>
 8007116:	4682      	mov	sl, r0
 8007118:	468b      	mov	fp, r1
 800711a:	f034 040f 	bics.w	r4, r4, #15
 800711e:	d073      	beq.n	8007208 <_strtod_l+0x518>
 8007120:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007124:	dd48      	ble.n	80071b8 <_strtod_l+0x4c8>
 8007126:	2400      	movs	r4, #0
 8007128:	46a0      	mov	r8, r4
 800712a:	940a      	str	r4, [sp, #40]	@ 0x28
 800712c:	46a1      	mov	r9, r4
 800712e:	9a05      	ldr	r2, [sp, #20]
 8007130:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007288 <_strtod_l+0x598>
 8007134:	2322      	movs	r3, #34	@ 0x22
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	f04f 0a00 	mov.w	sl, #0
 800713c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	f43f ae0f 	beq.w	8006d62 <_strtod_l+0x72>
 8007144:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007146:	9805      	ldr	r0, [sp, #20]
 8007148:	f002 ff7e 	bl	800a048 <_Bfree>
 800714c:	9805      	ldr	r0, [sp, #20]
 800714e:	4649      	mov	r1, r9
 8007150:	f002 ff7a 	bl	800a048 <_Bfree>
 8007154:	9805      	ldr	r0, [sp, #20]
 8007156:	4641      	mov	r1, r8
 8007158:	f002 ff76 	bl	800a048 <_Bfree>
 800715c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800715e:	9805      	ldr	r0, [sp, #20]
 8007160:	f002 ff72 	bl	800a048 <_Bfree>
 8007164:	9805      	ldr	r0, [sp, #20]
 8007166:	4621      	mov	r1, r4
 8007168:	f002 ff6e 	bl	800a048 <_Bfree>
 800716c:	e5f9      	b.n	8006d62 <_strtod_l+0x72>
 800716e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007170:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007174:	4293      	cmp	r3, r2
 8007176:	dbbc      	blt.n	80070f2 <_strtod_l+0x402>
 8007178:	4c41      	ldr	r4, [pc, #260]	@ (8007280 <_strtod_l+0x590>)
 800717a:	f1c5 050f 	rsb	r5, r5, #15
 800717e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007182:	4652      	mov	r2, sl
 8007184:	465b      	mov	r3, fp
 8007186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800718a:	f7f9 fa35 	bl	80005f8 <__aeabi_dmul>
 800718e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007190:	1b5d      	subs	r5, r3, r5
 8007192:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007196:	e9d4 2300 	ldrd	r2, r3, [r4]
 800719a:	e78f      	b.n	80070bc <_strtod_l+0x3cc>
 800719c:	3316      	adds	r3, #22
 800719e:	dba8      	blt.n	80070f2 <_strtod_l+0x402>
 80071a0:	4b37      	ldr	r3, [pc, #220]	@ (8007280 <_strtod_l+0x590>)
 80071a2:	eba9 0808 	sub.w	r8, r9, r8
 80071a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80071aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80071ae:	4650      	mov	r0, sl
 80071b0:	4659      	mov	r1, fp
 80071b2:	f7f9 fb4b 	bl	800084c <__aeabi_ddiv>
 80071b6:	e783      	b.n	80070c0 <_strtod_l+0x3d0>
 80071b8:	4b32      	ldr	r3, [pc, #200]	@ (8007284 <_strtod_l+0x594>)
 80071ba:	9308      	str	r3, [sp, #32]
 80071bc:	2300      	movs	r3, #0
 80071be:	1124      	asrs	r4, r4, #4
 80071c0:	4650      	mov	r0, sl
 80071c2:	4659      	mov	r1, fp
 80071c4:	461e      	mov	r6, r3
 80071c6:	2c01      	cmp	r4, #1
 80071c8:	dc21      	bgt.n	800720e <_strtod_l+0x51e>
 80071ca:	b10b      	cbz	r3, 80071d0 <_strtod_l+0x4e0>
 80071cc:	4682      	mov	sl, r0
 80071ce:	468b      	mov	fp, r1
 80071d0:	492c      	ldr	r1, [pc, #176]	@ (8007284 <_strtod_l+0x594>)
 80071d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80071d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80071da:	4652      	mov	r2, sl
 80071dc:	465b      	mov	r3, fp
 80071de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071e2:	f7f9 fa09 	bl	80005f8 <__aeabi_dmul>
 80071e6:	4b28      	ldr	r3, [pc, #160]	@ (8007288 <_strtod_l+0x598>)
 80071e8:	460a      	mov	r2, r1
 80071ea:	400b      	ands	r3, r1
 80071ec:	4927      	ldr	r1, [pc, #156]	@ (800728c <_strtod_l+0x59c>)
 80071ee:	428b      	cmp	r3, r1
 80071f0:	4682      	mov	sl, r0
 80071f2:	d898      	bhi.n	8007126 <_strtod_l+0x436>
 80071f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80071f8:	428b      	cmp	r3, r1
 80071fa:	bf86      	itte	hi
 80071fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007290 <_strtod_l+0x5a0>
 8007200:	f04f 3aff 	movhi.w	sl, #4294967295
 8007204:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007208:	2300      	movs	r3, #0
 800720a:	9308      	str	r3, [sp, #32]
 800720c:	e07a      	b.n	8007304 <_strtod_l+0x614>
 800720e:	07e2      	lsls	r2, r4, #31
 8007210:	d505      	bpl.n	800721e <_strtod_l+0x52e>
 8007212:	9b08      	ldr	r3, [sp, #32]
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f9 f9ee 	bl	80005f8 <__aeabi_dmul>
 800721c:	2301      	movs	r3, #1
 800721e:	9a08      	ldr	r2, [sp, #32]
 8007220:	3208      	adds	r2, #8
 8007222:	3601      	adds	r6, #1
 8007224:	1064      	asrs	r4, r4, #1
 8007226:	9208      	str	r2, [sp, #32]
 8007228:	e7cd      	b.n	80071c6 <_strtod_l+0x4d6>
 800722a:	d0ed      	beq.n	8007208 <_strtod_l+0x518>
 800722c:	4264      	negs	r4, r4
 800722e:	f014 020f 	ands.w	r2, r4, #15
 8007232:	d00a      	beq.n	800724a <_strtod_l+0x55a>
 8007234:	4b12      	ldr	r3, [pc, #72]	@ (8007280 <_strtod_l+0x590>)
 8007236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800723a:	4650      	mov	r0, sl
 800723c:	4659      	mov	r1, fp
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f7f9 fb03 	bl	800084c <__aeabi_ddiv>
 8007246:	4682      	mov	sl, r0
 8007248:	468b      	mov	fp, r1
 800724a:	1124      	asrs	r4, r4, #4
 800724c:	d0dc      	beq.n	8007208 <_strtod_l+0x518>
 800724e:	2c1f      	cmp	r4, #31
 8007250:	dd20      	ble.n	8007294 <_strtod_l+0x5a4>
 8007252:	2400      	movs	r4, #0
 8007254:	46a0      	mov	r8, r4
 8007256:	940a      	str	r4, [sp, #40]	@ 0x28
 8007258:	46a1      	mov	r9, r4
 800725a:	9a05      	ldr	r2, [sp, #20]
 800725c:	2322      	movs	r3, #34	@ 0x22
 800725e:	f04f 0a00 	mov.w	sl, #0
 8007262:	f04f 0b00 	mov.w	fp, #0
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	e768      	b.n	800713c <_strtod_l+0x44c>
 800726a:	bf00      	nop
 800726c:	0800d54d 	.word	0x0800d54d
 8007270:	0800d4ec 	.word	0x0800d4ec
 8007274:	0800d545 	.word	0x0800d545
 8007278:	0800d631 	.word	0x0800d631
 800727c:	0800d62d 	.word	0x0800d62d
 8007280:	0800d798 	.word	0x0800d798
 8007284:	0800d770 	.word	0x0800d770
 8007288:	7ff00000 	.word	0x7ff00000
 800728c:	7ca00000 	.word	0x7ca00000
 8007290:	7fefffff 	.word	0x7fefffff
 8007294:	f014 0310 	ands.w	r3, r4, #16
 8007298:	bf18      	it	ne
 800729a:	236a      	movne	r3, #106	@ 0x6a
 800729c:	4ea9      	ldr	r6, [pc, #676]	@ (8007544 <_strtod_l+0x854>)
 800729e:	9308      	str	r3, [sp, #32]
 80072a0:	4650      	mov	r0, sl
 80072a2:	4659      	mov	r1, fp
 80072a4:	2300      	movs	r3, #0
 80072a6:	07e2      	lsls	r2, r4, #31
 80072a8:	d504      	bpl.n	80072b4 <_strtod_l+0x5c4>
 80072aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072ae:	f7f9 f9a3 	bl	80005f8 <__aeabi_dmul>
 80072b2:	2301      	movs	r3, #1
 80072b4:	1064      	asrs	r4, r4, #1
 80072b6:	f106 0608 	add.w	r6, r6, #8
 80072ba:	d1f4      	bne.n	80072a6 <_strtod_l+0x5b6>
 80072bc:	b10b      	cbz	r3, 80072c2 <_strtod_l+0x5d2>
 80072be:	4682      	mov	sl, r0
 80072c0:	468b      	mov	fp, r1
 80072c2:	9b08      	ldr	r3, [sp, #32]
 80072c4:	b1b3      	cbz	r3, 80072f4 <_strtod_l+0x604>
 80072c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	4659      	mov	r1, fp
 80072d2:	dd0f      	ble.n	80072f4 <_strtod_l+0x604>
 80072d4:	2b1f      	cmp	r3, #31
 80072d6:	dd55      	ble.n	8007384 <_strtod_l+0x694>
 80072d8:	2b34      	cmp	r3, #52	@ 0x34
 80072da:	bfde      	ittt	le
 80072dc:	f04f 33ff 	movle.w	r3, #4294967295
 80072e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80072e4:	4093      	lslle	r3, r2
 80072e6:	f04f 0a00 	mov.w	sl, #0
 80072ea:	bfcc      	ite	gt
 80072ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80072f0:	ea03 0b01 	andle.w	fp, r3, r1
 80072f4:	2200      	movs	r2, #0
 80072f6:	2300      	movs	r3, #0
 80072f8:	4650      	mov	r0, sl
 80072fa:	4659      	mov	r1, fp
 80072fc:	f7f9 fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007300:	2800      	cmp	r0, #0
 8007302:	d1a6      	bne.n	8007252 <_strtod_l+0x562>
 8007304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800730a:	9805      	ldr	r0, [sp, #20]
 800730c:	462b      	mov	r3, r5
 800730e:	463a      	mov	r2, r7
 8007310:	f002 ff02 	bl	800a118 <__s2b>
 8007314:	900a      	str	r0, [sp, #40]	@ 0x28
 8007316:	2800      	cmp	r0, #0
 8007318:	f43f af05 	beq.w	8007126 <_strtod_l+0x436>
 800731c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800731e:	2a00      	cmp	r2, #0
 8007320:	eba9 0308 	sub.w	r3, r9, r8
 8007324:	bfa8      	it	ge
 8007326:	2300      	movge	r3, #0
 8007328:	9312      	str	r3, [sp, #72]	@ 0x48
 800732a:	2400      	movs	r4, #0
 800732c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007330:	9316      	str	r3, [sp, #88]	@ 0x58
 8007332:	46a0      	mov	r8, r4
 8007334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007336:	9805      	ldr	r0, [sp, #20]
 8007338:	6859      	ldr	r1, [r3, #4]
 800733a:	f002 fe45 	bl	8009fc8 <_Balloc>
 800733e:	4681      	mov	r9, r0
 8007340:	2800      	cmp	r0, #0
 8007342:	f43f aef4 	beq.w	800712e <_strtod_l+0x43e>
 8007346:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007348:	691a      	ldr	r2, [r3, #16]
 800734a:	3202      	adds	r2, #2
 800734c:	f103 010c 	add.w	r1, r3, #12
 8007350:	0092      	lsls	r2, r2, #2
 8007352:	300c      	adds	r0, #12
 8007354:	f001 fb63 	bl	8008a1e <memcpy>
 8007358:	ec4b ab10 	vmov	d0, sl, fp
 800735c:	9805      	ldr	r0, [sp, #20]
 800735e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007360:	a91b      	add	r1, sp, #108	@ 0x6c
 8007362:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007366:	f003 fa13 	bl	800a790 <__d2b>
 800736a:	901a      	str	r0, [sp, #104]	@ 0x68
 800736c:	2800      	cmp	r0, #0
 800736e:	f43f aede 	beq.w	800712e <_strtod_l+0x43e>
 8007372:	9805      	ldr	r0, [sp, #20]
 8007374:	2101      	movs	r1, #1
 8007376:	f002 ff65 	bl	800a244 <__i2b>
 800737a:	4680      	mov	r8, r0
 800737c:	b948      	cbnz	r0, 8007392 <_strtod_l+0x6a2>
 800737e:	f04f 0800 	mov.w	r8, #0
 8007382:	e6d4      	b.n	800712e <_strtod_l+0x43e>
 8007384:	f04f 32ff 	mov.w	r2, #4294967295
 8007388:	fa02 f303 	lsl.w	r3, r2, r3
 800738c:	ea03 0a0a 	and.w	sl, r3, sl
 8007390:	e7b0      	b.n	80072f4 <_strtod_l+0x604>
 8007392:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007394:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007396:	2d00      	cmp	r5, #0
 8007398:	bfab      	itete	ge
 800739a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800739c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800739e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80073a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80073a2:	bfac      	ite	ge
 80073a4:	18ef      	addge	r7, r5, r3
 80073a6:	1b5e      	sublt	r6, r3, r5
 80073a8:	9b08      	ldr	r3, [sp, #32]
 80073aa:	1aed      	subs	r5, r5, r3
 80073ac:	4415      	add	r5, r2
 80073ae:	4b66      	ldr	r3, [pc, #408]	@ (8007548 <_strtod_l+0x858>)
 80073b0:	3d01      	subs	r5, #1
 80073b2:	429d      	cmp	r5, r3
 80073b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80073b8:	da50      	bge.n	800745c <_strtod_l+0x76c>
 80073ba:	1b5b      	subs	r3, r3, r5
 80073bc:	2b1f      	cmp	r3, #31
 80073be:	eba2 0203 	sub.w	r2, r2, r3
 80073c2:	f04f 0101 	mov.w	r1, #1
 80073c6:	dc3d      	bgt.n	8007444 <_strtod_l+0x754>
 80073c8:	fa01 f303 	lsl.w	r3, r1, r3
 80073cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073ce:	2300      	movs	r3, #0
 80073d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80073d2:	18bd      	adds	r5, r7, r2
 80073d4:	9b08      	ldr	r3, [sp, #32]
 80073d6:	42af      	cmp	r7, r5
 80073d8:	4416      	add	r6, r2
 80073da:	441e      	add	r6, r3
 80073dc:	463b      	mov	r3, r7
 80073de:	bfa8      	it	ge
 80073e0:	462b      	movge	r3, r5
 80073e2:	42b3      	cmp	r3, r6
 80073e4:	bfa8      	it	ge
 80073e6:	4633      	movge	r3, r6
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bfc2      	ittt	gt
 80073ec:	1aed      	subgt	r5, r5, r3
 80073ee:	1af6      	subgt	r6, r6, r3
 80073f0:	1aff      	subgt	r7, r7, r3
 80073f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dd16      	ble.n	8007426 <_strtod_l+0x736>
 80073f8:	4641      	mov	r1, r8
 80073fa:	9805      	ldr	r0, [sp, #20]
 80073fc:	461a      	mov	r2, r3
 80073fe:	f002 ffe1 	bl	800a3c4 <__pow5mult>
 8007402:	4680      	mov	r8, r0
 8007404:	2800      	cmp	r0, #0
 8007406:	d0ba      	beq.n	800737e <_strtod_l+0x68e>
 8007408:	4601      	mov	r1, r0
 800740a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800740c:	9805      	ldr	r0, [sp, #20]
 800740e:	f002 ff2f 	bl	800a270 <__multiply>
 8007412:	900e      	str	r0, [sp, #56]	@ 0x38
 8007414:	2800      	cmp	r0, #0
 8007416:	f43f ae8a 	beq.w	800712e <_strtod_l+0x43e>
 800741a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800741c:	9805      	ldr	r0, [sp, #20]
 800741e:	f002 fe13 	bl	800a048 <_Bfree>
 8007422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007424:	931a      	str	r3, [sp, #104]	@ 0x68
 8007426:	2d00      	cmp	r5, #0
 8007428:	dc1d      	bgt.n	8007466 <_strtod_l+0x776>
 800742a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	dd23      	ble.n	8007478 <_strtod_l+0x788>
 8007430:	4649      	mov	r1, r9
 8007432:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007434:	9805      	ldr	r0, [sp, #20]
 8007436:	f002 ffc5 	bl	800a3c4 <__pow5mult>
 800743a:	4681      	mov	r9, r0
 800743c:	b9e0      	cbnz	r0, 8007478 <_strtod_l+0x788>
 800743e:	f04f 0900 	mov.w	r9, #0
 8007442:	e674      	b.n	800712e <_strtod_l+0x43e>
 8007444:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007448:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800744c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007450:	35e2      	adds	r5, #226	@ 0xe2
 8007452:	fa01 f305 	lsl.w	r3, r1, r5
 8007456:	9310      	str	r3, [sp, #64]	@ 0x40
 8007458:	9113      	str	r1, [sp, #76]	@ 0x4c
 800745a:	e7ba      	b.n	80073d2 <_strtod_l+0x6e2>
 800745c:	2300      	movs	r3, #0
 800745e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007460:	2301      	movs	r3, #1
 8007462:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007464:	e7b5      	b.n	80073d2 <_strtod_l+0x6e2>
 8007466:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007468:	9805      	ldr	r0, [sp, #20]
 800746a:	462a      	mov	r2, r5
 800746c:	f003 f804 	bl	800a478 <__lshift>
 8007470:	901a      	str	r0, [sp, #104]	@ 0x68
 8007472:	2800      	cmp	r0, #0
 8007474:	d1d9      	bne.n	800742a <_strtod_l+0x73a>
 8007476:	e65a      	b.n	800712e <_strtod_l+0x43e>
 8007478:	2e00      	cmp	r6, #0
 800747a:	dd07      	ble.n	800748c <_strtod_l+0x79c>
 800747c:	4649      	mov	r1, r9
 800747e:	9805      	ldr	r0, [sp, #20]
 8007480:	4632      	mov	r2, r6
 8007482:	f002 fff9 	bl	800a478 <__lshift>
 8007486:	4681      	mov	r9, r0
 8007488:	2800      	cmp	r0, #0
 800748a:	d0d8      	beq.n	800743e <_strtod_l+0x74e>
 800748c:	2f00      	cmp	r7, #0
 800748e:	dd08      	ble.n	80074a2 <_strtod_l+0x7b2>
 8007490:	4641      	mov	r1, r8
 8007492:	9805      	ldr	r0, [sp, #20]
 8007494:	463a      	mov	r2, r7
 8007496:	f002 ffef 	bl	800a478 <__lshift>
 800749a:	4680      	mov	r8, r0
 800749c:	2800      	cmp	r0, #0
 800749e:	f43f ae46 	beq.w	800712e <_strtod_l+0x43e>
 80074a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074a4:	9805      	ldr	r0, [sp, #20]
 80074a6:	464a      	mov	r2, r9
 80074a8:	f003 f86e 	bl	800a588 <__mdiff>
 80074ac:	4604      	mov	r4, r0
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f43f ae3d 	beq.w	800712e <_strtod_l+0x43e>
 80074b4:	68c3      	ldr	r3, [r0, #12]
 80074b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074b8:	2300      	movs	r3, #0
 80074ba:	60c3      	str	r3, [r0, #12]
 80074bc:	4641      	mov	r1, r8
 80074be:	f003 f847 	bl	800a550 <__mcmp>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	da46      	bge.n	8007554 <_strtod_l+0x864>
 80074c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074c8:	ea53 030a 	orrs.w	r3, r3, sl
 80074cc:	d16c      	bne.n	80075a8 <_strtod_l+0x8b8>
 80074ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d168      	bne.n	80075a8 <_strtod_l+0x8b8>
 80074d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074da:	0d1b      	lsrs	r3, r3, #20
 80074dc:	051b      	lsls	r3, r3, #20
 80074de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80074e2:	d961      	bls.n	80075a8 <_strtod_l+0x8b8>
 80074e4:	6963      	ldr	r3, [r4, #20]
 80074e6:	b913      	cbnz	r3, 80074ee <_strtod_l+0x7fe>
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	dd5c      	ble.n	80075a8 <_strtod_l+0x8b8>
 80074ee:	4621      	mov	r1, r4
 80074f0:	2201      	movs	r2, #1
 80074f2:	9805      	ldr	r0, [sp, #20]
 80074f4:	f002 ffc0 	bl	800a478 <__lshift>
 80074f8:	4641      	mov	r1, r8
 80074fa:	4604      	mov	r4, r0
 80074fc:	f003 f828 	bl	800a550 <__mcmp>
 8007500:	2800      	cmp	r0, #0
 8007502:	dd51      	ble.n	80075a8 <_strtod_l+0x8b8>
 8007504:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007508:	9a08      	ldr	r2, [sp, #32]
 800750a:	0d1b      	lsrs	r3, r3, #20
 800750c:	051b      	lsls	r3, r3, #20
 800750e:	2a00      	cmp	r2, #0
 8007510:	d06b      	beq.n	80075ea <_strtod_l+0x8fa>
 8007512:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007516:	d868      	bhi.n	80075ea <_strtod_l+0x8fa>
 8007518:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800751c:	f67f ae9d 	bls.w	800725a <_strtod_l+0x56a>
 8007520:	4b0a      	ldr	r3, [pc, #40]	@ (800754c <_strtod_l+0x85c>)
 8007522:	4650      	mov	r0, sl
 8007524:	4659      	mov	r1, fp
 8007526:	2200      	movs	r2, #0
 8007528:	f7f9 f866 	bl	80005f8 <__aeabi_dmul>
 800752c:	4b08      	ldr	r3, [pc, #32]	@ (8007550 <_strtod_l+0x860>)
 800752e:	400b      	ands	r3, r1
 8007530:	4682      	mov	sl, r0
 8007532:	468b      	mov	fp, r1
 8007534:	2b00      	cmp	r3, #0
 8007536:	f47f ae05 	bne.w	8007144 <_strtod_l+0x454>
 800753a:	9a05      	ldr	r2, [sp, #20]
 800753c:	2322      	movs	r3, #34	@ 0x22
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	e600      	b.n	8007144 <_strtod_l+0x454>
 8007542:	bf00      	nop
 8007544:	0800d518 	.word	0x0800d518
 8007548:	fffffc02 	.word	0xfffffc02
 800754c:	39500000 	.word	0x39500000
 8007550:	7ff00000 	.word	0x7ff00000
 8007554:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007558:	d165      	bne.n	8007626 <_strtod_l+0x936>
 800755a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800755c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007560:	b35a      	cbz	r2, 80075ba <_strtod_l+0x8ca>
 8007562:	4a9f      	ldr	r2, [pc, #636]	@ (80077e0 <_strtod_l+0xaf0>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d12b      	bne.n	80075c0 <_strtod_l+0x8d0>
 8007568:	9b08      	ldr	r3, [sp, #32]
 800756a:	4651      	mov	r1, sl
 800756c:	b303      	cbz	r3, 80075b0 <_strtod_l+0x8c0>
 800756e:	4b9d      	ldr	r3, [pc, #628]	@ (80077e4 <_strtod_l+0xaf4>)
 8007570:	465a      	mov	r2, fp
 8007572:	4013      	ands	r3, r2
 8007574:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007578:	f04f 32ff 	mov.w	r2, #4294967295
 800757c:	d81b      	bhi.n	80075b6 <_strtod_l+0x8c6>
 800757e:	0d1b      	lsrs	r3, r3, #20
 8007580:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007584:	fa02 f303 	lsl.w	r3, r2, r3
 8007588:	4299      	cmp	r1, r3
 800758a:	d119      	bne.n	80075c0 <_strtod_l+0x8d0>
 800758c:	4b96      	ldr	r3, [pc, #600]	@ (80077e8 <_strtod_l+0xaf8>)
 800758e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007590:	429a      	cmp	r2, r3
 8007592:	d102      	bne.n	800759a <_strtod_l+0x8aa>
 8007594:	3101      	adds	r1, #1
 8007596:	f43f adca 	beq.w	800712e <_strtod_l+0x43e>
 800759a:	4b92      	ldr	r3, [pc, #584]	@ (80077e4 <_strtod_l+0xaf4>)
 800759c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800759e:	401a      	ands	r2, r3
 80075a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80075a4:	f04f 0a00 	mov.w	sl, #0
 80075a8:	9b08      	ldr	r3, [sp, #32]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1b8      	bne.n	8007520 <_strtod_l+0x830>
 80075ae:	e5c9      	b.n	8007144 <_strtod_l+0x454>
 80075b0:	f04f 33ff 	mov.w	r3, #4294967295
 80075b4:	e7e8      	b.n	8007588 <_strtod_l+0x898>
 80075b6:	4613      	mov	r3, r2
 80075b8:	e7e6      	b.n	8007588 <_strtod_l+0x898>
 80075ba:	ea53 030a 	orrs.w	r3, r3, sl
 80075be:	d0a1      	beq.n	8007504 <_strtod_l+0x814>
 80075c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075c2:	b1db      	cbz	r3, 80075fc <_strtod_l+0x90c>
 80075c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075c6:	4213      	tst	r3, r2
 80075c8:	d0ee      	beq.n	80075a8 <_strtod_l+0x8b8>
 80075ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075cc:	9a08      	ldr	r2, [sp, #32]
 80075ce:	4650      	mov	r0, sl
 80075d0:	4659      	mov	r1, fp
 80075d2:	b1bb      	cbz	r3, 8007604 <_strtod_l+0x914>
 80075d4:	f7ff fb6b 	bl	8006cae <sulp>
 80075d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075dc:	ec53 2b10 	vmov	r2, r3, d0
 80075e0:	f7f8 fe54 	bl	800028c <__adddf3>
 80075e4:	4682      	mov	sl, r0
 80075e6:	468b      	mov	fp, r1
 80075e8:	e7de      	b.n	80075a8 <_strtod_l+0x8b8>
 80075ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80075ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80075f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80075f6:	f04f 3aff 	mov.w	sl, #4294967295
 80075fa:	e7d5      	b.n	80075a8 <_strtod_l+0x8b8>
 80075fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80075fe:	ea13 0f0a 	tst.w	r3, sl
 8007602:	e7e1      	b.n	80075c8 <_strtod_l+0x8d8>
 8007604:	f7ff fb53 	bl	8006cae <sulp>
 8007608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800760c:	ec53 2b10 	vmov	r2, r3, d0
 8007610:	f7f8 fe3a 	bl	8000288 <__aeabi_dsub>
 8007614:	2200      	movs	r2, #0
 8007616:	2300      	movs	r3, #0
 8007618:	4682      	mov	sl, r0
 800761a:	468b      	mov	fp, r1
 800761c:	f7f9 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 8007620:	2800      	cmp	r0, #0
 8007622:	d0c1      	beq.n	80075a8 <_strtod_l+0x8b8>
 8007624:	e619      	b.n	800725a <_strtod_l+0x56a>
 8007626:	4641      	mov	r1, r8
 8007628:	4620      	mov	r0, r4
 800762a:	f003 f909 	bl	800a840 <__ratio>
 800762e:	ec57 6b10 	vmov	r6, r7, d0
 8007632:	2200      	movs	r2, #0
 8007634:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007638:	4630      	mov	r0, r6
 800763a:	4639      	mov	r1, r7
 800763c:	f7f9 fa58 	bl	8000af0 <__aeabi_dcmple>
 8007640:	2800      	cmp	r0, #0
 8007642:	d06f      	beq.n	8007724 <_strtod_l+0xa34>
 8007644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d17a      	bne.n	8007740 <_strtod_l+0xa50>
 800764a:	f1ba 0f00 	cmp.w	sl, #0
 800764e:	d158      	bne.n	8007702 <_strtod_l+0xa12>
 8007650:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007656:	2b00      	cmp	r3, #0
 8007658:	d15a      	bne.n	8007710 <_strtod_l+0xa20>
 800765a:	4b64      	ldr	r3, [pc, #400]	@ (80077ec <_strtod_l+0xafc>)
 800765c:	2200      	movs	r2, #0
 800765e:	4630      	mov	r0, r6
 8007660:	4639      	mov	r1, r7
 8007662:	f7f9 fa3b 	bl	8000adc <__aeabi_dcmplt>
 8007666:	2800      	cmp	r0, #0
 8007668:	d159      	bne.n	800771e <_strtod_l+0xa2e>
 800766a:	4630      	mov	r0, r6
 800766c:	4639      	mov	r1, r7
 800766e:	4b60      	ldr	r3, [pc, #384]	@ (80077f0 <_strtod_l+0xb00>)
 8007670:	2200      	movs	r2, #0
 8007672:	f7f8 ffc1 	bl	80005f8 <__aeabi_dmul>
 8007676:	4606      	mov	r6, r0
 8007678:	460f      	mov	r7, r1
 800767a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800767e:	9606      	str	r6, [sp, #24]
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007686:	4d57      	ldr	r5, [pc, #348]	@ (80077e4 <_strtod_l+0xaf4>)
 8007688:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800768c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800768e:	401d      	ands	r5, r3
 8007690:	4b58      	ldr	r3, [pc, #352]	@ (80077f4 <_strtod_l+0xb04>)
 8007692:	429d      	cmp	r5, r3
 8007694:	f040 80b2 	bne.w	80077fc <_strtod_l+0xb0c>
 8007698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800769a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800769e:	ec4b ab10 	vmov	d0, sl, fp
 80076a2:	f003 f805 	bl	800a6b0 <__ulp>
 80076a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076aa:	ec51 0b10 	vmov	r0, r1, d0
 80076ae:	f7f8 ffa3 	bl	80005f8 <__aeabi_dmul>
 80076b2:	4652      	mov	r2, sl
 80076b4:	465b      	mov	r3, fp
 80076b6:	f7f8 fde9 	bl	800028c <__adddf3>
 80076ba:	460b      	mov	r3, r1
 80076bc:	4949      	ldr	r1, [pc, #292]	@ (80077e4 <_strtod_l+0xaf4>)
 80076be:	4a4e      	ldr	r2, [pc, #312]	@ (80077f8 <_strtod_l+0xb08>)
 80076c0:	4019      	ands	r1, r3
 80076c2:	4291      	cmp	r1, r2
 80076c4:	4682      	mov	sl, r0
 80076c6:	d942      	bls.n	800774e <_strtod_l+0xa5e>
 80076c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076ca:	4b47      	ldr	r3, [pc, #284]	@ (80077e8 <_strtod_l+0xaf8>)
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d103      	bne.n	80076d8 <_strtod_l+0x9e8>
 80076d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076d2:	3301      	adds	r3, #1
 80076d4:	f43f ad2b 	beq.w	800712e <_strtod_l+0x43e>
 80076d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80077e8 <_strtod_l+0xaf8>
 80076dc:	f04f 3aff 	mov.w	sl, #4294967295
 80076e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076e2:	9805      	ldr	r0, [sp, #20]
 80076e4:	f002 fcb0 	bl	800a048 <_Bfree>
 80076e8:	9805      	ldr	r0, [sp, #20]
 80076ea:	4649      	mov	r1, r9
 80076ec:	f002 fcac 	bl	800a048 <_Bfree>
 80076f0:	9805      	ldr	r0, [sp, #20]
 80076f2:	4641      	mov	r1, r8
 80076f4:	f002 fca8 	bl	800a048 <_Bfree>
 80076f8:	9805      	ldr	r0, [sp, #20]
 80076fa:	4621      	mov	r1, r4
 80076fc:	f002 fca4 	bl	800a048 <_Bfree>
 8007700:	e618      	b.n	8007334 <_strtod_l+0x644>
 8007702:	f1ba 0f01 	cmp.w	sl, #1
 8007706:	d103      	bne.n	8007710 <_strtod_l+0xa20>
 8007708:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800770a:	2b00      	cmp	r3, #0
 800770c:	f43f ada5 	beq.w	800725a <_strtod_l+0x56a>
 8007710:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80077c0 <_strtod_l+0xad0>
 8007714:	4f35      	ldr	r7, [pc, #212]	@ (80077ec <_strtod_l+0xafc>)
 8007716:	ed8d 7b06 	vstr	d7, [sp, #24]
 800771a:	2600      	movs	r6, #0
 800771c:	e7b1      	b.n	8007682 <_strtod_l+0x992>
 800771e:	4f34      	ldr	r7, [pc, #208]	@ (80077f0 <_strtod_l+0xb00>)
 8007720:	2600      	movs	r6, #0
 8007722:	e7aa      	b.n	800767a <_strtod_l+0x98a>
 8007724:	4b32      	ldr	r3, [pc, #200]	@ (80077f0 <_strtod_l+0xb00>)
 8007726:	4630      	mov	r0, r6
 8007728:	4639      	mov	r1, r7
 800772a:	2200      	movs	r2, #0
 800772c:	f7f8 ff64 	bl	80005f8 <__aeabi_dmul>
 8007730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007732:	4606      	mov	r6, r0
 8007734:	460f      	mov	r7, r1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d09f      	beq.n	800767a <_strtod_l+0x98a>
 800773a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800773e:	e7a0      	b.n	8007682 <_strtod_l+0x992>
 8007740:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80077c8 <_strtod_l+0xad8>
 8007744:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007748:	ec57 6b17 	vmov	r6, r7, d7
 800774c:	e799      	b.n	8007682 <_strtod_l+0x992>
 800774e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007752:	9b08      	ldr	r3, [sp, #32]
 8007754:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1c1      	bne.n	80076e0 <_strtod_l+0x9f0>
 800775c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007760:	0d1b      	lsrs	r3, r3, #20
 8007762:	051b      	lsls	r3, r3, #20
 8007764:	429d      	cmp	r5, r3
 8007766:	d1bb      	bne.n	80076e0 <_strtod_l+0x9f0>
 8007768:	4630      	mov	r0, r6
 800776a:	4639      	mov	r1, r7
 800776c:	f7f9 faa4 	bl	8000cb8 <__aeabi_d2lz>
 8007770:	f7f8 ff14 	bl	800059c <__aeabi_l2d>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4630      	mov	r0, r6
 800777a:	4639      	mov	r1, r7
 800777c:	f7f8 fd84 	bl	8000288 <__aeabi_dsub>
 8007780:	460b      	mov	r3, r1
 8007782:	4602      	mov	r2, r0
 8007784:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007788:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800778c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800778e:	ea46 060a 	orr.w	r6, r6, sl
 8007792:	431e      	orrs	r6, r3
 8007794:	d06f      	beq.n	8007876 <_strtod_l+0xb86>
 8007796:	a30e      	add	r3, pc, #56	@ (adr r3, 80077d0 <_strtod_l+0xae0>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f9 f99e 	bl	8000adc <__aeabi_dcmplt>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	f47f accf 	bne.w	8007144 <_strtod_l+0x454>
 80077a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80077d8 <_strtod_l+0xae8>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077b0:	f7f9 f9b2 	bl	8000b18 <__aeabi_dcmpgt>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d093      	beq.n	80076e0 <_strtod_l+0x9f0>
 80077b8:	e4c4      	b.n	8007144 <_strtod_l+0x454>
 80077ba:	bf00      	nop
 80077bc:	f3af 8000 	nop.w
 80077c0:	00000000 	.word	0x00000000
 80077c4:	bff00000 	.word	0xbff00000
 80077c8:	00000000 	.word	0x00000000
 80077cc:	3ff00000 	.word	0x3ff00000
 80077d0:	94a03595 	.word	0x94a03595
 80077d4:	3fdfffff 	.word	0x3fdfffff
 80077d8:	35afe535 	.word	0x35afe535
 80077dc:	3fe00000 	.word	0x3fe00000
 80077e0:	000fffff 	.word	0x000fffff
 80077e4:	7ff00000 	.word	0x7ff00000
 80077e8:	7fefffff 	.word	0x7fefffff
 80077ec:	3ff00000 	.word	0x3ff00000
 80077f0:	3fe00000 	.word	0x3fe00000
 80077f4:	7fe00000 	.word	0x7fe00000
 80077f8:	7c9fffff 	.word	0x7c9fffff
 80077fc:	9b08      	ldr	r3, [sp, #32]
 80077fe:	b323      	cbz	r3, 800784a <_strtod_l+0xb5a>
 8007800:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007804:	d821      	bhi.n	800784a <_strtod_l+0xb5a>
 8007806:	a328      	add	r3, pc, #160	@ (adr r3, 80078a8 <_strtod_l+0xbb8>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	4630      	mov	r0, r6
 800780e:	4639      	mov	r1, r7
 8007810:	f7f9 f96e 	bl	8000af0 <__aeabi_dcmple>
 8007814:	b1a0      	cbz	r0, 8007840 <_strtod_l+0xb50>
 8007816:	4639      	mov	r1, r7
 8007818:	4630      	mov	r0, r6
 800781a:	f7f9 f9c5 	bl	8000ba8 <__aeabi_d2uiz>
 800781e:	2801      	cmp	r0, #1
 8007820:	bf38      	it	cc
 8007822:	2001      	movcc	r0, #1
 8007824:	f7f8 fe6e 	bl	8000504 <__aeabi_ui2d>
 8007828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800782a:	4606      	mov	r6, r0
 800782c:	460f      	mov	r7, r1
 800782e:	b9fb      	cbnz	r3, 8007870 <_strtod_l+0xb80>
 8007830:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007834:	9014      	str	r0, [sp, #80]	@ 0x50
 8007836:	9315      	str	r3, [sp, #84]	@ 0x54
 8007838:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800783c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007840:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007842:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007846:	1b5b      	subs	r3, r3, r5
 8007848:	9311      	str	r3, [sp, #68]	@ 0x44
 800784a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800784e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007852:	f002 ff2d 	bl	800a6b0 <__ulp>
 8007856:	4650      	mov	r0, sl
 8007858:	ec53 2b10 	vmov	r2, r3, d0
 800785c:	4659      	mov	r1, fp
 800785e:	f7f8 fecb 	bl	80005f8 <__aeabi_dmul>
 8007862:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007866:	f7f8 fd11 	bl	800028c <__adddf3>
 800786a:	4682      	mov	sl, r0
 800786c:	468b      	mov	fp, r1
 800786e:	e770      	b.n	8007752 <_strtod_l+0xa62>
 8007870:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007874:	e7e0      	b.n	8007838 <_strtod_l+0xb48>
 8007876:	a30e      	add	r3, pc, #56	@ (adr r3, 80078b0 <_strtod_l+0xbc0>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f7f9 f92e 	bl	8000adc <__aeabi_dcmplt>
 8007880:	e798      	b.n	80077b4 <_strtod_l+0xac4>
 8007882:	2300      	movs	r3, #0
 8007884:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007886:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	f7ff ba6d 	b.w	8006d6a <_strtod_l+0x7a>
 8007890:	2a65      	cmp	r2, #101	@ 0x65
 8007892:	f43f ab66 	beq.w	8006f62 <_strtod_l+0x272>
 8007896:	2a45      	cmp	r2, #69	@ 0x45
 8007898:	f43f ab63 	beq.w	8006f62 <_strtod_l+0x272>
 800789c:	2301      	movs	r3, #1
 800789e:	f7ff bb9e 	b.w	8006fde <_strtod_l+0x2ee>
 80078a2:	bf00      	nop
 80078a4:	f3af 8000 	nop.w
 80078a8:	ffc00000 	.word	0xffc00000
 80078ac:	41dfffff 	.word	0x41dfffff
 80078b0:	94a03595 	.word	0x94a03595
 80078b4:	3fcfffff 	.word	0x3fcfffff

080078b8 <_strtod_r>:
 80078b8:	4b01      	ldr	r3, [pc, #4]	@ (80078c0 <_strtod_r+0x8>)
 80078ba:	f7ff ba19 	b.w	8006cf0 <_strtod_l>
 80078be:	bf00      	nop
 80078c0:	20000018 	.word	0x20000018

080078c4 <strtod>:
 80078c4:	460a      	mov	r2, r1
 80078c6:	4601      	mov	r1, r0
 80078c8:	4802      	ldr	r0, [pc, #8]	@ (80078d4 <strtod+0x10>)
 80078ca:	4b03      	ldr	r3, [pc, #12]	@ (80078d8 <strtod+0x14>)
 80078cc:	6800      	ldr	r0, [r0, #0]
 80078ce:	f7ff ba0f 	b.w	8006cf0 <_strtod_l>
 80078d2:	bf00      	nop
 80078d4:	20000184 	.word	0x20000184
 80078d8:	20000018 	.word	0x20000018

080078dc <__cvt>:
 80078dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	ec57 6b10 	vmov	r6, r7, d0
 80078e4:	2f00      	cmp	r7, #0
 80078e6:	460c      	mov	r4, r1
 80078e8:	4619      	mov	r1, r3
 80078ea:	463b      	mov	r3, r7
 80078ec:	bfbb      	ittet	lt
 80078ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80078f2:	461f      	movlt	r7, r3
 80078f4:	2300      	movge	r3, #0
 80078f6:	232d      	movlt	r3, #45	@ 0x2d
 80078f8:	700b      	strb	r3, [r1, #0]
 80078fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007900:	4691      	mov	r9, r2
 8007902:	f023 0820 	bic.w	r8, r3, #32
 8007906:	bfbc      	itt	lt
 8007908:	4632      	movlt	r2, r6
 800790a:	4616      	movlt	r6, r2
 800790c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007910:	d005      	beq.n	800791e <__cvt+0x42>
 8007912:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007916:	d100      	bne.n	800791a <__cvt+0x3e>
 8007918:	3401      	adds	r4, #1
 800791a:	2102      	movs	r1, #2
 800791c:	e000      	b.n	8007920 <__cvt+0x44>
 800791e:	2103      	movs	r1, #3
 8007920:	ab03      	add	r3, sp, #12
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	ab02      	add	r3, sp, #8
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	ec47 6b10 	vmov	d0, r6, r7
 800792c:	4653      	mov	r3, sl
 800792e:	4622      	mov	r2, r4
 8007930:	f001 f93a 	bl	8008ba8 <_dtoa_r>
 8007934:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007938:	4605      	mov	r5, r0
 800793a:	d119      	bne.n	8007970 <__cvt+0x94>
 800793c:	f019 0f01 	tst.w	r9, #1
 8007940:	d00e      	beq.n	8007960 <__cvt+0x84>
 8007942:	eb00 0904 	add.w	r9, r0, r4
 8007946:	2200      	movs	r2, #0
 8007948:	2300      	movs	r3, #0
 800794a:	4630      	mov	r0, r6
 800794c:	4639      	mov	r1, r7
 800794e:	f7f9 f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007952:	b108      	cbz	r0, 8007958 <__cvt+0x7c>
 8007954:	f8cd 900c 	str.w	r9, [sp, #12]
 8007958:	2230      	movs	r2, #48	@ 0x30
 800795a:	9b03      	ldr	r3, [sp, #12]
 800795c:	454b      	cmp	r3, r9
 800795e:	d31e      	bcc.n	800799e <__cvt+0xc2>
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007964:	1b5b      	subs	r3, r3, r5
 8007966:	4628      	mov	r0, r5
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	b004      	add	sp, #16
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007974:	eb00 0904 	add.w	r9, r0, r4
 8007978:	d1e5      	bne.n	8007946 <__cvt+0x6a>
 800797a:	7803      	ldrb	r3, [r0, #0]
 800797c:	2b30      	cmp	r3, #48	@ 0x30
 800797e:	d10a      	bne.n	8007996 <__cvt+0xba>
 8007980:	2200      	movs	r2, #0
 8007982:	2300      	movs	r3, #0
 8007984:	4630      	mov	r0, r6
 8007986:	4639      	mov	r1, r7
 8007988:	f7f9 f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800798c:	b918      	cbnz	r0, 8007996 <__cvt+0xba>
 800798e:	f1c4 0401 	rsb	r4, r4, #1
 8007992:	f8ca 4000 	str.w	r4, [sl]
 8007996:	f8da 3000 	ldr.w	r3, [sl]
 800799a:	4499      	add	r9, r3
 800799c:	e7d3      	b.n	8007946 <__cvt+0x6a>
 800799e:	1c59      	adds	r1, r3, #1
 80079a0:	9103      	str	r1, [sp, #12]
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	e7d9      	b.n	800795a <__cvt+0x7e>

080079a6 <__exponent>:
 80079a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079a8:	2900      	cmp	r1, #0
 80079aa:	bfba      	itte	lt
 80079ac:	4249      	neglt	r1, r1
 80079ae:	232d      	movlt	r3, #45	@ 0x2d
 80079b0:	232b      	movge	r3, #43	@ 0x2b
 80079b2:	2909      	cmp	r1, #9
 80079b4:	7002      	strb	r2, [r0, #0]
 80079b6:	7043      	strb	r3, [r0, #1]
 80079b8:	dd29      	ble.n	8007a0e <__exponent+0x68>
 80079ba:	f10d 0307 	add.w	r3, sp, #7
 80079be:	461d      	mov	r5, r3
 80079c0:	270a      	movs	r7, #10
 80079c2:	461a      	mov	r2, r3
 80079c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80079c8:	fb07 1416 	mls	r4, r7, r6, r1
 80079cc:	3430      	adds	r4, #48	@ 0x30
 80079ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80079d2:	460c      	mov	r4, r1
 80079d4:	2c63      	cmp	r4, #99	@ 0x63
 80079d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80079da:	4631      	mov	r1, r6
 80079dc:	dcf1      	bgt.n	80079c2 <__exponent+0x1c>
 80079de:	3130      	adds	r1, #48	@ 0x30
 80079e0:	1e94      	subs	r4, r2, #2
 80079e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80079e6:	1c41      	adds	r1, r0, #1
 80079e8:	4623      	mov	r3, r4
 80079ea:	42ab      	cmp	r3, r5
 80079ec:	d30a      	bcc.n	8007a04 <__exponent+0x5e>
 80079ee:	f10d 0309 	add.w	r3, sp, #9
 80079f2:	1a9b      	subs	r3, r3, r2
 80079f4:	42ac      	cmp	r4, r5
 80079f6:	bf88      	it	hi
 80079f8:	2300      	movhi	r3, #0
 80079fa:	3302      	adds	r3, #2
 80079fc:	4403      	add	r3, r0
 80079fe:	1a18      	subs	r0, r3, r0
 8007a00:	b003      	add	sp, #12
 8007a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a04:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a08:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a0c:	e7ed      	b.n	80079ea <__exponent+0x44>
 8007a0e:	2330      	movs	r3, #48	@ 0x30
 8007a10:	3130      	adds	r1, #48	@ 0x30
 8007a12:	7083      	strb	r3, [r0, #2]
 8007a14:	70c1      	strb	r1, [r0, #3]
 8007a16:	1d03      	adds	r3, r0, #4
 8007a18:	e7f1      	b.n	80079fe <__exponent+0x58>
	...

08007a1c <_printf_float>:
 8007a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a20:	b08d      	sub	sp, #52	@ 0x34
 8007a22:	460c      	mov	r4, r1
 8007a24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a28:	4616      	mov	r6, r2
 8007a2a:	461f      	mov	r7, r3
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	f000 ff7f 	bl	8008930 <_localeconv_r>
 8007a32:	6803      	ldr	r3, [r0, #0]
 8007a34:	9304      	str	r3, [sp, #16]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7f8 fc1a 	bl	8000270 <strlen>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a40:	f8d8 3000 	ldr.w	r3, [r8]
 8007a44:	9005      	str	r0, [sp, #20]
 8007a46:	3307      	adds	r3, #7
 8007a48:	f023 0307 	bic.w	r3, r3, #7
 8007a4c:	f103 0208 	add.w	r2, r3, #8
 8007a50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a54:	f8d4 b000 	ldr.w	fp, [r4]
 8007a58:	f8c8 2000 	str.w	r2, [r8]
 8007a5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007a64:	9307      	str	r3, [sp, #28]
 8007a66:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a72:	4b9c      	ldr	r3, [pc, #624]	@ (8007ce4 <_printf_float+0x2c8>)
 8007a74:	f04f 32ff 	mov.w	r2, #4294967295
 8007a78:	f7f9 f858 	bl	8000b2c <__aeabi_dcmpun>
 8007a7c:	bb70      	cbnz	r0, 8007adc <_printf_float+0xc0>
 8007a7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a82:	4b98      	ldr	r3, [pc, #608]	@ (8007ce4 <_printf_float+0x2c8>)
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295
 8007a88:	f7f9 f832 	bl	8000af0 <__aeabi_dcmple>
 8007a8c:	bb30      	cbnz	r0, 8007adc <_printf_float+0xc0>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2300      	movs	r3, #0
 8007a92:	4640      	mov	r0, r8
 8007a94:	4649      	mov	r1, r9
 8007a96:	f7f9 f821 	bl	8000adc <__aeabi_dcmplt>
 8007a9a:	b110      	cbz	r0, 8007aa2 <_printf_float+0x86>
 8007a9c:	232d      	movs	r3, #45	@ 0x2d
 8007a9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aa2:	4a91      	ldr	r2, [pc, #580]	@ (8007ce8 <_printf_float+0x2cc>)
 8007aa4:	4b91      	ldr	r3, [pc, #580]	@ (8007cec <_printf_float+0x2d0>)
 8007aa6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007aaa:	bf94      	ite	ls
 8007aac:	4690      	movls	r8, r2
 8007aae:	4698      	movhi	r8, r3
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	6123      	str	r3, [r4, #16]
 8007ab4:	f02b 0304 	bic.w	r3, fp, #4
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	f04f 0900 	mov.w	r9, #0
 8007abe:	9700      	str	r7, [sp, #0]
 8007ac0:	4633      	mov	r3, r6
 8007ac2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f000 f9d2 	bl	8007e70 <_printf_common>
 8007acc:	3001      	adds	r0, #1
 8007ace:	f040 808d 	bne.w	8007bec <_printf_float+0x1d0>
 8007ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad6:	b00d      	add	sp, #52	@ 0x34
 8007ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007adc:	4642      	mov	r2, r8
 8007ade:	464b      	mov	r3, r9
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	f7f9 f822 	bl	8000b2c <__aeabi_dcmpun>
 8007ae8:	b140      	cbz	r0, 8007afc <_printf_float+0xe0>
 8007aea:	464b      	mov	r3, r9
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bfbc      	itt	lt
 8007af0:	232d      	movlt	r3, #45	@ 0x2d
 8007af2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007af6:	4a7e      	ldr	r2, [pc, #504]	@ (8007cf0 <_printf_float+0x2d4>)
 8007af8:	4b7e      	ldr	r3, [pc, #504]	@ (8007cf4 <_printf_float+0x2d8>)
 8007afa:	e7d4      	b.n	8007aa6 <_printf_float+0x8a>
 8007afc:	6863      	ldr	r3, [r4, #4]
 8007afe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007b02:	9206      	str	r2, [sp, #24]
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	d13b      	bne.n	8007b80 <_printf_float+0x164>
 8007b08:	2306      	movs	r3, #6
 8007b0a:	6063      	str	r3, [r4, #4]
 8007b0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007b10:	2300      	movs	r3, #0
 8007b12:	6022      	str	r2, [r4, #0]
 8007b14:	9303      	str	r3, [sp, #12]
 8007b16:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b18:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007b1c:	ab09      	add	r3, sp, #36	@ 0x24
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	6861      	ldr	r1, [r4, #4]
 8007b22:	ec49 8b10 	vmov	d0, r8, r9
 8007b26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f7ff fed6 	bl	80078dc <__cvt>
 8007b30:	9b06      	ldr	r3, [sp, #24]
 8007b32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b34:	2b47      	cmp	r3, #71	@ 0x47
 8007b36:	4680      	mov	r8, r0
 8007b38:	d129      	bne.n	8007b8e <_printf_float+0x172>
 8007b3a:	1cc8      	adds	r0, r1, #3
 8007b3c:	db02      	blt.n	8007b44 <_printf_float+0x128>
 8007b3e:	6863      	ldr	r3, [r4, #4]
 8007b40:	4299      	cmp	r1, r3
 8007b42:	dd41      	ble.n	8007bc8 <_printf_float+0x1ac>
 8007b44:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b48:	fa5f fa8a 	uxtb.w	sl, sl
 8007b4c:	3901      	subs	r1, #1
 8007b4e:	4652      	mov	r2, sl
 8007b50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b54:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b56:	f7ff ff26 	bl	80079a6 <__exponent>
 8007b5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b5c:	1813      	adds	r3, r2, r0
 8007b5e:	2a01      	cmp	r2, #1
 8007b60:	4681      	mov	r9, r0
 8007b62:	6123      	str	r3, [r4, #16]
 8007b64:	dc02      	bgt.n	8007b6c <_printf_float+0x150>
 8007b66:	6822      	ldr	r2, [r4, #0]
 8007b68:	07d2      	lsls	r2, r2, #31
 8007b6a:	d501      	bpl.n	8007b70 <_printf_float+0x154>
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	6123      	str	r3, [r4, #16]
 8007b70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0a2      	beq.n	8007abe <_printf_float+0xa2>
 8007b78:	232d      	movs	r3, #45	@ 0x2d
 8007b7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b7e:	e79e      	b.n	8007abe <_printf_float+0xa2>
 8007b80:	9a06      	ldr	r2, [sp, #24]
 8007b82:	2a47      	cmp	r2, #71	@ 0x47
 8007b84:	d1c2      	bne.n	8007b0c <_printf_float+0xf0>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1c0      	bne.n	8007b0c <_printf_float+0xf0>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e7bd      	b.n	8007b0a <_printf_float+0xee>
 8007b8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b92:	d9db      	bls.n	8007b4c <_printf_float+0x130>
 8007b94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007b98:	d118      	bne.n	8007bcc <_printf_float+0x1b0>
 8007b9a:	2900      	cmp	r1, #0
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	dd0b      	ble.n	8007bb8 <_printf_float+0x19c>
 8007ba0:	6121      	str	r1, [r4, #16]
 8007ba2:	b913      	cbnz	r3, 8007baa <_printf_float+0x18e>
 8007ba4:	6822      	ldr	r2, [r4, #0]
 8007ba6:	07d0      	lsls	r0, r2, #31
 8007ba8:	d502      	bpl.n	8007bb0 <_printf_float+0x194>
 8007baa:	3301      	adds	r3, #1
 8007bac:	440b      	add	r3, r1
 8007bae:	6123      	str	r3, [r4, #16]
 8007bb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007bb2:	f04f 0900 	mov.w	r9, #0
 8007bb6:	e7db      	b.n	8007b70 <_printf_float+0x154>
 8007bb8:	b913      	cbnz	r3, 8007bc0 <_printf_float+0x1a4>
 8007bba:	6822      	ldr	r2, [r4, #0]
 8007bbc:	07d2      	lsls	r2, r2, #31
 8007bbe:	d501      	bpl.n	8007bc4 <_printf_float+0x1a8>
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	e7f4      	b.n	8007bae <_printf_float+0x192>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e7f2      	b.n	8007bae <_printf_float+0x192>
 8007bc8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bce:	4299      	cmp	r1, r3
 8007bd0:	db05      	blt.n	8007bde <_printf_float+0x1c2>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	6121      	str	r1, [r4, #16]
 8007bd6:	07d8      	lsls	r0, r3, #31
 8007bd8:	d5ea      	bpl.n	8007bb0 <_printf_float+0x194>
 8007bda:	1c4b      	adds	r3, r1, #1
 8007bdc:	e7e7      	b.n	8007bae <_printf_float+0x192>
 8007bde:	2900      	cmp	r1, #0
 8007be0:	bfd4      	ite	le
 8007be2:	f1c1 0202 	rsble	r2, r1, #2
 8007be6:	2201      	movgt	r2, #1
 8007be8:	4413      	add	r3, r2
 8007bea:	e7e0      	b.n	8007bae <_printf_float+0x192>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	055a      	lsls	r2, r3, #21
 8007bf0:	d407      	bmi.n	8007c02 <_printf_float+0x1e6>
 8007bf2:	6923      	ldr	r3, [r4, #16]
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b8      	blx	r7
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d12b      	bne.n	8007c58 <_printf_float+0x23c>
 8007c00:	e767      	b.n	8007ad2 <_printf_float+0xb6>
 8007c02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c06:	f240 80dd 	bls.w	8007dc4 <_printf_float+0x3a8>
 8007c0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2300      	movs	r3, #0
 8007c12:	f7f8 ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d033      	beq.n	8007c82 <_printf_float+0x266>
 8007c1a:	4a37      	ldr	r2, [pc, #220]	@ (8007cf8 <_printf_float+0x2dc>)
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b8      	blx	r7
 8007c24:	3001      	adds	r0, #1
 8007c26:	f43f af54 	beq.w	8007ad2 <_printf_float+0xb6>
 8007c2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007c2e:	4543      	cmp	r3, r8
 8007c30:	db02      	blt.n	8007c38 <_printf_float+0x21c>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	07d8      	lsls	r0, r3, #31
 8007c36:	d50f      	bpl.n	8007c58 <_printf_float+0x23c>
 8007c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c3c:	4631      	mov	r1, r6
 8007c3e:	4628      	mov	r0, r5
 8007c40:	47b8      	blx	r7
 8007c42:	3001      	adds	r0, #1
 8007c44:	f43f af45 	beq.w	8007ad2 <_printf_float+0xb6>
 8007c48:	f04f 0900 	mov.w	r9, #0
 8007c4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c50:	f104 0a1a 	add.w	sl, r4, #26
 8007c54:	45c8      	cmp	r8, r9
 8007c56:	dc09      	bgt.n	8007c6c <_printf_float+0x250>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	079b      	lsls	r3, r3, #30
 8007c5c:	f100 8103 	bmi.w	8007e66 <_printf_float+0x44a>
 8007c60:	68e0      	ldr	r0, [r4, #12]
 8007c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c64:	4298      	cmp	r0, r3
 8007c66:	bfb8      	it	lt
 8007c68:	4618      	movlt	r0, r3
 8007c6a:	e734      	b.n	8007ad6 <_printf_float+0xba>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	4652      	mov	r2, sl
 8007c70:	4631      	mov	r1, r6
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	f43f af2b 	beq.w	8007ad2 <_printf_float+0xb6>
 8007c7c:	f109 0901 	add.w	r9, r9, #1
 8007c80:	e7e8      	b.n	8007c54 <_printf_float+0x238>
 8007c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dc39      	bgt.n	8007cfc <_printf_float+0x2e0>
 8007c88:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf8 <_printf_float+0x2dc>)
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	f43f af1d 	beq.w	8007ad2 <_printf_float+0xb6>
 8007c98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007c9c:	ea59 0303 	orrs.w	r3, r9, r3
 8007ca0:	d102      	bne.n	8007ca8 <_printf_float+0x28c>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	07d9      	lsls	r1, r3, #31
 8007ca6:	d5d7      	bpl.n	8007c58 <_printf_float+0x23c>
 8007ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cac:	4631      	mov	r1, r6
 8007cae:	4628      	mov	r0, r5
 8007cb0:	47b8      	blx	r7
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	f43f af0d 	beq.w	8007ad2 <_printf_float+0xb6>
 8007cb8:	f04f 0a00 	mov.w	sl, #0
 8007cbc:	f104 0b1a 	add.w	fp, r4, #26
 8007cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc2:	425b      	negs	r3, r3
 8007cc4:	4553      	cmp	r3, sl
 8007cc6:	dc01      	bgt.n	8007ccc <_printf_float+0x2b0>
 8007cc8:	464b      	mov	r3, r9
 8007cca:	e793      	b.n	8007bf4 <_printf_float+0x1d8>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	465a      	mov	r2, fp
 8007cd0:	4631      	mov	r1, r6
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	47b8      	blx	r7
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	f43f aefb 	beq.w	8007ad2 <_printf_float+0xb6>
 8007cdc:	f10a 0a01 	add.w	sl, sl, #1
 8007ce0:	e7ee      	b.n	8007cc0 <_printf_float+0x2a4>
 8007ce2:	bf00      	nop
 8007ce4:	7fefffff 	.word	0x7fefffff
 8007ce8:	0800d540 	.word	0x0800d540
 8007cec:	0800d544 	.word	0x0800d544
 8007cf0:	0800d548 	.word	0x0800d548
 8007cf4:	0800d54c 	.word	0x0800d54c
 8007cf8:	0800d550 	.word	0x0800d550
 8007cfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007cfe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d02:	4553      	cmp	r3, sl
 8007d04:	bfa8      	it	ge
 8007d06:	4653      	movge	r3, sl
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	4699      	mov	r9, r3
 8007d0c:	dc36      	bgt.n	8007d7c <_printf_float+0x360>
 8007d0e:	f04f 0b00 	mov.w	fp, #0
 8007d12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d16:	f104 021a 	add.w	r2, r4, #26
 8007d1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d1c:	9306      	str	r3, [sp, #24]
 8007d1e:	eba3 0309 	sub.w	r3, r3, r9
 8007d22:	455b      	cmp	r3, fp
 8007d24:	dc31      	bgt.n	8007d8a <_printf_float+0x36e>
 8007d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d28:	459a      	cmp	sl, r3
 8007d2a:	dc3a      	bgt.n	8007da2 <_printf_float+0x386>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	07da      	lsls	r2, r3, #31
 8007d30:	d437      	bmi.n	8007da2 <_printf_float+0x386>
 8007d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d34:	ebaa 0903 	sub.w	r9, sl, r3
 8007d38:	9b06      	ldr	r3, [sp, #24]
 8007d3a:	ebaa 0303 	sub.w	r3, sl, r3
 8007d3e:	4599      	cmp	r9, r3
 8007d40:	bfa8      	it	ge
 8007d42:	4699      	movge	r9, r3
 8007d44:	f1b9 0f00 	cmp.w	r9, #0
 8007d48:	dc33      	bgt.n	8007db2 <_printf_float+0x396>
 8007d4a:	f04f 0800 	mov.w	r8, #0
 8007d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d52:	f104 0b1a 	add.w	fp, r4, #26
 8007d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d58:	ebaa 0303 	sub.w	r3, sl, r3
 8007d5c:	eba3 0309 	sub.w	r3, r3, r9
 8007d60:	4543      	cmp	r3, r8
 8007d62:	f77f af79 	ble.w	8007c58 <_printf_float+0x23c>
 8007d66:	2301      	movs	r3, #1
 8007d68:	465a      	mov	r2, fp
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b8      	blx	r7
 8007d70:	3001      	adds	r0, #1
 8007d72:	f43f aeae 	beq.w	8007ad2 <_printf_float+0xb6>
 8007d76:	f108 0801 	add.w	r8, r8, #1
 8007d7a:	e7ec      	b.n	8007d56 <_printf_float+0x33a>
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b8      	blx	r7
 8007d84:	3001      	adds	r0, #1
 8007d86:	d1c2      	bne.n	8007d0e <_printf_float+0x2f2>
 8007d88:	e6a3      	b.n	8007ad2 <_printf_float+0xb6>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4628      	mov	r0, r5
 8007d90:	9206      	str	r2, [sp, #24]
 8007d92:	47b8      	blx	r7
 8007d94:	3001      	adds	r0, #1
 8007d96:	f43f ae9c 	beq.w	8007ad2 <_printf_float+0xb6>
 8007d9a:	9a06      	ldr	r2, [sp, #24]
 8007d9c:	f10b 0b01 	add.w	fp, fp, #1
 8007da0:	e7bb      	b.n	8007d1a <_printf_float+0x2fe>
 8007da2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007da6:	4631      	mov	r1, r6
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b8      	blx	r7
 8007dac:	3001      	adds	r0, #1
 8007dae:	d1c0      	bne.n	8007d32 <_printf_float+0x316>
 8007db0:	e68f      	b.n	8007ad2 <_printf_float+0xb6>
 8007db2:	9a06      	ldr	r2, [sp, #24]
 8007db4:	464b      	mov	r3, r9
 8007db6:	4442      	add	r2, r8
 8007db8:	4631      	mov	r1, r6
 8007dba:	4628      	mov	r0, r5
 8007dbc:	47b8      	blx	r7
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	d1c3      	bne.n	8007d4a <_printf_float+0x32e>
 8007dc2:	e686      	b.n	8007ad2 <_printf_float+0xb6>
 8007dc4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007dc8:	f1ba 0f01 	cmp.w	sl, #1
 8007dcc:	dc01      	bgt.n	8007dd2 <_printf_float+0x3b6>
 8007dce:	07db      	lsls	r3, r3, #31
 8007dd0:	d536      	bpl.n	8007e40 <_printf_float+0x424>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b8      	blx	r7
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f43f ae78 	beq.w	8007ad2 <_printf_float+0xb6>
 8007de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007de6:	4631      	mov	r1, r6
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b8      	blx	r7
 8007dec:	3001      	adds	r0, #1
 8007dee:	f43f ae70 	beq.w	8007ad2 <_printf_float+0xb6>
 8007df2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007df6:	2200      	movs	r2, #0
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dfe:	f7f8 fe63 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e02:	b9c0      	cbnz	r0, 8007e36 <_printf_float+0x41a>
 8007e04:	4653      	mov	r3, sl
 8007e06:	f108 0201 	add.w	r2, r8, #1
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b8      	blx	r7
 8007e10:	3001      	adds	r0, #1
 8007e12:	d10c      	bne.n	8007e2e <_printf_float+0x412>
 8007e14:	e65d      	b.n	8007ad2 <_printf_float+0xb6>
 8007e16:	2301      	movs	r3, #1
 8007e18:	465a      	mov	r2, fp
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	f43f ae56 	beq.w	8007ad2 <_printf_float+0xb6>
 8007e26:	f108 0801 	add.w	r8, r8, #1
 8007e2a:	45d0      	cmp	r8, sl
 8007e2c:	dbf3      	blt.n	8007e16 <_printf_float+0x3fa>
 8007e2e:	464b      	mov	r3, r9
 8007e30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e34:	e6df      	b.n	8007bf6 <_printf_float+0x1da>
 8007e36:	f04f 0800 	mov.w	r8, #0
 8007e3a:	f104 0b1a 	add.w	fp, r4, #26
 8007e3e:	e7f4      	b.n	8007e2a <_printf_float+0x40e>
 8007e40:	2301      	movs	r3, #1
 8007e42:	4642      	mov	r2, r8
 8007e44:	e7e1      	b.n	8007e0a <_printf_float+0x3ee>
 8007e46:	2301      	movs	r3, #1
 8007e48:	464a      	mov	r2, r9
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b8      	blx	r7
 8007e50:	3001      	adds	r0, #1
 8007e52:	f43f ae3e 	beq.w	8007ad2 <_printf_float+0xb6>
 8007e56:	f108 0801 	add.w	r8, r8, #1
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e5e:	1a5b      	subs	r3, r3, r1
 8007e60:	4543      	cmp	r3, r8
 8007e62:	dcf0      	bgt.n	8007e46 <_printf_float+0x42a>
 8007e64:	e6fc      	b.n	8007c60 <_printf_float+0x244>
 8007e66:	f04f 0800 	mov.w	r8, #0
 8007e6a:	f104 0919 	add.w	r9, r4, #25
 8007e6e:	e7f4      	b.n	8007e5a <_printf_float+0x43e>

08007e70 <_printf_common>:
 8007e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e74:	4616      	mov	r6, r2
 8007e76:	4698      	mov	r8, r3
 8007e78:	688a      	ldr	r2, [r1, #8]
 8007e7a:	690b      	ldr	r3, [r1, #16]
 8007e7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e80:	4293      	cmp	r3, r2
 8007e82:	bfb8      	it	lt
 8007e84:	4613      	movlt	r3, r2
 8007e86:	6033      	str	r3, [r6, #0]
 8007e88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e8c:	4607      	mov	r7, r0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	b10a      	cbz	r2, 8007e96 <_printf_common+0x26>
 8007e92:	3301      	adds	r3, #1
 8007e94:	6033      	str	r3, [r6, #0]
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	0699      	lsls	r1, r3, #26
 8007e9a:	bf42      	ittt	mi
 8007e9c:	6833      	ldrmi	r3, [r6, #0]
 8007e9e:	3302      	addmi	r3, #2
 8007ea0:	6033      	strmi	r3, [r6, #0]
 8007ea2:	6825      	ldr	r5, [r4, #0]
 8007ea4:	f015 0506 	ands.w	r5, r5, #6
 8007ea8:	d106      	bne.n	8007eb8 <_printf_common+0x48>
 8007eaa:	f104 0a19 	add.w	sl, r4, #25
 8007eae:	68e3      	ldr	r3, [r4, #12]
 8007eb0:	6832      	ldr	r2, [r6, #0]
 8007eb2:	1a9b      	subs	r3, r3, r2
 8007eb4:	42ab      	cmp	r3, r5
 8007eb6:	dc26      	bgt.n	8007f06 <_printf_common+0x96>
 8007eb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ebc:	6822      	ldr	r2, [r4, #0]
 8007ebe:	3b00      	subs	r3, #0
 8007ec0:	bf18      	it	ne
 8007ec2:	2301      	movne	r3, #1
 8007ec4:	0692      	lsls	r2, r2, #26
 8007ec6:	d42b      	bmi.n	8007f20 <_printf_common+0xb0>
 8007ec8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ecc:	4641      	mov	r1, r8
 8007ece:	4638      	mov	r0, r7
 8007ed0:	47c8      	blx	r9
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	d01e      	beq.n	8007f14 <_printf_common+0xa4>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	6922      	ldr	r2, [r4, #16]
 8007eda:	f003 0306 	and.w	r3, r3, #6
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	bf02      	ittt	eq
 8007ee2:	68e5      	ldreq	r5, [r4, #12]
 8007ee4:	6833      	ldreq	r3, [r6, #0]
 8007ee6:	1aed      	subeq	r5, r5, r3
 8007ee8:	68a3      	ldr	r3, [r4, #8]
 8007eea:	bf0c      	ite	eq
 8007eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ef0:	2500      	movne	r5, #0
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	bfc4      	itt	gt
 8007ef6:	1a9b      	subgt	r3, r3, r2
 8007ef8:	18ed      	addgt	r5, r5, r3
 8007efa:	2600      	movs	r6, #0
 8007efc:	341a      	adds	r4, #26
 8007efe:	42b5      	cmp	r5, r6
 8007f00:	d11a      	bne.n	8007f38 <_printf_common+0xc8>
 8007f02:	2000      	movs	r0, #0
 8007f04:	e008      	b.n	8007f18 <_printf_common+0xa8>
 8007f06:	2301      	movs	r3, #1
 8007f08:	4652      	mov	r2, sl
 8007f0a:	4641      	mov	r1, r8
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	47c8      	blx	r9
 8007f10:	3001      	adds	r0, #1
 8007f12:	d103      	bne.n	8007f1c <_printf_common+0xac>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1c:	3501      	adds	r5, #1
 8007f1e:	e7c6      	b.n	8007eae <_printf_common+0x3e>
 8007f20:	18e1      	adds	r1, r4, r3
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	2030      	movs	r0, #48	@ 0x30
 8007f26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f2a:	4422      	add	r2, r4
 8007f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f34:	3302      	adds	r3, #2
 8007f36:	e7c7      	b.n	8007ec8 <_printf_common+0x58>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	4638      	mov	r0, r7
 8007f40:	47c8      	blx	r9
 8007f42:	3001      	adds	r0, #1
 8007f44:	d0e6      	beq.n	8007f14 <_printf_common+0xa4>
 8007f46:	3601      	adds	r6, #1
 8007f48:	e7d9      	b.n	8007efe <_printf_common+0x8e>
	...

08007f4c <_printf_i>:
 8007f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f50:	7e0f      	ldrb	r7, [r1, #24]
 8007f52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f54:	2f78      	cmp	r7, #120	@ 0x78
 8007f56:	4691      	mov	r9, r2
 8007f58:	4680      	mov	r8, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	469a      	mov	sl, r3
 8007f5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f62:	d807      	bhi.n	8007f74 <_printf_i+0x28>
 8007f64:	2f62      	cmp	r7, #98	@ 0x62
 8007f66:	d80a      	bhi.n	8007f7e <_printf_i+0x32>
 8007f68:	2f00      	cmp	r7, #0
 8007f6a:	f000 80d2 	beq.w	8008112 <_printf_i+0x1c6>
 8007f6e:	2f58      	cmp	r7, #88	@ 0x58
 8007f70:	f000 80b9 	beq.w	80080e6 <_printf_i+0x19a>
 8007f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f7c:	e03a      	b.n	8007ff4 <_printf_i+0xa8>
 8007f7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f82:	2b15      	cmp	r3, #21
 8007f84:	d8f6      	bhi.n	8007f74 <_printf_i+0x28>
 8007f86:	a101      	add	r1, pc, #4	@ (adr r1, 8007f8c <_printf_i+0x40>)
 8007f88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f8c:	08007fe5 	.word	0x08007fe5
 8007f90:	08007ff9 	.word	0x08007ff9
 8007f94:	08007f75 	.word	0x08007f75
 8007f98:	08007f75 	.word	0x08007f75
 8007f9c:	08007f75 	.word	0x08007f75
 8007fa0:	08007f75 	.word	0x08007f75
 8007fa4:	08007ff9 	.word	0x08007ff9
 8007fa8:	08007f75 	.word	0x08007f75
 8007fac:	08007f75 	.word	0x08007f75
 8007fb0:	08007f75 	.word	0x08007f75
 8007fb4:	08007f75 	.word	0x08007f75
 8007fb8:	080080f9 	.word	0x080080f9
 8007fbc:	08008023 	.word	0x08008023
 8007fc0:	080080b3 	.word	0x080080b3
 8007fc4:	08007f75 	.word	0x08007f75
 8007fc8:	08007f75 	.word	0x08007f75
 8007fcc:	0800811b 	.word	0x0800811b
 8007fd0:	08007f75 	.word	0x08007f75
 8007fd4:	08008023 	.word	0x08008023
 8007fd8:	08007f75 	.word	0x08007f75
 8007fdc:	08007f75 	.word	0x08007f75
 8007fe0:	080080bb 	.word	0x080080bb
 8007fe4:	6833      	ldr	r3, [r6, #0]
 8007fe6:	1d1a      	adds	r2, r3, #4
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6032      	str	r2, [r6, #0]
 8007fec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ff0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e09d      	b.n	8008134 <_printf_i+0x1e8>
 8007ff8:	6833      	ldr	r3, [r6, #0]
 8007ffa:	6820      	ldr	r0, [r4, #0]
 8007ffc:	1d19      	adds	r1, r3, #4
 8007ffe:	6031      	str	r1, [r6, #0]
 8008000:	0606      	lsls	r6, r0, #24
 8008002:	d501      	bpl.n	8008008 <_printf_i+0xbc>
 8008004:	681d      	ldr	r5, [r3, #0]
 8008006:	e003      	b.n	8008010 <_printf_i+0xc4>
 8008008:	0645      	lsls	r5, r0, #25
 800800a:	d5fb      	bpl.n	8008004 <_printf_i+0xb8>
 800800c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008010:	2d00      	cmp	r5, #0
 8008012:	da03      	bge.n	800801c <_printf_i+0xd0>
 8008014:	232d      	movs	r3, #45	@ 0x2d
 8008016:	426d      	negs	r5, r5
 8008018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800801c:	4859      	ldr	r0, [pc, #356]	@ (8008184 <_printf_i+0x238>)
 800801e:	230a      	movs	r3, #10
 8008020:	e011      	b.n	8008046 <_printf_i+0xfa>
 8008022:	6821      	ldr	r1, [r4, #0]
 8008024:	6833      	ldr	r3, [r6, #0]
 8008026:	0608      	lsls	r0, r1, #24
 8008028:	f853 5b04 	ldr.w	r5, [r3], #4
 800802c:	d402      	bmi.n	8008034 <_printf_i+0xe8>
 800802e:	0649      	lsls	r1, r1, #25
 8008030:	bf48      	it	mi
 8008032:	b2ad      	uxthmi	r5, r5
 8008034:	2f6f      	cmp	r7, #111	@ 0x6f
 8008036:	4853      	ldr	r0, [pc, #332]	@ (8008184 <_printf_i+0x238>)
 8008038:	6033      	str	r3, [r6, #0]
 800803a:	bf14      	ite	ne
 800803c:	230a      	movne	r3, #10
 800803e:	2308      	moveq	r3, #8
 8008040:	2100      	movs	r1, #0
 8008042:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008046:	6866      	ldr	r6, [r4, #4]
 8008048:	60a6      	str	r6, [r4, #8]
 800804a:	2e00      	cmp	r6, #0
 800804c:	bfa2      	ittt	ge
 800804e:	6821      	ldrge	r1, [r4, #0]
 8008050:	f021 0104 	bicge.w	r1, r1, #4
 8008054:	6021      	strge	r1, [r4, #0]
 8008056:	b90d      	cbnz	r5, 800805c <_printf_i+0x110>
 8008058:	2e00      	cmp	r6, #0
 800805a:	d04b      	beq.n	80080f4 <_printf_i+0x1a8>
 800805c:	4616      	mov	r6, r2
 800805e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008062:	fb03 5711 	mls	r7, r3, r1, r5
 8008066:	5dc7      	ldrb	r7, [r0, r7]
 8008068:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800806c:	462f      	mov	r7, r5
 800806e:	42bb      	cmp	r3, r7
 8008070:	460d      	mov	r5, r1
 8008072:	d9f4      	bls.n	800805e <_printf_i+0x112>
 8008074:	2b08      	cmp	r3, #8
 8008076:	d10b      	bne.n	8008090 <_printf_i+0x144>
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	07df      	lsls	r7, r3, #31
 800807c:	d508      	bpl.n	8008090 <_printf_i+0x144>
 800807e:	6923      	ldr	r3, [r4, #16]
 8008080:	6861      	ldr	r1, [r4, #4]
 8008082:	4299      	cmp	r1, r3
 8008084:	bfde      	ittt	le
 8008086:	2330      	movle	r3, #48	@ 0x30
 8008088:	f806 3c01 	strble.w	r3, [r6, #-1]
 800808c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008090:	1b92      	subs	r2, r2, r6
 8008092:	6122      	str	r2, [r4, #16]
 8008094:	f8cd a000 	str.w	sl, [sp]
 8008098:	464b      	mov	r3, r9
 800809a:	aa03      	add	r2, sp, #12
 800809c:	4621      	mov	r1, r4
 800809e:	4640      	mov	r0, r8
 80080a0:	f7ff fee6 	bl	8007e70 <_printf_common>
 80080a4:	3001      	adds	r0, #1
 80080a6:	d14a      	bne.n	800813e <_printf_i+0x1f2>
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ac:	b004      	add	sp, #16
 80080ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	f043 0320 	orr.w	r3, r3, #32
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	4833      	ldr	r0, [pc, #204]	@ (8008188 <_printf_i+0x23c>)
 80080bc:	2778      	movs	r7, #120	@ 0x78
 80080be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	6831      	ldr	r1, [r6, #0]
 80080c6:	061f      	lsls	r7, r3, #24
 80080c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80080cc:	d402      	bmi.n	80080d4 <_printf_i+0x188>
 80080ce:	065f      	lsls	r7, r3, #25
 80080d0:	bf48      	it	mi
 80080d2:	b2ad      	uxthmi	r5, r5
 80080d4:	6031      	str	r1, [r6, #0]
 80080d6:	07d9      	lsls	r1, r3, #31
 80080d8:	bf44      	itt	mi
 80080da:	f043 0320 	orrmi.w	r3, r3, #32
 80080de:	6023      	strmi	r3, [r4, #0]
 80080e0:	b11d      	cbz	r5, 80080ea <_printf_i+0x19e>
 80080e2:	2310      	movs	r3, #16
 80080e4:	e7ac      	b.n	8008040 <_printf_i+0xf4>
 80080e6:	4827      	ldr	r0, [pc, #156]	@ (8008184 <_printf_i+0x238>)
 80080e8:	e7e9      	b.n	80080be <_printf_i+0x172>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	f023 0320 	bic.w	r3, r3, #32
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	e7f6      	b.n	80080e2 <_printf_i+0x196>
 80080f4:	4616      	mov	r6, r2
 80080f6:	e7bd      	b.n	8008074 <_printf_i+0x128>
 80080f8:	6833      	ldr	r3, [r6, #0]
 80080fa:	6825      	ldr	r5, [r4, #0]
 80080fc:	6961      	ldr	r1, [r4, #20]
 80080fe:	1d18      	adds	r0, r3, #4
 8008100:	6030      	str	r0, [r6, #0]
 8008102:	062e      	lsls	r6, r5, #24
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	d501      	bpl.n	800810c <_printf_i+0x1c0>
 8008108:	6019      	str	r1, [r3, #0]
 800810a:	e002      	b.n	8008112 <_printf_i+0x1c6>
 800810c:	0668      	lsls	r0, r5, #25
 800810e:	d5fb      	bpl.n	8008108 <_printf_i+0x1bc>
 8008110:	8019      	strh	r1, [r3, #0]
 8008112:	2300      	movs	r3, #0
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	4616      	mov	r6, r2
 8008118:	e7bc      	b.n	8008094 <_printf_i+0x148>
 800811a:	6833      	ldr	r3, [r6, #0]
 800811c:	1d1a      	adds	r2, r3, #4
 800811e:	6032      	str	r2, [r6, #0]
 8008120:	681e      	ldr	r6, [r3, #0]
 8008122:	6862      	ldr	r2, [r4, #4]
 8008124:	2100      	movs	r1, #0
 8008126:	4630      	mov	r0, r6
 8008128:	f7f8 f852 	bl	80001d0 <memchr>
 800812c:	b108      	cbz	r0, 8008132 <_printf_i+0x1e6>
 800812e:	1b80      	subs	r0, r0, r6
 8008130:	6060      	str	r0, [r4, #4]
 8008132:	6863      	ldr	r3, [r4, #4]
 8008134:	6123      	str	r3, [r4, #16]
 8008136:	2300      	movs	r3, #0
 8008138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800813c:	e7aa      	b.n	8008094 <_printf_i+0x148>
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	4632      	mov	r2, r6
 8008142:	4649      	mov	r1, r9
 8008144:	4640      	mov	r0, r8
 8008146:	47d0      	blx	sl
 8008148:	3001      	adds	r0, #1
 800814a:	d0ad      	beq.n	80080a8 <_printf_i+0x15c>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	079b      	lsls	r3, r3, #30
 8008150:	d413      	bmi.n	800817a <_printf_i+0x22e>
 8008152:	68e0      	ldr	r0, [r4, #12]
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	4298      	cmp	r0, r3
 8008158:	bfb8      	it	lt
 800815a:	4618      	movlt	r0, r3
 800815c:	e7a6      	b.n	80080ac <_printf_i+0x160>
 800815e:	2301      	movs	r3, #1
 8008160:	4632      	mov	r2, r6
 8008162:	4649      	mov	r1, r9
 8008164:	4640      	mov	r0, r8
 8008166:	47d0      	blx	sl
 8008168:	3001      	adds	r0, #1
 800816a:	d09d      	beq.n	80080a8 <_printf_i+0x15c>
 800816c:	3501      	adds	r5, #1
 800816e:	68e3      	ldr	r3, [r4, #12]
 8008170:	9903      	ldr	r1, [sp, #12]
 8008172:	1a5b      	subs	r3, r3, r1
 8008174:	42ab      	cmp	r3, r5
 8008176:	dcf2      	bgt.n	800815e <_printf_i+0x212>
 8008178:	e7eb      	b.n	8008152 <_printf_i+0x206>
 800817a:	2500      	movs	r5, #0
 800817c:	f104 0619 	add.w	r6, r4, #25
 8008180:	e7f5      	b.n	800816e <_printf_i+0x222>
 8008182:	bf00      	nop
 8008184:	0800d552 	.word	0x0800d552
 8008188:	0800d563 	.word	0x0800d563

0800818c <_scanf_float>:
 800818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	b087      	sub	sp, #28
 8008192:	4617      	mov	r7, r2
 8008194:	9303      	str	r3, [sp, #12]
 8008196:	688b      	ldr	r3, [r1, #8]
 8008198:	1e5a      	subs	r2, r3, #1
 800819a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800819e:	bf81      	itttt	hi
 80081a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80081a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80081a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80081ac:	608b      	strhi	r3, [r1, #8]
 80081ae:	680b      	ldr	r3, [r1, #0]
 80081b0:	460a      	mov	r2, r1
 80081b2:	f04f 0500 	mov.w	r5, #0
 80081b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80081ba:	f842 3b1c 	str.w	r3, [r2], #28
 80081be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081c2:	4680      	mov	r8, r0
 80081c4:	460c      	mov	r4, r1
 80081c6:	bf98      	it	ls
 80081c8:	f04f 0b00 	movls.w	fp, #0
 80081cc:	9201      	str	r2, [sp, #4]
 80081ce:	4616      	mov	r6, r2
 80081d0:	46aa      	mov	sl, r5
 80081d2:	46a9      	mov	r9, r5
 80081d4:	9502      	str	r5, [sp, #8]
 80081d6:	68a2      	ldr	r2, [r4, #8]
 80081d8:	b152      	cbz	r2, 80081f0 <_scanf_float+0x64>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b4e      	cmp	r3, #78	@ 0x4e
 80081e0:	d864      	bhi.n	80082ac <_scanf_float+0x120>
 80081e2:	2b40      	cmp	r3, #64	@ 0x40
 80081e4:	d83c      	bhi.n	8008260 <_scanf_float+0xd4>
 80081e6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80081ea:	b2c8      	uxtb	r0, r1
 80081ec:	280e      	cmp	r0, #14
 80081ee:	d93a      	bls.n	8008266 <_scanf_float+0xda>
 80081f0:	f1b9 0f00 	cmp.w	r9, #0
 80081f4:	d003      	beq.n	80081fe <_scanf_float+0x72>
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008202:	f1ba 0f01 	cmp.w	sl, #1
 8008206:	f200 8117 	bhi.w	8008438 <_scanf_float+0x2ac>
 800820a:	9b01      	ldr	r3, [sp, #4]
 800820c:	429e      	cmp	r6, r3
 800820e:	f200 8108 	bhi.w	8008422 <_scanf_float+0x296>
 8008212:	2001      	movs	r0, #1
 8008214:	b007      	add	sp, #28
 8008216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800821e:	2a0d      	cmp	r2, #13
 8008220:	d8e6      	bhi.n	80081f0 <_scanf_float+0x64>
 8008222:	a101      	add	r1, pc, #4	@ (adr r1, 8008228 <_scanf_float+0x9c>)
 8008224:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008228:	0800836f 	.word	0x0800836f
 800822c:	080081f1 	.word	0x080081f1
 8008230:	080081f1 	.word	0x080081f1
 8008234:	080081f1 	.word	0x080081f1
 8008238:	080083cf 	.word	0x080083cf
 800823c:	080083a7 	.word	0x080083a7
 8008240:	080081f1 	.word	0x080081f1
 8008244:	080081f1 	.word	0x080081f1
 8008248:	0800837d 	.word	0x0800837d
 800824c:	080081f1 	.word	0x080081f1
 8008250:	080081f1 	.word	0x080081f1
 8008254:	080081f1 	.word	0x080081f1
 8008258:	080081f1 	.word	0x080081f1
 800825c:	08008335 	.word	0x08008335
 8008260:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008264:	e7db      	b.n	800821e <_scanf_float+0x92>
 8008266:	290e      	cmp	r1, #14
 8008268:	d8c2      	bhi.n	80081f0 <_scanf_float+0x64>
 800826a:	a001      	add	r0, pc, #4	@ (adr r0, 8008270 <_scanf_float+0xe4>)
 800826c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008270:	08008325 	.word	0x08008325
 8008274:	080081f1 	.word	0x080081f1
 8008278:	08008325 	.word	0x08008325
 800827c:	080083bb 	.word	0x080083bb
 8008280:	080081f1 	.word	0x080081f1
 8008284:	080082cd 	.word	0x080082cd
 8008288:	0800830b 	.word	0x0800830b
 800828c:	0800830b 	.word	0x0800830b
 8008290:	0800830b 	.word	0x0800830b
 8008294:	0800830b 	.word	0x0800830b
 8008298:	0800830b 	.word	0x0800830b
 800829c:	0800830b 	.word	0x0800830b
 80082a0:	0800830b 	.word	0x0800830b
 80082a4:	0800830b 	.word	0x0800830b
 80082a8:	0800830b 	.word	0x0800830b
 80082ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80082ae:	d809      	bhi.n	80082c4 <_scanf_float+0x138>
 80082b0:	2b60      	cmp	r3, #96	@ 0x60
 80082b2:	d8b2      	bhi.n	800821a <_scanf_float+0x8e>
 80082b4:	2b54      	cmp	r3, #84	@ 0x54
 80082b6:	d07b      	beq.n	80083b0 <_scanf_float+0x224>
 80082b8:	2b59      	cmp	r3, #89	@ 0x59
 80082ba:	d199      	bne.n	80081f0 <_scanf_float+0x64>
 80082bc:	2d07      	cmp	r5, #7
 80082be:	d197      	bne.n	80081f0 <_scanf_float+0x64>
 80082c0:	2508      	movs	r5, #8
 80082c2:	e02c      	b.n	800831e <_scanf_float+0x192>
 80082c4:	2b74      	cmp	r3, #116	@ 0x74
 80082c6:	d073      	beq.n	80083b0 <_scanf_float+0x224>
 80082c8:	2b79      	cmp	r3, #121	@ 0x79
 80082ca:	e7f6      	b.n	80082ba <_scanf_float+0x12e>
 80082cc:	6821      	ldr	r1, [r4, #0]
 80082ce:	05c8      	lsls	r0, r1, #23
 80082d0:	d51b      	bpl.n	800830a <_scanf_float+0x17e>
 80082d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80082d6:	6021      	str	r1, [r4, #0]
 80082d8:	f109 0901 	add.w	r9, r9, #1
 80082dc:	f1bb 0f00 	cmp.w	fp, #0
 80082e0:	d003      	beq.n	80082ea <_scanf_float+0x15e>
 80082e2:	3201      	adds	r2, #1
 80082e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082e8:	60a2      	str	r2, [r4, #8]
 80082ea:	68a3      	ldr	r3, [r4, #8]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	60a3      	str	r3, [r4, #8]
 80082f0:	6923      	ldr	r3, [r4, #16]
 80082f2:	3301      	adds	r3, #1
 80082f4:	6123      	str	r3, [r4, #16]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	607b      	str	r3, [r7, #4]
 80082fe:	f340 8087 	ble.w	8008410 <_scanf_float+0x284>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	3301      	adds	r3, #1
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	e765      	b.n	80081d6 <_scanf_float+0x4a>
 800830a:	eb1a 0105 	adds.w	r1, sl, r5
 800830e:	f47f af6f 	bne.w	80081f0 <_scanf_float+0x64>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008318:	6022      	str	r2, [r4, #0]
 800831a:	460d      	mov	r5, r1
 800831c:	468a      	mov	sl, r1
 800831e:	f806 3b01 	strb.w	r3, [r6], #1
 8008322:	e7e2      	b.n	80082ea <_scanf_float+0x15e>
 8008324:	6822      	ldr	r2, [r4, #0]
 8008326:	0610      	lsls	r0, r2, #24
 8008328:	f57f af62 	bpl.w	80081f0 <_scanf_float+0x64>
 800832c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008330:	6022      	str	r2, [r4, #0]
 8008332:	e7f4      	b.n	800831e <_scanf_float+0x192>
 8008334:	f1ba 0f00 	cmp.w	sl, #0
 8008338:	d10e      	bne.n	8008358 <_scanf_float+0x1cc>
 800833a:	f1b9 0f00 	cmp.w	r9, #0
 800833e:	d10e      	bne.n	800835e <_scanf_float+0x1d2>
 8008340:	6822      	ldr	r2, [r4, #0]
 8008342:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008346:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800834a:	d108      	bne.n	800835e <_scanf_float+0x1d2>
 800834c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008350:	6022      	str	r2, [r4, #0]
 8008352:	f04f 0a01 	mov.w	sl, #1
 8008356:	e7e2      	b.n	800831e <_scanf_float+0x192>
 8008358:	f1ba 0f02 	cmp.w	sl, #2
 800835c:	d055      	beq.n	800840a <_scanf_float+0x27e>
 800835e:	2d01      	cmp	r5, #1
 8008360:	d002      	beq.n	8008368 <_scanf_float+0x1dc>
 8008362:	2d04      	cmp	r5, #4
 8008364:	f47f af44 	bne.w	80081f0 <_scanf_float+0x64>
 8008368:	3501      	adds	r5, #1
 800836a:	b2ed      	uxtb	r5, r5
 800836c:	e7d7      	b.n	800831e <_scanf_float+0x192>
 800836e:	f1ba 0f01 	cmp.w	sl, #1
 8008372:	f47f af3d 	bne.w	80081f0 <_scanf_float+0x64>
 8008376:	f04f 0a02 	mov.w	sl, #2
 800837a:	e7d0      	b.n	800831e <_scanf_float+0x192>
 800837c:	b97d      	cbnz	r5, 800839e <_scanf_float+0x212>
 800837e:	f1b9 0f00 	cmp.w	r9, #0
 8008382:	f47f af38 	bne.w	80081f6 <_scanf_float+0x6a>
 8008386:	6822      	ldr	r2, [r4, #0]
 8008388:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800838c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008390:	f040 8108 	bne.w	80085a4 <_scanf_float+0x418>
 8008394:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008398:	6022      	str	r2, [r4, #0]
 800839a:	2501      	movs	r5, #1
 800839c:	e7bf      	b.n	800831e <_scanf_float+0x192>
 800839e:	2d03      	cmp	r5, #3
 80083a0:	d0e2      	beq.n	8008368 <_scanf_float+0x1dc>
 80083a2:	2d05      	cmp	r5, #5
 80083a4:	e7de      	b.n	8008364 <_scanf_float+0x1d8>
 80083a6:	2d02      	cmp	r5, #2
 80083a8:	f47f af22 	bne.w	80081f0 <_scanf_float+0x64>
 80083ac:	2503      	movs	r5, #3
 80083ae:	e7b6      	b.n	800831e <_scanf_float+0x192>
 80083b0:	2d06      	cmp	r5, #6
 80083b2:	f47f af1d 	bne.w	80081f0 <_scanf_float+0x64>
 80083b6:	2507      	movs	r5, #7
 80083b8:	e7b1      	b.n	800831e <_scanf_float+0x192>
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	0591      	lsls	r1, r2, #22
 80083be:	f57f af17 	bpl.w	80081f0 <_scanf_float+0x64>
 80083c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80083c6:	6022      	str	r2, [r4, #0]
 80083c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80083cc:	e7a7      	b.n	800831e <_scanf_float+0x192>
 80083ce:	6822      	ldr	r2, [r4, #0]
 80083d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80083d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80083d8:	d006      	beq.n	80083e8 <_scanf_float+0x25c>
 80083da:	0550      	lsls	r0, r2, #21
 80083dc:	f57f af08 	bpl.w	80081f0 <_scanf_float+0x64>
 80083e0:	f1b9 0f00 	cmp.w	r9, #0
 80083e4:	f000 80de 	beq.w	80085a4 <_scanf_float+0x418>
 80083e8:	0591      	lsls	r1, r2, #22
 80083ea:	bf58      	it	pl
 80083ec:	9902      	ldrpl	r1, [sp, #8]
 80083ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083f2:	bf58      	it	pl
 80083f4:	eba9 0101 	subpl.w	r1, r9, r1
 80083f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80083fc:	bf58      	it	pl
 80083fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008402:	6022      	str	r2, [r4, #0]
 8008404:	f04f 0900 	mov.w	r9, #0
 8008408:	e789      	b.n	800831e <_scanf_float+0x192>
 800840a:	f04f 0a03 	mov.w	sl, #3
 800840e:	e786      	b.n	800831e <_scanf_float+0x192>
 8008410:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008414:	4639      	mov	r1, r7
 8008416:	4640      	mov	r0, r8
 8008418:	4798      	blx	r3
 800841a:	2800      	cmp	r0, #0
 800841c:	f43f aedb 	beq.w	80081d6 <_scanf_float+0x4a>
 8008420:	e6e6      	b.n	80081f0 <_scanf_float+0x64>
 8008422:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008426:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800842a:	463a      	mov	r2, r7
 800842c:	4640      	mov	r0, r8
 800842e:	4798      	blx	r3
 8008430:	6923      	ldr	r3, [r4, #16]
 8008432:	3b01      	subs	r3, #1
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	e6e8      	b.n	800820a <_scanf_float+0x7e>
 8008438:	1e6b      	subs	r3, r5, #1
 800843a:	2b06      	cmp	r3, #6
 800843c:	d824      	bhi.n	8008488 <_scanf_float+0x2fc>
 800843e:	2d02      	cmp	r5, #2
 8008440:	d836      	bhi.n	80084b0 <_scanf_float+0x324>
 8008442:	9b01      	ldr	r3, [sp, #4]
 8008444:	429e      	cmp	r6, r3
 8008446:	f67f aee4 	bls.w	8008212 <_scanf_float+0x86>
 800844a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800844e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008452:	463a      	mov	r2, r7
 8008454:	4640      	mov	r0, r8
 8008456:	4798      	blx	r3
 8008458:	6923      	ldr	r3, [r4, #16]
 800845a:	3b01      	subs	r3, #1
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	e7f0      	b.n	8008442 <_scanf_float+0x2b6>
 8008460:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008464:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008468:	463a      	mov	r2, r7
 800846a:	4640      	mov	r0, r8
 800846c:	4798      	blx	r3
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	3b01      	subs	r3, #1
 8008472:	6123      	str	r3, [r4, #16]
 8008474:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008478:	fa5f fa8a 	uxtb.w	sl, sl
 800847c:	f1ba 0f02 	cmp.w	sl, #2
 8008480:	d1ee      	bne.n	8008460 <_scanf_float+0x2d4>
 8008482:	3d03      	subs	r5, #3
 8008484:	b2ed      	uxtb	r5, r5
 8008486:	1b76      	subs	r6, r6, r5
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	05da      	lsls	r2, r3, #23
 800848c:	d530      	bpl.n	80084f0 <_scanf_float+0x364>
 800848e:	055b      	lsls	r3, r3, #21
 8008490:	d511      	bpl.n	80084b6 <_scanf_float+0x32a>
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	429e      	cmp	r6, r3
 8008496:	f67f aebc 	bls.w	8008212 <_scanf_float+0x86>
 800849a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800849e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084a2:	463a      	mov	r2, r7
 80084a4:	4640      	mov	r0, r8
 80084a6:	4798      	blx	r3
 80084a8:	6923      	ldr	r3, [r4, #16]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	e7f0      	b.n	8008492 <_scanf_float+0x306>
 80084b0:	46aa      	mov	sl, r5
 80084b2:	46b3      	mov	fp, r6
 80084b4:	e7de      	b.n	8008474 <_scanf_float+0x2e8>
 80084b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	2965      	cmp	r1, #101	@ 0x65
 80084be:	f103 33ff 	add.w	r3, r3, #4294967295
 80084c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80084c6:	6123      	str	r3, [r4, #16]
 80084c8:	d00c      	beq.n	80084e4 <_scanf_float+0x358>
 80084ca:	2945      	cmp	r1, #69	@ 0x45
 80084cc:	d00a      	beq.n	80084e4 <_scanf_float+0x358>
 80084ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084d2:	463a      	mov	r2, r7
 80084d4:	4640      	mov	r0, r8
 80084d6:	4798      	blx	r3
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80084de:	3b01      	subs	r3, #1
 80084e0:	1eb5      	subs	r5, r6, #2
 80084e2:	6123      	str	r3, [r4, #16]
 80084e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084e8:	463a      	mov	r2, r7
 80084ea:	4640      	mov	r0, r8
 80084ec:	4798      	blx	r3
 80084ee:	462e      	mov	r6, r5
 80084f0:	6822      	ldr	r2, [r4, #0]
 80084f2:	f012 0210 	ands.w	r2, r2, #16
 80084f6:	d001      	beq.n	80084fc <_scanf_float+0x370>
 80084f8:	2000      	movs	r0, #0
 80084fa:	e68b      	b.n	8008214 <_scanf_float+0x88>
 80084fc:	7032      	strb	r2, [r6, #0]
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008508:	d11c      	bne.n	8008544 <_scanf_float+0x3b8>
 800850a:	9b02      	ldr	r3, [sp, #8]
 800850c:	454b      	cmp	r3, r9
 800850e:	eba3 0209 	sub.w	r2, r3, r9
 8008512:	d123      	bne.n	800855c <_scanf_float+0x3d0>
 8008514:	9901      	ldr	r1, [sp, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	4640      	mov	r0, r8
 800851a:	f7ff f9cd 	bl	80078b8 <_strtod_r>
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	6821      	ldr	r1, [r4, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f011 0f02 	tst.w	r1, #2
 8008528:	ec57 6b10 	vmov	r6, r7, d0
 800852c:	f103 0204 	add.w	r2, r3, #4
 8008530:	d01f      	beq.n	8008572 <_scanf_float+0x3e6>
 8008532:	9903      	ldr	r1, [sp, #12]
 8008534:	600a      	str	r2, [r1, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	e9c3 6700 	strd	r6, r7, [r3]
 800853c:	68e3      	ldr	r3, [r4, #12]
 800853e:	3301      	adds	r3, #1
 8008540:	60e3      	str	r3, [r4, #12]
 8008542:	e7d9      	b.n	80084f8 <_scanf_float+0x36c>
 8008544:	9b04      	ldr	r3, [sp, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0e4      	beq.n	8008514 <_scanf_float+0x388>
 800854a:	9905      	ldr	r1, [sp, #20]
 800854c:	230a      	movs	r3, #10
 800854e:	3101      	adds	r1, #1
 8008550:	4640      	mov	r0, r8
 8008552:	f002 fa65 	bl	800aa20 <_strtol_r>
 8008556:	9b04      	ldr	r3, [sp, #16]
 8008558:	9e05      	ldr	r6, [sp, #20]
 800855a:	1ac2      	subs	r2, r0, r3
 800855c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008560:	429e      	cmp	r6, r3
 8008562:	bf28      	it	cs
 8008564:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008568:	4910      	ldr	r1, [pc, #64]	@ (80085ac <_scanf_float+0x420>)
 800856a:	4630      	mov	r0, r6
 800856c:	f000 f8e4 	bl	8008738 <siprintf>
 8008570:	e7d0      	b.n	8008514 <_scanf_float+0x388>
 8008572:	f011 0f04 	tst.w	r1, #4
 8008576:	9903      	ldr	r1, [sp, #12]
 8008578:	600a      	str	r2, [r1, #0]
 800857a:	d1dc      	bne.n	8008536 <_scanf_float+0x3aa>
 800857c:	681d      	ldr	r5, [r3, #0]
 800857e:	4632      	mov	r2, r6
 8008580:	463b      	mov	r3, r7
 8008582:	4630      	mov	r0, r6
 8008584:	4639      	mov	r1, r7
 8008586:	f7f8 fad1 	bl	8000b2c <__aeabi_dcmpun>
 800858a:	b128      	cbz	r0, 8008598 <_scanf_float+0x40c>
 800858c:	4808      	ldr	r0, [pc, #32]	@ (80085b0 <_scanf_float+0x424>)
 800858e:	f000 fa5f 	bl	8008a50 <nanf>
 8008592:	ed85 0a00 	vstr	s0, [r5]
 8008596:	e7d1      	b.n	800853c <_scanf_float+0x3b0>
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f8 fb24 	bl	8000be8 <__aeabi_d2f>
 80085a0:	6028      	str	r0, [r5, #0]
 80085a2:	e7cb      	b.n	800853c <_scanf_float+0x3b0>
 80085a4:	f04f 0900 	mov.w	r9, #0
 80085a8:	e629      	b.n	80081fe <_scanf_float+0x72>
 80085aa:	bf00      	nop
 80085ac:	0800d574 	.word	0x0800d574
 80085b0:	0800d62d 	.word	0x0800d62d

080085b4 <std>:
 80085b4:	2300      	movs	r3, #0
 80085b6:	b510      	push	{r4, lr}
 80085b8:	4604      	mov	r4, r0
 80085ba:	e9c0 3300 	strd	r3, r3, [r0]
 80085be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085c2:	6083      	str	r3, [r0, #8]
 80085c4:	8181      	strh	r1, [r0, #12]
 80085c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80085c8:	81c2      	strh	r2, [r0, #14]
 80085ca:	6183      	str	r3, [r0, #24]
 80085cc:	4619      	mov	r1, r3
 80085ce:	2208      	movs	r2, #8
 80085d0:	305c      	adds	r0, #92	@ 0x5c
 80085d2:	f000 f914 	bl	80087fe <memset>
 80085d6:	4b0d      	ldr	r3, [pc, #52]	@ (800860c <std+0x58>)
 80085d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80085da:	4b0d      	ldr	r3, [pc, #52]	@ (8008610 <std+0x5c>)
 80085dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085de:	4b0d      	ldr	r3, [pc, #52]	@ (8008614 <std+0x60>)
 80085e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008618 <std+0x64>)
 80085e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80085e6:	4b0d      	ldr	r3, [pc, #52]	@ (800861c <std+0x68>)
 80085e8:	6224      	str	r4, [r4, #32]
 80085ea:	429c      	cmp	r4, r3
 80085ec:	d006      	beq.n	80085fc <std+0x48>
 80085ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085f2:	4294      	cmp	r4, r2
 80085f4:	d002      	beq.n	80085fc <std+0x48>
 80085f6:	33d0      	adds	r3, #208	@ 0xd0
 80085f8:	429c      	cmp	r4, r3
 80085fa:	d105      	bne.n	8008608 <std+0x54>
 80085fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008604:	f000 ba08 	b.w	8008a18 <__retarget_lock_init_recursive>
 8008608:	bd10      	pop	{r4, pc}
 800860a:	bf00      	nop
 800860c:	08008779 	.word	0x08008779
 8008610:	0800879b 	.word	0x0800879b
 8008614:	080087d3 	.word	0x080087d3
 8008618:	080087f7 	.word	0x080087f7
 800861c:	200005a0 	.word	0x200005a0

08008620 <stdio_exit_handler>:
 8008620:	4a02      	ldr	r2, [pc, #8]	@ (800862c <stdio_exit_handler+0xc>)
 8008622:	4903      	ldr	r1, [pc, #12]	@ (8008630 <stdio_exit_handler+0x10>)
 8008624:	4803      	ldr	r0, [pc, #12]	@ (8008634 <stdio_exit_handler+0x14>)
 8008626:	f000 b869 	b.w	80086fc <_fwalk_sglue>
 800862a:	bf00      	nop
 800862c:	2000000c 	.word	0x2000000c
 8008630:	0800adf5 	.word	0x0800adf5
 8008634:	20000188 	.word	0x20000188

08008638 <cleanup_stdio>:
 8008638:	6841      	ldr	r1, [r0, #4]
 800863a:	4b0c      	ldr	r3, [pc, #48]	@ (800866c <cleanup_stdio+0x34>)
 800863c:	4299      	cmp	r1, r3
 800863e:	b510      	push	{r4, lr}
 8008640:	4604      	mov	r4, r0
 8008642:	d001      	beq.n	8008648 <cleanup_stdio+0x10>
 8008644:	f002 fbd6 	bl	800adf4 <_fflush_r>
 8008648:	68a1      	ldr	r1, [r4, #8]
 800864a:	4b09      	ldr	r3, [pc, #36]	@ (8008670 <cleanup_stdio+0x38>)
 800864c:	4299      	cmp	r1, r3
 800864e:	d002      	beq.n	8008656 <cleanup_stdio+0x1e>
 8008650:	4620      	mov	r0, r4
 8008652:	f002 fbcf 	bl	800adf4 <_fflush_r>
 8008656:	68e1      	ldr	r1, [r4, #12]
 8008658:	4b06      	ldr	r3, [pc, #24]	@ (8008674 <cleanup_stdio+0x3c>)
 800865a:	4299      	cmp	r1, r3
 800865c:	d004      	beq.n	8008668 <cleanup_stdio+0x30>
 800865e:	4620      	mov	r0, r4
 8008660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008664:	f002 bbc6 	b.w	800adf4 <_fflush_r>
 8008668:	bd10      	pop	{r4, pc}
 800866a:	bf00      	nop
 800866c:	200005a0 	.word	0x200005a0
 8008670:	20000608 	.word	0x20000608
 8008674:	20000670 	.word	0x20000670

08008678 <global_stdio_init.part.0>:
 8008678:	b510      	push	{r4, lr}
 800867a:	4b0b      	ldr	r3, [pc, #44]	@ (80086a8 <global_stdio_init.part.0+0x30>)
 800867c:	4c0b      	ldr	r4, [pc, #44]	@ (80086ac <global_stdio_init.part.0+0x34>)
 800867e:	4a0c      	ldr	r2, [pc, #48]	@ (80086b0 <global_stdio_init.part.0+0x38>)
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	4620      	mov	r0, r4
 8008684:	2200      	movs	r2, #0
 8008686:	2104      	movs	r1, #4
 8008688:	f7ff ff94 	bl	80085b4 <std>
 800868c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008690:	2201      	movs	r2, #1
 8008692:	2109      	movs	r1, #9
 8008694:	f7ff ff8e 	bl	80085b4 <std>
 8008698:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800869c:	2202      	movs	r2, #2
 800869e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a2:	2112      	movs	r1, #18
 80086a4:	f7ff bf86 	b.w	80085b4 <std>
 80086a8:	200006d8 	.word	0x200006d8
 80086ac:	200005a0 	.word	0x200005a0
 80086b0:	08008621 	.word	0x08008621

080086b4 <__sfp_lock_acquire>:
 80086b4:	4801      	ldr	r0, [pc, #4]	@ (80086bc <__sfp_lock_acquire+0x8>)
 80086b6:	f000 b9b0 	b.w	8008a1a <__retarget_lock_acquire_recursive>
 80086ba:	bf00      	nop
 80086bc:	200006e1 	.word	0x200006e1

080086c0 <__sfp_lock_release>:
 80086c0:	4801      	ldr	r0, [pc, #4]	@ (80086c8 <__sfp_lock_release+0x8>)
 80086c2:	f000 b9ab 	b.w	8008a1c <__retarget_lock_release_recursive>
 80086c6:	bf00      	nop
 80086c8:	200006e1 	.word	0x200006e1

080086cc <__sinit>:
 80086cc:	b510      	push	{r4, lr}
 80086ce:	4604      	mov	r4, r0
 80086d0:	f7ff fff0 	bl	80086b4 <__sfp_lock_acquire>
 80086d4:	6a23      	ldr	r3, [r4, #32]
 80086d6:	b11b      	cbz	r3, 80086e0 <__sinit+0x14>
 80086d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086dc:	f7ff bff0 	b.w	80086c0 <__sfp_lock_release>
 80086e0:	4b04      	ldr	r3, [pc, #16]	@ (80086f4 <__sinit+0x28>)
 80086e2:	6223      	str	r3, [r4, #32]
 80086e4:	4b04      	ldr	r3, [pc, #16]	@ (80086f8 <__sinit+0x2c>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1f5      	bne.n	80086d8 <__sinit+0xc>
 80086ec:	f7ff ffc4 	bl	8008678 <global_stdio_init.part.0>
 80086f0:	e7f2      	b.n	80086d8 <__sinit+0xc>
 80086f2:	bf00      	nop
 80086f4:	08008639 	.word	0x08008639
 80086f8:	200006d8 	.word	0x200006d8

080086fc <_fwalk_sglue>:
 80086fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008700:	4607      	mov	r7, r0
 8008702:	4688      	mov	r8, r1
 8008704:	4614      	mov	r4, r2
 8008706:	2600      	movs	r6, #0
 8008708:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800870c:	f1b9 0901 	subs.w	r9, r9, #1
 8008710:	d505      	bpl.n	800871e <_fwalk_sglue+0x22>
 8008712:	6824      	ldr	r4, [r4, #0]
 8008714:	2c00      	cmp	r4, #0
 8008716:	d1f7      	bne.n	8008708 <_fwalk_sglue+0xc>
 8008718:	4630      	mov	r0, r6
 800871a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800871e:	89ab      	ldrh	r3, [r5, #12]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d907      	bls.n	8008734 <_fwalk_sglue+0x38>
 8008724:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008728:	3301      	adds	r3, #1
 800872a:	d003      	beq.n	8008734 <_fwalk_sglue+0x38>
 800872c:	4629      	mov	r1, r5
 800872e:	4638      	mov	r0, r7
 8008730:	47c0      	blx	r8
 8008732:	4306      	orrs	r6, r0
 8008734:	3568      	adds	r5, #104	@ 0x68
 8008736:	e7e9      	b.n	800870c <_fwalk_sglue+0x10>

08008738 <siprintf>:
 8008738:	b40e      	push	{r1, r2, r3}
 800873a:	b500      	push	{lr}
 800873c:	b09c      	sub	sp, #112	@ 0x70
 800873e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008740:	9002      	str	r0, [sp, #8]
 8008742:	9006      	str	r0, [sp, #24]
 8008744:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008748:	4809      	ldr	r0, [pc, #36]	@ (8008770 <siprintf+0x38>)
 800874a:	9107      	str	r1, [sp, #28]
 800874c:	9104      	str	r1, [sp, #16]
 800874e:	4909      	ldr	r1, [pc, #36]	@ (8008774 <siprintf+0x3c>)
 8008750:	f853 2b04 	ldr.w	r2, [r3], #4
 8008754:	9105      	str	r1, [sp, #20]
 8008756:	6800      	ldr	r0, [r0, #0]
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	a902      	add	r1, sp, #8
 800875c:	f002 f9ca 	bl	800aaf4 <_svfiprintf_r>
 8008760:	9b02      	ldr	r3, [sp, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	b01c      	add	sp, #112	@ 0x70
 8008768:	f85d eb04 	ldr.w	lr, [sp], #4
 800876c:	b003      	add	sp, #12
 800876e:	4770      	bx	lr
 8008770:	20000184 	.word	0x20000184
 8008774:	ffff0208 	.word	0xffff0208

08008778 <__sread>:
 8008778:	b510      	push	{r4, lr}
 800877a:	460c      	mov	r4, r1
 800877c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008780:	f000 f8fc 	bl	800897c <_read_r>
 8008784:	2800      	cmp	r0, #0
 8008786:	bfab      	itete	ge
 8008788:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800878a:	89a3      	ldrhlt	r3, [r4, #12]
 800878c:	181b      	addge	r3, r3, r0
 800878e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008792:	bfac      	ite	ge
 8008794:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008796:	81a3      	strhlt	r3, [r4, #12]
 8008798:	bd10      	pop	{r4, pc}

0800879a <__swrite>:
 800879a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879e:	461f      	mov	r7, r3
 80087a0:	898b      	ldrh	r3, [r1, #12]
 80087a2:	05db      	lsls	r3, r3, #23
 80087a4:	4605      	mov	r5, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	4616      	mov	r6, r2
 80087aa:	d505      	bpl.n	80087b8 <__swrite+0x1e>
 80087ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b0:	2302      	movs	r3, #2
 80087b2:	2200      	movs	r2, #0
 80087b4:	f000 f8d0 	bl	8008958 <_lseek_r>
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087c2:	81a3      	strh	r3, [r4, #12]
 80087c4:	4632      	mov	r2, r6
 80087c6:	463b      	mov	r3, r7
 80087c8:	4628      	mov	r0, r5
 80087ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ce:	f000 b8e7 	b.w	80089a0 <_write_r>

080087d2 <__sseek>:
 80087d2:	b510      	push	{r4, lr}
 80087d4:	460c      	mov	r4, r1
 80087d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087da:	f000 f8bd 	bl	8008958 <_lseek_r>
 80087de:	1c43      	adds	r3, r0, #1
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	bf15      	itete	ne
 80087e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087ee:	81a3      	strheq	r3, [r4, #12]
 80087f0:	bf18      	it	ne
 80087f2:	81a3      	strhne	r3, [r4, #12]
 80087f4:	bd10      	pop	{r4, pc}

080087f6 <__sclose>:
 80087f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087fa:	f000 b89d 	b.w	8008938 <_close_r>

080087fe <memset>:
 80087fe:	4402      	add	r2, r0
 8008800:	4603      	mov	r3, r0
 8008802:	4293      	cmp	r3, r2
 8008804:	d100      	bne.n	8008808 <memset+0xa>
 8008806:	4770      	bx	lr
 8008808:	f803 1b01 	strb.w	r1, [r3], #1
 800880c:	e7f9      	b.n	8008802 <memset+0x4>

0800880e <strcat>:
 800880e:	b510      	push	{r4, lr}
 8008810:	4602      	mov	r2, r0
 8008812:	7814      	ldrb	r4, [r2, #0]
 8008814:	4613      	mov	r3, r2
 8008816:	3201      	adds	r2, #1
 8008818:	2c00      	cmp	r4, #0
 800881a:	d1fa      	bne.n	8008812 <strcat+0x4>
 800881c:	3b01      	subs	r3, #1
 800881e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008826:	2a00      	cmp	r2, #0
 8008828:	d1f9      	bne.n	800881e <strcat+0x10>
 800882a:	bd10      	pop	{r4, pc}

0800882c <strncmp>:
 800882c:	b510      	push	{r4, lr}
 800882e:	b16a      	cbz	r2, 800884c <strncmp+0x20>
 8008830:	3901      	subs	r1, #1
 8008832:	1884      	adds	r4, r0, r2
 8008834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008838:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800883c:	429a      	cmp	r2, r3
 800883e:	d103      	bne.n	8008848 <strncmp+0x1c>
 8008840:	42a0      	cmp	r0, r4
 8008842:	d001      	beq.n	8008848 <strncmp+0x1c>
 8008844:	2a00      	cmp	r2, #0
 8008846:	d1f5      	bne.n	8008834 <strncmp+0x8>
 8008848:	1ad0      	subs	r0, r2, r3
 800884a:	bd10      	pop	{r4, pc}
 800884c:	4610      	mov	r0, r2
 800884e:	e7fc      	b.n	800884a <strncmp+0x1e>

08008850 <strncpy>:
 8008850:	b510      	push	{r4, lr}
 8008852:	3901      	subs	r1, #1
 8008854:	4603      	mov	r3, r0
 8008856:	b132      	cbz	r2, 8008866 <strncpy+0x16>
 8008858:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800885c:	f803 4b01 	strb.w	r4, [r3], #1
 8008860:	3a01      	subs	r2, #1
 8008862:	2c00      	cmp	r4, #0
 8008864:	d1f7      	bne.n	8008856 <strncpy+0x6>
 8008866:	441a      	add	r2, r3
 8008868:	2100      	movs	r1, #0
 800886a:	4293      	cmp	r3, r2
 800886c:	d100      	bne.n	8008870 <strncpy+0x20>
 800886e:	bd10      	pop	{r4, pc}
 8008870:	f803 1b01 	strb.w	r1, [r3], #1
 8008874:	e7f9      	b.n	800886a <strncpy+0x1a>
	...

08008878 <strtok>:
 8008878:	4b16      	ldr	r3, [pc, #88]	@ (80088d4 <strtok+0x5c>)
 800887a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800887e:	681f      	ldr	r7, [r3, #0]
 8008880:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008882:	4605      	mov	r5, r0
 8008884:	460e      	mov	r6, r1
 8008886:	b9ec      	cbnz	r4, 80088c4 <strtok+0x4c>
 8008888:	2050      	movs	r0, #80	@ 0x50
 800888a:	f001 fad5 	bl	8009e38 <malloc>
 800888e:	4602      	mov	r2, r0
 8008890:	6478      	str	r0, [r7, #68]	@ 0x44
 8008892:	b920      	cbnz	r0, 800889e <strtok+0x26>
 8008894:	4b10      	ldr	r3, [pc, #64]	@ (80088d8 <strtok+0x60>)
 8008896:	4811      	ldr	r0, [pc, #68]	@ (80088dc <strtok+0x64>)
 8008898:	215b      	movs	r1, #91	@ 0x5b
 800889a:	f000 f8df 	bl	8008a5c <__assert_func>
 800889e:	e9c0 4400 	strd	r4, r4, [r0]
 80088a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80088a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80088aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80088ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80088b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80088b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80088ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80088be:	6184      	str	r4, [r0, #24]
 80088c0:	7704      	strb	r4, [r0, #28]
 80088c2:	6244      	str	r4, [r0, #36]	@ 0x24
 80088c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088c6:	4631      	mov	r1, r6
 80088c8:	4628      	mov	r0, r5
 80088ca:	2301      	movs	r3, #1
 80088cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088d0:	f000 b806 	b.w	80088e0 <__strtok_r>
 80088d4:	20000184 	.word	0x20000184
 80088d8:	0800d579 	.word	0x0800d579
 80088dc:	0800d590 	.word	0x0800d590

080088e0 <__strtok_r>:
 80088e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e2:	4604      	mov	r4, r0
 80088e4:	b908      	cbnz	r0, 80088ea <__strtok_r+0xa>
 80088e6:	6814      	ldr	r4, [r2, #0]
 80088e8:	b144      	cbz	r4, 80088fc <__strtok_r+0x1c>
 80088ea:	4620      	mov	r0, r4
 80088ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 80088f0:	460f      	mov	r7, r1
 80088f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80088f6:	b91e      	cbnz	r6, 8008900 <__strtok_r+0x20>
 80088f8:	b965      	cbnz	r5, 8008914 <__strtok_r+0x34>
 80088fa:	6015      	str	r5, [r2, #0]
 80088fc:	2000      	movs	r0, #0
 80088fe:	e005      	b.n	800890c <__strtok_r+0x2c>
 8008900:	42b5      	cmp	r5, r6
 8008902:	d1f6      	bne.n	80088f2 <__strtok_r+0x12>
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1f0      	bne.n	80088ea <__strtok_r+0xa>
 8008908:	6014      	str	r4, [r2, #0]
 800890a:	7003      	strb	r3, [r0, #0]
 800890c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800890e:	461c      	mov	r4, r3
 8008910:	e00c      	b.n	800892c <__strtok_r+0x4c>
 8008912:	b915      	cbnz	r5, 800891a <__strtok_r+0x3a>
 8008914:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008918:	460e      	mov	r6, r1
 800891a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800891e:	42ab      	cmp	r3, r5
 8008920:	d1f7      	bne.n	8008912 <__strtok_r+0x32>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0f3      	beq.n	800890e <__strtok_r+0x2e>
 8008926:	2300      	movs	r3, #0
 8008928:	f804 3c01 	strb.w	r3, [r4, #-1]
 800892c:	6014      	str	r4, [r2, #0]
 800892e:	e7ed      	b.n	800890c <__strtok_r+0x2c>

08008930 <_localeconv_r>:
 8008930:	4800      	ldr	r0, [pc, #0]	@ (8008934 <_localeconv_r+0x4>)
 8008932:	4770      	bx	lr
 8008934:	20000108 	.word	0x20000108

08008938 <_close_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d06      	ldr	r5, [pc, #24]	@ (8008954 <_close_r+0x1c>)
 800893c:	2300      	movs	r3, #0
 800893e:	4604      	mov	r4, r0
 8008940:	4608      	mov	r0, r1
 8008942:	602b      	str	r3, [r5, #0]
 8008944:	f7fa fef6 	bl	8003734 <_close>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_close_r+0x1a>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	b103      	cbz	r3, 8008952 <_close_r+0x1a>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	200006dc 	.word	0x200006dc

08008958 <_lseek_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d07      	ldr	r5, [pc, #28]	@ (8008978 <_lseek_r+0x20>)
 800895c:	4604      	mov	r4, r0
 800895e:	4608      	mov	r0, r1
 8008960:	4611      	mov	r1, r2
 8008962:	2200      	movs	r2, #0
 8008964:	602a      	str	r2, [r5, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	f7fa ff0b 	bl	8003782 <_lseek>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_lseek_r+0x1e>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_lseek_r+0x1e>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	200006dc 	.word	0x200006dc

0800897c <_read_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d07      	ldr	r5, [pc, #28]	@ (800899c <_read_r+0x20>)
 8008980:	4604      	mov	r4, r0
 8008982:	4608      	mov	r0, r1
 8008984:	4611      	mov	r1, r2
 8008986:	2200      	movs	r2, #0
 8008988:	602a      	str	r2, [r5, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	f7fa fe99 	bl	80036c2 <_read>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_read_r+0x1e>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b103      	cbz	r3, 800899a <_read_r+0x1e>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	200006dc 	.word	0x200006dc

080089a0 <_write_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4d07      	ldr	r5, [pc, #28]	@ (80089c0 <_write_r+0x20>)
 80089a4:	4604      	mov	r4, r0
 80089a6:	4608      	mov	r0, r1
 80089a8:	4611      	mov	r1, r2
 80089aa:	2200      	movs	r2, #0
 80089ac:	602a      	str	r2, [r5, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	f7fa fea4 	bl	80036fc <_write>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d102      	bne.n	80089be <_write_r+0x1e>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	b103      	cbz	r3, 80089be <_write_r+0x1e>
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	200006dc 	.word	0x200006dc

080089c4 <__errno>:
 80089c4:	4b01      	ldr	r3, [pc, #4]	@ (80089cc <__errno+0x8>)
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	20000184 	.word	0x20000184

080089d0 <__libc_init_array>:
 80089d0:	b570      	push	{r4, r5, r6, lr}
 80089d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008a08 <__libc_init_array+0x38>)
 80089d4:	4c0d      	ldr	r4, [pc, #52]	@ (8008a0c <__libc_init_array+0x3c>)
 80089d6:	1b64      	subs	r4, r4, r5
 80089d8:	10a4      	asrs	r4, r4, #2
 80089da:	2600      	movs	r6, #0
 80089dc:	42a6      	cmp	r6, r4
 80089de:	d109      	bne.n	80089f4 <__libc_init_array+0x24>
 80089e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008a10 <__libc_init_array+0x40>)
 80089e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008a14 <__libc_init_array+0x44>)
 80089e4:	f004 fd10 	bl	800d408 <_init>
 80089e8:	1b64      	subs	r4, r4, r5
 80089ea:	10a4      	asrs	r4, r4, #2
 80089ec:	2600      	movs	r6, #0
 80089ee:	42a6      	cmp	r6, r4
 80089f0:	d105      	bne.n	80089fe <__libc_init_array+0x2e>
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f8:	4798      	blx	r3
 80089fa:	3601      	adds	r6, #1
 80089fc:	e7ee      	b.n	80089dc <__libc_init_array+0xc>
 80089fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a02:	4798      	blx	r3
 8008a04:	3601      	adds	r6, #1
 8008a06:	e7f2      	b.n	80089ee <__libc_init_array+0x1e>
 8008a08:	0800db98 	.word	0x0800db98
 8008a0c:	0800db98 	.word	0x0800db98
 8008a10:	0800db98 	.word	0x0800db98
 8008a14:	0800db9c 	.word	0x0800db9c

08008a18 <__retarget_lock_init_recursive>:
 8008a18:	4770      	bx	lr

08008a1a <__retarget_lock_acquire_recursive>:
 8008a1a:	4770      	bx	lr

08008a1c <__retarget_lock_release_recursive>:
 8008a1c:	4770      	bx	lr

08008a1e <memcpy>:
 8008a1e:	440a      	add	r2, r1
 8008a20:	4291      	cmp	r1, r2
 8008a22:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a26:	d100      	bne.n	8008a2a <memcpy+0xc>
 8008a28:	4770      	bx	lr
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a34:	4291      	cmp	r1, r2
 8008a36:	d1f9      	bne.n	8008a2c <memcpy+0xe>
 8008a38:	bd10      	pop	{r4, pc}
 8008a3a:	0000      	movs	r0, r0
 8008a3c:	0000      	movs	r0, r0
	...

08008a40 <nan>:
 8008a40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a48 <nan+0x8>
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	00000000 	.word	0x00000000
 8008a4c:	7ff80000 	.word	0x7ff80000

08008a50 <nanf>:
 8008a50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008a58 <nanf+0x8>
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	7fc00000 	.word	0x7fc00000

08008a5c <__assert_func>:
 8008a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a5e:	4614      	mov	r4, r2
 8008a60:	461a      	mov	r2, r3
 8008a62:	4b09      	ldr	r3, [pc, #36]	@ (8008a88 <__assert_func+0x2c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4605      	mov	r5, r0
 8008a68:	68d8      	ldr	r0, [r3, #12]
 8008a6a:	b954      	cbnz	r4, 8008a82 <__assert_func+0x26>
 8008a6c:	4b07      	ldr	r3, [pc, #28]	@ (8008a8c <__assert_func+0x30>)
 8008a6e:	461c      	mov	r4, r3
 8008a70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a74:	9100      	str	r1, [sp, #0]
 8008a76:	462b      	mov	r3, r5
 8008a78:	4905      	ldr	r1, [pc, #20]	@ (8008a90 <__assert_func+0x34>)
 8008a7a:	f002 f9e3 	bl	800ae44 <fiprintf>
 8008a7e:	f002 fa1d 	bl	800aebc <abort>
 8008a82:	4b04      	ldr	r3, [pc, #16]	@ (8008a94 <__assert_func+0x38>)
 8008a84:	e7f4      	b.n	8008a70 <__assert_func+0x14>
 8008a86:	bf00      	nop
 8008a88:	20000184 	.word	0x20000184
 8008a8c:	0800d62d 	.word	0x0800d62d
 8008a90:	0800d5ff 	.word	0x0800d5ff
 8008a94:	0800d5f2 	.word	0x0800d5f2

08008a98 <quorem>:
 8008a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	6903      	ldr	r3, [r0, #16]
 8008a9e:	690c      	ldr	r4, [r1, #16]
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	db7e      	blt.n	8008ba4 <quorem+0x10c>
 8008aa6:	3c01      	subs	r4, #1
 8008aa8:	f101 0814 	add.w	r8, r1, #20
 8008aac:	00a3      	lsls	r3, r4, #2
 8008aae:	f100 0514 	add.w	r5, r0, #20
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008abe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008aca:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ace:	d32e      	bcc.n	8008b2e <quorem+0x96>
 8008ad0:	f04f 0a00 	mov.w	sl, #0
 8008ad4:	46c4      	mov	ip, r8
 8008ad6:	46ae      	mov	lr, r5
 8008ad8:	46d3      	mov	fp, sl
 8008ada:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ade:	b298      	uxth	r0, r3
 8008ae0:	fb06 a000 	mla	r0, r6, r0, sl
 8008ae4:	0c02      	lsrs	r2, r0, #16
 8008ae6:	0c1b      	lsrs	r3, r3, #16
 8008ae8:	fb06 2303 	mla	r3, r6, r3, r2
 8008aec:	f8de 2000 	ldr.w	r2, [lr]
 8008af0:	b280      	uxth	r0, r0
 8008af2:	b292      	uxth	r2, r2
 8008af4:	1a12      	subs	r2, r2, r0
 8008af6:	445a      	add	r2, fp
 8008af8:	f8de 0000 	ldr.w	r0, [lr]
 8008afc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008b06:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008b0a:	b292      	uxth	r2, r2
 8008b0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b10:	45e1      	cmp	r9, ip
 8008b12:	f84e 2b04 	str.w	r2, [lr], #4
 8008b16:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008b1a:	d2de      	bcs.n	8008ada <quorem+0x42>
 8008b1c:	9b00      	ldr	r3, [sp, #0]
 8008b1e:	58eb      	ldr	r3, [r5, r3]
 8008b20:	b92b      	cbnz	r3, 8008b2e <quorem+0x96>
 8008b22:	9b01      	ldr	r3, [sp, #4]
 8008b24:	3b04      	subs	r3, #4
 8008b26:	429d      	cmp	r5, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	d32f      	bcc.n	8008b8c <quorem+0xf4>
 8008b2c:	613c      	str	r4, [r7, #16]
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f001 fd0e 	bl	800a550 <__mcmp>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	db25      	blt.n	8008b84 <quorem+0xec>
 8008b38:	4629      	mov	r1, r5
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b40:	f8d1 c000 	ldr.w	ip, [r1]
 8008b44:	fa1f fe82 	uxth.w	lr, r2
 8008b48:	fa1f f38c 	uxth.w	r3, ip
 8008b4c:	eba3 030e 	sub.w	r3, r3, lr
 8008b50:	4403      	add	r3, r0
 8008b52:	0c12      	lsrs	r2, r2, #16
 8008b54:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008b58:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b62:	45c1      	cmp	r9, r8
 8008b64:	f841 3b04 	str.w	r3, [r1], #4
 8008b68:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b6c:	d2e6      	bcs.n	8008b3c <quorem+0xa4>
 8008b6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b76:	b922      	cbnz	r2, 8008b82 <quorem+0xea>
 8008b78:	3b04      	subs	r3, #4
 8008b7a:	429d      	cmp	r5, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	d30b      	bcc.n	8008b98 <quorem+0x100>
 8008b80:	613c      	str	r4, [r7, #16]
 8008b82:	3601      	adds	r6, #1
 8008b84:	4630      	mov	r0, r6
 8008b86:	b003      	add	sp, #12
 8008b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8c:	6812      	ldr	r2, [r2, #0]
 8008b8e:	3b04      	subs	r3, #4
 8008b90:	2a00      	cmp	r2, #0
 8008b92:	d1cb      	bne.n	8008b2c <quorem+0x94>
 8008b94:	3c01      	subs	r4, #1
 8008b96:	e7c6      	b.n	8008b26 <quorem+0x8e>
 8008b98:	6812      	ldr	r2, [r2, #0]
 8008b9a:	3b04      	subs	r3, #4
 8008b9c:	2a00      	cmp	r2, #0
 8008b9e:	d1ef      	bne.n	8008b80 <quorem+0xe8>
 8008ba0:	3c01      	subs	r4, #1
 8008ba2:	e7ea      	b.n	8008b7a <quorem+0xe2>
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	e7ee      	b.n	8008b86 <quorem+0xee>

08008ba8 <_dtoa_r>:
 8008ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	69c7      	ldr	r7, [r0, #28]
 8008bae:	b099      	sub	sp, #100	@ 0x64
 8008bb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008bb4:	ec55 4b10 	vmov	r4, r5, d0
 8008bb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008bba:	9109      	str	r1, [sp, #36]	@ 0x24
 8008bbc:	4683      	mov	fp, r0
 8008bbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008bc2:	b97f      	cbnz	r7, 8008be4 <_dtoa_r+0x3c>
 8008bc4:	2010      	movs	r0, #16
 8008bc6:	f001 f937 	bl	8009e38 <malloc>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	f8cb 001c 	str.w	r0, [fp, #28]
 8008bd0:	b920      	cbnz	r0, 8008bdc <_dtoa_r+0x34>
 8008bd2:	4ba7      	ldr	r3, [pc, #668]	@ (8008e70 <_dtoa_r+0x2c8>)
 8008bd4:	21ef      	movs	r1, #239	@ 0xef
 8008bd6:	48a7      	ldr	r0, [pc, #668]	@ (8008e74 <_dtoa_r+0x2cc>)
 8008bd8:	f7ff ff40 	bl	8008a5c <__assert_func>
 8008bdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008be0:	6007      	str	r7, [r0, #0]
 8008be2:	60c7      	str	r7, [r0, #12]
 8008be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008be8:	6819      	ldr	r1, [r3, #0]
 8008bea:	b159      	cbz	r1, 8008c04 <_dtoa_r+0x5c>
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	604a      	str	r2, [r1, #4]
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	4093      	lsls	r3, r2
 8008bf4:	608b      	str	r3, [r1, #8]
 8008bf6:	4658      	mov	r0, fp
 8008bf8:	f001 fa26 	bl	800a048 <_Bfree>
 8008bfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c00:	2200      	movs	r2, #0
 8008c02:	601a      	str	r2, [r3, #0]
 8008c04:	1e2b      	subs	r3, r5, #0
 8008c06:	bfb9      	ittee	lt
 8008c08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008c0c:	9303      	strlt	r3, [sp, #12]
 8008c0e:	2300      	movge	r3, #0
 8008c10:	6033      	strge	r3, [r6, #0]
 8008c12:	9f03      	ldr	r7, [sp, #12]
 8008c14:	4b98      	ldr	r3, [pc, #608]	@ (8008e78 <_dtoa_r+0x2d0>)
 8008c16:	bfbc      	itt	lt
 8008c18:	2201      	movlt	r2, #1
 8008c1a:	6032      	strlt	r2, [r6, #0]
 8008c1c:	43bb      	bics	r3, r7
 8008c1e:	d112      	bne.n	8008c46 <_dtoa_r+0x9e>
 8008c20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008c22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008c26:	6013      	str	r3, [r2, #0]
 8008c28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c2c:	4323      	orrs	r3, r4
 8008c2e:	f000 854d 	beq.w	80096cc <_dtoa_r+0xb24>
 8008c32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008e8c <_dtoa_r+0x2e4>
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 854f 	beq.w	80096dc <_dtoa_r+0xb34>
 8008c3e:	f10a 0303 	add.w	r3, sl, #3
 8008c42:	f000 bd49 	b.w	80096d8 <_dtoa_r+0xb30>
 8008c46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	ec51 0b17 	vmov	r0, r1, d7
 8008c50:	2300      	movs	r3, #0
 8008c52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008c56:	f7f7 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c5a:	4680      	mov	r8, r0
 8008c5c:	b158      	cbz	r0, 8008c76 <_dtoa_r+0xce>
 8008c5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008c60:	2301      	movs	r3, #1
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c66:	b113      	cbz	r3, 8008c6e <_dtoa_r+0xc6>
 8008c68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008c6a:	4b84      	ldr	r3, [pc, #528]	@ (8008e7c <_dtoa_r+0x2d4>)
 8008c6c:	6013      	str	r3, [r2, #0]
 8008c6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008e90 <_dtoa_r+0x2e8>
 8008c72:	f000 bd33 	b.w	80096dc <_dtoa_r+0xb34>
 8008c76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c7a:	aa16      	add	r2, sp, #88	@ 0x58
 8008c7c:	a917      	add	r1, sp, #92	@ 0x5c
 8008c7e:	4658      	mov	r0, fp
 8008c80:	f001 fd86 	bl	800a790 <__d2b>
 8008c84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008c88:	4681      	mov	r9, r0
 8008c8a:	2e00      	cmp	r6, #0
 8008c8c:	d077      	beq.n	8008d7e <_dtoa_r+0x1d6>
 8008c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ca0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ca4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ca8:	4619      	mov	r1, r3
 8008caa:	2200      	movs	r2, #0
 8008cac:	4b74      	ldr	r3, [pc, #464]	@ (8008e80 <_dtoa_r+0x2d8>)
 8008cae:	f7f7 faeb 	bl	8000288 <__aeabi_dsub>
 8008cb2:	a369      	add	r3, pc, #420	@ (adr r3, 8008e58 <_dtoa_r+0x2b0>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f7f7 fc9e 	bl	80005f8 <__aeabi_dmul>
 8008cbc:	a368      	add	r3, pc, #416	@ (adr r3, 8008e60 <_dtoa_r+0x2b8>)
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	f7f7 fae3 	bl	800028c <__adddf3>
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	4630      	mov	r0, r6
 8008cca:	460d      	mov	r5, r1
 8008ccc:	f7f7 fc2a 	bl	8000524 <__aeabi_i2d>
 8008cd0:	a365      	add	r3, pc, #404	@ (adr r3, 8008e68 <_dtoa_r+0x2c0>)
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	f7f7 fc8f 	bl	80005f8 <__aeabi_dmul>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4620      	mov	r0, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	f7f7 fad3 	bl	800028c <__adddf3>
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	460d      	mov	r5, r1
 8008cea:	f7f7 ff35 	bl	8000b58 <__aeabi_d2iz>
 8008cee:	2200      	movs	r2, #0
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f7f7 fef0 	bl	8000adc <__aeabi_dcmplt>
 8008cfc:	b140      	cbz	r0, 8008d10 <_dtoa_r+0x168>
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f7f7 fc10 	bl	8000524 <__aeabi_i2d>
 8008d04:	4622      	mov	r2, r4
 8008d06:	462b      	mov	r3, r5
 8008d08:	f7f7 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d0c:	b900      	cbnz	r0, 8008d10 <_dtoa_r+0x168>
 8008d0e:	3f01      	subs	r7, #1
 8008d10:	2f16      	cmp	r7, #22
 8008d12:	d851      	bhi.n	8008db8 <_dtoa_r+0x210>
 8008d14:	4b5b      	ldr	r3, [pc, #364]	@ (8008e84 <_dtoa_r+0x2dc>)
 8008d16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d22:	f7f7 fedb 	bl	8000adc <__aeabi_dcmplt>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d048      	beq.n	8008dbc <_dtoa_r+0x214>
 8008d2a:	3f01      	subs	r7, #1
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008d30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008d32:	1b9b      	subs	r3, r3, r6
 8008d34:	1e5a      	subs	r2, r3, #1
 8008d36:	bf44      	itt	mi
 8008d38:	f1c3 0801 	rsbmi	r8, r3, #1
 8008d3c:	2300      	movmi	r3, #0
 8008d3e:	9208      	str	r2, [sp, #32]
 8008d40:	bf54      	ite	pl
 8008d42:	f04f 0800 	movpl.w	r8, #0
 8008d46:	9308      	strmi	r3, [sp, #32]
 8008d48:	2f00      	cmp	r7, #0
 8008d4a:	db39      	blt.n	8008dc0 <_dtoa_r+0x218>
 8008d4c:	9b08      	ldr	r3, [sp, #32]
 8008d4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008d50:	443b      	add	r3, r7
 8008d52:	9308      	str	r3, [sp, #32]
 8008d54:	2300      	movs	r3, #0
 8008d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d5a:	2b09      	cmp	r3, #9
 8008d5c:	d864      	bhi.n	8008e28 <_dtoa_r+0x280>
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	bfc4      	itt	gt
 8008d62:	3b04      	subgt	r3, #4
 8008d64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d68:	f1a3 0302 	sub.w	r3, r3, #2
 8008d6c:	bfcc      	ite	gt
 8008d6e:	2400      	movgt	r4, #0
 8008d70:	2401      	movle	r4, #1
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d863      	bhi.n	8008e3e <_dtoa_r+0x296>
 8008d76:	e8df f003 	tbb	[pc, r3]
 8008d7a:	372a      	.short	0x372a
 8008d7c:	5535      	.short	0x5535
 8008d7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008d82:	441e      	add	r6, r3
 8008d84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	bfc1      	itttt	gt
 8008d8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008d90:	409f      	lslgt	r7, r3
 8008d92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008d96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008d9a:	bfd6      	itet	le
 8008d9c:	f1c3 0320 	rsble	r3, r3, #32
 8008da0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008da4:	fa04 f003 	lslle.w	r0, r4, r3
 8008da8:	f7f7 fbac 	bl	8000504 <__aeabi_ui2d>
 8008dac:	2201      	movs	r2, #1
 8008dae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008db2:	3e01      	subs	r6, #1
 8008db4:	9214      	str	r2, [sp, #80]	@ 0x50
 8008db6:	e777      	b.n	8008ca8 <_dtoa_r+0x100>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e7b8      	b.n	8008d2e <_dtoa_r+0x186>
 8008dbc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008dbe:	e7b7      	b.n	8008d30 <_dtoa_r+0x188>
 8008dc0:	427b      	negs	r3, r7
 8008dc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	eba8 0807 	sub.w	r8, r8, r7
 8008dca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008dcc:	e7c4      	b.n	8008d58 <_dtoa_r+0x1b0>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	dc35      	bgt.n	8008e44 <_dtoa_r+0x29c>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	9307      	str	r3, [sp, #28]
 8008dde:	461a      	mov	r2, r3
 8008de0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008de2:	e00b      	b.n	8008dfc <_dtoa_r+0x254>
 8008de4:	2301      	movs	r3, #1
 8008de6:	e7f3      	b.n	8008dd0 <_dtoa_r+0x228>
 8008de8:	2300      	movs	r3, #0
 8008dea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dee:	18fb      	adds	r3, r7, r3
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	3301      	adds	r3, #1
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	9307      	str	r3, [sp, #28]
 8008df8:	bfb8      	it	lt
 8008dfa:	2301      	movlt	r3, #1
 8008dfc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008e00:	2100      	movs	r1, #0
 8008e02:	2204      	movs	r2, #4
 8008e04:	f102 0514 	add.w	r5, r2, #20
 8008e08:	429d      	cmp	r5, r3
 8008e0a:	d91f      	bls.n	8008e4c <_dtoa_r+0x2a4>
 8008e0c:	6041      	str	r1, [r0, #4]
 8008e0e:	4658      	mov	r0, fp
 8008e10:	f001 f8da 	bl	8009fc8 <_Balloc>
 8008e14:	4682      	mov	sl, r0
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d13c      	bne.n	8008e94 <_dtoa_r+0x2ec>
 8008e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e88 <_dtoa_r+0x2e0>)
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008e22:	e6d8      	b.n	8008bd6 <_dtoa_r+0x2e>
 8008e24:	2301      	movs	r3, #1
 8008e26:	e7e0      	b.n	8008dea <_dtoa_r+0x242>
 8008e28:	2401      	movs	r4, #1
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e30:	f04f 33ff 	mov.w	r3, #4294967295
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	9307      	str	r3, [sp, #28]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2312      	movs	r3, #18
 8008e3c:	e7d0      	b.n	8008de0 <_dtoa_r+0x238>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e42:	e7f5      	b.n	8008e30 <_dtoa_r+0x288>
 8008e44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	9307      	str	r3, [sp, #28]
 8008e4a:	e7d7      	b.n	8008dfc <_dtoa_r+0x254>
 8008e4c:	3101      	adds	r1, #1
 8008e4e:	0052      	lsls	r2, r2, #1
 8008e50:	e7d8      	b.n	8008e04 <_dtoa_r+0x25c>
 8008e52:	bf00      	nop
 8008e54:	f3af 8000 	nop.w
 8008e58:	636f4361 	.word	0x636f4361
 8008e5c:	3fd287a7 	.word	0x3fd287a7
 8008e60:	8b60c8b3 	.word	0x8b60c8b3
 8008e64:	3fc68a28 	.word	0x3fc68a28
 8008e68:	509f79fb 	.word	0x509f79fb
 8008e6c:	3fd34413 	.word	0x3fd34413
 8008e70:	0800d579 	.word	0x0800d579
 8008e74:	0800d63b 	.word	0x0800d63b
 8008e78:	7ff00000 	.word	0x7ff00000
 8008e7c:	0800d551 	.word	0x0800d551
 8008e80:	3ff80000 	.word	0x3ff80000
 8008e84:	0800d798 	.word	0x0800d798
 8008e88:	0800d693 	.word	0x0800d693
 8008e8c:	0800d637 	.word	0x0800d637
 8008e90:	0800d550 	.word	0x0800d550
 8008e94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e98:	6018      	str	r0, [r3, #0]
 8008e9a:	9b07      	ldr	r3, [sp, #28]
 8008e9c:	2b0e      	cmp	r3, #14
 8008e9e:	f200 80a4 	bhi.w	8008fea <_dtoa_r+0x442>
 8008ea2:	2c00      	cmp	r4, #0
 8008ea4:	f000 80a1 	beq.w	8008fea <_dtoa_r+0x442>
 8008ea8:	2f00      	cmp	r7, #0
 8008eaa:	dd33      	ble.n	8008f14 <_dtoa_r+0x36c>
 8008eac:	4bad      	ldr	r3, [pc, #692]	@ (8009164 <_dtoa_r+0x5bc>)
 8008eae:	f007 020f 	and.w	r2, r7, #15
 8008eb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eb6:	ed93 7b00 	vldr	d7, [r3]
 8008eba:	05f8      	lsls	r0, r7, #23
 8008ebc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008ec0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008ec4:	d516      	bpl.n	8008ef4 <_dtoa_r+0x34c>
 8008ec6:	4ba8      	ldr	r3, [pc, #672]	@ (8009168 <_dtoa_r+0x5c0>)
 8008ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ed0:	f7f7 fcbc 	bl	800084c <__aeabi_ddiv>
 8008ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ed8:	f004 040f 	and.w	r4, r4, #15
 8008edc:	2603      	movs	r6, #3
 8008ede:	4da2      	ldr	r5, [pc, #648]	@ (8009168 <_dtoa_r+0x5c0>)
 8008ee0:	b954      	cbnz	r4, 8008ef8 <_dtoa_r+0x350>
 8008ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eea:	f7f7 fcaf 	bl	800084c <__aeabi_ddiv>
 8008eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ef2:	e028      	b.n	8008f46 <_dtoa_r+0x39e>
 8008ef4:	2602      	movs	r6, #2
 8008ef6:	e7f2      	b.n	8008ede <_dtoa_r+0x336>
 8008ef8:	07e1      	lsls	r1, r4, #31
 8008efa:	d508      	bpl.n	8008f0e <_dtoa_r+0x366>
 8008efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f04:	f7f7 fb78 	bl	80005f8 <__aeabi_dmul>
 8008f08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f0c:	3601      	adds	r6, #1
 8008f0e:	1064      	asrs	r4, r4, #1
 8008f10:	3508      	adds	r5, #8
 8008f12:	e7e5      	b.n	8008ee0 <_dtoa_r+0x338>
 8008f14:	f000 80d2 	beq.w	80090bc <_dtoa_r+0x514>
 8008f18:	427c      	negs	r4, r7
 8008f1a:	4b92      	ldr	r3, [pc, #584]	@ (8009164 <_dtoa_r+0x5bc>)
 8008f1c:	4d92      	ldr	r5, [pc, #584]	@ (8009168 <_dtoa_r+0x5c0>)
 8008f1e:	f004 020f 	and.w	r2, r4, #15
 8008f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f2e:	f7f7 fb63 	bl	80005f8 <__aeabi_dmul>
 8008f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f36:	1124      	asrs	r4, r4, #4
 8008f38:	2300      	movs	r3, #0
 8008f3a:	2602      	movs	r6, #2
 8008f3c:	2c00      	cmp	r4, #0
 8008f3e:	f040 80b2 	bne.w	80090a6 <_dtoa_r+0x4fe>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1d3      	bne.n	8008eee <_dtoa_r+0x346>
 8008f46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f48:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 80b7 	beq.w	80090c0 <_dtoa_r+0x518>
 8008f52:	4b86      	ldr	r3, [pc, #536]	@ (800916c <_dtoa_r+0x5c4>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	4620      	mov	r0, r4
 8008f58:	4629      	mov	r1, r5
 8008f5a:	f7f7 fdbf 	bl	8000adc <__aeabi_dcmplt>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f000 80ae 	beq.w	80090c0 <_dtoa_r+0x518>
 8008f64:	9b07      	ldr	r3, [sp, #28]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 80aa 	beq.w	80090c0 <_dtoa_r+0x518>
 8008f6c:	9b00      	ldr	r3, [sp, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dd37      	ble.n	8008fe2 <_dtoa_r+0x43a>
 8008f72:	1e7b      	subs	r3, r7, #1
 8008f74:	9304      	str	r3, [sp, #16]
 8008f76:	4620      	mov	r0, r4
 8008f78:	4b7d      	ldr	r3, [pc, #500]	@ (8009170 <_dtoa_r+0x5c8>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	f7f7 fb3b 	bl	80005f8 <__aeabi_dmul>
 8008f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f86:	9c00      	ldr	r4, [sp, #0]
 8008f88:	3601      	adds	r6, #1
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f7f7 faca 	bl	8000524 <__aeabi_i2d>
 8008f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f94:	f7f7 fb30 	bl	80005f8 <__aeabi_dmul>
 8008f98:	4b76      	ldr	r3, [pc, #472]	@ (8009174 <_dtoa_r+0x5cc>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f7f7 f976 	bl	800028c <__adddf3>
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008fa6:	2c00      	cmp	r4, #0
 8008fa8:	f040 808d 	bne.w	80090c6 <_dtoa_r+0x51e>
 8008fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fb0:	4b71      	ldr	r3, [pc, #452]	@ (8009178 <_dtoa_r+0x5d0>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f7f7 f968 	bl	8000288 <__aeabi_dsub>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fc0:	462a      	mov	r2, r5
 8008fc2:	4633      	mov	r3, r6
 8008fc4:	f7f7 fda8 	bl	8000b18 <__aeabi_dcmpgt>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	f040 828b 	bne.w	80094e4 <_dtoa_r+0x93c>
 8008fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fd2:	462a      	mov	r2, r5
 8008fd4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008fd8:	f7f7 fd80 	bl	8000adc <__aeabi_dcmplt>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f040 8128 	bne.w	8009232 <_dtoa_r+0x68a>
 8008fe2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008fe6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008fea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f2c0 815a 	blt.w	80092a6 <_dtoa_r+0x6fe>
 8008ff2:	2f0e      	cmp	r7, #14
 8008ff4:	f300 8157 	bgt.w	80092a6 <_dtoa_r+0x6fe>
 8008ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8009164 <_dtoa_r+0x5bc>)
 8008ffa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ffe:	ed93 7b00 	vldr	d7, [r3]
 8009002:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009004:	2b00      	cmp	r3, #0
 8009006:	ed8d 7b00 	vstr	d7, [sp]
 800900a:	da03      	bge.n	8009014 <_dtoa_r+0x46c>
 800900c:	9b07      	ldr	r3, [sp, #28]
 800900e:	2b00      	cmp	r3, #0
 8009010:	f340 8101 	ble.w	8009216 <_dtoa_r+0x66e>
 8009014:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009018:	4656      	mov	r6, sl
 800901a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 fc13 	bl	800084c <__aeabi_ddiv>
 8009026:	f7f7 fd97 	bl	8000b58 <__aeabi_d2iz>
 800902a:	4680      	mov	r8, r0
 800902c:	f7f7 fa7a 	bl	8000524 <__aeabi_i2d>
 8009030:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009034:	f7f7 fae0 	bl	80005f8 <__aeabi_dmul>
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	4620      	mov	r0, r4
 800903e:	4629      	mov	r1, r5
 8009040:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009044:	f7f7 f920 	bl	8000288 <__aeabi_dsub>
 8009048:	f806 4b01 	strb.w	r4, [r6], #1
 800904c:	9d07      	ldr	r5, [sp, #28]
 800904e:	eba6 040a 	sub.w	r4, r6, sl
 8009052:	42a5      	cmp	r5, r4
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	f040 8117 	bne.w	800928a <_dtoa_r+0x6e2>
 800905c:	f7f7 f916 	bl	800028c <__adddf3>
 8009060:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009064:	4604      	mov	r4, r0
 8009066:	460d      	mov	r5, r1
 8009068:	f7f7 fd56 	bl	8000b18 <__aeabi_dcmpgt>
 800906c:	2800      	cmp	r0, #0
 800906e:	f040 80f9 	bne.w	8009264 <_dtoa_r+0x6bc>
 8009072:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009076:	4620      	mov	r0, r4
 8009078:	4629      	mov	r1, r5
 800907a:	f7f7 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800907e:	b118      	cbz	r0, 8009088 <_dtoa_r+0x4e0>
 8009080:	f018 0f01 	tst.w	r8, #1
 8009084:	f040 80ee 	bne.w	8009264 <_dtoa_r+0x6bc>
 8009088:	4649      	mov	r1, r9
 800908a:	4658      	mov	r0, fp
 800908c:	f000 ffdc 	bl	800a048 <_Bfree>
 8009090:	2300      	movs	r3, #0
 8009092:	7033      	strb	r3, [r6, #0]
 8009094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009096:	3701      	adds	r7, #1
 8009098:	601f      	str	r7, [r3, #0]
 800909a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 831d 	beq.w	80096dc <_dtoa_r+0xb34>
 80090a2:	601e      	str	r6, [r3, #0]
 80090a4:	e31a      	b.n	80096dc <_dtoa_r+0xb34>
 80090a6:	07e2      	lsls	r2, r4, #31
 80090a8:	d505      	bpl.n	80090b6 <_dtoa_r+0x50e>
 80090aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090ae:	f7f7 faa3 	bl	80005f8 <__aeabi_dmul>
 80090b2:	3601      	adds	r6, #1
 80090b4:	2301      	movs	r3, #1
 80090b6:	1064      	asrs	r4, r4, #1
 80090b8:	3508      	adds	r5, #8
 80090ba:	e73f      	b.n	8008f3c <_dtoa_r+0x394>
 80090bc:	2602      	movs	r6, #2
 80090be:	e742      	b.n	8008f46 <_dtoa_r+0x39e>
 80090c0:	9c07      	ldr	r4, [sp, #28]
 80090c2:	9704      	str	r7, [sp, #16]
 80090c4:	e761      	b.n	8008f8a <_dtoa_r+0x3e2>
 80090c6:	4b27      	ldr	r3, [pc, #156]	@ (8009164 <_dtoa_r+0x5bc>)
 80090c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80090ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090d2:	4454      	add	r4, sl
 80090d4:	2900      	cmp	r1, #0
 80090d6:	d053      	beq.n	8009180 <_dtoa_r+0x5d8>
 80090d8:	4928      	ldr	r1, [pc, #160]	@ (800917c <_dtoa_r+0x5d4>)
 80090da:	2000      	movs	r0, #0
 80090dc:	f7f7 fbb6 	bl	800084c <__aeabi_ddiv>
 80090e0:	4633      	mov	r3, r6
 80090e2:	462a      	mov	r2, r5
 80090e4:	f7f7 f8d0 	bl	8000288 <__aeabi_dsub>
 80090e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80090ec:	4656      	mov	r6, sl
 80090ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090f2:	f7f7 fd31 	bl	8000b58 <__aeabi_d2iz>
 80090f6:	4605      	mov	r5, r0
 80090f8:	f7f7 fa14 	bl	8000524 <__aeabi_i2d>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009104:	f7f7 f8c0 	bl	8000288 <__aeabi_dsub>
 8009108:	3530      	adds	r5, #48	@ 0x30
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009112:	f806 5b01 	strb.w	r5, [r6], #1
 8009116:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800911a:	f7f7 fcdf 	bl	8000adc <__aeabi_dcmplt>
 800911e:	2800      	cmp	r0, #0
 8009120:	d171      	bne.n	8009206 <_dtoa_r+0x65e>
 8009122:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009126:	4911      	ldr	r1, [pc, #68]	@ (800916c <_dtoa_r+0x5c4>)
 8009128:	2000      	movs	r0, #0
 800912a:	f7f7 f8ad 	bl	8000288 <__aeabi_dsub>
 800912e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009132:	f7f7 fcd3 	bl	8000adc <__aeabi_dcmplt>
 8009136:	2800      	cmp	r0, #0
 8009138:	f040 8095 	bne.w	8009266 <_dtoa_r+0x6be>
 800913c:	42a6      	cmp	r6, r4
 800913e:	f43f af50 	beq.w	8008fe2 <_dtoa_r+0x43a>
 8009142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009146:	4b0a      	ldr	r3, [pc, #40]	@ (8009170 <_dtoa_r+0x5c8>)
 8009148:	2200      	movs	r2, #0
 800914a:	f7f7 fa55 	bl	80005f8 <__aeabi_dmul>
 800914e:	4b08      	ldr	r3, [pc, #32]	@ (8009170 <_dtoa_r+0x5c8>)
 8009150:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009154:	2200      	movs	r2, #0
 8009156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800915a:	f7f7 fa4d 	bl	80005f8 <__aeabi_dmul>
 800915e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009162:	e7c4      	b.n	80090ee <_dtoa_r+0x546>
 8009164:	0800d798 	.word	0x0800d798
 8009168:	0800d770 	.word	0x0800d770
 800916c:	3ff00000 	.word	0x3ff00000
 8009170:	40240000 	.word	0x40240000
 8009174:	401c0000 	.word	0x401c0000
 8009178:	40140000 	.word	0x40140000
 800917c:	3fe00000 	.word	0x3fe00000
 8009180:	4631      	mov	r1, r6
 8009182:	4628      	mov	r0, r5
 8009184:	f7f7 fa38 	bl	80005f8 <__aeabi_dmul>
 8009188:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800918c:	9415      	str	r4, [sp, #84]	@ 0x54
 800918e:	4656      	mov	r6, sl
 8009190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009194:	f7f7 fce0 	bl	8000b58 <__aeabi_d2iz>
 8009198:	4605      	mov	r5, r0
 800919a:	f7f7 f9c3 	bl	8000524 <__aeabi_i2d>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091a6:	f7f7 f86f 	bl	8000288 <__aeabi_dsub>
 80091aa:	3530      	adds	r5, #48	@ 0x30
 80091ac:	f806 5b01 	strb.w	r5, [r6], #1
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	42a6      	cmp	r6, r4
 80091b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091ba:	f04f 0200 	mov.w	r2, #0
 80091be:	d124      	bne.n	800920a <_dtoa_r+0x662>
 80091c0:	4bac      	ldr	r3, [pc, #688]	@ (8009474 <_dtoa_r+0x8cc>)
 80091c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80091c6:	f7f7 f861 	bl	800028c <__adddf3>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091d2:	f7f7 fca1 	bl	8000b18 <__aeabi_dcmpgt>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d145      	bne.n	8009266 <_dtoa_r+0x6be>
 80091da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80091de:	49a5      	ldr	r1, [pc, #660]	@ (8009474 <_dtoa_r+0x8cc>)
 80091e0:	2000      	movs	r0, #0
 80091e2:	f7f7 f851 	bl	8000288 <__aeabi_dsub>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ee:	f7f7 fc75 	bl	8000adc <__aeabi_dcmplt>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	f43f aef5 	beq.w	8008fe2 <_dtoa_r+0x43a>
 80091f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80091fa:	1e73      	subs	r3, r6, #1
 80091fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80091fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009202:	2b30      	cmp	r3, #48	@ 0x30
 8009204:	d0f8      	beq.n	80091f8 <_dtoa_r+0x650>
 8009206:	9f04      	ldr	r7, [sp, #16]
 8009208:	e73e      	b.n	8009088 <_dtoa_r+0x4e0>
 800920a:	4b9b      	ldr	r3, [pc, #620]	@ (8009478 <_dtoa_r+0x8d0>)
 800920c:	f7f7 f9f4 	bl	80005f8 <__aeabi_dmul>
 8009210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009214:	e7bc      	b.n	8009190 <_dtoa_r+0x5e8>
 8009216:	d10c      	bne.n	8009232 <_dtoa_r+0x68a>
 8009218:	4b98      	ldr	r3, [pc, #608]	@ (800947c <_dtoa_r+0x8d4>)
 800921a:	2200      	movs	r2, #0
 800921c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009220:	f7f7 f9ea 	bl	80005f8 <__aeabi_dmul>
 8009224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009228:	f7f7 fc6c 	bl	8000b04 <__aeabi_dcmpge>
 800922c:	2800      	cmp	r0, #0
 800922e:	f000 8157 	beq.w	80094e0 <_dtoa_r+0x938>
 8009232:	2400      	movs	r4, #0
 8009234:	4625      	mov	r5, r4
 8009236:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009238:	43db      	mvns	r3, r3
 800923a:	9304      	str	r3, [sp, #16]
 800923c:	4656      	mov	r6, sl
 800923e:	2700      	movs	r7, #0
 8009240:	4621      	mov	r1, r4
 8009242:	4658      	mov	r0, fp
 8009244:	f000 ff00 	bl	800a048 <_Bfree>
 8009248:	2d00      	cmp	r5, #0
 800924a:	d0dc      	beq.n	8009206 <_dtoa_r+0x65e>
 800924c:	b12f      	cbz	r7, 800925a <_dtoa_r+0x6b2>
 800924e:	42af      	cmp	r7, r5
 8009250:	d003      	beq.n	800925a <_dtoa_r+0x6b2>
 8009252:	4639      	mov	r1, r7
 8009254:	4658      	mov	r0, fp
 8009256:	f000 fef7 	bl	800a048 <_Bfree>
 800925a:	4629      	mov	r1, r5
 800925c:	4658      	mov	r0, fp
 800925e:	f000 fef3 	bl	800a048 <_Bfree>
 8009262:	e7d0      	b.n	8009206 <_dtoa_r+0x65e>
 8009264:	9704      	str	r7, [sp, #16]
 8009266:	4633      	mov	r3, r6
 8009268:	461e      	mov	r6, r3
 800926a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800926e:	2a39      	cmp	r2, #57	@ 0x39
 8009270:	d107      	bne.n	8009282 <_dtoa_r+0x6da>
 8009272:	459a      	cmp	sl, r3
 8009274:	d1f8      	bne.n	8009268 <_dtoa_r+0x6c0>
 8009276:	9a04      	ldr	r2, [sp, #16]
 8009278:	3201      	adds	r2, #1
 800927a:	9204      	str	r2, [sp, #16]
 800927c:	2230      	movs	r2, #48	@ 0x30
 800927e:	f88a 2000 	strb.w	r2, [sl]
 8009282:	781a      	ldrb	r2, [r3, #0]
 8009284:	3201      	adds	r2, #1
 8009286:	701a      	strb	r2, [r3, #0]
 8009288:	e7bd      	b.n	8009206 <_dtoa_r+0x65e>
 800928a:	4b7b      	ldr	r3, [pc, #492]	@ (8009478 <_dtoa_r+0x8d0>)
 800928c:	2200      	movs	r2, #0
 800928e:	f7f7 f9b3 	bl	80005f8 <__aeabi_dmul>
 8009292:	2200      	movs	r2, #0
 8009294:	2300      	movs	r3, #0
 8009296:	4604      	mov	r4, r0
 8009298:	460d      	mov	r5, r1
 800929a:	f7f7 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 800929e:	2800      	cmp	r0, #0
 80092a0:	f43f aebb 	beq.w	800901a <_dtoa_r+0x472>
 80092a4:	e6f0      	b.n	8009088 <_dtoa_r+0x4e0>
 80092a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	f000 80db 	beq.w	8009464 <_dtoa_r+0x8bc>
 80092ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092b0:	2a01      	cmp	r2, #1
 80092b2:	f300 80bf 	bgt.w	8009434 <_dtoa_r+0x88c>
 80092b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80092b8:	2a00      	cmp	r2, #0
 80092ba:	f000 80b7 	beq.w	800942c <_dtoa_r+0x884>
 80092be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80092c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80092c4:	4646      	mov	r6, r8
 80092c6:	9a08      	ldr	r2, [sp, #32]
 80092c8:	2101      	movs	r1, #1
 80092ca:	441a      	add	r2, r3
 80092cc:	4658      	mov	r0, fp
 80092ce:	4498      	add	r8, r3
 80092d0:	9208      	str	r2, [sp, #32]
 80092d2:	f000 ffb7 	bl	800a244 <__i2b>
 80092d6:	4605      	mov	r5, r0
 80092d8:	b15e      	cbz	r6, 80092f2 <_dtoa_r+0x74a>
 80092da:	9b08      	ldr	r3, [sp, #32]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd08      	ble.n	80092f2 <_dtoa_r+0x74a>
 80092e0:	42b3      	cmp	r3, r6
 80092e2:	9a08      	ldr	r2, [sp, #32]
 80092e4:	bfa8      	it	ge
 80092e6:	4633      	movge	r3, r6
 80092e8:	eba8 0803 	sub.w	r8, r8, r3
 80092ec:	1af6      	subs	r6, r6, r3
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	9308      	str	r3, [sp, #32]
 80092f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092f4:	b1f3      	cbz	r3, 8009334 <_dtoa_r+0x78c>
 80092f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 80b7 	beq.w	800946c <_dtoa_r+0x8c4>
 80092fe:	b18c      	cbz	r4, 8009324 <_dtoa_r+0x77c>
 8009300:	4629      	mov	r1, r5
 8009302:	4622      	mov	r2, r4
 8009304:	4658      	mov	r0, fp
 8009306:	f001 f85d 	bl	800a3c4 <__pow5mult>
 800930a:	464a      	mov	r2, r9
 800930c:	4601      	mov	r1, r0
 800930e:	4605      	mov	r5, r0
 8009310:	4658      	mov	r0, fp
 8009312:	f000 ffad 	bl	800a270 <__multiply>
 8009316:	4649      	mov	r1, r9
 8009318:	9004      	str	r0, [sp, #16]
 800931a:	4658      	mov	r0, fp
 800931c:	f000 fe94 	bl	800a048 <_Bfree>
 8009320:	9b04      	ldr	r3, [sp, #16]
 8009322:	4699      	mov	r9, r3
 8009324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009326:	1b1a      	subs	r2, r3, r4
 8009328:	d004      	beq.n	8009334 <_dtoa_r+0x78c>
 800932a:	4649      	mov	r1, r9
 800932c:	4658      	mov	r0, fp
 800932e:	f001 f849 	bl	800a3c4 <__pow5mult>
 8009332:	4681      	mov	r9, r0
 8009334:	2101      	movs	r1, #1
 8009336:	4658      	mov	r0, fp
 8009338:	f000 ff84 	bl	800a244 <__i2b>
 800933c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800933e:	4604      	mov	r4, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 81cf 	beq.w	80096e4 <_dtoa_r+0xb3c>
 8009346:	461a      	mov	r2, r3
 8009348:	4601      	mov	r1, r0
 800934a:	4658      	mov	r0, fp
 800934c:	f001 f83a 	bl	800a3c4 <__pow5mult>
 8009350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009352:	2b01      	cmp	r3, #1
 8009354:	4604      	mov	r4, r0
 8009356:	f300 8095 	bgt.w	8009484 <_dtoa_r+0x8dc>
 800935a:	9b02      	ldr	r3, [sp, #8]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f040 8087 	bne.w	8009470 <_dtoa_r+0x8c8>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009368:	2b00      	cmp	r3, #0
 800936a:	f040 8089 	bne.w	8009480 <_dtoa_r+0x8d8>
 800936e:	9b03      	ldr	r3, [sp, #12]
 8009370:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009374:	0d1b      	lsrs	r3, r3, #20
 8009376:	051b      	lsls	r3, r3, #20
 8009378:	b12b      	cbz	r3, 8009386 <_dtoa_r+0x7de>
 800937a:	9b08      	ldr	r3, [sp, #32]
 800937c:	3301      	adds	r3, #1
 800937e:	9308      	str	r3, [sp, #32]
 8009380:	f108 0801 	add.w	r8, r8, #1
 8009384:	2301      	movs	r3, #1
 8009386:	930a      	str	r3, [sp, #40]	@ 0x28
 8009388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 81b0 	beq.w	80096f0 <_dtoa_r+0xb48>
 8009390:	6923      	ldr	r3, [r4, #16]
 8009392:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009396:	6918      	ldr	r0, [r3, #16]
 8009398:	f000 ff08 	bl	800a1ac <__hi0bits>
 800939c:	f1c0 0020 	rsb	r0, r0, #32
 80093a0:	9b08      	ldr	r3, [sp, #32]
 80093a2:	4418      	add	r0, r3
 80093a4:	f010 001f 	ands.w	r0, r0, #31
 80093a8:	d077      	beq.n	800949a <_dtoa_r+0x8f2>
 80093aa:	f1c0 0320 	rsb	r3, r0, #32
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	dd6b      	ble.n	800948a <_dtoa_r+0x8e2>
 80093b2:	9b08      	ldr	r3, [sp, #32]
 80093b4:	f1c0 001c 	rsb	r0, r0, #28
 80093b8:	4403      	add	r3, r0
 80093ba:	4480      	add	r8, r0
 80093bc:	4406      	add	r6, r0
 80093be:	9308      	str	r3, [sp, #32]
 80093c0:	f1b8 0f00 	cmp.w	r8, #0
 80093c4:	dd05      	ble.n	80093d2 <_dtoa_r+0x82a>
 80093c6:	4649      	mov	r1, r9
 80093c8:	4642      	mov	r2, r8
 80093ca:	4658      	mov	r0, fp
 80093cc:	f001 f854 	bl	800a478 <__lshift>
 80093d0:	4681      	mov	r9, r0
 80093d2:	9b08      	ldr	r3, [sp, #32]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	dd05      	ble.n	80093e4 <_dtoa_r+0x83c>
 80093d8:	4621      	mov	r1, r4
 80093da:	461a      	mov	r2, r3
 80093dc:	4658      	mov	r0, fp
 80093de:	f001 f84b 	bl	800a478 <__lshift>
 80093e2:	4604      	mov	r4, r0
 80093e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d059      	beq.n	800949e <_dtoa_r+0x8f6>
 80093ea:	4621      	mov	r1, r4
 80093ec:	4648      	mov	r0, r9
 80093ee:	f001 f8af 	bl	800a550 <__mcmp>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	da53      	bge.n	800949e <_dtoa_r+0x8f6>
 80093f6:	1e7b      	subs	r3, r7, #1
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	4649      	mov	r1, r9
 80093fc:	2300      	movs	r3, #0
 80093fe:	220a      	movs	r2, #10
 8009400:	4658      	mov	r0, fp
 8009402:	f000 fe43 	bl	800a08c <__multadd>
 8009406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009408:	4681      	mov	r9, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 8172 	beq.w	80096f4 <_dtoa_r+0xb4c>
 8009410:	2300      	movs	r3, #0
 8009412:	4629      	mov	r1, r5
 8009414:	220a      	movs	r2, #10
 8009416:	4658      	mov	r0, fp
 8009418:	f000 fe38 	bl	800a08c <__multadd>
 800941c:	9b00      	ldr	r3, [sp, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	4605      	mov	r5, r0
 8009422:	dc67      	bgt.n	80094f4 <_dtoa_r+0x94c>
 8009424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009426:	2b02      	cmp	r3, #2
 8009428:	dc41      	bgt.n	80094ae <_dtoa_r+0x906>
 800942a:	e063      	b.n	80094f4 <_dtoa_r+0x94c>
 800942c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800942e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009432:	e746      	b.n	80092c2 <_dtoa_r+0x71a>
 8009434:	9b07      	ldr	r3, [sp, #28]
 8009436:	1e5c      	subs	r4, r3, #1
 8009438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800943a:	42a3      	cmp	r3, r4
 800943c:	bfbf      	itttt	lt
 800943e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009440:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009442:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009444:	1ae3      	sublt	r3, r4, r3
 8009446:	bfb4      	ite	lt
 8009448:	18d2      	addlt	r2, r2, r3
 800944a:	1b1c      	subge	r4, r3, r4
 800944c:	9b07      	ldr	r3, [sp, #28]
 800944e:	bfbc      	itt	lt
 8009450:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009452:	2400      	movlt	r4, #0
 8009454:	2b00      	cmp	r3, #0
 8009456:	bfb5      	itete	lt
 8009458:	eba8 0603 	sublt.w	r6, r8, r3
 800945c:	9b07      	ldrge	r3, [sp, #28]
 800945e:	2300      	movlt	r3, #0
 8009460:	4646      	movge	r6, r8
 8009462:	e730      	b.n	80092c6 <_dtoa_r+0x71e>
 8009464:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009466:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009468:	4646      	mov	r6, r8
 800946a:	e735      	b.n	80092d8 <_dtoa_r+0x730>
 800946c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800946e:	e75c      	b.n	800932a <_dtoa_r+0x782>
 8009470:	2300      	movs	r3, #0
 8009472:	e788      	b.n	8009386 <_dtoa_r+0x7de>
 8009474:	3fe00000 	.word	0x3fe00000
 8009478:	40240000 	.word	0x40240000
 800947c:	40140000 	.word	0x40140000
 8009480:	9b02      	ldr	r3, [sp, #8]
 8009482:	e780      	b.n	8009386 <_dtoa_r+0x7de>
 8009484:	2300      	movs	r3, #0
 8009486:	930a      	str	r3, [sp, #40]	@ 0x28
 8009488:	e782      	b.n	8009390 <_dtoa_r+0x7e8>
 800948a:	d099      	beq.n	80093c0 <_dtoa_r+0x818>
 800948c:	9a08      	ldr	r2, [sp, #32]
 800948e:	331c      	adds	r3, #28
 8009490:	441a      	add	r2, r3
 8009492:	4498      	add	r8, r3
 8009494:	441e      	add	r6, r3
 8009496:	9208      	str	r2, [sp, #32]
 8009498:	e792      	b.n	80093c0 <_dtoa_r+0x818>
 800949a:	4603      	mov	r3, r0
 800949c:	e7f6      	b.n	800948c <_dtoa_r+0x8e4>
 800949e:	9b07      	ldr	r3, [sp, #28]
 80094a0:	9704      	str	r7, [sp, #16]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dc20      	bgt.n	80094e8 <_dtoa_r+0x940>
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	dd1e      	ble.n	80094ec <_dtoa_r+0x944>
 80094ae:	9b00      	ldr	r3, [sp, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f47f aec0 	bne.w	8009236 <_dtoa_r+0x68e>
 80094b6:	4621      	mov	r1, r4
 80094b8:	2205      	movs	r2, #5
 80094ba:	4658      	mov	r0, fp
 80094bc:	f000 fde6 	bl	800a08c <__multadd>
 80094c0:	4601      	mov	r1, r0
 80094c2:	4604      	mov	r4, r0
 80094c4:	4648      	mov	r0, r9
 80094c6:	f001 f843 	bl	800a550 <__mcmp>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	f77f aeb3 	ble.w	8009236 <_dtoa_r+0x68e>
 80094d0:	4656      	mov	r6, sl
 80094d2:	2331      	movs	r3, #49	@ 0x31
 80094d4:	f806 3b01 	strb.w	r3, [r6], #1
 80094d8:	9b04      	ldr	r3, [sp, #16]
 80094da:	3301      	adds	r3, #1
 80094dc:	9304      	str	r3, [sp, #16]
 80094de:	e6ae      	b.n	800923e <_dtoa_r+0x696>
 80094e0:	9c07      	ldr	r4, [sp, #28]
 80094e2:	9704      	str	r7, [sp, #16]
 80094e4:	4625      	mov	r5, r4
 80094e6:	e7f3      	b.n	80094d0 <_dtoa_r+0x928>
 80094e8:	9b07      	ldr	r3, [sp, #28]
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 8104 	beq.w	80096fc <_dtoa_r+0xb54>
 80094f4:	2e00      	cmp	r6, #0
 80094f6:	dd05      	ble.n	8009504 <_dtoa_r+0x95c>
 80094f8:	4629      	mov	r1, r5
 80094fa:	4632      	mov	r2, r6
 80094fc:	4658      	mov	r0, fp
 80094fe:	f000 ffbb 	bl	800a478 <__lshift>
 8009502:	4605      	mov	r5, r0
 8009504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009506:	2b00      	cmp	r3, #0
 8009508:	d05a      	beq.n	80095c0 <_dtoa_r+0xa18>
 800950a:	6869      	ldr	r1, [r5, #4]
 800950c:	4658      	mov	r0, fp
 800950e:	f000 fd5b 	bl	8009fc8 <_Balloc>
 8009512:	4606      	mov	r6, r0
 8009514:	b928      	cbnz	r0, 8009522 <_dtoa_r+0x97a>
 8009516:	4b84      	ldr	r3, [pc, #528]	@ (8009728 <_dtoa_r+0xb80>)
 8009518:	4602      	mov	r2, r0
 800951a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800951e:	f7ff bb5a 	b.w	8008bd6 <_dtoa_r+0x2e>
 8009522:	692a      	ldr	r2, [r5, #16]
 8009524:	3202      	adds	r2, #2
 8009526:	0092      	lsls	r2, r2, #2
 8009528:	f105 010c 	add.w	r1, r5, #12
 800952c:	300c      	adds	r0, #12
 800952e:	f7ff fa76 	bl	8008a1e <memcpy>
 8009532:	2201      	movs	r2, #1
 8009534:	4631      	mov	r1, r6
 8009536:	4658      	mov	r0, fp
 8009538:	f000 ff9e 	bl	800a478 <__lshift>
 800953c:	f10a 0301 	add.w	r3, sl, #1
 8009540:	9307      	str	r3, [sp, #28]
 8009542:	9b00      	ldr	r3, [sp, #0]
 8009544:	4453      	add	r3, sl
 8009546:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009548:	9b02      	ldr	r3, [sp, #8]
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	462f      	mov	r7, r5
 8009550:	930a      	str	r3, [sp, #40]	@ 0x28
 8009552:	4605      	mov	r5, r0
 8009554:	9b07      	ldr	r3, [sp, #28]
 8009556:	4621      	mov	r1, r4
 8009558:	3b01      	subs	r3, #1
 800955a:	4648      	mov	r0, r9
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	f7ff fa9b 	bl	8008a98 <quorem>
 8009562:	4639      	mov	r1, r7
 8009564:	9002      	str	r0, [sp, #8]
 8009566:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800956a:	4648      	mov	r0, r9
 800956c:	f000 fff0 	bl	800a550 <__mcmp>
 8009570:	462a      	mov	r2, r5
 8009572:	9008      	str	r0, [sp, #32]
 8009574:	4621      	mov	r1, r4
 8009576:	4658      	mov	r0, fp
 8009578:	f001 f806 	bl	800a588 <__mdiff>
 800957c:	68c2      	ldr	r2, [r0, #12]
 800957e:	4606      	mov	r6, r0
 8009580:	bb02      	cbnz	r2, 80095c4 <_dtoa_r+0xa1c>
 8009582:	4601      	mov	r1, r0
 8009584:	4648      	mov	r0, r9
 8009586:	f000 ffe3 	bl	800a550 <__mcmp>
 800958a:	4602      	mov	r2, r0
 800958c:	4631      	mov	r1, r6
 800958e:	4658      	mov	r0, fp
 8009590:	920e      	str	r2, [sp, #56]	@ 0x38
 8009592:	f000 fd59 	bl	800a048 <_Bfree>
 8009596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009598:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800959a:	9e07      	ldr	r6, [sp, #28]
 800959c:	ea43 0102 	orr.w	r1, r3, r2
 80095a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095a2:	4319      	orrs	r1, r3
 80095a4:	d110      	bne.n	80095c8 <_dtoa_r+0xa20>
 80095a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095aa:	d029      	beq.n	8009600 <_dtoa_r+0xa58>
 80095ac:	9b08      	ldr	r3, [sp, #32]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	dd02      	ble.n	80095b8 <_dtoa_r+0xa10>
 80095b2:	9b02      	ldr	r3, [sp, #8]
 80095b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80095b8:	9b00      	ldr	r3, [sp, #0]
 80095ba:	f883 8000 	strb.w	r8, [r3]
 80095be:	e63f      	b.n	8009240 <_dtoa_r+0x698>
 80095c0:	4628      	mov	r0, r5
 80095c2:	e7bb      	b.n	800953c <_dtoa_r+0x994>
 80095c4:	2201      	movs	r2, #1
 80095c6:	e7e1      	b.n	800958c <_dtoa_r+0x9e4>
 80095c8:	9b08      	ldr	r3, [sp, #32]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	db04      	blt.n	80095d8 <_dtoa_r+0xa30>
 80095ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095d0:	430b      	orrs	r3, r1
 80095d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80095d4:	430b      	orrs	r3, r1
 80095d6:	d120      	bne.n	800961a <_dtoa_r+0xa72>
 80095d8:	2a00      	cmp	r2, #0
 80095da:	dded      	ble.n	80095b8 <_dtoa_r+0xa10>
 80095dc:	4649      	mov	r1, r9
 80095de:	2201      	movs	r2, #1
 80095e0:	4658      	mov	r0, fp
 80095e2:	f000 ff49 	bl	800a478 <__lshift>
 80095e6:	4621      	mov	r1, r4
 80095e8:	4681      	mov	r9, r0
 80095ea:	f000 ffb1 	bl	800a550 <__mcmp>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	dc03      	bgt.n	80095fa <_dtoa_r+0xa52>
 80095f2:	d1e1      	bne.n	80095b8 <_dtoa_r+0xa10>
 80095f4:	f018 0f01 	tst.w	r8, #1
 80095f8:	d0de      	beq.n	80095b8 <_dtoa_r+0xa10>
 80095fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095fe:	d1d8      	bne.n	80095b2 <_dtoa_r+0xa0a>
 8009600:	9a00      	ldr	r2, [sp, #0]
 8009602:	2339      	movs	r3, #57	@ 0x39
 8009604:	7013      	strb	r3, [r2, #0]
 8009606:	4633      	mov	r3, r6
 8009608:	461e      	mov	r6, r3
 800960a:	3b01      	subs	r3, #1
 800960c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009610:	2a39      	cmp	r2, #57	@ 0x39
 8009612:	d052      	beq.n	80096ba <_dtoa_r+0xb12>
 8009614:	3201      	adds	r2, #1
 8009616:	701a      	strb	r2, [r3, #0]
 8009618:	e612      	b.n	8009240 <_dtoa_r+0x698>
 800961a:	2a00      	cmp	r2, #0
 800961c:	dd07      	ble.n	800962e <_dtoa_r+0xa86>
 800961e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009622:	d0ed      	beq.n	8009600 <_dtoa_r+0xa58>
 8009624:	9a00      	ldr	r2, [sp, #0]
 8009626:	f108 0301 	add.w	r3, r8, #1
 800962a:	7013      	strb	r3, [r2, #0]
 800962c:	e608      	b.n	8009240 <_dtoa_r+0x698>
 800962e:	9b07      	ldr	r3, [sp, #28]
 8009630:	9a07      	ldr	r2, [sp, #28]
 8009632:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009638:	4293      	cmp	r3, r2
 800963a:	d028      	beq.n	800968e <_dtoa_r+0xae6>
 800963c:	4649      	mov	r1, r9
 800963e:	2300      	movs	r3, #0
 8009640:	220a      	movs	r2, #10
 8009642:	4658      	mov	r0, fp
 8009644:	f000 fd22 	bl	800a08c <__multadd>
 8009648:	42af      	cmp	r7, r5
 800964a:	4681      	mov	r9, r0
 800964c:	f04f 0300 	mov.w	r3, #0
 8009650:	f04f 020a 	mov.w	r2, #10
 8009654:	4639      	mov	r1, r7
 8009656:	4658      	mov	r0, fp
 8009658:	d107      	bne.n	800966a <_dtoa_r+0xac2>
 800965a:	f000 fd17 	bl	800a08c <__multadd>
 800965e:	4607      	mov	r7, r0
 8009660:	4605      	mov	r5, r0
 8009662:	9b07      	ldr	r3, [sp, #28]
 8009664:	3301      	adds	r3, #1
 8009666:	9307      	str	r3, [sp, #28]
 8009668:	e774      	b.n	8009554 <_dtoa_r+0x9ac>
 800966a:	f000 fd0f 	bl	800a08c <__multadd>
 800966e:	4629      	mov	r1, r5
 8009670:	4607      	mov	r7, r0
 8009672:	2300      	movs	r3, #0
 8009674:	220a      	movs	r2, #10
 8009676:	4658      	mov	r0, fp
 8009678:	f000 fd08 	bl	800a08c <__multadd>
 800967c:	4605      	mov	r5, r0
 800967e:	e7f0      	b.n	8009662 <_dtoa_r+0xaba>
 8009680:	9b00      	ldr	r3, [sp, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	bfcc      	ite	gt
 8009686:	461e      	movgt	r6, r3
 8009688:	2601      	movle	r6, #1
 800968a:	4456      	add	r6, sl
 800968c:	2700      	movs	r7, #0
 800968e:	4649      	mov	r1, r9
 8009690:	2201      	movs	r2, #1
 8009692:	4658      	mov	r0, fp
 8009694:	f000 fef0 	bl	800a478 <__lshift>
 8009698:	4621      	mov	r1, r4
 800969a:	4681      	mov	r9, r0
 800969c:	f000 ff58 	bl	800a550 <__mcmp>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	dcb0      	bgt.n	8009606 <_dtoa_r+0xa5e>
 80096a4:	d102      	bne.n	80096ac <_dtoa_r+0xb04>
 80096a6:	f018 0f01 	tst.w	r8, #1
 80096aa:	d1ac      	bne.n	8009606 <_dtoa_r+0xa5e>
 80096ac:	4633      	mov	r3, r6
 80096ae:	461e      	mov	r6, r3
 80096b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096b4:	2a30      	cmp	r2, #48	@ 0x30
 80096b6:	d0fa      	beq.n	80096ae <_dtoa_r+0xb06>
 80096b8:	e5c2      	b.n	8009240 <_dtoa_r+0x698>
 80096ba:	459a      	cmp	sl, r3
 80096bc:	d1a4      	bne.n	8009608 <_dtoa_r+0xa60>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	3301      	adds	r3, #1
 80096c2:	9304      	str	r3, [sp, #16]
 80096c4:	2331      	movs	r3, #49	@ 0x31
 80096c6:	f88a 3000 	strb.w	r3, [sl]
 80096ca:	e5b9      	b.n	8009240 <_dtoa_r+0x698>
 80096cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800972c <_dtoa_r+0xb84>
 80096d2:	b11b      	cbz	r3, 80096dc <_dtoa_r+0xb34>
 80096d4:	f10a 0308 	add.w	r3, sl, #8
 80096d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	4650      	mov	r0, sl
 80096de:	b019      	add	sp, #100	@ 0x64
 80096e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	f77f ae37 	ble.w	800935a <_dtoa_r+0x7b2>
 80096ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80096f0:	2001      	movs	r0, #1
 80096f2:	e655      	b.n	80093a0 <_dtoa_r+0x7f8>
 80096f4:	9b00      	ldr	r3, [sp, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f77f aed6 	ble.w	80094a8 <_dtoa_r+0x900>
 80096fc:	4656      	mov	r6, sl
 80096fe:	4621      	mov	r1, r4
 8009700:	4648      	mov	r0, r9
 8009702:	f7ff f9c9 	bl	8008a98 <quorem>
 8009706:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800970a:	f806 8b01 	strb.w	r8, [r6], #1
 800970e:	9b00      	ldr	r3, [sp, #0]
 8009710:	eba6 020a 	sub.w	r2, r6, sl
 8009714:	4293      	cmp	r3, r2
 8009716:	ddb3      	ble.n	8009680 <_dtoa_r+0xad8>
 8009718:	4649      	mov	r1, r9
 800971a:	2300      	movs	r3, #0
 800971c:	220a      	movs	r2, #10
 800971e:	4658      	mov	r0, fp
 8009720:	f000 fcb4 	bl	800a08c <__multadd>
 8009724:	4681      	mov	r9, r0
 8009726:	e7ea      	b.n	80096fe <_dtoa_r+0xb56>
 8009728:	0800d693 	.word	0x0800d693
 800972c:	0800d62e 	.word	0x0800d62e

08009730 <_free_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4605      	mov	r5, r0
 8009734:	2900      	cmp	r1, #0
 8009736:	d041      	beq.n	80097bc <_free_r+0x8c>
 8009738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800973c:	1f0c      	subs	r4, r1, #4
 800973e:	2b00      	cmp	r3, #0
 8009740:	bfb8      	it	lt
 8009742:	18e4      	addlt	r4, r4, r3
 8009744:	f000 fc34 	bl	8009fb0 <__malloc_lock>
 8009748:	4a1d      	ldr	r2, [pc, #116]	@ (80097c0 <_free_r+0x90>)
 800974a:	6813      	ldr	r3, [r2, #0]
 800974c:	b933      	cbnz	r3, 800975c <_free_r+0x2c>
 800974e:	6063      	str	r3, [r4, #4]
 8009750:	6014      	str	r4, [r2, #0]
 8009752:	4628      	mov	r0, r5
 8009754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009758:	f000 bc30 	b.w	8009fbc <__malloc_unlock>
 800975c:	42a3      	cmp	r3, r4
 800975e:	d908      	bls.n	8009772 <_free_r+0x42>
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	1821      	adds	r1, r4, r0
 8009764:	428b      	cmp	r3, r1
 8009766:	bf01      	itttt	eq
 8009768:	6819      	ldreq	r1, [r3, #0]
 800976a:	685b      	ldreq	r3, [r3, #4]
 800976c:	1809      	addeq	r1, r1, r0
 800976e:	6021      	streq	r1, [r4, #0]
 8009770:	e7ed      	b.n	800974e <_free_r+0x1e>
 8009772:	461a      	mov	r2, r3
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	b10b      	cbz	r3, 800977c <_free_r+0x4c>
 8009778:	42a3      	cmp	r3, r4
 800977a:	d9fa      	bls.n	8009772 <_free_r+0x42>
 800977c:	6811      	ldr	r1, [r2, #0]
 800977e:	1850      	adds	r0, r2, r1
 8009780:	42a0      	cmp	r0, r4
 8009782:	d10b      	bne.n	800979c <_free_r+0x6c>
 8009784:	6820      	ldr	r0, [r4, #0]
 8009786:	4401      	add	r1, r0
 8009788:	1850      	adds	r0, r2, r1
 800978a:	4283      	cmp	r3, r0
 800978c:	6011      	str	r1, [r2, #0]
 800978e:	d1e0      	bne.n	8009752 <_free_r+0x22>
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	6053      	str	r3, [r2, #4]
 8009796:	4408      	add	r0, r1
 8009798:	6010      	str	r0, [r2, #0]
 800979a:	e7da      	b.n	8009752 <_free_r+0x22>
 800979c:	d902      	bls.n	80097a4 <_free_r+0x74>
 800979e:	230c      	movs	r3, #12
 80097a0:	602b      	str	r3, [r5, #0]
 80097a2:	e7d6      	b.n	8009752 <_free_r+0x22>
 80097a4:	6820      	ldr	r0, [r4, #0]
 80097a6:	1821      	adds	r1, r4, r0
 80097a8:	428b      	cmp	r3, r1
 80097aa:	bf04      	itt	eq
 80097ac:	6819      	ldreq	r1, [r3, #0]
 80097ae:	685b      	ldreq	r3, [r3, #4]
 80097b0:	6063      	str	r3, [r4, #4]
 80097b2:	bf04      	itt	eq
 80097b4:	1809      	addeq	r1, r1, r0
 80097b6:	6021      	streq	r1, [r4, #0]
 80097b8:	6054      	str	r4, [r2, #4]
 80097ba:	e7ca      	b.n	8009752 <_free_r+0x22>
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	bf00      	nop
 80097c0:	200006e8 	.word	0x200006e8

080097c4 <rshift>:
 80097c4:	6903      	ldr	r3, [r0, #16]
 80097c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097d2:	f100 0414 	add.w	r4, r0, #20
 80097d6:	dd45      	ble.n	8009864 <rshift+0xa0>
 80097d8:	f011 011f 	ands.w	r1, r1, #31
 80097dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097e4:	d10c      	bne.n	8009800 <rshift+0x3c>
 80097e6:	f100 0710 	add.w	r7, r0, #16
 80097ea:	4629      	mov	r1, r5
 80097ec:	42b1      	cmp	r1, r6
 80097ee:	d334      	bcc.n	800985a <rshift+0x96>
 80097f0:	1a9b      	subs	r3, r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	1eea      	subs	r2, r5, #3
 80097f6:	4296      	cmp	r6, r2
 80097f8:	bf38      	it	cc
 80097fa:	2300      	movcc	r3, #0
 80097fc:	4423      	add	r3, r4
 80097fe:	e015      	b.n	800982c <rshift+0x68>
 8009800:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009804:	f1c1 0820 	rsb	r8, r1, #32
 8009808:	40cf      	lsrs	r7, r1
 800980a:	f105 0e04 	add.w	lr, r5, #4
 800980e:	46a1      	mov	r9, r4
 8009810:	4576      	cmp	r6, lr
 8009812:	46f4      	mov	ip, lr
 8009814:	d815      	bhi.n	8009842 <rshift+0x7e>
 8009816:	1a9a      	subs	r2, r3, r2
 8009818:	0092      	lsls	r2, r2, #2
 800981a:	3a04      	subs	r2, #4
 800981c:	3501      	adds	r5, #1
 800981e:	42ae      	cmp	r6, r5
 8009820:	bf38      	it	cc
 8009822:	2200      	movcc	r2, #0
 8009824:	18a3      	adds	r3, r4, r2
 8009826:	50a7      	str	r7, [r4, r2]
 8009828:	b107      	cbz	r7, 800982c <rshift+0x68>
 800982a:	3304      	adds	r3, #4
 800982c:	1b1a      	subs	r2, r3, r4
 800982e:	42a3      	cmp	r3, r4
 8009830:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009834:	bf08      	it	eq
 8009836:	2300      	moveq	r3, #0
 8009838:	6102      	str	r2, [r0, #16]
 800983a:	bf08      	it	eq
 800983c:	6143      	streq	r3, [r0, #20]
 800983e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009842:	f8dc c000 	ldr.w	ip, [ip]
 8009846:	fa0c fc08 	lsl.w	ip, ip, r8
 800984a:	ea4c 0707 	orr.w	r7, ip, r7
 800984e:	f849 7b04 	str.w	r7, [r9], #4
 8009852:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009856:	40cf      	lsrs	r7, r1
 8009858:	e7da      	b.n	8009810 <rshift+0x4c>
 800985a:	f851 cb04 	ldr.w	ip, [r1], #4
 800985e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009862:	e7c3      	b.n	80097ec <rshift+0x28>
 8009864:	4623      	mov	r3, r4
 8009866:	e7e1      	b.n	800982c <rshift+0x68>

08009868 <__hexdig_fun>:
 8009868:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800986c:	2b09      	cmp	r3, #9
 800986e:	d802      	bhi.n	8009876 <__hexdig_fun+0xe>
 8009870:	3820      	subs	r0, #32
 8009872:	b2c0      	uxtb	r0, r0
 8009874:	4770      	bx	lr
 8009876:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800987a:	2b05      	cmp	r3, #5
 800987c:	d801      	bhi.n	8009882 <__hexdig_fun+0x1a>
 800987e:	3847      	subs	r0, #71	@ 0x47
 8009880:	e7f7      	b.n	8009872 <__hexdig_fun+0xa>
 8009882:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009886:	2b05      	cmp	r3, #5
 8009888:	d801      	bhi.n	800988e <__hexdig_fun+0x26>
 800988a:	3827      	subs	r0, #39	@ 0x27
 800988c:	e7f1      	b.n	8009872 <__hexdig_fun+0xa>
 800988e:	2000      	movs	r0, #0
 8009890:	4770      	bx	lr
	...

08009894 <__gethex>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	b085      	sub	sp, #20
 800989a:	468a      	mov	sl, r1
 800989c:	9302      	str	r3, [sp, #8]
 800989e:	680b      	ldr	r3, [r1, #0]
 80098a0:	9001      	str	r0, [sp, #4]
 80098a2:	4690      	mov	r8, r2
 80098a4:	1c9c      	adds	r4, r3, #2
 80098a6:	46a1      	mov	r9, r4
 80098a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80098ac:	2830      	cmp	r0, #48	@ 0x30
 80098ae:	d0fa      	beq.n	80098a6 <__gethex+0x12>
 80098b0:	eba9 0303 	sub.w	r3, r9, r3
 80098b4:	f1a3 0b02 	sub.w	fp, r3, #2
 80098b8:	f7ff ffd6 	bl	8009868 <__hexdig_fun>
 80098bc:	4605      	mov	r5, r0
 80098be:	2800      	cmp	r0, #0
 80098c0:	d168      	bne.n	8009994 <__gethex+0x100>
 80098c2:	49a0      	ldr	r1, [pc, #640]	@ (8009b44 <__gethex+0x2b0>)
 80098c4:	2201      	movs	r2, #1
 80098c6:	4648      	mov	r0, r9
 80098c8:	f7fe ffb0 	bl	800882c <strncmp>
 80098cc:	4607      	mov	r7, r0
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d167      	bne.n	80099a2 <__gethex+0x10e>
 80098d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80098d6:	4626      	mov	r6, r4
 80098d8:	f7ff ffc6 	bl	8009868 <__hexdig_fun>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d062      	beq.n	80099a6 <__gethex+0x112>
 80098e0:	4623      	mov	r3, r4
 80098e2:	7818      	ldrb	r0, [r3, #0]
 80098e4:	2830      	cmp	r0, #48	@ 0x30
 80098e6:	4699      	mov	r9, r3
 80098e8:	f103 0301 	add.w	r3, r3, #1
 80098ec:	d0f9      	beq.n	80098e2 <__gethex+0x4e>
 80098ee:	f7ff ffbb 	bl	8009868 <__hexdig_fun>
 80098f2:	fab0 f580 	clz	r5, r0
 80098f6:	096d      	lsrs	r5, r5, #5
 80098f8:	f04f 0b01 	mov.w	fp, #1
 80098fc:	464a      	mov	r2, r9
 80098fe:	4616      	mov	r6, r2
 8009900:	3201      	adds	r2, #1
 8009902:	7830      	ldrb	r0, [r6, #0]
 8009904:	f7ff ffb0 	bl	8009868 <__hexdig_fun>
 8009908:	2800      	cmp	r0, #0
 800990a:	d1f8      	bne.n	80098fe <__gethex+0x6a>
 800990c:	498d      	ldr	r1, [pc, #564]	@ (8009b44 <__gethex+0x2b0>)
 800990e:	2201      	movs	r2, #1
 8009910:	4630      	mov	r0, r6
 8009912:	f7fe ff8b 	bl	800882c <strncmp>
 8009916:	2800      	cmp	r0, #0
 8009918:	d13f      	bne.n	800999a <__gethex+0x106>
 800991a:	b944      	cbnz	r4, 800992e <__gethex+0x9a>
 800991c:	1c74      	adds	r4, r6, #1
 800991e:	4622      	mov	r2, r4
 8009920:	4616      	mov	r6, r2
 8009922:	3201      	adds	r2, #1
 8009924:	7830      	ldrb	r0, [r6, #0]
 8009926:	f7ff ff9f 	bl	8009868 <__hexdig_fun>
 800992a:	2800      	cmp	r0, #0
 800992c:	d1f8      	bne.n	8009920 <__gethex+0x8c>
 800992e:	1ba4      	subs	r4, r4, r6
 8009930:	00a7      	lsls	r7, r4, #2
 8009932:	7833      	ldrb	r3, [r6, #0]
 8009934:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009938:	2b50      	cmp	r3, #80	@ 0x50
 800993a:	d13e      	bne.n	80099ba <__gethex+0x126>
 800993c:	7873      	ldrb	r3, [r6, #1]
 800993e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009940:	d033      	beq.n	80099aa <__gethex+0x116>
 8009942:	2b2d      	cmp	r3, #45	@ 0x2d
 8009944:	d034      	beq.n	80099b0 <__gethex+0x11c>
 8009946:	1c71      	adds	r1, r6, #1
 8009948:	2400      	movs	r4, #0
 800994a:	7808      	ldrb	r0, [r1, #0]
 800994c:	f7ff ff8c 	bl	8009868 <__hexdig_fun>
 8009950:	1e43      	subs	r3, r0, #1
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b18      	cmp	r3, #24
 8009956:	d830      	bhi.n	80099ba <__gethex+0x126>
 8009958:	f1a0 0210 	sub.w	r2, r0, #16
 800995c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009960:	f7ff ff82 	bl	8009868 <__hexdig_fun>
 8009964:	f100 3cff 	add.w	ip, r0, #4294967295
 8009968:	fa5f fc8c 	uxtb.w	ip, ip
 800996c:	f1bc 0f18 	cmp.w	ip, #24
 8009970:	f04f 030a 	mov.w	r3, #10
 8009974:	d91e      	bls.n	80099b4 <__gethex+0x120>
 8009976:	b104      	cbz	r4, 800997a <__gethex+0xe6>
 8009978:	4252      	negs	r2, r2
 800997a:	4417      	add	r7, r2
 800997c:	f8ca 1000 	str.w	r1, [sl]
 8009980:	b1ed      	cbz	r5, 80099be <__gethex+0x12a>
 8009982:	f1bb 0f00 	cmp.w	fp, #0
 8009986:	bf0c      	ite	eq
 8009988:	2506      	moveq	r5, #6
 800998a:	2500      	movne	r5, #0
 800998c:	4628      	mov	r0, r5
 800998e:	b005      	add	sp, #20
 8009990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009994:	2500      	movs	r5, #0
 8009996:	462c      	mov	r4, r5
 8009998:	e7b0      	b.n	80098fc <__gethex+0x68>
 800999a:	2c00      	cmp	r4, #0
 800999c:	d1c7      	bne.n	800992e <__gethex+0x9a>
 800999e:	4627      	mov	r7, r4
 80099a0:	e7c7      	b.n	8009932 <__gethex+0x9e>
 80099a2:	464e      	mov	r6, r9
 80099a4:	462f      	mov	r7, r5
 80099a6:	2501      	movs	r5, #1
 80099a8:	e7c3      	b.n	8009932 <__gethex+0x9e>
 80099aa:	2400      	movs	r4, #0
 80099ac:	1cb1      	adds	r1, r6, #2
 80099ae:	e7cc      	b.n	800994a <__gethex+0xb6>
 80099b0:	2401      	movs	r4, #1
 80099b2:	e7fb      	b.n	80099ac <__gethex+0x118>
 80099b4:	fb03 0002 	mla	r0, r3, r2, r0
 80099b8:	e7ce      	b.n	8009958 <__gethex+0xc4>
 80099ba:	4631      	mov	r1, r6
 80099bc:	e7de      	b.n	800997c <__gethex+0xe8>
 80099be:	eba6 0309 	sub.w	r3, r6, r9
 80099c2:	3b01      	subs	r3, #1
 80099c4:	4629      	mov	r1, r5
 80099c6:	2b07      	cmp	r3, #7
 80099c8:	dc0a      	bgt.n	80099e0 <__gethex+0x14c>
 80099ca:	9801      	ldr	r0, [sp, #4]
 80099cc:	f000 fafc 	bl	8009fc8 <_Balloc>
 80099d0:	4604      	mov	r4, r0
 80099d2:	b940      	cbnz	r0, 80099e6 <__gethex+0x152>
 80099d4:	4b5c      	ldr	r3, [pc, #368]	@ (8009b48 <__gethex+0x2b4>)
 80099d6:	4602      	mov	r2, r0
 80099d8:	21e4      	movs	r1, #228	@ 0xe4
 80099da:	485c      	ldr	r0, [pc, #368]	@ (8009b4c <__gethex+0x2b8>)
 80099dc:	f7ff f83e 	bl	8008a5c <__assert_func>
 80099e0:	3101      	adds	r1, #1
 80099e2:	105b      	asrs	r3, r3, #1
 80099e4:	e7ef      	b.n	80099c6 <__gethex+0x132>
 80099e6:	f100 0a14 	add.w	sl, r0, #20
 80099ea:	2300      	movs	r3, #0
 80099ec:	4655      	mov	r5, sl
 80099ee:	469b      	mov	fp, r3
 80099f0:	45b1      	cmp	r9, r6
 80099f2:	d337      	bcc.n	8009a64 <__gethex+0x1d0>
 80099f4:	f845 bb04 	str.w	fp, [r5], #4
 80099f8:	eba5 050a 	sub.w	r5, r5, sl
 80099fc:	10ad      	asrs	r5, r5, #2
 80099fe:	6125      	str	r5, [r4, #16]
 8009a00:	4658      	mov	r0, fp
 8009a02:	f000 fbd3 	bl	800a1ac <__hi0bits>
 8009a06:	016d      	lsls	r5, r5, #5
 8009a08:	f8d8 6000 	ldr.w	r6, [r8]
 8009a0c:	1a2d      	subs	r5, r5, r0
 8009a0e:	42b5      	cmp	r5, r6
 8009a10:	dd54      	ble.n	8009abc <__gethex+0x228>
 8009a12:	1bad      	subs	r5, r5, r6
 8009a14:	4629      	mov	r1, r5
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 ff67 	bl	800a8ea <__any_on>
 8009a1c:	4681      	mov	r9, r0
 8009a1e:	b178      	cbz	r0, 8009a40 <__gethex+0x1ac>
 8009a20:	1e6b      	subs	r3, r5, #1
 8009a22:	1159      	asrs	r1, r3, #5
 8009a24:	f003 021f 	and.w	r2, r3, #31
 8009a28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a2c:	f04f 0901 	mov.w	r9, #1
 8009a30:	fa09 f202 	lsl.w	r2, r9, r2
 8009a34:	420a      	tst	r2, r1
 8009a36:	d003      	beq.n	8009a40 <__gethex+0x1ac>
 8009a38:	454b      	cmp	r3, r9
 8009a3a:	dc36      	bgt.n	8009aaa <__gethex+0x216>
 8009a3c:	f04f 0902 	mov.w	r9, #2
 8009a40:	4629      	mov	r1, r5
 8009a42:	4620      	mov	r0, r4
 8009a44:	f7ff febe 	bl	80097c4 <rshift>
 8009a48:	442f      	add	r7, r5
 8009a4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a4e:	42bb      	cmp	r3, r7
 8009a50:	da42      	bge.n	8009ad8 <__gethex+0x244>
 8009a52:	9801      	ldr	r0, [sp, #4]
 8009a54:	4621      	mov	r1, r4
 8009a56:	f000 faf7 	bl	800a048 <_Bfree>
 8009a5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	25a3      	movs	r5, #163	@ 0xa3
 8009a62:	e793      	b.n	800998c <__gethex+0xf8>
 8009a64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009a68:	2a2e      	cmp	r2, #46	@ 0x2e
 8009a6a:	d012      	beq.n	8009a92 <__gethex+0x1fe>
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	d104      	bne.n	8009a7a <__gethex+0x1e6>
 8009a70:	f845 bb04 	str.w	fp, [r5], #4
 8009a74:	f04f 0b00 	mov.w	fp, #0
 8009a78:	465b      	mov	r3, fp
 8009a7a:	7830      	ldrb	r0, [r6, #0]
 8009a7c:	9303      	str	r3, [sp, #12]
 8009a7e:	f7ff fef3 	bl	8009868 <__hexdig_fun>
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	f000 000f 	and.w	r0, r0, #15
 8009a88:	4098      	lsls	r0, r3
 8009a8a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a8e:	3304      	adds	r3, #4
 8009a90:	e7ae      	b.n	80099f0 <__gethex+0x15c>
 8009a92:	45b1      	cmp	r9, r6
 8009a94:	d8ea      	bhi.n	8009a6c <__gethex+0x1d8>
 8009a96:	492b      	ldr	r1, [pc, #172]	@ (8009b44 <__gethex+0x2b0>)
 8009a98:	9303      	str	r3, [sp, #12]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f7fe fec5 	bl	800882c <strncmp>
 8009aa2:	9b03      	ldr	r3, [sp, #12]
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d1e1      	bne.n	8009a6c <__gethex+0x1d8>
 8009aa8:	e7a2      	b.n	80099f0 <__gethex+0x15c>
 8009aaa:	1ea9      	subs	r1, r5, #2
 8009aac:	4620      	mov	r0, r4
 8009aae:	f000 ff1c 	bl	800a8ea <__any_on>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d0c2      	beq.n	8009a3c <__gethex+0x1a8>
 8009ab6:	f04f 0903 	mov.w	r9, #3
 8009aba:	e7c1      	b.n	8009a40 <__gethex+0x1ac>
 8009abc:	da09      	bge.n	8009ad2 <__gethex+0x23e>
 8009abe:	1b75      	subs	r5, r6, r5
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	9801      	ldr	r0, [sp, #4]
 8009ac4:	462a      	mov	r2, r5
 8009ac6:	f000 fcd7 	bl	800a478 <__lshift>
 8009aca:	1b7f      	subs	r7, r7, r5
 8009acc:	4604      	mov	r4, r0
 8009ace:	f100 0a14 	add.w	sl, r0, #20
 8009ad2:	f04f 0900 	mov.w	r9, #0
 8009ad6:	e7b8      	b.n	8009a4a <__gethex+0x1b6>
 8009ad8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009adc:	42bd      	cmp	r5, r7
 8009ade:	dd6f      	ble.n	8009bc0 <__gethex+0x32c>
 8009ae0:	1bed      	subs	r5, r5, r7
 8009ae2:	42ae      	cmp	r6, r5
 8009ae4:	dc34      	bgt.n	8009b50 <__gethex+0x2bc>
 8009ae6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d022      	beq.n	8009b34 <__gethex+0x2a0>
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d024      	beq.n	8009b3c <__gethex+0x2a8>
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d115      	bne.n	8009b22 <__gethex+0x28e>
 8009af6:	42ae      	cmp	r6, r5
 8009af8:	d113      	bne.n	8009b22 <__gethex+0x28e>
 8009afa:	2e01      	cmp	r6, #1
 8009afc:	d10b      	bne.n	8009b16 <__gethex+0x282>
 8009afe:	9a02      	ldr	r2, [sp, #8]
 8009b00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	2301      	movs	r3, #1
 8009b08:	6123      	str	r3, [r4, #16]
 8009b0a:	f8ca 3000 	str.w	r3, [sl]
 8009b0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b10:	2562      	movs	r5, #98	@ 0x62
 8009b12:	601c      	str	r4, [r3, #0]
 8009b14:	e73a      	b.n	800998c <__gethex+0xf8>
 8009b16:	1e71      	subs	r1, r6, #1
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 fee6 	bl	800a8ea <__any_on>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d1ed      	bne.n	8009afe <__gethex+0x26a>
 8009b22:	9801      	ldr	r0, [sp, #4]
 8009b24:	4621      	mov	r1, r4
 8009b26:	f000 fa8f 	bl	800a048 <_Bfree>
 8009b2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	2550      	movs	r5, #80	@ 0x50
 8009b32:	e72b      	b.n	800998c <__gethex+0xf8>
 8009b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1f3      	bne.n	8009b22 <__gethex+0x28e>
 8009b3a:	e7e0      	b.n	8009afe <__gethex+0x26a>
 8009b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1dd      	bne.n	8009afe <__gethex+0x26a>
 8009b42:	e7ee      	b.n	8009b22 <__gethex+0x28e>
 8009b44:	0800d4e8 	.word	0x0800d4e8
 8009b48:	0800d693 	.word	0x0800d693
 8009b4c:	0800d6a4 	.word	0x0800d6a4
 8009b50:	1e6f      	subs	r7, r5, #1
 8009b52:	f1b9 0f00 	cmp.w	r9, #0
 8009b56:	d130      	bne.n	8009bba <__gethex+0x326>
 8009b58:	b127      	cbz	r7, 8009b64 <__gethex+0x2d0>
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f000 fec4 	bl	800a8ea <__any_on>
 8009b62:	4681      	mov	r9, r0
 8009b64:	117a      	asrs	r2, r7, #5
 8009b66:	2301      	movs	r3, #1
 8009b68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b6c:	f007 071f 	and.w	r7, r7, #31
 8009b70:	40bb      	lsls	r3, r7
 8009b72:	4213      	tst	r3, r2
 8009b74:	4629      	mov	r1, r5
 8009b76:	4620      	mov	r0, r4
 8009b78:	bf18      	it	ne
 8009b7a:	f049 0902 	orrne.w	r9, r9, #2
 8009b7e:	f7ff fe21 	bl	80097c4 <rshift>
 8009b82:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009b86:	1b76      	subs	r6, r6, r5
 8009b88:	2502      	movs	r5, #2
 8009b8a:	f1b9 0f00 	cmp.w	r9, #0
 8009b8e:	d047      	beq.n	8009c20 <__gethex+0x38c>
 8009b90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d015      	beq.n	8009bc4 <__gethex+0x330>
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d017      	beq.n	8009bcc <__gethex+0x338>
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d109      	bne.n	8009bb4 <__gethex+0x320>
 8009ba0:	f019 0f02 	tst.w	r9, #2
 8009ba4:	d006      	beq.n	8009bb4 <__gethex+0x320>
 8009ba6:	f8da 3000 	ldr.w	r3, [sl]
 8009baa:	ea49 0903 	orr.w	r9, r9, r3
 8009bae:	f019 0f01 	tst.w	r9, #1
 8009bb2:	d10e      	bne.n	8009bd2 <__gethex+0x33e>
 8009bb4:	f045 0510 	orr.w	r5, r5, #16
 8009bb8:	e032      	b.n	8009c20 <__gethex+0x38c>
 8009bba:	f04f 0901 	mov.w	r9, #1
 8009bbe:	e7d1      	b.n	8009b64 <__gethex+0x2d0>
 8009bc0:	2501      	movs	r5, #1
 8009bc2:	e7e2      	b.n	8009b8a <__gethex+0x2f6>
 8009bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bc6:	f1c3 0301 	rsb	r3, r3, #1
 8009bca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0f0      	beq.n	8009bb4 <__gethex+0x320>
 8009bd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009bd6:	f104 0314 	add.w	r3, r4, #20
 8009bda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009bde:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009be2:	f04f 0c00 	mov.w	ip, #0
 8009be6:	4618      	mov	r0, r3
 8009be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bec:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009bf0:	d01b      	beq.n	8009c2a <__gethex+0x396>
 8009bf2:	3201      	adds	r2, #1
 8009bf4:	6002      	str	r2, [r0, #0]
 8009bf6:	2d02      	cmp	r5, #2
 8009bf8:	f104 0314 	add.w	r3, r4, #20
 8009bfc:	d13c      	bne.n	8009c78 <__gethex+0x3e4>
 8009bfe:	f8d8 2000 	ldr.w	r2, [r8]
 8009c02:	3a01      	subs	r2, #1
 8009c04:	42b2      	cmp	r2, r6
 8009c06:	d109      	bne.n	8009c1c <__gethex+0x388>
 8009c08:	1171      	asrs	r1, r6, #5
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c10:	f006 061f 	and.w	r6, r6, #31
 8009c14:	fa02 f606 	lsl.w	r6, r2, r6
 8009c18:	421e      	tst	r6, r3
 8009c1a:	d13a      	bne.n	8009c92 <__gethex+0x3fe>
 8009c1c:	f045 0520 	orr.w	r5, r5, #32
 8009c20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c22:	601c      	str	r4, [r3, #0]
 8009c24:	9b02      	ldr	r3, [sp, #8]
 8009c26:	601f      	str	r7, [r3, #0]
 8009c28:	e6b0      	b.n	800998c <__gethex+0xf8>
 8009c2a:	4299      	cmp	r1, r3
 8009c2c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c30:	d8d9      	bhi.n	8009be6 <__gethex+0x352>
 8009c32:	68a3      	ldr	r3, [r4, #8]
 8009c34:	459b      	cmp	fp, r3
 8009c36:	db17      	blt.n	8009c68 <__gethex+0x3d4>
 8009c38:	6861      	ldr	r1, [r4, #4]
 8009c3a:	9801      	ldr	r0, [sp, #4]
 8009c3c:	3101      	adds	r1, #1
 8009c3e:	f000 f9c3 	bl	8009fc8 <_Balloc>
 8009c42:	4681      	mov	r9, r0
 8009c44:	b918      	cbnz	r0, 8009c4e <__gethex+0x3ba>
 8009c46:	4b1a      	ldr	r3, [pc, #104]	@ (8009cb0 <__gethex+0x41c>)
 8009c48:	4602      	mov	r2, r0
 8009c4a:	2184      	movs	r1, #132	@ 0x84
 8009c4c:	e6c5      	b.n	80099da <__gethex+0x146>
 8009c4e:	6922      	ldr	r2, [r4, #16]
 8009c50:	3202      	adds	r2, #2
 8009c52:	f104 010c 	add.w	r1, r4, #12
 8009c56:	0092      	lsls	r2, r2, #2
 8009c58:	300c      	adds	r0, #12
 8009c5a:	f7fe fee0 	bl	8008a1e <memcpy>
 8009c5e:	4621      	mov	r1, r4
 8009c60:	9801      	ldr	r0, [sp, #4]
 8009c62:	f000 f9f1 	bl	800a048 <_Bfree>
 8009c66:	464c      	mov	r4, r9
 8009c68:	6923      	ldr	r3, [r4, #16]
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c70:	6122      	str	r2, [r4, #16]
 8009c72:	2201      	movs	r2, #1
 8009c74:	615a      	str	r2, [r3, #20]
 8009c76:	e7be      	b.n	8009bf6 <__gethex+0x362>
 8009c78:	6922      	ldr	r2, [r4, #16]
 8009c7a:	455a      	cmp	r2, fp
 8009c7c:	dd0b      	ble.n	8009c96 <__gethex+0x402>
 8009c7e:	2101      	movs	r1, #1
 8009c80:	4620      	mov	r0, r4
 8009c82:	f7ff fd9f 	bl	80097c4 <rshift>
 8009c86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c8a:	3701      	adds	r7, #1
 8009c8c:	42bb      	cmp	r3, r7
 8009c8e:	f6ff aee0 	blt.w	8009a52 <__gethex+0x1be>
 8009c92:	2501      	movs	r5, #1
 8009c94:	e7c2      	b.n	8009c1c <__gethex+0x388>
 8009c96:	f016 061f 	ands.w	r6, r6, #31
 8009c9a:	d0fa      	beq.n	8009c92 <__gethex+0x3fe>
 8009c9c:	4453      	add	r3, sl
 8009c9e:	f1c6 0620 	rsb	r6, r6, #32
 8009ca2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ca6:	f000 fa81 	bl	800a1ac <__hi0bits>
 8009caa:	42b0      	cmp	r0, r6
 8009cac:	dbe7      	blt.n	8009c7e <__gethex+0x3ea>
 8009cae:	e7f0      	b.n	8009c92 <__gethex+0x3fe>
 8009cb0:	0800d693 	.word	0x0800d693

08009cb4 <L_shift>:
 8009cb4:	f1c2 0208 	rsb	r2, r2, #8
 8009cb8:	0092      	lsls	r2, r2, #2
 8009cba:	b570      	push	{r4, r5, r6, lr}
 8009cbc:	f1c2 0620 	rsb	r6, r2, #32
 8009cc0:	6843      	ldr	r3, [r0, #4]
 8009cc2:	6804      	ldr	r4, [r0, #0]
 8009cc4:	fa03 f506 	lsl.w	r5, r3, r6
 8009cc8:	432c      	orrs	r4, r5
 8009cca:	40d3      	lsrs	r3, r2
 8009ccc:	6004      	str	r4, [r0, #0]
 8009cce:	f840 3f04 	str.w	r3, [r0, #4]!
 8009cd2:	4288      	cmp	r0, r1
 8009cd4:	d3f4      	bcc.n	8009cc0 <L_shift+0xc>
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}

08009cd8 <__match>:
 8009cd8:	b530      	push	{r4, r5, lr}
 8009cda:	6803      	ldr	r3, [r0, #0]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ce2:	b914      	cbnz	r4, 8009cea <__match+0x12>
 8009ce4:	6003      	str	r3, [r0, #0]
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	bd30      	pop	{r4, r5, pc}
 8009cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009cf2:	2d19      	cmp	r5, #25
 8009cf4:	bf98      	it	ls
 8009cf6:	3220      	addls	r2, #32
 8009cf8:	42a2      	cmp	r2, r4
 8009cfa:	d0f0      	beq.n	8009cde <__match+0x6>
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	e7f3      	b.n	8009ce8 <__match+0x10>

08009d00 <__hexnan>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	680b      	ldr	r3, [r1, #0]
 8009d06:	6801      	ldr	r1, [r0, #0]
 8009d08:	115e      	asrs	r6, r3, #5
 8009d0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d0e:	f013 031f 	ands.w	r3, r3, #31
 8009d12:	b087      	sub	sp, #28
 8009d14:	bf18      	it	ne
 8009d16:	3604      	addne	r6, #4
 8009d18:	2500      	movs	r5, #0
 8009d1a:	1f37      	subs	r7, r6, #4
 8009d1c:	4682      	mov	sl, r0
 8009d1e:	4690      	mov	r8, r2
 8009d20:	9301      	str	r3, [sp, #4]
 8009d22:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d26:	46b9      	mov	r9, r7
 8009d28:	463c      	mov	r4, r7
 8009d2a:	9502      	str	r5, [sp, #8]
 8009d2c:	46ab      	mov	fp, r5
 8009d2e:	784a      	ldrb	r2, [r1, #1]
 8009d30:	1c4b      	adds	r3, r1, #1
 8009d32:	9303      	str	r3, [sp, #12]
 8009d34:	b342      	cbz	r2, 8009d88 <__hexnan+0x88>
 8009d36:	4610      	mov	r0, r2
 8009d38:	9105      	str	r1, [sp, #20]
 8009d3a:	9204      	str	r2, [sp, #16]
 8009d3c:	f7ff fd94 	bl	8009868 <__hexdig_fun>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d151      	bne.n	8009de8 <__hexnan+0xe8>
 8009d44:	9a04      	ldr	r2, [sp, #16]
 8009d46:	9905      	ldr	r1, [sp, #20]
 8009d48:	2a20      	cmp	r2, #32
 8009d4a:	d818      	bhi.n	8009d7e <__hexnan+0x7e>
 8009d4c:	9b02      	ldr	r3, [sp, #8]
 8009d4e:	459b      	cmp	fp, r3
 8009d50:	dd13      	ble.n	8009d7a <__hexnan+0x7a>
 8009d52:	454c      	cmp	r4, r9
 8009d54:	d206      	bcs.n	8009d64 <__hexnan+0x64>
 8009d56:	2d07      	cmp	r5, #7
 8009d58:	dc04      	bgt.n	8009d64 <__hexnan+0x64>
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f7ff ffa8 	bl	8009cb4 <L_shift>
 8009d64:	4544      	cmp	r4, r8
 8009d66:	d952      	bls.n	8009e0e <__hexnan+0x10e>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f1a4 0904 	sub.w	r9, r4, #4
 8009d6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d72:	f8cd b008 	str.w	fp, [sp, #8]
 8009d76:	464c      	mov	r4, r9
 8009d78:	461d      	mov	r5, r3
 8009d7a:	9903      	ldr	r1, [sp, #12]
 8009d7c:	e7d7      	b.n	8009d2e <__hexnan+0x2e>
 8009d7e:	2a29      	cmp	r2, #41	@ 0x29
 8009d80:	d157      	bne.n	8009e32 <__hexnan+0x132>
 8009d82:	3102      	adds	r1, #2
 8009d84:	f8ca 1000 	str.w	r1, [sl]
 8009d88:	f1bb 0f00 	cmp.w	fp, #0
 8009d8c:	d051      	beq.n	8009e32 <__hexnan+0x132>
 8009d8e:	454c      	cmp	r4, r9
 8009d90:	d206      	bcs.n	8009da0 <__hexnan+0xa0>
 8009d92:	2d07      	cmp	r5, #7
 8009d94:	dc04      	bgt.n	8009da0 <__hexnan+0xa0>
 8009d96:	462a      	mov	r2, r5
 8009d98:	4649      	mov	r1, r9
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f7ff ff8a 	bl	8009cb4 <L_shift>
 8009da0:	4544      	cmp	r4, r8
 8009da2:	d936      	bls.n	8009e12 <__hexnan+0x112>
 8009da4:	f1a8 0204 	sub.w	r2, r8, #4
 8009da8:	4623      	mov	r3, r4
 8009daa:	f853 1b04 	ldr.w	r1, [r3], #4
 8009dae:	f842 1f04 	str.w	r1, [r2, #4]!
 8009db2:	429f      	cmp	r7, r3
 8009db4:	d2f9      	bcs.n	8009daa <__hexnan+0xaa>
 8009db6:	1b3b      	subs	r3, r7, r4
 8009db8:	f023 0303 	bic.w	r3, r3, #3
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	3401      	adds	r4, #1
 8009dc0:	3e03      	subs	r6, #3
 8009dc2:	42b4      	cmp	r4, r6
 8009dc4:	bf88      	it	hi
 8009dc6:	2304      	movhi	r3, #4
 8009dc8:	4443      	add	r3, r8
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f843 2b04 	str.w	r2, [r3], #4
 8009dd0:	429f      	cmp	r7, r3
 8009dd2:	d2fb      	bcs.n	8009dcc <__hexnan+0xcc>
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	b91b      	cbnz	r3, 8009de0 <__hexnan+0xe0>
 8009dd8:	4547      	cmp	r7, r8
 8009dda:	d128      	bne.n	8009e2e <__hexnan+0x12e>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	2005      	movs	r0, #5
 8009de2:	b007      	add	sp, #28
 8009de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de8:	3501      	adds	r5, #1
 8009dea:	2d08      	cmp	r5, #8
 8009dec:	f10b 0b01 	add.w	fp, fp, #1
 8009df0:	dd06      	ble.n	8009e00 <__hexnan+0x100>
 8009df2:	4544      	cmp	r4, r8
 8009df4:	d9c1      	bls.n	8009d7a <__hexnan+0x7a>
 8009df6:	2300      	movs	r3, #0
 8009df8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dfc:	2501      	movs	r5, #1
 8009dfe:	3c04      	subs	r4, #4
 8009e00:	6822      	ldr	r2, [r4, #0]
 8009e02:	f000 000f 	and.w	r0, r0, #15
 8009e06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e0a:	6020      	str	r0, [r4, #0]
 8009e0c:	e7b5      	b.n	8009d7a <__hexnan+0x7a>
 8009e0e:	2508      	movs	r5, #8
 8009e10:	e7b3      	b.n	8009d7a <__hexnan+0x7a>
 8009e12:	9b01      	ldr	r3, [sp, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0dd      	beq.n	8009dd4 <__hexnan+0xd4>
 8009e18:	f1c3 0320 	rsb	r3, r3, #32
 8009e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e20:	40da      	lsrs	r2, r3
 8009e22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e26:	4013      	ands	r3, r2
 8009e28:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e2c:	e7d2      	b.n	8009dd4 <__hexnan+0xd4>
 8009e2e:	3f04      	subs	r7, #4
 8009e30:	e7d0      	b.n	8009dd4 <__hexnan+0xd4>
 8009e32:	2004      	movs	r0, #4
 8009e34:	e7d5      	b.n	8009de2 <__hexnan+0xe2>
	...

08009e38 <malloc>:
 8009e38:	4b02      	ldr	r3, [pc, #8]	@ (8009e44 <malloc+0xc>)
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	6818      	ldr	r0, [r3, #0]
 8009e3e:	f000 b825 	b.w	8009e8c <_malloc_r>
 8009e42:	bf00      	nop
 8009e44:	20000184 	.word	0x20000184

08009e48 <sbrk_aligned>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8009e88 <sbrk_aligned+0x40>)
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	6831      	ldr	r1, [r6, #0]
 8009e50:	4605      	mov	r5, r0
 8009e52:	b911      	cbnz	r1, 8009e5a <sbrk_aligned+0x12>
 8009e54:	f001 f822 	bl	800ae9c <_sbrk_r>
 8009e58:	6030      	str	r0, [r6, #0]
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f001 f81d 	bl	800ae9c <_sbrk_r>
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	d103      	bne.n	8009e6e <sbrk_aligned+0x26>
 8009e66:	f04f 34ff 	mov.w	r4, #4294967295
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	bd70      	pop	{r4, r5, r6, pc}
 8009e6e:	1cc4      	adds	r4, r0, #3
 8009e70:	f024 0403 	bic.w	r4, r4, #3
 8009e74:	42a0      	cmp	r0, r4
 8009e76:	d0f8      	beq.n	8009e6a <sbrk_aligned+0x22>
 8009e78:	1a21      	subs	r1, r4, r0
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f001 f80e 	bl	800ae9c <_sbrk_r>
 8009e80:	3001      	adds	r0, #1
 8009e82:	d1f2      	bne.n	8009e6a <sbrk_aligned+0x22>
 8009e84:	e7ef      	b.n	8009e66 <sbrk_aligned+0x1e>
 8009e86:	bf00      	nop
 8009e88:	200006e4 	.word	0x200006e4

08009e8c <_malloc_r>:
 8009e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e90:	1ccd      	adds	r5, r1, #3
 8009e92:	f025 0503 	bic.w	r5, r5, #3
 8009e96:	3508      	adds	r5, #8
 8009e98:	2d0c      	cmp	r5, #12
 8009e9a:	bf38      	it	cc
 8009e9c:	250c      	movcc	r5, #12
 8009e9e:	2d00      	cmp	r5, #0
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	db01      	blt.n	8009ea8 <_malloc_r+0x1c>
 8009ea4:	42a9      	cmp	r1, r5
 8009ea6:	d904      	bls.n	8009eb2 <_malloc_r+0x26>
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	6033      	str	r3, [r6, #0]
 8009eac:	2000      	movs	r0, #0
 8009eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f88 <_malloc_r+0xfc>
 8009eb6:	f000 f87b 	bl	8009fb0 <__malloc_lock>
 8009eba:	f8d8 3000 	ldr.w	r3, [r8]
 8009ebe:	461c      	mov	r4, r3
 8009ec0:	bb44      	cbnz	r4, 8009f14 <_malloc_r+0x88>
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f7ff ffbf 	bl	8009e48 <sbrk_aligned>
 8009eca:	1c43      	adds	r3, r0, #1
 8009ecc:	4604      	mov	r4, r0
 8009ece:	d158      	bne.n	8009f82 <_malloc_r+0xf6>
 8009ed0:	f8d8 4000 	ldr.w	r4, [r8]
 8009ed4:	4627      	mov	r7, r4
 8009ed6:	2f00      	cmp	r7, #0
 8009ed8:	d143      	bne.n	8009f62 <_malloc_r+0xd6>
 8009eda:	2c00      	cmp	r4, #0
 8009edc:	d04b      	beq.n	8009f76 <_malloc_r+0xea>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	eb04 0903 	add.w	r9, r4, r3
 8009ee8:	f000 ffd8 	bl	800ae9c <_sbrk_r>
 8009eec:	4581      	cmp	r9, r0
 8009eee:	d142      	bne.n	8009f76 <_malloc_r+0xea>
 8009ef0:	6821      	ldr	r1, [r4, #0]
 8009ef2:	1a6d      	subs	r5, r5, r1
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7ff ffa6 	bl	8009e48 <sbrk_aligned>
 8009efc:	3001      	adds	r0, #1
 8009efe:	d03a      	beq.n	8009f76 <_malloc_r+0xea>
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	442b      	add	r3, r5
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	f8d8 3000 	ldr.w	r3, [r8]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	bb62      	cbnz	r2, 8009f68 <_malloc_r+0xdc>
 8009f0e:	f8c8 7000 	str.w	r7, [r8]
 8009f12:	e00f      	b.n	8009f34 <_malloc_r+0xa8>
 8009f14:	6822      	ldr	r2, [r4, #0]
 8009f16:	1b52      	subs	r2, r2, r5
 8009f18:	d420      	bmi.n	8009f5c <_malloc_r+0xd0>
 8009f1a:	2a0b      	cmp	r2, #11
 8009f1c:	d917      	bls.n	8009f4e <_malloc_r+0xc2>
 8009f1e:	1961      	adds	r1, r4, r5
 8009f20:	42a3      	cmp	r3, r4
 8009f22:	6025      	str	r5, [r4, #0]
 8009f24:	bf18      	it	ne
 8009f26:	6059      	strne	r1, [r3, #4]
 8009f28:	6863      	ldr	r3, [r4, #4]
 8009f2a:	bf08      	it	eq
 8009f2c:	f8c8 1000 	streq.w	r1, [r8]
 8009f30:	5162      	str	r2, [r4, r5]
 8009f32:	604b      	str	r3, [r1, #4]
 8009f34:	4630      	mov	r0, r6
 8009f36:	f000 f841 	bl	8009fbc <__malloc_unlock>
 8009f3a:	f104 000b 	add.w	r0, r4, #11
 8009f3e:	1d23      	adds	r3, r4, #4
 8009f40:	f020 0007 	bic.w	r0, r0, #7
 8009f44:	1ac2      	subs	r2, r0, r3
 8009f46:	bf1c      	itt	ne
 8009f48:	1a1b      	subne	r3, r3, r0
 8009f4a:	50a3      	strne	r3, [r4, r2]
 8009f4c:	e7af      	b.n	8009eae <_malloc_r+0x22>
 8009f4e:	6862      	ldr	r2, [r4, #4]
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	bf0c      	ite	eq
 8009f54:	f8c8 2000 	streq.w	r2, [r8]
 8009f58:	605a      	strne	r2, [r3, #4]
 8009f5a:	e7eb      	b.n	8009f34 <_malloc_r+0xa8>
 8009f5c:	4623      	mov	r3, r4
 8009f5e:	6864      	ldr	r4, [r4, #4]
 8009f60:	e7ae      	b.n	8009ec0 <_malloc_r+0x34>
 8009f62:	463c      	mov	r4, r7
 8009f64:	687f      	ldr	r7, [r7, #4]
 8009f66:	e7b6      	b.n	8009ed6 <_malloc_r+0x4a>
 8009f68:	461a      	mov	r2, r3
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	d1fb      	bne.n	8009f68 <_malloc_r+0xdc>
 8009f70:	2300      	movs	r3, #0
 8009f72:	6053      	str	r3, [r2, #4]
 8009f74:	e7de      	b.n	8009f34 <_malloc_r+0xa8>
 8009f76:	230c      	movs	r3, #12
 8009f78:	6033      	str	r3, [r6, #0]
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	f000 f81e 	bl	8009fbc <__malloc_unlock>
 8009f80:	e794      	b.n	8009eac <_malloc_r+0x20>
 8009f82:	6005      	str	r5, [r0, #0]
 8009f84:	e7d6      	b.n	8009f34 <_malloc_r+0xa8>
 8009f86:	bf00      	nop
 8009f88:	200006e8 	.word	0x200006e8

08009f8c <__ascii_mbtowc>:
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	b901      	cbnz	r1, 8009f92 <__ascii_mbtowc+0x6>
 8009f90:	a901      	add	r1, sp, #4
 8009f92:	b142      	cbz	r2, 8009fa6 <__ascii_mbtowc+0x1a>
 8009f94:	b14b      	cbz	r3, 8009faa <__ascii_mbtowc+0x1e>
 8009f96:	7813      	ldrb	r3, [r2, #0]
 8009f98:	600b      	str	r3, [r1, #0]
 8009f9a:	7812      	ldrb	r2, [r2, #0]
 8009f9c:	1e10      	subs	r0, r2, #0
 8009f9e:	bf18      	it	ne
 8009fa0:	2001      	movne	r0, #1
 8009fa2:	b002      	add	sp, #8
 8009fa4:	4770      	bx	lr
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	e7fb      	b.n	8009fa2 <__ascii_mbtowc+0x16>
 8009faa:	f06f 0001 	mvn.w	r0, #1
 8009fae:	e7f8      	b.n	8009fa2 <__ascii_mbtowc+0x16>

08009fb0 <__malloc_lock>:
 8009fb0:	4801      	ldr	r0, [pc, #4]	@ (8009fb8 <__malloc_lock+0x8>)
 8009fb2:	f7fe bd32 	b.w	8008a1a <__retarget_lock_acquire_recursive>
 8009fb6:	bf00      	nop
 8009fb8:	200006e0 	.word	0x200006e0

08009fbc <__malloc_unlock>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	@ (8009fc4 <__malloc_unlock+0x8>)
 8009fbe:	f7fe bd2d 	b.w	8008a1c <__retarget_lock_release_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	200006e0 	.word	0x200006e0

08009fc8 <_Balloc>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	69c6      	ldr	r6, [r0, #28]
 8009fcc:	4604      	mov	r4, r0
 8009fce:	460d      	mov	r5, r1
 8009fd0:	b976      	cbnz	r6, 8009ff0 <_Balloc+0x28>
 8009fd2:	2010      	movs	r0, #16
 8009fd4:	f7ff ff30 	bl	8009e38 <malloc>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	61e0      	str	r0, [r4, #28]
 8009fdc:	b920      	cbnz	r0, 8009fe8 <_Balloc+0x20>
 8009fde:	4b18      	ldr	r3, [pc, #96]	@ (800a040 <_Balloc+0x78>)
 8009fe0:	4818      	ldr	r0, [pc, #96]	@ (800a044 <_Balloc+0x7c>)
 8009fe2:	216b      	movs	r1, #107	@ 0x6b
 8009fe4:	f7fe fd3a 	bl	8008a5c <__assert_func>
 8009fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fec:	6006      	str	r6, [r0, #0]
 8009fee:	60c6      	str	r6, [r0, #12]
 8009ff0:	69e6      	ldr	r6, [r4, #28]
 8009ff2:	68f3      	ldr	r3, [r6, #12]
 8009ff4:	b183      	cbz	r3, 800a018 <_Balloc+0x50>
 8009ff6:	69e3      	ldr	r3, [r4, #28]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ffe:	b9b8      	cbnz	r0, 800a030 <_Balloc+0x68>
 800a000:	2101      	movs	r1, #1
 800a002:	fa01 f605 	lsl.w	r6, r1, r5
 800a006:	1d72      	adds	r2, r6, #5
 800a008:	0092      	lsls	r2, r2, #2
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 ff5d 	bl	800aeca <_calloc_r>
 800a010:	b160      	cbz	r0, 800a02c <_Balloc+0x64>
 800a012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a016:	e00e      	b.n	800a036 <_Balloc+0x6e>
 800a018:	2221      	movs	r2, #33	@ 0x21
 800a01a:	2104      	movs	r1, #4
 800a01c:	4620      	mov	r0, r4
 800a01e:	f000 ff54 	bl	800aeca <_calloc_r>
 800a022:	69e3      	ldr	r3, [r4, #28]
 800a024:	60f0      	str	r0, [r6, #12]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e4      	bne.n	8009ff6 <_Balloc+0x2e>
 800a02c:	2000      	movs	r0, #0
 800a02e:	bd70      	pop	{r4, r5, r6, pc}
 800a030:	6802      	ldr	r2, [r0, #0]
 800a032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a036:	2300      	movs	r3, #0
 800a038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a03c:	e7f7      	b.n	800a02e <_Balloc+0x66>
 800a03e:	bf00      	nop
 800a040:	0800d579 	.word	0x0800d579
 800a044:	0800d704 	.word	0x0800d704

0800a048 <_Bfree>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	69c6      	ldr	r6, [r0, #28]
 800a04c:	4605      	mov	r5, r0
 800a04e:	460c      	mov	r4, r1
 800a050:	b976      	cbnz	r6, 800a070 <_Bfree+0x28>
 800a052:	2010      	movs	r0, #16
 800a054:	f7ff fef0 	bl	8009e38 <malloc>
 800a058:	4602      	mov	r2, r0
 800a05a:	61e8      	str	r0, [r5, #28]
 800a05c:	b920      	cbnz	r0, 800a068 <_Bfree+0x20>
 800a05e:	4b09      	ldr	r3, [pc, #36]	@ (800a084 <_Bfree+0x3c>)
 800a060:	4809      	ldr	r0, [pc, #36]	@ (800a088 <_Bfree+0x40>)
 800a062:	218f      	movs	r1, #143	@ 0x8f
 800a064:	f7fe fcfa 	bl	8008a5c <__assert_func>
 800a068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a06c:	6006      	str	r6, [r0, #0]
 800a06e:	60c6      	str	r6, [r0, #12]
 800a070:	b13c      	cbz	r4, 800a082 <_Bfree+0x3a>
 800a072:	69eb      	ldr	r3, [r5, #28]
 800a074:	6862      	ldr	r2, [r4, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a07c:	6021      	str	r1, [r4, #0]
 800a07e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a082:	bd70      	pop	{r4, r5, r6, pc}
 800a084:	0800d579 	.word	0x0800d579
 800a088:	0800d704 	.word	0x0800d704

0800a08c <__multadd>:
 800a08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a090:	690d      	ldr	r5, [r1, #16]
 800a092:	4607      	mov	r7, r0
 800a094:	460c      	mov	r4, r1
 800a096:	461e      	mov	r6, r3
 800a098:	f101 0c14 	add.w	ip, r1, #20
 800a09c:	2000      	movs	r0, #0
 800a09e:	f8dc 3000 	ldr.w	r3, [ip]
 800a0a2:	b299      	uxth	r1, r3
 800a0a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a0a8:	0c1e      	lsrs	r6, r3, #16
 800a0aa:	0c0b      	lsrs	r3, r1, #16
 800a0ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a0b0:	b289      	uxth	r1, r1
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0b8:	4285      	cmp	r5, r0
 800a0ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a0be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0c2:	dcec      	bgt.n	800a09e <__multadd+0x12>
 800a0c4:	b30e      	cbz	r6, 800a10a <__multadd+0x7e>
 800a0c6:	68a3      	ldr	r3, [r4, #8]
 800a0c8:	42ab      	cmp	r3, r5
 800a0ca:	dc19      	bgt.n	800a100 <__multadd+0x74>
 800a0cc:	6861      	ldr	r1, [r4, #4]
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	3101      	adds	r1, #1
 800a0d2:	f7ff ff79 	bl	8009fc8 <_Balloc>
 800a0d6:	4680      	mov	r8, r0
 800a0d8:	b928      	cbnz	r0, 800a0e6 <__multadd+0x5a>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a110 <__multadd+0x84>)
 800a0de:	480d      	ldr	r0, [pc, #52]	@ (800a114 <__multadd+0x88>)
 800a0e0:	21ba      	movs	r1, #186	@ 0xba
 800a0e2:	f7fe fcbb 	bl	8008a5c <__assert_func>
 800a0e6:	6922      	ldr	r2, [r4, #16]
 800a0e8:	3202      	adds	r2, #2
 800a0ea:	f104 010c 	add.w	r1, r4, #12
 800a0ee:	0092      	lsls	r2, r2, #2
 800a0f0:	300c      	adds	r0, #12
 800a0f2:	f7fe fc94 	bl	8008a1e <memcpy>
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4638      	mov	r0, r7
 800a0fa:	f7ff ffa5 	bl	800a048 <_Bfree>
 800a0fe:	4644      	mov	r4, r8
 800a100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a104:	3501      	adds	r5, #1
 800a106:	615e      	str	r6, [r3, #20]
 800a108:	6125      	str	r5, [r4, #16]
 800a10a:	4620      	mov	r0, r4
 800a10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a110:	0800d693 	.word	0x0800d693
 800a114:	0800d704 	.word	0x0800d704

0800a118 <__s2b>:
 800a118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a11c:	460c      	mov	r4, r1
 800a11e:	4615      	mov	r5, r2
 800a120:	461f      	mov	r7, r3
 800a122:	2209      	movs	r2, #9
 800a124:	3308      	adds	r3, #8
 800a126:	4606      	mov	r6, r0
 800a128:	fb93 f3f2 	sdiv	r3, r3, r2
 800a12c:	2100      	movs	r1, #0
 800a12e:	2201      	movs	r2, #1
 800a130:	429a      	cmp	r2, r3
 800a132:	db09      	blt.n	800a148 <__s2b+0x30>
 800a134:	4630      	mov	r0, r6
 800a136:	f7ff ff47 	bl	8009fc8 <_Balloc>
 800a13a:	b940      	cbnz	r0, 800a14e <__s2b+0x36>
 800a13c:	4602      	mov	r2, r0
 800a13e:	4b19      	ldr	r3, [pc, #100]	@ (800a1a4 <__s2b+0x8c>)
 800a140:	4819      	ldr	r0, [pc, #100]	@ (800a1a8 <__s2b+0x90>)
 800a142:	21d3      	movs	r1, #211	@ 0xd3
 800a144:	f7fe fc8a 	bl	8008a5c <__assert_func>
 800a148:	0052      	lsls	r2, r2, #1
 800a14a:	3101      	adds	r1, #1
 800a14c:	e7f0      	b.n	800a130 <__s2b+0x18>
 800a14e:	9b08      	ldr	r3, [sp, #32]
 800a150:	6143      	str	r3, [r0, #20]
 800a152:	2d09      	cmp	r5, #9
 800a154:	f04f 0301 	mov.w	r3, #1
 800a158:	6103      	str	r3, [r0, #16]
 800a15a:	dd16      	ble.n	800a18a <__s2b+0x72>
 800a15c:	f104 0909 	add.w	r9, r4, #9
 800a160:	46c8      	mov	r8, r9
 800a162:	442c      	add	r4, r5
 800a164:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a168:	4601      	mov	r1, r0
 800a16a:	3b30      	subs	r3, #48	@ 0x30
 800a16c:	220a      	movs	r2, #10
 800a16e:	4630      	mov	r0, r6
 800a170:	f7ff ff8c 	bl	800a08c <__multadd>
 800a174:	45a0      	cmp	r8, r4
 800a176:	d1f5      	bne.n	800a164 <__s2b+0x4c>
 800a178:	f1a5 0408 	sub.w	r4, r5, #8
 800a17c:	444c      	add	r4, r9
 800a17e:	1b2d      	subs	r5, r5, r4
 800a180:	1963      	adds	r3, r4, r5
 800a182:	42bb      	cmp	r3, r7
 800a184:	db04      	blt.n	800a190 <__s2b+0x78>
 800a186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a18a:	340a      	adds	r4, #10
 800a18c:	2509      	movs	r5, #9
 800a18e:	e7f6      	b.n	800a17e <__s2b+0x66>
 800a190:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a194:	4601      	mov	r1, r0
 800a196:	3b30      	subs	r3, #48	@ 0x30
 800a198:	220a      	movs	r2, #10
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7ff ff76 	bl	800a08c <__multadd>
 800a1a0:	e7ee      	b.n	800a180 <__s2b+0x68>
 800a1a2:	bf00      	nop
 800a1a4:	0800d693 	.word	0x0800d693
 800a1a8:	0800d704 	.word	0x0800d704

0800a1ac <__hi0bits>:
 800a1ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	bf36      	itet	cc
 800a1b4:	0403      	lslcc	r3, r0, #16
 800a1b6:	2000      	movcs	r0, #0
 800a1b8:	2010      	movcc	r0, #16
 800a1ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1be:	bf3c      	itt	cc
 800a1c0:	021b      	lslcc	r3, r3, #8
 800a1c2:	3008      	addcc	r0, #8
 800a1c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1c8:	bf3c      	itt	cc
 800a1ca:	011b      	lslcc	r3, r3, #4
 800a1cc:	3004      	addcc	r0, #4
 800a1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1d2:	bf3c      	itt	cc
 800a1d4:	009b      	lslcc	r3, r3, #2
 800a1d6:	3002      	addcc	r0, #2
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	db05      	blt.n	800a1e8 <__hi0bits+0x3c>
 800a1dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a1e0:	f100 0001 	add.w	r0, r0, #1
 800a1e4:	bf08      	it	eq
 800a1e6:	2020      	moveq	r0, #32
 800a1e8:	4770      	bx	lr

0800a1ea <__lo0bits>:
 800a1ea:	6803      	ldr	r3, [r0, #0]
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	f013 0007 	ands.w	r0, r3, #7
 800a1f2:	d00b      	beq.n	800a20c <__lo0bits+0x22>
 800a1f4:	07d9      	lsls	r1, r3, #31
 800a1f6:	d421      	bmi.n	800a23c <__lo0bits+0x52>
 800a1f8:	0798      	lsls	r0, r3, #30
 800a1fa:	bf49      	itett	mi
 800a1fc:	085b      	lsrmi	r3, r3, #1
 800a1fe:	089b      	lsrpl	r3, r3, #2
 800a200:	2001      	movmi	r0, #1
 800a202:	6013      	strmi	r3, [r2, #0]
 800a204:	bf5c      	itt	pl
 800a206:	6013      	strpl	r3, [r2, #0]
 800a208:	2002      	movpl	r0, #2
 800a20a:	4770      	bx	lr
 800a20c:	b299      	uxth	r1, r3
 800a20e:	b909      	cbnz	r1, 800a214 <__lo0bits+0x2a>
 800a210:	0c1b      	lsrs	r3, r3, #16
 800a212:	2010      	movs	r0, #16
 800a214:	b2d9      	uxtb	r1, r3
 800a216:	b909      	cbnz	r1, 800a21c <__lo0bits+0x32>
 800a218:	3008      	adds	r0, #8
 800a21a:	0a1b      	lsrs	r3, r3, #8
 800a21c:	0719      	lsls	r1, r3, #28
 800a21e:	bf04      	itt	eq
 800a220:	091b      	lsreq	r3, r3, #4
 800a222:	3004      	addeq	r0, #4
 800a224:	0799      	lsls	r1, r3, #30
 800a226:	bf04      	itt	eq
 800a228:	089b      	lsreq	r3, r3, #2
 800a22a:	3002      	addeq	r0, #2
 800a22c:	07d9      	lsls	r1, r3, #31
 800a22e:	d403      	bmi.n	800a238 <__lo0bits+0x4e>
 800a230:	085b      	lsrs	r3, r3, #1
 800a232:	f100 0001 	add.w	r0, r0, #1
 800a236:	d003      	beq.n	800a240 <__lo0bits+0x56>
 800a238:	6013      	str	r3, [r2, #0]
 800a23a:	4770      	bx	lr
 800a23c:	2000      	movs	r0, #0
 800a23e:	4770      	bx	lr
 800a240:	2020      	movs	r0, #32
 800a242:	4770      	bx	lr

0800a244 <__i2b>:
 800a244:	b510      	push	{r4, lr}
 800a246:	460c      	mov	r4, r1
 800a248:	2101      	movs	r1, #1
 800a24a:	f7ff febd 	bl	8009fc8 <_Balloc>
 800a24e:	4602      	mov	r2, r0
 800a250:	b928      	cbnz	r0, 800a25e <__i2b+0x1a>
 800a252:	4b05      	ldr	r3, [pc, #20]	@ (800a268 <__i2b+0x24>)
 800a254:	4805      	ldr	r0, [pc, #20]	@ (800a26c <__i2b+0x28>)
 800a256:	f240 1145 	movw	r1, #325	@ 0x145
 800a25a:	f7fe fbff 	bl	8008a5c <__assert_func>
 800a25e:	2301      	movs	r3, #1
 800a260:	6144      	str	r4, [r0, #20]
 800a262:	6103      	str	r3, [r0, #16]
 800a264:	bd10      	pop	{r4, pc}
 800a266:	bf00      	nop
 800a268:	0800d693 	.word	0x0800d693
 800a26c:	0800d704 	.word	0x0800d704

0800a270 <__multiply>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	4614      	mov	r4, r2
 800a276:	690a      	ldr	r2, [r1, #16]
 800a278:	6923      	ldr	r3, [r4, #16]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	bfa8      	it	ge
 800a27e:	4623      	movge	r3, r4
 800a280:	460f      	mov	r7, r1
 800a282:	bfa4      	itt	ge
 800a284:	460c      	movge	r4, r1
 800a286:	461f      	movge	r7, r3
 800a288:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a28c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a290:	68a3      	ldr	r3, [r4, #8]
 800a292:	6861      	ldr	r1, [r4, #4]
 800a294:	eb0a 0609 	add.w	r6, sl, r9
 800a298:	42b3      	cmp	r3, r6
 800a29a:	b085      	sub	sp, #20
 800a29c:	bfb8      	it	lt
 800a29e:	3101      	addlt	r1, #1
 800a2a0:	f7ff fe92 	bl	8009fc8 <_Balloc>
 800a2a4:	b930      	cbnz	r0, 800a2b4 <__multiply+0x44>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	4b44      	ldr	r3, [pc, #272]	@ (800a3bc <__multiply+0x14c>)
 800a2aa:	4845      	ldr	r0, [pc, #276]	@ (800a3c0 <__multiply+0x150>)
 800a2ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2b0:	f7fe fbd4 	bl	8008a5c <__assert_func>
 800a2b4:	f100 0514 	add.w	r5, r0, #20
 800a2b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2bc:	462b      	mov	r3, r5
 800a2be:	2200      	movs	r2, #0
 800a2c0:	4543      	cmp	r3, r8
 800a2c2:	d321      	bcc.n	800a308 <__multiply+0x98>
 800a2c4:	f107 0114 	add.w	r1, r7, #20
 800a2c8:	f104 0214 	add.w	r2, r4, #20
 800a2cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a2d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a2d4:	9302      	str	r3, [sp, #8]
 800a2d6:	1b13      	subs	r3, r2, r4
 800a2d8:	3b15      	subs	r3, #21
 800a2da:	f023 0303 	bic.w	r3, r3, #3
 800a2de:	3304      	adds	r3, #4
 800a2e0:	f104 0715 	add.w	r7, r4, #21
 800a2e4:	42ba      	cmp	r2, r7
 800a2e6:	bf38      	it	cc
 800a2e8:	2304      	movcc	r3, #4
 800a2ea:	9301      	str	r3, [sp, #4]
 800a2ec:	9b02      	ldr	r3, [sp, #8]
 800a2ee:	9103      	str	r1, [sp, #12]
 800a2f0:	428b      	cmp	r3, r1
 800a2f2:	d80c      	bhi.n	800a30e <__multiply+0x9e>
 800a2f4:	2e00      	cmp	r6, #0
 800a2f6:	dd03      	ble.n	800a300 <__multiply+0x90>
 800a2f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d05b      	beq.n	800a3b8 <__multiply+0x148>
 800a300:	6106      	str	r6, [r0, #16]
 800a302:	b005      	add	sp, #20
 800a304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a308:	f843 2b04 	str.w	r2, [r3], #4
 800a30c:	e7d8      	b.n	800a2c0 <__multiply+0x50>
 800a30e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a312:	f1ba 0f00 	cmp.w	sl, #0
 800a316:	d024      	beq.n	800a362 <__multiply+0xf2>
 800a318:	f104 0e14 	add.w	lr, r4, #20
 800a31c:	46a9      	mov	r9, r5
 800a31e:	f04f 0c00 	mov.w	ip, #0
 800a322:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a326:	f8d9 3000 	ldr.w	r3, [r9]
 800a32a:	fa1f fb87 	uxth.w	fp, r7
 800a32e:	b29b      	uxth	r3, r3
 800a330:	fb0a 330b 	mla	r3, sl, fp, r3
 800a334:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a338:	f8d9 7000 	ldr.w	r7, [r9]
 800a33c:	4463      	add	r3, ip
 800a33e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a342:	fb0a c70b 	mla	r7, sl, fp, ip
 800a346:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a350:	4572      	cmp	r2, lr
 800a352:	f849 3b04 	str.w	r3, [r9], #4
 800a356:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a35a:	d8e2      	bhi.n	800a322 <__multiply+0xb2>
 800a35c:	9b01      	ldr	r3, [sp, #4]
 800a35e:	f845 c003 	str.w	ip, [r5, r3]
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a368:	3104      	adds	r1, #4
 800a36a:	f1b9 0f00 	cmp.w	r9, #0
 800a36e:	d021      	beq.n	800a3b4 <__multiply+0x144>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	f104 0c14 	add.w	ip, r4, #20
 800a376:	46ae      	mov	lr, r5
 800a378:	f04f 0a00 	mov.w	sl, #0
 800a37c:	f8bc b000 	ldrh.w	fp, [ip]
 800a380:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a384:	fb09 770b 	mla	r7, r9, fp, r7
 800a388:	4457      	add	r7, sl
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a390:	f84e 3b04 	str.w	r3, [lr], #4
 800a394:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a398:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a39c:	f8be 3000 	ldrh.w	r3, [lr]
 800a3a0:	fb09 330a 	mla	r3, r9, sl, r3
 800a3a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a3a8:	4562      	cmp	r2, ip
 800a3aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3ae:	d8e5      	bhi.n	800a37c <__multiply+0x10c>
 800a3b0:	9f01      	ldr	r7, [sp, #4]
 800a3b2:	51eb      	str	r3, [r5, r7]
 800a3b4:	3504      	adds	r5, #4
 800a3b6:	e799      	b.n	800a2ec <__multiply+0x7c>
 800a3b8:	3e01      	subs	r6, #1
 800a3ba:	e79b      	b.n	800a2f4 <__multiply+0x84>
 800a3bc:	0800d693 	.word	0x0800d693
 800a3c0:	0800d704 	.word	0x0800d704

0800a3c4 <__pow5mult>:
 800a3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c8:	4615      	mov	r5, r2
 800a3ca:	f012 0203 	ands.w	r2, r2, #3
 800a3ce:	4607      	mov	r7, r0
 800a3d0:	460e      	mov	r6, r1
 800a3d2:	d007      	beq.n	800a3e4 <__pow5mult+0x20>
 800a3d4:	4c25      	ldr	r4, [pc, #148]	@ (800a46c <__pow5mult+0xa8>)
 800a3d6:	3a01      	subs	r2, #1
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3de:	f7ff fe55 	bl	800a08c <__multadd>
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	10ad      	asrs	r5, r5, #2
 800a3e6:	d03d      	beq.n	800a464 <__pow5mult+0xa0>
 800a3e8:	69fc      	ldr	r4, [r7, #28]
 800a3ea:	b97c      	cbnz	r4, 800a40c <__pow5mult+0x48>
 800a3ec:	2010      	movs	r0, #16
 800a3ee:	f7ff fd23 	bl	8009e38 <malloc>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	61f8      	str	r0, [r7, #28]
 800a3f6:	b928      	cbnz	r0, 800a404 <__pow5mult+0x40>
 800a3f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a470 <__pow5mult+0xac>)
 800a3fa:	481e      	ldr	r0, [pc, #120]	@ (800a474 <__pow5mult+0xb0>)
 800a3fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a400:	f7fe fb2c 	bl	8008a5c <__assert_func>
 800a404:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a408:	6004      	str	r4, [r0, #0]
 800a40a:	60c4      	str	r4, [r0, #12]
 800a40c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a410:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a414:	b94c      	cbnz	r4, 800a42a <__pow5mult+0x66>
 800a416:	f240 2171 	movw	r1, #625	@ 0x271
 800a41a:	4638      	mov	r0, r7
 800a41c:	f7ff ff12 	bl	800a244 <__i2b>
 800a420:	2300      	movs	r3, #0
 800a422:	f8c8 0008 	str.w	r0, [r8, #8]
 800a426:	4604      	mov	r4, r0
 800a428:	6003      	str	r3, [r0, #0]
 800a42a:	f04f 0900 	mov.w	r9, #0
 800a42e:	07eb      	lsls	r3, r5, #31
 800a430:	d50a      	bpl.n	800a448 <__pow5mult+0x84>
 800a432:	4631      	mov	r1, r6
 800a434:	4622      	mov	r2, r4
 800a436:	4638      	mov	r0, r7
 800a438:	f7ff ff1a 	bl	800a270 <__multiply>
 800a43c:	4631      	mov	r1, r6
 800a43e:	4680      	mov	r8, r0
 800a440:	4638      	mov	r0, r7
 800a442:	f7ff fe01 	bl	800a048 <_Bfree>
 800a446:	4646      	mov	r6, r8
 800a448:	106d      	asrs	r5, r5, #1
 800a44a:	d00b      	beq.n	800a464 <__pow5mult+0xa0>
 800a44c:	6820      	ldr	r0, [r4, #0]
 800a44e:	b938      	cbnz	r0, 800a460 <__pow5mult+0x9c>
 800a450:	4622      	mov	r2, r4
 800a452:	4621      	mov	r1, r4
 800a454:	4638      	mov	r0, r7
 800a456:	f7ff ff0b 	bl	800a270 <__multiply>
 800a45a:	6020      	str	r0, [r4, #0]
 800a45c:	f8c0 9000 	str.w	r9, [r0]
 800a460:	4604      	mov	r4, r0
 800a462:	e7e4      	b.n	800a42e <__pow5mult+0x6a>
 800a464:	4630      	mov	r0, r6
 800a466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a46a:	bf00      	nop
 800a46c:	0800d760 	.word	0x0800d760
 800a470:	0800d579 	.word	0x0800d579
 800a474:	0800d704 	.word	0x0800d704

0800a478 <__lshift>:
 800a478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a47c:	460c      	mov	r4, r1
 800a47e:	6849      	ldr	r1, [r1, #4]
 800a480:	6923      	ldr	r3, [r4, #16]
 800a482:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	4607      	mov	r7, r0
 800a48a:	4691      	mov	r9, r2
 800a48c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a490:	f108 0601 	add.w	r6, r8, #1
 800a494:	42b3      	cmp	r3, r6
 800a496:	db0b      	blt.n	800a4b0 <__lshift+0x38>
 800a498:	4638      	mov	r0, r7
 800a49a:	f7ff fd95 	bl	8009fc8 <_Balloc>
 800a49e:	4605      	mov	r5, r0
 800a4a0:	b948      	cbnz	r0, 800a4b6 <__lshift+0x3e>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	4b28      	ldr	r3, [pc, #160]	@ (800a548 <__lshift+0xd0>)
 800a4a6:	4829      	ldr	r0, [pc, #164]	@ (800a54c <__lshift+0xd4>)
 800a4a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4ac:	f7fe fad6 	bl	8008a5c <__assert_func>
 800a4b0:	3101      	adds	r1, #1
 800a4b2:	005b      	lsls	r3, r3, #1
 800a4b4:	e7ee      	b.n	800a494 <__lshift+0x1c>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f100 0114 	add.w	r1, r0, #20
 800a4bc:	f100 0210 	add.w	r2, r0, #16
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	4553      	cmp	r3, sl
 800a4c4:	db33      	blt.n	800a52e <__lshift+0xb6>
 800a4c6:	6920      	ldr	r0, [r4, #16]
 800a4c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4cc:	f104 0314 	add.w	r3, r4, #20
 800a4d0:	f019 091f 	ands.w	r9, r9, #31
 800a4d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4dc:	d02b      	beq.n	800a536 <__lshift+0xbe>
 800a4de:	f1c9 0e20 	rsb	lr, r9, #32
 800a4e2:	468a      	mov	sl, r1
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	6818      	ldr	r0, [r3, #0]
 800a4e8:	fa00 f009 	lsl.w	r0, r0, r9
 800a4ec:	4310      	orrs	r0, r2
 800a4ee:	f84a 0b04 	str.w	r0, [sl], #4
 800a4f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f6:	459c      	cmp	ip, r3
 800a4f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4fc:	d8f3      	bhi.n	800a4e6 <__lshift+0x6e>
 800a4fe:	ebac 0304 	sub.w	r3, ip, r4
 800a502:	3b15      	subs	r3, #21
 800a504:	f023 0303 	bic.w	r3, r3, #3
 800a508:	3304      	adds	r3, #4
 800a50a:	f104 0015 	add.w	r0, r4, #21
 800a50e:	4584      	cmp	ip, r0
 800a510:	bf38      	it	cc
 800a512:	2304      	movcc	r3, #4
 800a514:	50ca      	str	r2, [r1, r3]
 800a516:	b10a      	cbz	r2, 800a51c <__lshift+0xa4>
 800a518:	f108 0602 	add.w	r6, r8, #2
 800a51c:	3e01      	subs	r6, #1
 800a51e:	4638      	mov	r0, r7
 800a520:	612e      	str	r6, [r5, #16]
 800a522:	4621      	mov	r1, r4
 800a524:	f7ff fd90 	bl	800a048 <_Bfree>
 800a528:	4628      	mov	r0, r5
 800a52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a532:	3301      	adds	r3, #1
 800a534:	e7c5      	b.n	800a4c2 <__lshift+0x4a>
 800a536:	3904      	subs	r1, #4
 800a538:	f853 2b04 	ldr.w	r2, [r3], #4
 800a53c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a540:	459c      	cmp	ip, r3
 800a542:	d8f9      	bhi.n	800a538 <__lshift+0xc0>
 800a544:	e7ea      	b.n	800a51c <__lshift+0xa4>
 800a546:	bf00      	nop
 800a548:	0800d693 	.word	0x0800d693
 800a54c:	0800d704 	.word	0x0800d704

0800a550 <__mcmp>:
 800a550:	690a      	ldr	r2, [r1, #16]
 800a552:	4603      	mov	r3, r0
 800a554:	6900      	ldr	r0, [r0, #16]
 800a556:	1a80      	subs	r0, r0, r2
 800a558:	b530      	push	{r4, r5, lr}
 800a55a:	d10e      	bne.n	800a57a <__mcmp+0x2a>
 800a55c:	3314      	adds	r3, #20
 800a55e:	3114      	adds	r1, #20
 800a560:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a564:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a568:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a56c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a570:	4295      	cmp	r5, r2
 800a572:	d003      	beq.n	800a57c <__mcmp+0x2c>
 800a574:	d205      	bcs.n	800a582 <__mcmp+0x32>
 800a576:	f04f 30ff 	mov.w	r0, #4294967295
 800a57a:	bd30      	pop	{r4, r5, pc}
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	d3f3      	bcc.n	800a568 <__mcmp+0x18>
 800a580:	e7fb      	b.n	800a57a <__mcmp+0x2a>
 800a582:	2001      	movs	r0, #1
 800a584:	e7f9      	b.n	800a57a <__mcmp+0x2a>
	...

0800a588 <__mdiff>:
 800a588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	4689      	mov	r9, r1
 800a58e:	4606      	mov	r6, r0
 800a590:	4611      	mov	r1, r2
 800a592:	4648      	mov	r0, r9
 800a594:	4614      	mov	r4, r2
 800a596:	f7ff ffdb 	bl	800a550 <__mcmp>
 800a59a:	1e05      	subs	r5, r0, #0
 800a59c:	d112      	bne.n	800a5c4 <__mdiff+0x3c>
 800a59e:	4629      	mov	r1, r5
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f7ff fd11 	bl	8009fc8 <_Balloc>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	b928      	cbnz	r0, 800a5b6 <__mdiff+0x2e>
 800a5aa:	4b3f      	ldr	r3, [pc, #252]	@ (800a6a8 <__mdiff+0x120>)
 800a5ac:	f240 2137 	movw	r1, #567	@ 0x237
 800a5b0:	483e      	ldr	r0, [pc, #248]	@ (800a6ac <__mdiff+0x124>)
 800a5b2:	f7fe fa53 	bl	8008a5c <__assert_func>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5bc:	4610      	mov	r0, r2
 800a5be:	b003      	add	sp, #12
 800a5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c4:	bfbc      	itt	lt
 800a5c6:	464b      	movlt	r3, r9
 800a5c8:	46a1      	movlt	r9, r4
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5d0:	bfba      	itte	lt
 800a5d2:	461c      	movlt	r4, r3
 800a5d4:	2501      	movlt	r5, #1
 800a5d6:	2500      	movge	r5, #0
 800a5d8:	f7ff fcf6 	bl	8009fc8 <_Balloc>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	b918      	cbnz	r0, 800a5e8 <__mdiff+0x60>
 800a5e0:	4b31      	ldr	r3, [pc, #196]	@ (800a6a8 <__mdiff+0x120>)
 800a5e2:	f240 2145 	movw	r1, #581	@ 0x245
 800a5e6:	e7e3      	b.n	800a5b0 <__mdiff+0x28>
 800a5e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a5ec:	6926      	ldr	r6, [r4, #16]
 800a5ee:	60c5      	str	r5, [r0, #12]
 800a5f0:	f109 0310 	add.w	r3, r9, #16
 800a5f4:	f109 0514 	add.w	r5, r9, #20
 800a5f8:	f104 0e14 	add.w	lr, r4, #20
 800a5fc:	f100 0b14 	add.w	fp, r0, #20
 800a600:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a604:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a608:	9301      	str	r3, [sp, #4]
 800a60a:	46d9      	mov	r9, fp
 800a60c:	f04f 0c00 	mov.w	ip, #0
 800a610:	9b01      	ldr	r3, [sp, #4]
 800a612:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a616:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	fa1f f38a 	uxth.w	r3, sl
 800a620:	4619      	mov	r1, r3
 800a622:	b283      	uxth	r3, r0
 800a624:	1acb      	subs	r3, r1, r3
 800a626:	0c00      	lsrs	r0, r0, #16
 800a628:	4463      	add	r3, ip
 800a62a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a62e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a632:	b29b      	uxth	r3, r3
 800a634:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a638:	4576      	cmp	r6, lr
 800a63a:	f849 3b04 	str.w	r3, [r9], #4
 800a63e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a642:	d8e5      	bhi.n	800a610 <__mdiff+0x88>
 800a644:	1b33      	subs	r3, r6, r4
 800a646:	3b15      	subs	r3, #21
 800a648:	f023 0303 	bic.w	r3, r3, #3
 800a64c:	3415      	adds	r4, #21
 800a64e:	3304      	adds	r3, #4
 800a650:	42a6      	cmp	r6, r4
 800a652:	bf38      	it	cc
 800a654:	2304      	movcc	r3, #4
 800a656:	441d      	add	r5, r3
 800a658:	445b      	add	r3, fp
 800a65a:	461e      	mov	r6, r3
 800a65c:	462c      	mov	r4, r5
 800a65e:	4544      	cmp	r4, r8
 800a660:	d30e      	bcc.n	800a680 <__mdiff+0xf8>
 800a662:	f108 0103 	add.w	r1, r8, #3
 800a666:	1b49      	subs	r1, r1, r5
 800a668:	f021 0103 	bic.w	r1, r1, #3
 800a66c:	3d03      	subs	r5, #3
 800a66e:	45a8      	cmp	r8, r5
 800a670:	bf38      	it	cc
 800a672:	2100      	movcc	r1, #0
 800a674:	440b      	add	r3, r1
 800a676:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a67a:	b191      	cbz	r1, 800a6a2 <__mdiff+0x11a>
 800a67c:	6117      	str	r7, [r2, #16]
 800a67e:	e79d      	b.n	800a5bc <__mdiff+0x34>
 800a680:	f854 1b04 	ldr.w	r1, [r4], #4
 800a684:	46e6      	mov	lr, ip
 800a686:	0c08      	lsrs	r0, r1, #16
 800a688:	fa1c fc81 	uxtah	ip, ip, r1
 800a68c:	4471      	add	r1, lr
 800a68e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a692:	b289      	uxth	r1, r1
 800a694:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a698:	f846 1b04 	str.w	r1, [r6], #4
 800a69c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6a0:	e7dd      	b.n	800a65e <__mdiff+0xd6>
 800a6a2:	3f01      	subs	r7, #1
 800a6a4:	e7e7      	b.n	800a676 <__mdiff+0xee>
 800a6a6:	bf00      	nop
 800a6a8:	0800d693 	.word	0x0800d693
 800a6ac:	0800d704 	.word	0x0800d704

0800a6b0 <__ulp>:
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	ed8d 0b00 	vstr	d0, [sp]
 800a6b6:	9a01      	ldr	r2, [sp, #4]
 800a6b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a6f8 <__ulp+0x48>)
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	dc08      	bgt.n	800a6d6 <__ulp+0x26>
 800a6c4:	425b      	negs	r3, r3
 800a6c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a6ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6ce:	da04      	bge.n	800a6da <__ulp+0x2a>
 800a6d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a6d4:	4113      	asrs	r3, r2
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	e008      	b.n	800a6ec <__ulp+0x3c>
 800a6da:	f1a2 0314 	sub.w	r3, r2, #20
 800a6de:	2b1e      	cmp	r3, #30
 800a6e0:	bfda      	itte	le
 800a6e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a6e6:	40da      	lsrle	r2, r3
 800a6e8:	2201      	movgt	r2, #1
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	4610      	mov	r0, r2
 800a6f0:	ec41 0b10 	vmov	d0, r0, r1
 800a6f4:	b002      	add	sp, #8
 800a6f6:	4770      	bx	lr
 800a6f8:	7ff00000 	.word	0x7ff00000

0800a6fc <__b2d>:
 800a6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a700:	6906      	ldr	r6, [r0, #16]
 800a702:	f100 0814 	add.w	r8, r0, #20
 800a706:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a70a:	1f37      	subs	r7, r6, #4
 800a70c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a710:	4610      	mov	r0, r2
 800a712:	f7ff fd4b 	bl	800a1ac <__hi0bits>
 800a716:	f1c0 0320 	rsb	r3, r0, #32
 800a71a:	280a      	cmp	r0, #10
 800a71c:	600b      	str	r3, [r1, #0]
 800a71e:	491b      	ldr	r1, [pc, #108]	@ (800a78c <__b2d+0x90>)
 800a720:	dc15      	bgt.n	800a74e <__b2d+0x52>
 800a722:	f1c0 0c0b 	rsb	ip, r0, #11
 800a726:	fa22 f30c 	lsr.w	r3, r2, ip
 800a72a:	45b8      	cmp	r8, r7
 800a72c:	ea43 0501 	orr.w	r5, r3, r1
 800a730:	bf34      	ite	cc
 800a732:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a736:	2300      	movcs	r3, #0
 800a738:	3015      	adds	r0, #21
 800a73a:	fa02 f000 	lsl.w	r0, r2, r0
 800a73e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a742:	4303      	orrs	r3, r0
 800a744:	461c      	mov	r4, r3
 800a746:	ec45 4b10 	vmov	d0, r4, r5
 800a74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a74e:	45b8      	cmp	r8, r7
 800a750:	bf3a      	itte	cc
 800a752:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a756:	f1a6 0708 	subcc.w	r7, r6, #8
 800a75a:	2300      	movcs	r3, #0
 800a75c:	380b      	subs	r0, #11
 800a75e:	d012      	beq.n	800a786 <__b2d+0x8a>
 800a760:	f1c0 0120 	rsb	r1, r0, #32
 800a764:	fa23 f401 	lsr.w	r4, r3, r1
 800a768:	4082      	lsls	r2, r0
 800a76a:	4322      	orrs	r2, r4
 800a76c:	4547      	cmp	r7, r8
 800a76e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a772:	bf8c      	ite	hi
 800a774:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a778:	2200      	movls	r2, #0
 800a77a:	4083      	lsls	r3, r0
 800a77c:	40ca      	lsrs	r2, r1
 800a77e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a782:	4313      	orrs	r3, r2
 800a784:	e7de      	b.n	800a744 <__b2d+0x48>
 800a786:	ea42 0501 	orr.w	r5, r2, r1
 800a78a:	e7db      	b.n	800a744 <__b2d+0x48>
 800a78c:	3ff00000 	.word	0x3ff00000

0800a790 <__d2b>:
 800a790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a794:	460f      	mov	r7, r1
 800a796:	2101      	movs	r1, #1
 800a798:	ec59 8b10 	vmov	r8, r9, d0
 800a79c:	4616      	mov	r6, r2
 800a79e:	f7ff fc13 	bl	8009fc8 <_Balloc>
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	b930      	cbnz	r0, 800a7b4 <__d2b+0x24>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	4b23      	ldr	r3, [pc, #140]	@ (800a838 <__d2b+0xa8>)
 800a7aa:	4824      	ldr	r0, [pc, #144]	@ (800a83c <__d2b+0xac>)
 800a7ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7b0:	f7fe f954 	bl	8008a5c <__assert_func>
 800a7b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7bc:	b10d      	cbz	r5, 800a7c2 <__d2b+0x32>
 800a7be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	f1b8 0300 	subs.w	r3, r8, #0
 800a7c8:	d023      	beq.n	800a812 <__d2b+0x82>
 800a7ca:	4668      	mov	r0, sp
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	f7ff fd0c 	bl	800a1ea <__lo0bits>
 800a7d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7d6:	b1d0      	cbz	r0, 800a80e <__d2b+0x7e>
 800a7d8:	f1c0 0320 	rsb	r3, r0, #32
 800a7dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e0:	430b      	orrs	r3, r1
 800a7e2:	40c2      	lsrs	r2, r0
 800a7e4:	6163      	str	r3, [r4, #20]
 800a7e6:	9201      	str	r2, [sp, #4]
 800a7e8:	9b01      	ldr	r3, [sp, #4]
 800a7ea:	61a3      	str	r3, [r4, #24]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	bf0c      	ite	eq
 800a7f0:	2201      	moveq	r2, #1
 800a7f2:	2202      	movne	r2, #2
 800a7f4:	6122      	str	r2, [r4, #16]
 800a7f6:	b1a5      	cbz	r5, 800a822 <__d2b+0x92>
 800a7f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7fc:	4405      	add	r5, r0
 800a7fe:	603d      	str	r5, [r7, #0]
 800a800:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a804:	6030      	str	r0, [r6, #0]
 800a806:	4620      	mov	r0, r4
 800a808:	b003      	add	sp, #12
 800a80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a80e:	6161      	str	r1, [r4, #20]
 800a810:	e7ea      	b.n	800a7e8 <__d2b+0x58>
 800a812:	a801      	add	r0, sp, #4
 800a814:	f7ff fce9 	bl	800a1ea <__lo0bits>
 800a818:	9b01      	ldr	r3, [sp, #4]
 800a81a:	6163      	str	r3, [r4, #20]
 800a81c:	3020      	adds	r0, #32
 800a81e:	2201      	movs	r2, #1
 800a820:	e7e8      	b.n	800a7f4 <__d2b+0x64>
 800a822:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a826:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a82a:	6038      	str	r0, [r7, #0]
 800a82c:	6918      	ldr	r0, [r3, #16]
 800a82e:	f7ff fcbd 	bl	800a1ac <__hi0bits>
 800a832:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a836:	e7e5      	b.n	800a804 <__d2b+0x74>
 800a838:	0800d693 	.word	0x0800d693
 800a83c:	0800d704 	.word	0x0800d704

0800a840 <__ratio>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	b085      	sub	sp, #20
 800a846:	e9cd 1000 	strd	r1, r0, [sp]
 800a84a:	a902      	add	r1, sp, #8
 800a84c:	f7ff ff56 	bl	800a6fc <__b2d>
 800a850:	9800      	ldr	r0, [sp, #0]
 800a852:	a903      	add	r1, sp, #12
 800a854:	ec55 4b10 	vmov	r4, r5, d0
 800a858:	f7ff ff50 	bl	800a6fc <__b2d>
 800a85c:	9b01      	ldr	r3, [sp, #4]
 800a85e:	6919      	ldr	r1, [r3, #16]
 800a860:	9b00      	ldr	r3, [sp, #0]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	1ac9      	subs	r1, r1, r3
 800a866:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a86a:	1a9b      	subs	r3, r3, r2
 800a86c:	ec5b ab10 	vmov	sl, fp, d0
 800a870:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a874:	2b00      	cmp	r3, #0
 800a876:	bfce      	itee	gt
 800a878:	462a      	movgt	r2, r5
 800a87a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a87e:	465a      	movle	r2, fp
 800a880:	462f      	mov	r7, r5
 800a882:	46d9      	mov	r9, fp
 800a884:	bfcc      	ite	gt
 800a886:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a88a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a88e:	464b      	mov	r3, r9
 800a890:	4652      	mov	r2, sl
 800a892:	4620      	mov	r0, r4
 800a894:	4639      	mov	r1, r7
 800a896:	f7f5 ffd9 	bl	800084c <__aeabi_ddiv>
 800a89a:	ec41 0b10 	vmov	d0, r0, r1
 800a89e:	b005      	add	sp, #20
 800a8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8a4 <__copybits>:
 800a8a4:	3901      	subs	r1, #1
 800a8a6:	b570      	push	{r4, r5, r6, lr}
 800a8a8:	1149      	asrs	r1, r1, #5
 800a8aa:	6914      	ldr	r4, [r2, #16]
 800a8ac:	3101      	adds	r1, #1
 800a8ae:	f102 0314 	add.w	r3, r2, #20
 800a8b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8ba:	1f05      	subs	r5, r0, #4
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	d30c      	bcc.n	800a8da <__copybits+0x36>
 800a8c0:	1aa3      	subs	r3, r4, r2
 800a8c2:	3b11      	subs	r3, #17
 800a8c4:	f023 0303 	bic.w	r3, r3, #3
 800a8c8:	3211      	adds	r2, #17
 800a8ca:	42a2      	cmp	r2, r4
 800a8cc:	bf88      	it	hi
 800a8ce:	2300      	movhi	r3, #0
 800a8d0:	4418      	add	r0, r3
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	4288      	cmp	r0, r1
 800a8d6:	d305      	bcc.n	800a8e4 <__copybits+0x40>
 800a8d8:	bd70      	pop	{r4, r5, r6, pc}
 800a8da:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8de:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8e2:	e7eb      	b.n	800a8bc <__copybits+0x18>
 800a8e4:	f840 3b04 	str.w	r3, [r0], #4
 800a8e8:	e7f4      	b.n	800a8d4 <__copybits+0x30>

0800a8ea <__any_on>:
 800a8ea:	f100 0214 	add.w	r2, r0, #20
 800a8ee:	6900      	ldr	r0, [r0, #16]
 800a8f0:	114b      	asrs	r3, r1, #5
 800a8f2:	4298      	cmp	r0, r3
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	db11      	blt.n	800a91c <__any_on+0x32>
 800a8f8:	dd0a      	ble.n	800a910 <__any_on+0x26>
 800a8fa:	f011 011f 	ands.w	r1, r1, #31
 800a8fe:	d007      	beq.n	800a910 <__any_on+0x26>
 800a900:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a904:	fa24 f001 	lsr.w	r0, r4, r1
 800a908:	fa00 f101 	lsl.w	r1, r0, r1
 800a90c:	428c      	cmp	r4, r1
 800a90e:	d10b      	bne.n	800a928 <__any_on+0x3e>
 800a910:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a914:	4293      	cmp	r3, r2
 800a916:	d803      	bhi.n	800a920 <__any_on+0x36>
 800a918:	2000      	movs	r0, #0
 800a91a:	bd10      	pop	{r4, pc}
 800a91c:	4603      	mov	r3, r0
 800a91e:	e7f7      	b.n	800a910 <__any_on+0x26>
 800a920:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a924:	2900      	cmp	r1, #0
 800a926:	d0f5      	beq.n	800a914 <__any_on+0x2a>
 800a928:	2001      	movs	r0, #1
 800a92a:	e7f6      	b.n	800a91a <__any_on+0x30>

0800a92c <_strtol_l.constprop.0>:
 800a92c:	2b24      	cmp	r3, #36	@ 0x24
 800a92e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a932:	4686      	mov	lr, r0
 800a934:	4690      	mov	r8, r2
 800a936:	d801      	bhi.n	800a93c <_strtol_l.constprop.0+0x10>
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d106      	bne.n	800a94a <_strtol_l.constprop.0+0x1e>
 800a93c:	f7fe f842 	bl	80089c4 <__errno>
 800a940:	2316      	movs	r3, #22
 800a942:	6003      	str	r3, [r0, #0]
 800a944:	2000      	movs	r0, #0
 800a946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a94a:	4834      	ldr	r0, [pc, #208]	@ (800aa1c <_strtol_l.constprop.0+0xf0>)
 800a94c:	460d      	mov	r5, r1
 800a94e:	462a      	mov	r2, r5
 800a950:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a954:	5d06      	ldrb	r6, [r0, r4]
 800a956:	f016 0608 	ands.w	r6, r6, #8
 800a95a:	d1f8      	bne.n	800a94e <_strtol_l.constprop.0+0x22>
 800a95c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a95e:	d12d      	bne.n	800a9bc <_strtol_l.constprop.0+0x90>
 800a960:	782c      	ldrb	r4, [r5, #0]
 800a962:	2601      	movs	r6, #1
 800a964:	1c95      	adds	r5, r2, #2
 800a966:	f033 0210 	bics.w	r2, r3, #16
 800a96a:	d109      	bne.n	800a980 <_strtol_l.constprop.0+0x54>
 800a96c:	2c30      	cmp	r4, #48	@ 0x30
 800a96e:	d12a      	bne.n	800a9c6 <_strtol_l.constprop.0+0x9a>
 800a970:	782a      	ldrb	r2, [r5, #0]
 800a972:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a976:	2a58      	cmp	r2, #88	@ 0x58
 800a978:	d125      	bne.n	800a9c6 <_strtol_l.constprop.0+0x9a>
 800a97a:	786c      	ldrb	r4, [r5, #1]
 800a97c:	2310      	movs	r3, #16
 800a97e:	3502      	adds	r5, #2
 800a980:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a984:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a988:	2200      	movs	r2, #0
 800a98a:	fbbc f9f3 	udiv	r9, ip, r3
 800a98e:	4610      	mov	r0, r2
 800a990:	fb03 ca19 	mls	sl, r3, r9, ip
 800a994:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a998:	2f09      	cmp	r7, #9
 800a99a:	d81b      	bhi.n	800a9d4 <_strtol_l.constprop.0+0xa8>
 800a99c:	463c      	mov	r4, r7
 800a99e:	42a3      	cmp	r3, r4
 800a9a0:	dd27      	ble.n	800a9f2 <_strtol_l.constprop.0+0xc6>
 800a9a2:	1c57      	adds	r7, r2, #1
 800a9a4:	d007      	beq.n	800a9b6 <_strtol_l.constprop.0+0x8a>
 800a9a6:	4581      	cmp	r9, r0
 800a9a8:	d320      	bcc.n	800a9ec <_strtol_l.constprop.0+0xc0>
 800a9aa:	d101      	bne.n	800a9b0 <_strtol_l.constprop.0+0x84>
 800a9ac:	45a2      	cmp	sl, r4
 800a9ae:	db1d      	blt.n	800a9ec <_strtol_l.constprop.0+0xc0>
 800a9b0:	fb00 4003 	mla	r0, r0, r3, r4
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9ba:	e7eb      	b.n	800a994 <_strtol_l.constprop.0+0x68>
 800a9bc:	2c2b      	cmp	r4, #43	@ 0x2b
 800a9be:	bf04      	itt	eq
 800a9c0:	782c      	ldrbeq	r4, [r5, #0]
 800a9c2:	1c95      	addeq	r5, r2, #2
 800a9c4:	e7cf      	b.n	800a966 <_strtol_l.constprop.0+0x3a>
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1da      	bne.n	800a980 <_strtol_l.constprop.0+0x54>
 800a9ca:	2c30      	cmp	r4, #48	@ 0x30
 800a9cc:	bf0c      	ite	eq
 800a9ce:	2308      	moveq	r3, #8
 800a9d0:	230a      	movne	r3, #10
 800a9d2:	e7d5      	b.n	800a980 <_strtol_l.constprop.0+0x54>
 800a9d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a9d8:	2f19      	cmp	r7, #25
 800a9da:	d801      	bhi.n	800a9e0 <_strtol_l.constprop.0+0xb4>
 800a9dc:	3c37      	subs	r4, #55	@ 0x37
 800a9de:	e7de      	b.n	800a99e <_strtol_l.constprop.0+0x72>
 800a9e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a9e4:	2f19      	cmp	r7, #25
 800a9e6:	d804      	bhi.n	800a9f2 <_strtol_l.constprop.0+0xc6>
 800a9e8:	3c57      	subs	r4, #87	@ 0x57
 800a9ea:	e7d8      	b.n	800a99e <_strtol_l.constprop.0+0x72>
 800a9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f0:	e7e1      	b.n	800a9b6 <_strtol_l.constprop.0+0x8a>
 800a9f2:	1c53      	adds	r3, r2, #1
 800a9f4:	d108      	bne.n	800aa08 <_strtol_l.constprop.0+0xdc>
 800a9f6:	2322      	movs	r3, #34	@ 0x22
 800a9f8:	f8ce 3000 	str.w	r3, [lr]
 800a9fc:	4660      	mov	r0, ip
 800a9fe:	f1b8 0f00 	cmp.w	r8, #0
 800aa02:	d0a0      	beq.n	800a946 <_strtol_l.constprop.0+0x1a>
 800aa04:	1e69      	subs	r1, r5, #1
 800aa06:	e006      	b.n	800aa16 <_strtol_l.constprop.0+0xea>
 800aa08:	b106      	cbz	r6, 800aa0c <_strtol_l.constprop.0+0xe0>
 800aa0a:	4240      	negs	r0, r0
 800aa0c:	f1b8 0f00 	cmp.w	r8, #0
 800aa10:	d099      	beq.n	800a946 <_strtol_l.constprop.0+0x1a>
 800aa12:	2a00      	cmp	r2, #0
 800aa14:	d1f6      	bne.n	800aa04 <_strtol_l.constprop.0+0xd8>
 800aa16:	f8c8 1000 	str.w	r1, [r8]
 800aa1a:	e794      	b.n	800a946 <_strtol_l.constprop.0+0x1a>
 800aa1c:	0800d861 	.word	0x0800d861

0800aa20 <_strtol_r>:
 800aa20:	f7ff bf84 	b.w	800a92c <_strtol_l.constprop.0>

0800aa24 <__ascii_wctomb>:
 800aa24:	4603      	mov	r3, r0
 800aa26:	4608      	mov	r0, r1
 800aa28:	b141      	cbz	r1, 800aa3c <__ascii_wctomb+0x18>
 800aa2a:	2aff      	cmp	r2, #255	@ 0xff
 800aa2c:	d904      	bls.n	800aa38 <__ascii_wctomb+0x14>
 800aa2e:	228a      	movs	r2, #138	@ 0x8a
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	f04f 30ff 	mov.w	r0, #4294967295
 800aa36:	4770      	bx	lr
 800aa38:	700a      	strb	r2, [r1, #0]
 800aa3a:	2001      	movs	r0, #1
 800aa3c:	4770      	bx	lr

0800aa3e <__ssputs_r>:
 800aa3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa42:	688e      	ldr	r6, [r1, #8]
 800aa44:	461f      	mov	r7, r3
 800aa46:	42be      	cmp	r6, r7
 800aa48:	680b      	ldr	r3, [r1, #0]
 800aa4a:	4682      	mov	sl, r0
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	4690      	mov	r8, r2
 800aa50:	d82d      	bhi.n	800aaae <__ssputs_r+0x70>
 800aa52:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa56:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa5a:	d026      	beq.n	800aaaa <__ssputs_r+0x6c>
 800aa5c:	6965      	ldr	r5, [r4, #20]
 800aa5e:	6909      	ldr	r1, [r1, #16]
 800aa60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa64:	eba3 0901 	sub.w	r9, r3, r1
 800aa68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa6c:	1c7b      	adds	r3, r7, #1
 800aa6e:	444b      	add	r3, r9
 800aa70:	106d      	asrs	r5, r5, #1
 800aa72:	429d      	cmp	r5, r3
 800aa74:	bf38      	it	cc
 800aa76:	461d      	movcc	r5, r3
 800aa78:	0553      	lsls	r3, r2, #21
 800aa7a:	d527      	bpl.n	800aacc <__ssputs_r+0x8e>
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	f7ff fa05 	bl	8009e8c <_malloc_r>
 800aa82:	4606      	mov	r6, r0
 800aa84:	b360      	cbz	r0, 800aae0 <__ssputs_r+0xa2>
 800aa86:	6921      	ldr	r1, [r4, #16]
 800aa88:	464a      	mov	r2, r9
 800aa8a:	f7fd ffc8 	bl	8008a1e <memcpy>
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa98:	81a3      	strh	r3, [r4, #12]
 800aa9a:	6126      	str	r6, [r4, #16]
 800aa9c:	6165      	str	r5, [r4, #20]
 800aa9e:	444e      	add	r6, r9
 800aaa0:	eba5 0509 	sub.w	r5, r5, r9
 800aaa4:	6026      	str	r6, [r4, #0]
 800aaa6:	60a5      	str	r5, [r4, #8]
 800aaa8:	463e      	mov	r6, r7
 800aaaa:	42be      	cmp	r6, r7
 800aaac:	d900      	bls.n	800aab0 <__ssputs_r+0x72>
 800aaae:	463e      	mov	r6, r7
 800aab0:	6820      	ldr	r0, [r4, #0]
 800aab2:	4632      	mov	r2, r6
 800aab4:	4641      	mov	r1, r8
 800aab6:	f000 f9d7 	bl	800ae68 <memmove>
 800aaba:	68a3      	ldr	r3, [r4, #8]
 800aabc:	1b9b      	subs	r3, r3, r6
 800aabe:	60a3      	str	r3, [r4, #8]
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	4433      	add	r3, r6
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	2000      	movs	r0, #0
 800aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aacc:	462a      	mov	r2, r5
 800aace:	f000 fa10 	bl	800aef2 <_realloc_r>
 800aad2:	4606      	mov	r6, r0
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d1e0      	bne.n	800aa9a <__ssputs_r+0x5c>
 800aad8:	6921      	ldr	r1, [r4, #16]
 800aada:	4650      	mov	r0, sl
 800aadc:	f7fe fe28 	bl	8009730 <_free_r>
 800aae0:	230c      	movs	r3, #12
 800aae2:	f8ca 3000 	str.w	r3, [sl]
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaec:	81a3      	strh	r3, [r4, #12]
 800aaee:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf2:	e7e9      	b.n	800aac8 <__ssputs_r+0x8a>

0800aaf4 <_svfiprintf_r>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	4698      	mov	r8, r3
 800aafa:	898b      	ldrh	r3, [r1, #12]
 800aafc:	061b      	lsls	r3, r3, #24
 800aafe:	b09d      	sub	sp, #116	@ 0x74
 800ab00:	4607      	mov	r7, r0
 800ab02:	460d      	mov	r5, r1
 800ab04:	4614      	mov	r4, r2
 800ab06:	d510      	bpl.n	800ab2a <_svfiprintf_r+0x36>
 800ab08:	690b      	ldr	r3, [r1, #16]
 800ab0a:	b973      	cbnz	r3, 800ab2a <_svfiprintf_r+0x36>
 800ab0c:	2140      	movs	r1, #64	@ 0x40
 800ab0e:	f7ff f9bd 	bl	8009e8c <_malloc_r>
 800ab12:	6028      	str	r0, [r5, #0]
 800ab14:	6128      	str	r0, [r5, #16]
 800ab16:	b930      	cbnz	r0, 800ab26 <_svfiprintf_r+0x32>
 800ab18:	230c      	movs	r3, #12
 800ab1a:	603b      	str	r3, [r7, #0]
 800ab1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab20:	b01d      	add	sp, #116	@ 0x74
 800ab22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab26:	2340      	movs	r3, #64	@ 0x40
 800ab28:	616b      	str	r3, [r5, #20]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab2e:	2320      	movs	r3, #32
 800ab30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab38:	2330      	movs	r3, #48	@ 0x30
 800ab3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800acd8 <_svfiprintf_r+0x1e4>
 800ab3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab42:	f04f 0901 	mov.w	r9, #1
 800ab46:	4623      	mov	r3, r4
 800ab48:	469a      	mov	sl, r3
 800ab4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab4e:	b10a      	cbz	r2, 800ab54 <_svfiprintf_r+0x60>
 800ab50:	2a25      	cmp	r2, #37	@ 0x25
 800ab52:	d1f9      	bne.n	800ab48 <_svfiprintf_r+0x54>
 800ab54:	ebba 0b04 	subs.w	fp, sl, r4
 800ab58:	d00b      	beq.n	800ab72 <_svfiprintf_r+0x7e>
 800ab5a:	465b      	mov	r3, fp
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	4629      	mov	r1, r5
 800ab60:	4638      	mov	r0, r7
 800ab62:	f7ff ff6c 	bl	800aa3e <__ssputs_r>
 800ab66:	3001      	adds	r0, #1
 800ab68:	f000 80a7 	beq.w	800acba <_svfiprintf_r+0x1c6>
 800ab6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab6e:	445a      	add	r2, fp
 800ab70:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab72:	f89a 3000 	ldrb.w	r3, [sl]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 809f 	beq.w	800acba <_svfiprintf_r+0x1c6>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab86:	f10a 0a01 	add.w	sl, sl, #1
 800ab8a:	9304      	str	r3, [sp, #16]
 800ab8c:	9307      	str	r3, [sp, #28]
 800ab8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab92:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab94:	4654      	mov	r4, sl
 800ab96:	2205      	movs	r2, #5
 800ab98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab9c:	484e      	ldr	r0, [pc, #312]	@ (800acd8 <_svfiprintf_r+0x1e4>)
 800ab9e:	f7f5 fb17 	bl	80001d0 <memchr>
 800aba2:	9a04      	ldr	r2, [sp, #16]
 800aba4:	b9d8      	cbnz	r0, 800abde <_svfiprintf_r+0xea>
 800aba6:	06d0      	lsls	r0, r2, #27
 800aba8:	bf44      	itt	mi
 800abaa:	2320      	movmi	r3, #32
 800abac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abb0:	0711      	lsls	r1, r2, #28
 800abb2:	bf44      	itt	mi
 800abb4:	232b      	movmi	r3, #43	@ 0x2b
 800abb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abba:	f89a 3000 	ldrb.w	r3, [sl]
 800abbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800abc0:	d015      	beq.n	800abee <_svfiprintf_r+0xfa>
 800abc2:	9a07      	ldr	r2, [sp, #28]
 800abc4:	4654      	mov	r4, sl
 800abc6:	2000      	movs	r0, #0
 800abc8:	f04f 0c0a 	mov.w	ip, #10
 800abcc:	4621      	mov	r1, r4
 800abce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abd2:	3b30      	subs	r3, #48	@ 0x30
 800abd4:	2b09      	cmp	r3, #9
 800abd6:	d94b      	bls.n	800ac70 <_svfiprintf_r+0x17c>
 800abd8:	b1b0      	cbz	r0, 800ac08 <_svfiprintf_r+0x114>
 800abda:	9207      	str	r2, [sp, #28]
 800abdc:	e014      	b.n	800ac08 <_svfiprintf_r+0x114>
 800abde:	eba0 0308 	sub.w	r3, r0, r8
 800abe2:	fa09 f303 	lsl.w	r3, r9, r3
 800abe6:	4313      	orrs	r3, r2
 800abe8:	9304      	str	r3, [sp, #16]
 800abea:	46a2      	mov	sl, r4
 800abec:	e7d2      	b.n	800ab94 <_svfiprintf_r+0xa0>
 800abee:	9b03      	ldr	r3, [sp, #12]
 800abf0:	1d19      	adds	r1, r3, #4
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	9103      	str	r1, [sp, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	bfbb      	ittet	lt
 800abfa:	425b      	neglt	r3, r3
 800abfc:	f042 0202 	orrlt.w	r2, r2, #2
 800ac00:	9307      	strge	r3, [sp, #28]
 800ac02:	9307      	strlt	r3, [sp, #28]
 800ac04:	bfb8      	it	lt
 800ac06:	9204      	strlt	r2, [sp, #16]
 800ac08:	7823      	ldrb	r3, [r4, #0]
 800ac0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac0c:	d10a      	bne.n	800ac24 <_svfiprintf_r+0x130>
 800ac0e:	7863      	ldrb	r3, [r4, #1]
 800ac10:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac12:	d132      	bne.n	800ac7a <_svfiprintf_r+0x186>
 800ac14:	9b03      	ldr	r3, [sp, #12]
 800ac16:	1d1a      	adds	r2, r3, #4
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	9203      	str	r2, [sp, #12]
 800ac1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac20:	3402      	adds	r4, #2
 800ac22:	9305      	str	r3, [sp, #20]
 800ac24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ace8 <_svfiprintf_r+0x1f4>
 800ac28:	7821      	ldrb	r1, [r4, #0]
 800ac2a:	2203      	movs	r2, #3
 800ac2c:	4650      	mov	r0, sl
 800ac2e:	f7f5 facf 	bl	80001d0 <memchr>
 800ac32:	b138      	cbz	r0, 800ac44 <_svfiprintf_r+0x150>
 800ac34:	9b04      	ldr	r3, [sp, #16]
 800ac36:	eba0 000a 	sub.w	r0, r0, sl
 800ac3a:	2240      	movs	r2, #64	@ 0x40
 800ac3c:	4082      	lsls	r2, r0
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	3401      	adds	r4, #1
 800ac42:	9304      	str	r3, [sp, #16]
 800ac44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac48:	4824      	ldr	r0, [pc, #144]	@ (800acdc <_svfiprintf_r+0x1e8>)
 800ac4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac4e:	2206      	movs	r2, #6
 800ac50:	f7f5 fabe 	bl	80001d0 <memchr>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d036      	beq.n	800acc6 <_svfiprintf_r+0x1d2>
 800ac58:	4b21      	ldr	r3, [pc, #132]	@ (800ace0 <_svfiprintf_r+0x1ec>)
 800ac5a:	bb1b      	cbnz	r3, 800aca4 <_svfiprintf_r+0x1b0>
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	3307      	adds	r3, #7
 800ac60:	f023 0307 	bic.w	r3, r3, #7
 800ac64:	3308      	adds	r3, #8
 800ac66:	9303      	str	r3, [sp, #12]
 800ac68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac6a:	4433      	add	r3, r6
 800ac6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac6e:	e76a      	b.n	800ab46 <_svfiprintf_r+0x52>
 800ac70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac74:	460c      	mov	r4, r1
 800ac76:	2001      	movs	r0, #1
 800ac78:	e7a8      	b.n	800abcc <_svfiprintf_r+0xd8>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	3401      	adds	r4, #1
 800ac7e:	9305      	str	r3, [sp, #20]
 800ac80:	4619      	mov	r1, r3
 800ac82:	f04f 0c0a 	mov.w	ip, #10
 800ac86:	4620      	mov	r0, r4
 800ac88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac8c:	3a30      	subs	r2, #48	@ 0x30
 800ac8e:	2a09      	cmp	r2, #9
 800ac90:	d903      	bls.n	800ac9a <_svfiprintf_r+0x1a6>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0c6      	beq.n	800ac24 <_svfiprintf_r+0x130>
 800ac96:	9105      	str	r1, [sp, #20]
 800ac98:	e7c4      	b.n	800ac24 <_svfiprintf_r+0x130>
 800ac9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac9e:	4604      	mov	r4, r0
 800aca0:	2301      	movs	r3, #1
 800aca2:	e7f0      	b.n	800ac86 <_svfiprintf_r+0x192>
 800aca4:	ab03      	add	r3, sp, #12
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	462a      	mov	r2, r5
 800acaa:	4b0e      	ldr	r3, [pc, #56]	@ (800ace4 <_svfiprintf_r+0x1f0>)
 800acac:	a904      	add	r1, sp, #16
 800acae:	4638      	mov	r0, r7
 800acb0:	f7fc feb4 	bl	8007a1c <_printf_float>
 800acb4:	1c42      	adds	r2, r0, #1
 800acb6:	4606      	mov	r6, r0
 800acb8:	d1d6      	bne.n	800ac68 <_svfiprintf_r+0x174>
 800acba:	89ab      	ldrh	r3, [r5, #12]
 800acbc:	065b      	lsls	r3, r3, #25
 800acbe:	f53f af2d 	bmi.w	800ab1c <_svfiprintf_r+0x28>
 800acc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acc4:	e72c      	b.n	800ab20 <_svfiprintf_r+0x2c>
 800acc6:	ab03      	add	r3, sp, #12
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	462a      	mov	r2, r5
 800accc:	4b05      	ldr	r3, [pc, #20]	@ (800ace4 <_svfiprintf_r+0x1f0>)
 800acce:	a904      	add	r1, sp, #16
 800acd0:	4638      	mov	r0, r7
 800acd2:	f7fd f93b 	bl	8007f4c <_printf_i>
 800acd6:	e7ed      	b.n	800acb4 <_svfiprintf_r+0x1c0>
 800acd8:	0800d961 	.word	0x0800d961
 800acdc:	0800d96b 	.word	0x0800d96b
 800ace0:	08007a1d 	.word	0x08007a1d
 800ace4:	0800aa3f 	.word	0x0800aa3f
 800ace8:	0800d967 	.word	0x0800d967

0800acec <__sflush_r>:
 800acec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf4:	0716      	lsls	r6, r2, #28
 800acf6:	4605      	mov	r5, r0
 800acf8:	460c      	mov	r4, r1
 800acfa:	d454      	bmi.n	800ada6 <__sflush_r+0xba>
 800acfc:	684b      	ldr	r3, [r1, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	dc02      	bgt.n	800ad08 <__sflush_r+0x1c>
 800ad02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	dd48      	ble.n	800ad9a <__sflush_r+0xae>
 800ad08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad0a:	2e00      	cmp	r6, #0
 800ad0c:	d045      	beq.n	800ad9a <__sflush_r+0xae>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad14:	682f      	ldr	r7, [r5, #0]
 800ad16:	6a21      	ldr	r1, [r4, #32]
 800ad18:	602b      	str	r3, [r5, #0]
 800ad1a:	d030      	beq.n	800ad7e <__sflush_r+0x92>
 800ad1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	0759      	lsls	r1, r3, #29
 800ad22:	d505      	bpl.n	800ad30 <__sflush_r+0x44>
 800ad24:	6863      	ldr	r3, [r4, #4]
 800ad26:	1ad2      	subs	r2, r2, r3
 800ad28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad2a:	b10b      	cbz	r3, 800ad30 <__sflush_r+0x44>
 800ad2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad2e:	1ad2      	subs	r2, r2, r3
 800ad30:	2300      	movs	r3, #0
 800ad32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad34:	6a21      	ldr	r1, [r4, #32]
 800ad36:	4628      	mov	r0, r5
 800ad38:	47b0      	blx	r6
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	d106      	bne.n	800ad4e <__sflush_r+0x62>
 800ad40:	6829      	ldr	r1, [r5, #0]
 800ad42:	291d      	cmp	r1, #29
 800ad44:	d82b      	bhi.n	800ad9e <__sflush_r+0xb2>
 800ad46:	4a2a      	ldr	r2, [pc, #168]	@ (800adf0 <__sflush_r+0x104>)
 800ad48:	410a      	asrs	r2, r1
 800ad4a:	07d6      	lsls	r6, r2, #31
 800ad4c:	d427      	bmi.n	800ad9e <__sflush_r+0xb2>
 800ad4e:	2200      	movs	r2, #0
 800ad50:	6062      	str	r2, [r4, #4]
 800ad52:	04d9      	lsls	r1, r3, #19
 800ad54:	6922      	ldr	r2, [r4, #16]
 800ad56:	6022      	str	r2, [r4, #0]
 800ad58:	d504      	bpl.n	800ad64 <__sflush_r+0x78>
 800ad5a:	1c42      	adds	r2, r0, #1
 800ad5c:	d101      	bne.n	800ad62 <__sflush_r+0x76>
 800ad5e:	682b      	ldr	r3, [r5, #0]
 800ad60:	b903      	cbnz	r3, 800ad64 <__sflush_r+0x78>
 800ad62:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad66:	602f      	str	r7, [r5, #0]
 800ad68:	b1b9      	cbz	r1, 800ad9a <__sflush_r+0xae>
 800ad6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad6e:	4299      	cmp	r1, r3
 800ad70:	d002      	beq.n	800ad78 <__sflush_r+0x8c>
 800ad72:	4628      	mov	r0, r5
 800ad74:	f7fe fcdc 	bl	8009730 <_free_r>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad7c:	e00d      	b.n	800ad9a <__sflush_r+0xae>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	4628      	mov	r0, r5
 800ad82:	47b0      	blx	r6
 800ad84:	4602      	mov	r2, r0
 800ad86:	1c50      	adds	r0, r2, #1
 800ad88:	d1c9      	bne.n	800ad1e <__sflush_r+0x32>
 800ad8a:	682b      	ldr	r3, [r5, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d0c6      	beq.n	800ad1e <__sflush_r+0x32>
 800ad90:	2b1d      	cmp	r3, #29
 800ad92:	d001      	beq.n	800ad98 <__sflush_r+0xac>
 800ad94:	2b16      	cmp	r3, #22
 800ad96:	d11e      	bne.n	800add6 <__sflush_r+0xea>
 800ad98:	602f      	str	r7, [r5, #0]
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	e022      	b.n	800ade4 <__sflush_r+0xf8>
 800ad9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ada2:	b21b      	sxth	r3, r3
 800ada4:	e01b      	b.n	800adde <__sflush_r+0xf2>
 800ada6:	690f      	ldr	r7, [r1, #16]
 800ada8:	2f00      	cmp	r7, #0
 800adaa:	d0f6      	beq.n	800ad9a <__sflush_r+0xae>
 800adac:	0793      	lsls	r3, r2, #30
 800adae:	680e      	ldr	r6, [r1, #0]
 800adb0:	bf08      	it	eq
 800adb2:	694b      	ldreq	r3, [r1, #20]
 800adb4:	600f      	str	r7, [r1, #0]
 800adb6:	bf18      	it	ne
 800adb8:	2300      	movne	r3, #0
 800adba:	eba6 0807 	sub.w	r8, r6, r7
 800adbe:	608b      	str	r3, [r1, #8]
 800adc0:	f1b8 0f00 	cmp.w	r8, #0
 800adc4:	dde9      	ble.n	800ad9a <__sflush_r+0xae>
 800adc6:	6a21      	ldr	r1, [r4, #32]
 800adc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800adca:	4643      	mov	r3, r8
 800adcc:	463a      	mov	r2, r7
 800adce:	4628      	mov	r0, r5
 800add0:	47b0      	blx	r6
 800add2:	2800      	cmp	r0, #0
 800add4:	dc08      	bgt.n	800ade8 <__sflush_r+0xfc>
 800add6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adde:	81a3      	strh	r3, [r4, #12]
 800ade0:	f04f 30ff 	mov.w	r0, #4294967295
 800ade4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade8:	4407      	add	r7, r0
 800adea:	eba8 0800 	sub.w	r8, r8, r0
 800adee:	e7e7      	b.n	800adc0 <__sflush_r+0xd4>
 800adf0:	dfbffffe 	.word	0xdfbffffe

0800adf4 <_fflush_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	690b      	ldr	r3, [r1, #16]
 800adf8:	4605      	mov	r5, r0
 800adfa:	460c      	mov	r4, r1
 800adfc:	b913      	cbnz	r3, 800ae04 <_fflush_r+0x10>
 800adfe:	2500      	movs	r5, #0
 800ae00:	4628      	mov	r0, r5
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	b118      	cbz	r0, 800ae0e <_fflush_r+0x1a>
 800ae06:	6a03      	ldr	r3, [r0, #32]
 800ae08:	b90b      	cbnz	r3, 800ae0e <_fflush_r+0x1a>
 800ae0a:	f7fd fc5f 	bl	80086cc <__sinit>
 800ae0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d0f3      	beq.n	800adfe <_fflush_r+0xa>
 800ae16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae18:	07d0      	lsls	r0, r2, #31
 800ae1a:	d404      	bmi.n	800ae26 <_fflush_r+0x32>
 800ae1c:	0599      	lsls	r1, r3, #22
 800ae1e:	d402      	bmi.n	800ae26 <_fflush_r+0x32>
 800ae20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae22:	f7fd fdfa 	bl	8008a1a <__retarget_lock_acquire_recursive>
 800ae26:	4628      	mov	r0, r5
 800ae28:	4621      	mov	r1, r4
 800ae2a:	f7ff ff5f 	bl	800acec <__sflush_r>
 800ae2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae30:	07da      	lsls	r2, r3, #31
 800ae32:	4605      	mov	r5, r0
 800ae34:	d4e4      	bmi.n	800ae00 <_fflush_r+0xc>
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	059b      	lsls	r3, r3, #22
 800ae3a:	d4e1      	bmi.n	800ae00 <_fflush_r+0xc>
 800ae3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae3e:	f7fd fded 	bl	8008a1c <__retarget_lock_release_recursive>
 800ae42:	e7dd      	b.n	800ae00 <_fflush_r+0xc>

0800ae44 <fiprintf>:
 800ae44:	b40e      	push	{r1, r2, r3}
 800ae46:	b503      	push	{r0, r1, lr}
 800ae48:	4601      	mov	r1, r0
 800ae4a:	ab03      	add	r3, sp, #12
 800ae4c:	4805      	ldr	r0, [pc, #20]	@ (800ae64 <fiprintf+0x20>)
 800ae4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae52:	6800      	ldr	r0, [r0, #0]
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	f000 f8a3 	bl	800afa0 <_vfiprintf_r>
 800ae5a:	b002      	add	sp, #8
 800ae5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae60:	b003      	add	sp, #12
 800ae62:	4770      	bx	lr
 800ae64:	20000184 	.word	0x20000184

0800ae68 <memmove>:
 800ae68:	4288      	cmp	r0, r1
 800ae6a:	b510      	push	{r4, lr}
 800ae6c:	eb01 0402 	add.w	r4, r1, r2
 800ae70:	d902      	bls.n	800ae78 <memmove+0x10>
 800ae72:	4284      	cmp	r4, r0
 800ae74:	4623      	mov	r3, r4
 800ae76:	d807      	bhi.n	800ae88 <memmove+0x20>
 800ae78:	1e43      	subs	r3, r0, #1
 800ae7a:	42a1      	cmp	r1, r4
 800ae7c:	d008      	beq.n	800ae90 <memmove+0x28>
 800ae7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae86:	e7f8      	b.n	800ae7a <memmove+0x12>
 800ae88:	4402      	add	r2, r0
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	428a      	cmp	r2, r1
 800ae8e:	d100      	bne.n	800ae92 <memmove+0x2a>
 800ae90:	bd10      	pop	{r4, pc}
 800ae92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae9a:	e7f7      	b.n	800ae8c <memmove+0x24>

0800ae9c <_sbrk_r>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	4d06      	ldr	r5, [pc, #24]	@ (800aeb8 <_sbrk_r+0x1c>)
 800aea0:	2300      	movs	r3, #0
 800aea2:	4604      	mov	r4, r0
 800aea4:	4608      	mov	r0, r1
 800aea6:	602b      	str	r3, [r5, #0]
 800aea8:	f7f8 fc78 	bl	800379c <_sbrk>
 800aeac:	1c43      	adds	r3, r0, #1
 800aeae:	d102      	bne.n	800aeb6 <_sbrk_r+0x1a>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	b103      	cbz	r3, 800aeb6 <_sbrk_r+0x1a>
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	bd38      	pop	{r3, r4, r5, pc}
 800aeb8:	200006dc 	.word	0x200006dc

0800aebc <abort>:
 800aebc:	b508      	push	{r3, lr}
 800aebe:	2006      	movs	r0, #6
 800aec0:	f000 fa42 	bl	800b348 <raise>
 800aec4:	2001      	movs	r0, #1
 800aec6:	f7f8 fbf1 	bl	80036ac <_exit>

0800aeca <_calloc_r>:
 800aeca:	b570      	push	{r4, r5, r6, lr}
 800aecc:	fba1 5402 	umull	r5, r4, r1, r2
 800aed0:	b93c      	cbnz	r4, 800aee2 <_calloc_r+0x18>
 800aed2:	4629      	mov	r1, r5
 800aed4:	f7fe ffda 	bl	8009e8c <_malloc_r>
 800aed8:	4606      	mov	r6, r0
 800aeda:	b928      	cbnz	r0, 800aee8 <_calloc_r+0x1e>
 800aedc:	2600      	movs	r6, #0
 800aede:	4630      	mov	r0, r6
 800aee0:	bd70      	pop	{r4, r5, r6, pc}
 800aee2:	220c      	movs	r2, #12
 800aee4:	6002      	str	r2, [r0, #0]
 800aee6:	e7f9      	b.n	800aedc <_calloc_r+0x12>
 800aee8:	462a      	mov	r2, r5
 800aeea:	4621      	mov	r1, r4
 800aeec:	f7fd fc87 	bl	80087fe <memset>
 800aef0:	e7f5      	b.n	800aede <_calloc_r+0x14>

0800aef2 <_realloc_r>:
 800aef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef6:	4680      	mov	r8, r0
 800aef8:	4615      	mov	r5, r2
 800aefa:	460c      	mov	r4, r1
 800aefc:	b921      	cbnz	r1, 800af08 <_realloc_r+0x16>
 800aefe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af02:	4611      	mov	r1, r2
 800af04:	f7fe bfc2 	b.w	8009e8c <_malloc_r>
 800af08:	b92a      	cbnz	r2, 800af16 <_realloc_r+0x24>
 800af0a:	f7fe fc11 	bl	8009730 <_free_r>
 800af0e:	2400      	movs	r4, #0
 800af10:	4620      	mov	r0, r4
 800af12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af16:	f000 fa33 	bl	800b380 <_malloc_usable_size_r>
 800af1a:	4285      	cmp	r5, r0
 800af1c:	4606      	mov	r6, r0
 800af1e:	d802      	bhi.n	800af26 <_realloc_r+0x34>
 800af20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af24:	d8f4      	bhi.n	800af10 <_realloc_r+0x1e>
 800af26:	4629      	mov	r1, r5
 800af28:	4640      	mov	r0, r8
 800af2a:	f7fe ffaf 	bl	8009e8c <_malloc_r>
 800af2e:	4607      	mov	r7, r0
 800af30:	2800      	cmp	r0, #0
 800af32:	d0ec      	beq.n	800af0e <_realloc_r+0x1c>
 800af34:	42b5      	cmp	r5, r6
 800af36:	462a      	mov	r2, r5
 800af38:	4621      	mov	r1, r4
 800af3a:	bf28      	it	cs
 800af3c:	4632      	movcs	r2, r6
 800af3e:	f7fd fd6e 	bl	8008a1e <memcpy>
 800af42:	4621      	mov	r1, r4
 800af44:	4640      	mov	r0, r8
 800af46:	f7fe fbf3 	bl	8009730 <_free_r>
 800af4a:	463c      	mov	r4, r7
 800af4c:	e7e0      	b.n	800af10 <_realloc_r+0x1e>

0800af4e <__sfputc_r>:
 800af4e:	6893      	ldr	r3, [r2, #8]
 800af50:	3b01      	subs	r3, #1
 800af52:	2b00      	cmp	r3, #0
 800af54:	b410      	push	{r4}
 800af56:	6093      	str	r3, [r2, #8]
 800af58:	da08      	bge.n	800af6c <__sfputc_r+0x1e>
 800af5a:	6994      	ldr	r4, [r2, #24]
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	db01      	blt.n	800af64 <__sfputc_r+0x16>
 800af60:	290a      	cmp	r1, #10
 800af62:	d103      	bne.n	800af6c <__sfputc_r+0x1e>
 800af64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af68:	f000 b932 	b.w	800b1d0 <__swbuf_r>
 800af6c:	6813      	ldr	r3, [r2, #0]
 800af6e:	1c58      	adds	r0, r3, #1
 800af70:	6010      	str	r0, [r2, #0]
 800af72:	7019      	strb	r1, [r3, #0]
 800af74:	4608      	mov	r0, r1
 800af76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <__sfputs_r>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	4606      	mov	r6, r0
 800af80:	460f      	mov	r7, r1
 800af82:	4614      	mov	r4, r2
 800af84:	18d5      	adds	r5, r2, r3
 800af86:	42ac      	cmp	r4, r5
 800af88:	d101      	bne.n	800af8e <__sfputs_r+0x12>
 800af8a:	2000      	movs	r0, #0
 800af8c:	e007      	b.n	800af9e <__sfputs_r+0x22>
 800af8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af92:	463a      	mov	r2, r7
 800af94:	4630      	mov	r0, r6
 800af96:	f7ff ffda 	bl	800af4e <__sfputc_r>
 800af9a:	1c43      	adds	r3, r0, #1
 800af9c:	d1f3      	bne.n	800af86 <__sfputs_r+0xa>
 800af9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afa0 <_vfiprintf_r>:
 800afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa4:	460d      	mov	r5, r1
 800afa6:	b09d      	sub	sp, #116	@ 0x74
 800afa8:	4614      	mov	r4, r2
 800afaa:	4698      	mov	r8, r3
 800afac:	4606      	mov	r6, r0
 800afae:	b118      	cbz	r0, 800afb8 <_vfiprintf_r+0x18>
 800afb0:	6a03      	ldr	r3, [r0, #32]
 800afb2:	b90b      	cbnz	r3, 800afb8 <_vfiprintf_r+0x18>
 800afb4:	f7fd fb8a 	bl	80086cc <__sinit>
 800afb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afba:	07d9      	lsls	r1, r3, #31
 800afbc:	d405      	bmi.n	800afca <_vfiprintf_r+0x2a>
 800afbe:	89ab      	ldrh	r3, [r5, #12]
 800afc0:	059a      	lsls	r2, r3, #22
 800afc2:	d402      	bmi.n	800afca <_vfiprintf_r+0x2a>
 800afc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afc6:	f7fd fd28 	bl	8008a1a <__retarget_lock_acquire_recursive>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	071b      	lsls	r3, r3, #28
 800afce:	d501      	bpl.n	800afd4 <_vfiprintf_r+0x34>
 800afd0:	692b      	ldr	r3, [r5, #16]
 800afd2:	b99b      	cbnz	r3, 800affc <_vfiprintf_r+0x5c>
 800afd4:	4629      	mov	r1, r5
 800afd6:	4630      	mov	r0, r6
 800afd8:	f000 f938 	bl	800b24c <__swsetup_r>
 800afdc:	b170      	cbz	r0, 800affc <_vfiprintf_r+0x5c>
 800afde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afe0:	07dc      	lsls	r4, r3, #31
 800afe2:	d504      	bpl.n	800afee <_vfiprintf_r+0x4e>
 800afe4:	f04f 30ff 	mov.w	r0, #4294967295
 800afe8:	b01d      	add	sp, #116	@ 0x74
 800afea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afee:	89ab      	ldrh	r3, [r5, #12]
 800aff0:	0598      	lsls	r0, r3, #22
 800aff2:	d4f7      	bmi.n	800afe4 <_vfiprintf_r+0x44>
 800aff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aff6:	f7fd fd11 	bl	8008a1c <__retarget_lock_release_recursive>
 800affa:	e7f3      	b.n	800afe4 <_vfiprintf_r+0x44>
 800affc:	2300      	movs	r3, #0
 800affe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b000:	2320      	movs	r3, #32
 800b002:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b006:	f8cd 800c 	str.w	r8, [sp, #12]
 800b00a:	2330      	movs	r3, #48	@ 0x30
 800b00c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b1bc <_vfiprintf_r+0x21c>
 800b010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b014:	f04f 0901 	mov.w	r9, #1
 800b018:	4623      	mov	r3, r4
 800b01a:	469a      	mov	sl, r3
 800b01c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b020:	b10a      	cbz	r2, 800b026 <_vfiprintf_r+0x86>
 800b022:	2a25      	cmp	r2, #37	@ 0x25
 800b024:	d1f9      	bne.n	800b01a <_vfiprintf_r+0x7a>
 800b026:	ebba 0b04 	subs.w	fp, sl, r4
 800b02a:	d00b      	beq.n	800b044 <_vfiprintf_r+0xa4>
 800b02c:	465b      	mov	r3, fp
 800b02e:	4622      	mov	r2, r4
 800b030:	4629      	mov	r1, r5
 800b032:	4630      	mov	r0, r6
 800b034:	f7ff ffa2 	bl	800af7c <__sfputs_r>
 800b038:	3001      	adds	r0, #1
 800b03a:	f000 80a7 	beq.w	800b18c <_vfiprintf_r+0x1ec>
 800b03e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b040:	445a      	add	r2, fp
 800b042:	9209      	str	r2, [sp, #36]	@ 0x24
 800b044:	f89a 3000 	ldrb.w	r3, [sl]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f000 809f 	beq.w	800b18c <_vfiprintf_r+0x1ec>
 800b04e:	2300      	movs	r3, #0
 800b050:	f04f 32ff 	mov.w	r2, #4294967295
 800b054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b058:	f10a 0a01 	add.w	sl, sl, #1
 800b05c:	9304      	str	r3, [sp, #16]
 800b05e:	9307      	str	r3, [sp, #28]
 800b060:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b064:	931a      	str	r3, [sp, #104]	@ 0x68
 800b066:	4654      	mov	r4, sl
 800b068:	2205      	movs	r2, #5
 800b06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b06e:	4853      	ldr	r0, [pc, #332]	@ (800b1bc <_vfiprintf_r+0x21c>)
 800b070:	f7f5 f8ae 	bl	80001d0 <memchr>
 800b074:	9a04      	ldr	r2, [sp, #16]
 800b076:	b9d8      	cbnz	r0, 800b0b0 <_vfiprintf_r+0x110>
 800b078:	06d1      	lsls	r1, r2, #27
 800b07a:	bf44      	itt	mi
 800b07c:	2320      	movmi	r3, #32
 800b07e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b082:	0713      	lsls	r3, r2, #28
 800b084:	bf44      	itt	mi
 800b086:	232b      	movmi	r3, #43	@ 0x2b
 800b088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b08c:	f89a 3000 	ldrb.w	r3, [sl]
 800b090:	2b2a      	cmp	r3, #42	@ 0x2a
 800b092:	d015      	beq.n	800b0c0 <_vfiprintf_r+0x120>
 800b094:	9a07      	ldr	r2, [sp, #28]
 800b096:	4654      	mov	r4, sl
 800b098:	2000      	movs	r0, #0
 800b09a:	f04f 0c0a 	mov.w	ip, #10
 800b09e:	4621      	mov	r1, r4
 800b0a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0a4:	3b30      	subs	r3, #48	@ 0x30
 800b0a6:	2b09      	cmp	r3, #9
 800b0a8:	d94b      	bls.n	800b142 <_vfiprintf_r+0x1a2>
 800b0aa:	b1b0      	cbz	r0, 800b0da <_vfiprintf_r+0x13a>
 800b0ac:	9207      	str	r2, [sp, #28]
 800b0ae:	e014      	b.n	800b0da <_vfiprintf_r+0x13a>
 800b0b0:	eba0 0308 	sub.w	r3, r0, r8
 800b0b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	9304      	str	r3, [sp, #16]
 800b0bc:	46a2      	mov	sl, r4
 800b0be:	e7d2      	b.n	800b066 <_vfiprintf_r+0xc6>
 800b0c0:	9b03      	ldr	r3, [sp, #12]
 800b0c2:	1d19      	adds	r1, r3, #4
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	9103      	str	r1, [sp, #12]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	bfbb      	ittet	lt
 800b0cc:	425b      	neglt	r3, r3
 800b0ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b0d2:	9307      	strge	r3, [sp, #28]
 800b0d4:	9307      	strlt	r3, [sp, #28]
 800b0d6:	bfb8      	it	lt
 800b0d8:	9204      	strlt	r2, [sp, #16]
 800b0da:	7823      	ldrb	r3, [r4, #0]
 800b0dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0de:	d10a      	bne.n	800b0f6 <_vfiprintf_r+0x156>
 800b0e0:	7863      	ldrb	r3, [r4, #1]
 800b0e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0e4:	d132      	bne.n	800b14c <_vfiprintf_r+0x1ac>
 800b0e6:	9b03      	ldr	r3, [sp, #12]
 800b0e8:	1d1a      	adds	r2, r3, #4
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	9203      	str	r2, [sp, #12]
 800b0ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0f2:	3402      	adds	r4, #2
 800b0f4:	9305      	str	r3, [sp, #20]
 800b0f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b1cc <_vfiprintf_r+0x22c>
 800b0fa:	7821      	ldrb	r1, [r4, #0]
 800b0fc:	2203      	movs	r2, #3
 800b0fe:	4650      	mov	r0, sl
 800b100:	f7f5 f866 	bl	80001d0 <memchr>
 800b104:	b138      	cbz	r0, 800b116 <_vfiprintf_r+0x176>
 800b106:	9b04      	ldr	r3, [sp, #16]
 800b108:	eba0 000a 	sub.w	r0, r0, sl
 800b10c:	2240      	movs	r2, #64	@ 0x40
 800b10e:	4082      	lsls	r2, r0
 800b110:	4313      	orrs	r3, r2
 800b112:	3401      	adds	r4, #1
 800b114:	9304      	str	r3, [sp, #16]
 800b116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11a:	4829      	ldr	r0, [pc, #164]	@ (800b1c0 <_vfiprintf_r+0x220>)
 800b11c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b120:	2206      	movs	r2, #6
 800b122:	f7f5 f855 	bl	80001d0 <memchr>
 800b126:	2800      	cmp	r0, #0
 800b128:	d03f      	beq.n	800b1aa <_vfiprintf_r+0x20a>
 800b12a:	4b26      	ldr	r3, [pc, #152]	@ (800b1c4 <_vfiprintf_r+0x224>)
 800b12c:	bb1b      	cbnz	r3, 800b176 <_vfiprintf_r+0x1d6>
 800b12e:	9b03      	ldr	r3, [sp, #12]
 800b130:	3307      	adds	r3, #7
 800b132:	f023 0307 	bic.w	r3, r3, #7
 800b136:	3308      	adds	r3, #8
 800b138:	9303      	str	r3, [sp, #12]
 800b13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b13c:	443b      	add	r3, r7
 800b13e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b140:	e76a      	b.n	800b018 <_vfiprintf_r+0x78>
 800b142:	fb0c 3202 	mla	r2, ip, r2, r3
 800b146:	460c      	mov	r4, r1
 800b148:	2001      	movs	r0, #1
 800b14a:	e7a8      	b.n	800b09e <_vfiprintf_r+0xfe>
 800b14c:	2300      	movs	r3, #0
 800b14e:	3401      	adds	r4, #1
 800b150:	9305      	str	r3, [sp, #20]
 800b152:	4619      	mov	r1, r3
 800b154:	f04f 0c0a 	mov.w	ip, #10
 800b158:	4620      	mov	r0, r4
 800b15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b15e:	3a30      	subs	r2, #48	@ 0x30
 800b160:	2a09      	cmp	r2, #9
 800b162:	d903      	bls.n	800b16c <_vfiprintf_r+0x1cc>
 800b164:	2b00      	cmp	r3, #0
 800b166:	d0c6      	beq.n	800b0f6 <_vfiprintf_r+0x156>
 800b168:	9105      	str	r1, [sp, #20]
 800b16a:	e7c4      	b.n	800b0f6 <_vfiprintf_r+0x156>
 800b16c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b170:	4604      	mov	r4, r0
 800b172:	2301      	movs	r3, #1
 800b174:	e7f0      	b.n	800b158 <_vfiprintf_r+0x1b8>
 800b176:	ab03      	add	r3, sp, #12
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	462a      	mov	r2, r5
 800b17c:	4b12      	ldr	r3, [pc, #72]	@ (800b1c8 <_vfiprintf_r+0x228>)
 800b17e:	a904      	add	r1, sp, #16
 800b180:	4630      	mov	r0, r6
 800b182:	f7fc fc4b 	bl	8007a1c <_printf_float>
 800b186:	4607      	mov	r7, r0
 800b188:	1c78      	adds	r0, r7, #1
 800b18a:	d1d6      	bne.n	800b13a <_vfiprintf_r+0x19a>
 800b18c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b18e:	07d9      	lsls	r1, r3, #31
 800b190:	d405      	bmi.n	800b19e <_vfiprintf_r+0x1fe>
 800b192:	89ab      	ldrh	r3, [r5, #12]
 800b194:	059a      	lsls	r2, r3, #22
 800b196:	d402      	bmi.n	800b19e <_vfiprintf_r+0x1fe>
 800b198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b19a:	f7fd fc3f 	bl	8008a1c <__retarget_lock_release_recursive>
 800b19e:	89ab      	ldrh	r3, [r5, #12]
 800b1a0:	065b      	lsls	r3, r3, #25
 800b1a2:	f53f af1f 	bmi.w	800afe4 <_vfiprintf_r+0x44>
 800b1a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1a8:	e71e      	b.n	800afe8 <_vfiprintf_r+0x48>
 800b1aa:	ab03      	add	r3, sp, #12
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	462a      	mov	r2, r5
 800b1b0:	4b05      	ldr	r3, [pc, #20]	@ (800b1c8 <_vfiprintf_r+0x228>)
 800b1b2:	a904      	add	r1, sp, #16
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f7fc fec9 	bl	8007f4c <_printf_i>
 800b1ba:	e7e4      	b.n	800b186 <_vfiprintf_r+0x1e6>
 800b1bc:	0800d961 	.word	0x0800d961
 800b1c0:	0800d96b 	.word	0x0800d96b
 800b1c4:	08007a1d 	.word	0x08007a1d
 800b1c8:	0800af7d 	.word	0x0800af7d
 800b1cc:	0800d967 	.word	0x0800d967

0800b1d0 <__swbuf_r>:
 800b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d2:	460e      	mov	r6, r1
 800b1d4:	4614      	mov	r4, r2
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	b118      	cbz	r0, 800b1e2 <__swbuf_r+0x12>
 800b1da:	6a03      	ldr	r3, [r0, #32]
 800b1dc:	b90b      	cbnz	r3, 800b1e2 <__swbuf_r+0x12>
 800b1de:	f7fd fa75 	bl	80086cc <__sinit>
 800b1e2:	69a3      	ldr	r3, [r4, #24]
 800b1e4:	60a3      	str	r3, [r4, #8]
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	071a      	lsls	r2, r3, #28
 800b1ea:	d501      	bpl.n	800b1f0 <__swbuf_r+0x20>
 800b1ec:	6923      	ldr	r3, [r4, #16]
 800b1ee:	b943      	cbnz	r3, 800b202 <__swbuf_r+0x32>
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f000 f82a 	bl	800b24c <__swsetup_r>
 800b1f8:	b118      	cbz	r0, 800b202 <__swbuf_r+0x32>
 800b1fa:	f04f 37ff 	mov.w	r7, #4294967295
 800b1fe:	4638      	mov	r0, r7
 800b200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	6922      	ldr	r2, [r4, #16]
 800b206:	1a98      	subs	r0, r3, r2
 800b208:	6963      	ldr	r3, [r4, #20]
 800b20a:	b2f6      	uxtb	r6, r6
 800b20c:	4283      	cmp	r3, r0
 800b20e:	4637      	mov	r7, r6
 800b210:	dc05      	bgt.n	800b21e <__swbuf_r+0x4e>
 800b212:	4621      	mov	r1, r4
 800b214:	4628      	mov	r0, r5
 800b216:	f7ff fded 	bl	800adf4 <_fflush_r>
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d1ed      	bne.n	800b1fa <__swbuf_r+0x2a>
 800b21e:	68a3      	ldr	r3, [r4, #8]
 800b220:	3b01      	subs	r3, #1
 800b222:	60a3      	str	r3, [r4, #8]
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	6022      	str	r2, [r4, #0]
 800b22a:	701e      	strb	r6, [r3, #0]
 800b22c:	6962      	ldr	r2, [r4, #20]
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	429a      	cmp	r2, r3
 800b232:	d004      	beq.n	800b23e <__swbuf_r+0x6e>
 800b234:	89a3      	ldrh	r3, [r4, #12]
 800b236:	07db      	lsls	r3, r3, #31
 800b238:	d5e1      	bpl.n	800b1fe <__swbuf_r+0x2e>
 800b23a:	2e0a      	cmp	r6, #10
 800b23c:	d1df      	bne.n	800b1fe <__swbuf_r+0x2e>
 800b23e:	4621      	mov	r1, r4
 800b240:	4628      	mov	r0, r5
 800b242:	f7ff fdd7 	bl	800adf4 <_fflush_r>
 800b246:	2800      	cmp	r0, #0
 800b248:	d0d9      	beq.n	800b1fe <__swbuf_r+0x2e>
 800b24a:	e7d6      	b.n	800b1fa <__swbuf_r+0x2a>

0800b24c <__swsetup_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4b29      	ldr	r3, [pc, #164]	@ (800b2f4 <__swsetup_r+0xa8>)
 800b250:	4605      	mov	r5, r0
 800b252:	6818      	ldr	r0, [r3, #0]
 800b254:	460c      	mov	r4, r1
 800b256:	b118      	cbz	r0, 800b260 <__swsetup_r+0x14>
 800b258:	6a03      	ldr	r3, [r0, #32]
 800b25a:	b90b      	cbnz	r3, 800b260 <__swsetup_r+0x14>
 800b25c:	f7fd fa36 	bl	80086cc <__sinit>
 800b260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b264:	0719      	lsls	r1, r3, #28
 800b266:	d422      	bmi.n	800b2ae <__swsetup_r+0x62>
 800b268:	06da      	lsls	r2, r3, #27
 800b26a:	d407      	bmi.n	800b27c <__swsetup_r+0x30>
 800b26c:	2209      	movs	r2, #9
 800b26e:	602a      	str	r2, [r5, #0]
 800b270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b274:	81a3      	strh	r3, [r4, #12]
 800b276:	f04f 30ff 	mov.w	r0, #4294967295
 800b27a:	e033      	b.n	800b2e4 <__swsetup_r+0x98>
 800b27c:	0758      	lsls	r0, r3, #29
 800b27e:	d512      	bpl.n	800b2a6 <__swsetup_r+0x5a>
 800b280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b282:	b141      	cbz	r1, 800b296 <__swsetup_r+0x4a>
 800b284:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b288:	4299      	cmp	r1, r3
 800b28a:	d002      	beq.n	800b292 <__swsetup_r+0x46>
 800b28c:	4628      	mov	r0, r5
 800b28e:	f7fe fa4f 	bl	8009730 <_free_r>
 800b292:	2300      	movs	r3, #0
 800b294:	6363      	str	r3, [r4, #52]	@ 0x34
 800b296:	89a3      	ldrh	r3, [r4, #12]
 800b298:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b29c:	81a3      	strh	r3, [r4, #12]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	6063      	str	r3, [r4, #4]
 800b2a2:	6923      	ldr	r3, [r4, #16]
 800b2a4:	6023      	str	r3, [r4, #0]
 800b2a6:	89a3      	ldrh	r3, [r4, #12]
 800b2a8:	f043 0308 	orr.w	r3, r3, #8
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	6923      	ldr	r3, [r4, #16]
 800b2b0:	b94b      	cbnz	r3, 800b2c6 <__swsetup_r+0x7a>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2bc:	d003      	beq.n	800b2c6 <__swsetup_r+0x7a>
 800b2be:	4621      	mov	r1, r4
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	f000 f88b 	bl	800b3dc <__smakebuf_r>
 800b2c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ca:	f013 0201 	ands.w	r2, r3, #1
 800b2ce:	d00a      	beq.n	800b2e6 <__swsetup_r+0x9a>
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	60a2      	str	r2, [r4, #8]
 800b2d4:	6962      	ldr	r2, [r4, #20]
 800b2d6:	4252      	negs	r2, r2
 800b2d8:	61a2      	str	r2, [r4, #24]
 800b2da:	6922      	ldr	r2, [r4, #16]
 800b2dc:	b942      	cbnz	r2, 800b2f0 <__swsetup_r+0xa4>
 800b2de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b2e2:	d1c5      	bne.n	800b270 <__swsetup_r+0x24>
 800b2e4:	bd38      	pop	{r3, r4, r5, pc}
 800b2e6:	0799      	lsls	r1, r3, #30
 800b2e8:	bf58      	it	pl
 800b2ea:	6962      	ldrpl	r2, [r4, #20]
 800b2ec:	60a2      	str	r2, [r4, #8]
 800b2ee:	e7f4      	b.n	800b2da <__swsetup_r+0x8e>
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	e7f7      	b.n	800b2e4 <__swsetup_r+0x98>
 800b2f4:	20000184 	.word	0x20000184

0800b2f8 <_raise_r>:
 800b2f8:	291f      	cmp	r1, #31
 800b2fa:	b538      	push	{r3, r4, r5, lr}
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	460c      	mov	r4, r1
 800b300:	d904      	bls.n	800b30c <_raise_r+0x14>
 800b302:	2316      	movs	r3, #22
 800b304:	6003      	str	r3, [r0, #0]
 800b306:	f04f 30ff 	mov.w	r0, #4294967295
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b30e:	b112      	cbz	r2, 800b316 <_raise_r+0x1e>
 800b310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b314:	b94b      	cbnz	r3, 800b32a <_raise_r+0x32>
 800b316:	4628      	mov	r0, r5
 800b318:	f000 f830 	bl	800b37c <_getpid_r>
 800b31c:	4622      	mov	r2, r4
 800b31e:	4601      	mov	r1, r0
 800b320:	4628      	mov	r0, r5
 800b322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b326:	f000 b817 	b.w	800b358 <_kill_r>
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d00a      	beq.n	800b344 <_raise_r+0x4c>
 800b32e:	1c59      	adds	r1, r3, #1
 800b330:	d103      	bne.n	800b33a <_raise_r+0x42>
 800b332:	2316      	movs	r3, #22
 800b334:	6003      	str	r3, [r0, #0]
 800b336:	2001      	movs	r0, #1
 800b338:	e7e7      	b.n	800b30a <_raise_r+0x12>
 800b33a:	2100      	movs	r1, #0
 800b33c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b340:	4620      	mov	r0, r4
 800b342:	4798      	blx	r3
 800b344:	2000      	movs	r0, #0
 800b346:	e7e0      	b.n	800b30a <_raise_r+0x12>

0800b348 <raise>:
 800b348:	4b02      	ldr	r3, [pc, #8]	@ (800b354 <raise+0xc>)
 800b34a:	4601      	mov	r1, r0
 800b34c:	6818      	ldr	r0, [r3, #0]
 800b34e:	f7ff bfd3 	b.w	800b2f8 <_raise_r>
 800b352:	bf00      	nop
 800b354:	20000184 	.word	0x20000184

0800b358 <_kill_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	4d07      	ldr	r5, [pc, #28]	@ (800b378 <_kill_r+0x20>)
 800b35c:	2300      	movs	r3, #0
 800b35e:	4604      	mov	r4, r0
 800b360:	4608      	mov	r0, r1
 800b362:	4611      	mov	r1, r2
 800b364:	602b      	str	r3, [r5, #0]
 800b366:	f7f8 f991 	bl	800368c <_kill>
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	d102      	bne.n	800b374 <_kill_r+0x1c>
 800b36e:	682b      	ldr	r3, [r5, #0]
 800b370:	b103      	cbz	r3, 800b374 <_kill_r+0x1c>
 800b372:	6023      	str	r3, [r4, #0]
 800b374:	bd38      	pop	{r3, r4, r5, pc}
 800b376:	bf00      	nop
 800b378:	200006dc 	.word	0x200006dc

0800b37c <_getpid_r>:
 800b37c:	f7f8 b97e 	b.w	800367c <_getpid>

0800b380 <_malloc_usable_size_r>:
 800b380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b384:	1f18      	subs	r0, r3, #4
 800b386:	2b00      	cmp	r3, #0
 800b388:	bfbc      	itt	lt
 800b38a:	580b      	ldrlt	r3, [r1, r0]
 800b38c:	18c0      	addlt	r0, r0, r3
 800b38e:	4770      	bx	lr

0800b390 <__swhatbuf_r>:
 800b390:	b570      	push	{r4, r5, r6, lr}
 800b392:	460c      	mov	r4, r1
 800b394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b398:	2900      	cmp	r1, #0
 800b39a:	b096      	sub	sp, #88	@ 0x58
 800b39c:	4615      	mov	r5, r2
 800b39e:	461e      	mov	r6, r3
 800b3a0:	da0d      	bge.n	800b3be <__swhatbuf_r+0x2e>
 800b3a2:	89a3      	ldrh	r3, [r4, #12]
 800b3a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b3a8:	f04f 0100 	mov.w	r1, #0
 800b3ac:	bf14      	ite	ne
 800b3ae:	2340      	movne	r3, #64	@ 0x40
 800b3b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	6031      	str	r1, [r6, #0]
 800b3b8:	602b      	str	r3, [r5, #0]
 800b3ba:	b016      	add	sp, #88	@ 0x58
 800b3bc:	bd70      	pop	{r4, r5, r6, pc}
 800b3be:	466a      	mov	r2, sp
 800b3c0:	f000 f848 	bl	800b454 <_fstat_r>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	dbec      	blt.n	800b3a2 <__swhatbuf_r+0x12>
 800b3c8:	9901      	ldr	r1, [sp, #4]
 800b3ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b3ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b3d2:	4259      	negs	r1, r3
 800b3d4:	4159      	adcs	r1, r3
 800b3d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3da:	e7eb      	b.n	800b3b4 <__swhatbuf_r+0x24>

0800b3dc <__smakebuf_r>:
 800b3dc:	898b      	ldrh	r3, [r1, #12]
 800b3de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3e0:	079d      	lsls	r5, r3, #30
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	d507      	bpl.n	800b3f8 <__smakebuf_r+0x1c>
 800b3e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	6123      	str	r3, [r4, #16]
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	6163      	str	r3, [r4, #20]
 800b3f4:	b003      	add	sp, #12
 800b3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3f8:	ab01      	add	r3, sp, #4
 800b3fa:	466a      	mov	r2, sp
 800b3fc:	f7ff ffc8 	bl	800b390 <__swhatbuf_r>
 800b400:	9f00      	ldr	r7, [sp, #0]
 800b402:	4605      	mov	r5, r0
 800b404:	4639      	mov	r1, r7
 800b406:	4630      	mov	r0, r6
 800b408:	f7fe fd40 	bl	8009e8c <_malloc_r>
 800b40c:	b948      	cbnz	r0, 800b422 <__smakebuf_r+0x46>
 800b40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b412:	059a      	lsls	r2, r3, #22
 800b414:	d4ee      	bmi.n	800b3f4 <__smakebuf_r+0x18>
 800b416:	f023 0303 	bic.w	r3, r3, #3
 800b41a:	f043 0302 	orr.w	r3, r3, #2
 800b41e:	81a3      	strh	r3, [r4, #12]
 800b420:	e7e2      	b.n	800b3e8 <__smakebuf_r+0xc>
 800b422:	89a3      	ldrh	r3, [r4, #12]
 800b424:	6020      	str	r0, [r4, #0]
 800b426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b42a:	81a3      	strh	r3, [r4, #12]
 800b42c:	9b01      	ldr	r3, [sp, #4]
 800b42e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b432:	b15b      	cbz	r3, 800b44c <__smakebuf_r+0x70>
 800b434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b438:	4630      	mov	r0, r6
 800b43a:	f000 f81d 	bl	800b478 <_isatty_r>
 800b43e:	b128      	cbz	r0, 800b44c <__smakebuf_r+0x70>
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	f023 0303 	bic.w	r3, r3, #3
 800b446:	f043 0301 	orr.w	r3, r3, #1
 800b44a:	81a3      	strh	r3, [r4, #12]
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	431d      	orrs	r5, r3
 800b450:	81a5      	strh	r5, [r4, #12]
 800b452:	e7cf      	b.n	800b3f4 <__smakebuf_r+0x18>

0800b454 <_fstat_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4d07      	ldr	r5, [pc, #28]	@ (800b474 <_fstat_r+0x20>)
 800b458:	2300      	movs	r3, #0
 800b45a:	4604      	mov	r4, r0
 800b45c:	4608      	mov	r0, r1
 800b45e:	4611      	mov	r1, r2
 800b460:	602b      	str	r3, [r5, #0]
 800b462:	f7f8 f973 	bl	800374c <_fstat>
 800b466:	1c43      	adds	r3, r0, #1
 800b468:	d102      	bne.n	800b470 <_fstat_r+0x1c>
 800b46a:	682b      	ldr	r3, [r5, #0]
 800b46c:	b103      	cbz	r3, 800b470 <_fstat_r+0x1c>
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	bd38      	pop	{r3, r4, r5, pc}
 800b472:	bf00      	nop
 800b474:	200006dc 	.word	0x200006dc

0800b478 <_isatty_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	4d06      	ldr	r5, [pc, #24]	@ (800b494 <_isatty_r+0x1c>)
 800b47c:	2300      	movs	r3, #0
 800b47e:	4604      	mov	r4, r0
 800b480:	4608      	mov	r0, r1
 800b482:	602b      	str	r3, [r5, #0]
 800b484:	f7f8 f972 	bl	800376c <_isatty>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_isatty_r+0x1a>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_isatty_r+0x1a>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	200006dc 	.word	0x200006dc

0800b498 <cosh>:
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	ed2d 8b02 	vpush	{d8}
 800b49e:	ec55 4b10 	vmov	r4, r5, d0
 800b4a2:	f000 fbcf 	bl	800bc44 <__ieee754_cosh>
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	462b      	mov	r3, r5
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	eeb0 8a40 	vmov.f32	s16, s0
 800b4b2:	eef0 8a60 	vmov.f32	s17, s1
 800b4b6:	f7f5 fb39 	bl	8000b2c <__aeabi_dcmpun>
 800b4ba:	b988      	cbnz	r0, 800b4e0 <cosh+0x48>
 800b4bc:	ec45 4b10 	vmov	d0, r4, r5
 800b4c0:	f000 f916 	bl	800b6f0 <fabs>
 800b4c4:	a30c      	add	r3, pc, #48	@ (adr r3, 800b4f8 <cosh+0x60>)
 800b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ca:	ec51 0b10 	vmov	r0, r1, d0
 800b4ce:	f7f5 fb23 	bl	8000b18 <__aeabi_dcmpgt>
 800b4d2:	b128      	cbz	r0, 800b4e0 <cosh+0x48>
 800b4d4:	f7fd fa76 	bl	80089c4 <__errno>
 800b4d8:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800b4f0 <cosh+0x58>
 800b4dc:	2322      	movs	r3, #34	@ 0x22
 800b4de:	6003      	str	r3, [r0, #0]
 800b4e0:	eeb0 0a48 	vmov.f32	s0, s16
 800b4e4:	eef0 0a68 	vmov.f32	s1, s17
 800b4e8:	ecbd 8b02 	vpop	{d8}
 800b4ec:	bd38      	pop	{r3, r4, r5, pc}
 800b4ee:	bf00      	nop
 800b4f0:	00000000 	.word	0x00000000
 800b4f4:	7ff00000 	.word	0x7ff00000
 800b4f8:	8fb9f87d 	.word	0x8fb9f87d
 800b4fc:	408633ce 	.word	0x408633ce

0800b500 <exp>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	ed2d 8b02 	vpush	{d8}
 800b506:	ec55 4b10 	vmov	r4, r5, d0
 800b50a:	f000 fc3d 	bl	800bd88 <__ieee754_exp>
 800b50e:	eeb0 8a40 	vmov.f32	s16, s0
 800b512:	eef0 8a60 	vmov.f32	s17, s1
 800b516:	ec45 4b10 	vmov	d0, r4, r5
 800b51a:	f000 f8f1 	bl	800b700 <finite>
 800b51e:	b168      	cbz	r0, 800b53c <exp+0x3c>
 800b520:	a317      	add	r3, pc, #92	@ (adr r3, 800b580 <exp+0x80>)
 800b522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b526:	4620      	mov	r0, r4
 800b528:	4629      	mov	r1, r5
 800b52a:	f7f5 faf5 	bl	8000b18 <__aeabi_dcmpgt>
 800b52e:	b160      	cbz	r0, 800b54a <exp+0x4a>
 800b530:	f7fd fa48 	bl	80089c4 <__errno>
 800b534:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 800b570 <exp+0x70>
 800b538:	2322      	movs	r3, #34	@ 0x22
 800b53a:	6003      	str	r3, [r0, #0]
 800b53c:	eeb0 0a48 	vmov.f32	s0, s16
 800b540:	eef0 0a68 	vmov.f32	s1, s17
 800b544:	ecbd 8b02 	vpop	{d8}
 800b548:	bd38      	pop	{r3, r4, r5, pc}
 800b54a:	a30f      	add	r3, pc, #60	@ (adr r3, 800b588 <exp+0x88>)
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	4620      	mov	r0, r4
 800b552:	4629      	mov	r1, r5
 800b554:	f7f5 fac2 	bl	8000adc <__aeabi_dcmplt>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d0ef      	beq.n	800b53c <exp+0x3c>
 800b55c:	f7fd fa32 	bl	80089c4 <__errno>
 800b560:	2322      	movs	r3, #34	@ 0x22
 800b562:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800b578 <exp+0x78>
 800b566:	6003      	str	r3, [r0, #0]
 800b568:	e7e8      	b.n	800b53c <exp+0x3c>
 800b56a:	bf00      	nop
 800b56c:	f3af 8000 	nop.w
 800b570:	00000000 	.word	0x00000000
 800b574:	7ff00000 	.word	0x7ff00000
	...
 800b580:	fefa39ef 	.word	0xfefa39ef
 800b584:	40862e42 	.word	0x40862e42
 800b588:	d52d3051 	.word	0xd52d3051
 800b58c:	c0874910 	.word	0xc0874910

0800b590 <fmod>:
 800b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b592:	ed2d 8b02 	vpush	{d8}
 800b596:	ec57 6b10 	vmov	r6, r7, d0
 800b59a:	ec55 4b11 	vmov	r4, r5, d1
 800b59e:	f000 fd6d 	bl	800c07c <__ieee754_fmod>
 800b5a2:	4622      	mov	r2, r4
 800b5a4:	462b      	mov	r3, r5
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	eeb0 8a40 	vmov.f32	s16, s0
 800b5ae:	eef0 8a60 	vmov.f32	s17, s1
 800b5b2:	f7f5 fabb 	bl	8000b2c <__aeabi_dcmpun>
 800b5b6:	b990      	cbnz	r0, 800b5de <fmod+0x4e>
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	4620      	mov	r0, r4
 800b5be:	4629      	mov	r1, r5
 800b5c0:	f7f5 fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5c4:	b158      	cbz	r0, 800b5de <fmod+0x4e>
 800b5c6:	f7fd f9fd 	bl	80089c4 <__errno>
 800b5ca:	2321      	movs	r3, #33	@ 0x21
 800b5cc:	6003      	str	r3, [r0, #0]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4610      	mov	r0, r2
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	f7f5 f939 	bl	800084c <__aeabi_ddiv>
 800b5da:	ec41 0b18 	vmov	d8, r0, r1
 800b5de:	eeb0 0a48 	vmov.f32	s0, s16
 800b5e2:	eef0 0a68 	vmov.f32	s1, s17
 800b5e6:	ecbd 8b02 	vpop	{d8}
 800b5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5ec <sqrt>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	ed2d 8b02 	vpush	{d8}
 800b5f2:	ec55 4b10 	vmov	r4, r5, d0
 800b5f6:	f000 f88f 	bl	800b718 <__ieee754_sqrt>
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	462b      	mov	r3, r5
 800b5fe:	4620      	mov	r0, r4
 800b600:	4629      	mov	r1, r5
 800b602:	eeb0 8a40 	vmov.f32	s16, s0
 800b606:	eef0 8a60 	vmov.f32	s17, s1
 800b60a:	f7f5 fa8f 	bl	8000b2c <__aeabi_dcmpun>
 800b60e:	b990      	cbnz	r0, 800b636 <sqrt+0x4a>
 800b610:	2200      	movs	r2, #0
 800b612:	2300      	movs	r3, #0
 800b614:	4620      	mov	r0, r4
 800b616:	4629      	mov	r1, r5
 800b618:	f7f5 fa60 	bl	8000adc <__aeabi_dcmplt>
 800b61c:	b158      	cbz	r0, 800b636 <sqrt+0x4a>
 800b61e:	f7fd f9d1 	bl	80089c4 <__errno>
 800b622:	2321      	movs	r3, #33	@ 0x21
 800b624:	6003      	str	r3, [r0, #0]
 800b626:	2200      	movs	r2, #0
 800b628:	2300      	movs	r3, #0
 800b62a:	4610      	mov	r0, r2
 800b62c:	4619      	mov	r1, r3
 800b62e:	f7f5 f90d 	bl	800084c <__aeabi_ddiv>
 800b632:	ec41 0b18 	vmov	d8, r0, r1
 800b636:	eeb0 0a48 	vmov.f32	s0, s16
 800b63a:	eef0 0a68 	vmov.f32	s1, s17
 800b63e:	ecbd 8b02 	vpop	{d8}
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	0000      	movs	r0, r0
	...

0800b648 <cos>:
 800b648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b64a:	ec53 2b10 	vmov	r2, r3, d0
 800b64e:	4826      	ldr	r0, [pc, #152]	@ (800b6e8 <cos+0xa0>)
 800b650:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b654:	4281      	cmp	r1, r0
 800b656:	d806      	bhi.n	800b666 <cos+0x1e>
 800b658:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b6e0 <cos+0x98>
 800b65c:	b005      	add	sp, #20
 800b65e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b662:	f000 b96d 	b.w	800b940 <__kernel_cos>
 800b666:	4821      	ldr	r0, [pc, #132]	@ (800b6ec <cos+0xa4>)
 800b668:	4281      	cmp	r1, r0
 800b66a:	d908      	bls.n	800b67e <cos+0x36>
 800b66c:	4610      	mov	r0, r2
 800b66e:	4619      	mov	r1, r3
 800b670:	f7f4 fe0a 	bl	8000288 <__aeabi_dsub>
 800b674:	ec41 0b10 	vmov	d0, r0, r1
 800b678:	b005      	add	sp, #20
 800b67a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b67e:	4668      	mov	r0, sp
 800b680:	f000 fe06 	bl	800c290 <__ieee754_rem_pio2>
 800b684:	f000 0003 	and.w	r0, r0, #3
 800b688:	2801      	cmp	r0, #1
 800b68a:	d00b      	beq.n	800b6a4 <cos+0x5c>
 800b68c:	2802      	cmp	r0, #2
 800b68e:	d015      	beq.n	800b6bc <cos+0x74>
 800b690:	b9d8      	cbnz	r0, 800b6ca <cos+0x82>
 800b692:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b696:	ed9d 0b00 	vldr	d0, [sp]
 800b69a:	f000 f951 	bl	800b940 <__kernel_cos>
 800b69e:	ec51 0b10 	vmov	r0, r1, d0
 800b6a2:	e7e7      	b.n	800b674 <cos+0x2c>
 800b6a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6a8:	ed9d 0b00 	vldr	d0, [sp]
 800b6ac:	f000 fa10 	bl	800bad0 <__kernel_sin>
 800b6b0:	ec53 2b10 	vmov	r2, r3, d0
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b6ba:	e7db      	b.n	800b674 <cos+0x2c>
 800b6bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6c0:	ed9d 0b00 	vldr	d0, [sp]
 800b6c4:	f000 f93c 	bl	800b940 <__kernel_cos>
 800b6c8:	e7f2      	b.n	800b6b0 <cos+0x68>
 800b6ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6ce:	ed9d 0b00 	vldr	d0, [sp]
 800b6d2:	2001      	movs	r0, #1
 800b6d4:	f000 f9fc 	bl	800bad0 <__kernel_sin>
 800b6d8:	e7e1      	b.n	800b69e <cos+0x56>
 800b6da:	bf00      	nop
 800b6dc:	f3af 8000 	nop.w
	...
 800b6e8:	3fe921fb 	.word	0x3fe921fb
 800b6ec:	7fefffff 	.word	0x7fefffff

0800b6f0 <fabs>:
 800b6f0:	ec51 0b10 	vmov	r0, r1, d0
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b6fa:	ec43 2b10 	vmov	d0, r2, r3
 800b6fe:	4770      	bx	lr

0800b700 <finite>:
 800b700:	b082      	sub	sp, #8
 800b702:	ed8d 0b00 	vstr	d0, [sp]
 800b706:	9801      	ldr	r0, [sp, #4]
 800b708:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b70c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b710:	0fc0      	lsrs	r0, r0, #31
 800b712:	b002      	add	sp, #8
 800b714:	4770      	bx	lr
	...

0800b718 <__ieee754_sqrt>:
 800b718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	4a68      	ldr	r2, [pc, #416]	@ (800b8c0 <__ieee754_sqrt+0x1a8>)
 800b71e:	ec55 4b10 	vmov	r4, r5, d0
 800b722:	43aa      	bics	r2, r5
 800b724:	462b      	mov	r3, r5
 800b726:	4621      	mov	r1, r4
 800b728:	d110      	bne.n	800b74c <__ieee754_sqrt+0x34>
 800b72a:	4622      	mov	r2, r4
 800b72c:	4620      	mov	r0, r4
 800b72e:	4629      	mov	r1, r5
 800b730:	f7f4 ff62 	bl	80005f8 <__aeabi_dmul>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4620      	mov	r0, r4
 800b73a:	4629      	mov	r1, r5
 800b73c:	f7f4 fda6 	bl	800028c <__adddf3>
 800b740:	4604      	mov	r4, r0
 800b742:	460d      	mov	r5, r1
 800b744:	ec45 4b10 	vmov	d0, r4, r5
 800b748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74c:	2d00      	cmp	r5, #0
 800b74e:	dc0e      	bgt.n	800b76e <__ieee754_sqrt+0x56>
 800b750:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b754:	4322      	orrs	r2, r4
 800b756:	d0f5      	beq.n	800b744 <__ieee754_sqrt+0x2c>
 800b758:	b19d      	cbz	r5, 800b782 <__ieee754_sqrt+0x6a>
 800b75a:	4622      	mov	r2, r4
 800b75c:	4620      	mov	r0, r4
 800b75e:	4629      	mov	r1, r5
 800b760:	f7f4 fd92 	bl	8000288 <__aeabi_dsub>
 800b764:	4602      	mov	r2, r0
 800b766:	460b      	mov	r3, r1
 800b768:	f7f5 f870 	bl	800084c <__aeabi_ddiv>
 800b76c:	e7e8      	b.n	800b740 <__ieee754_sqrt+0x28>
 800b76e:	152a      	asrs	r2, r5, #20
 800b770:	d115      	bne.n	800b79e <__ieee754_sqrt+0x86>
 800b772:	2000      	movs	r0, #0
 800b774:	e009      	b.n	800b78a <__ieee754_sqrt+0x72>
 800b776:	0acb      	lsrs	r3, r1, #11
 800b778:	3a15      	subs	r2, #21
 800b77a:	0549      	lsls	r1, r1, #21
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d0fa      	beq.n	800b776 <__ieee754_sqrt+0x5e>
 800b780:	e7f7      	b.n	800b772 <__ieee754_sqrt+0x5a>
 800b782:	462a      	mov	r2, r5
 800b784:	e7fa      	b.n	800b77c <__ieee754_sqrt+0x64>
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	3001      	adds	r0, #1
 800b78a:	02dc      	lsls	r4, r3, #11
 800b78c:	d5fb      	bpl.n	800b786 <__ieee754_sqrt+0x6e>
 800b78e:	1e44      	subs	r4, r0, #1
 800b790:	1b12      	subs	r2, r2, r4
 800b792:	f1c0 0420 	rsb	r4, r0, #32
 800b796:	fa21 f404 	lsr.w	r4, r1, r4
 800b79a:	4323      	orrs	r3, r4
 800b79c:	4081      	lsls	r1, r0
 800b79e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7a2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b7a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b7aa:	07d2      	lsls	r2, r2, #31
 800b7ac:	bf5c      	itt	pl
 800b7ae:	005b      	lslpl	r3, r3, #1
 800b7b0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b7b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7b8:	bf58      	it	pl
 800b7ba:	0049      	lslpl	r1, r1, #1
 800b7bc:	2600      	movs	r6, #0
 800b7be:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b7c2:	106d      	asrs	r5, r5, #1
 800b7c4:	0049      	lsls	r1, r1, #1
 800b7c6:	2016      	movs	r0, #22
 800b7c8:	4632      	mov	r2, r6
 800b7ca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b7ce:	1917      	adds	r7, r2, r4
 800b7d0:	429f      	cmp	r7, r3
 800b7d2:	bfde      	ittt	le
 800b7d4:	193a      	addle	r2, r7, r4
 800b7d6:	1bdb      	suble	r3, r3, r7
 800b7d8:	1936      	addle	r6, r6, r4
 800b7da:	0fcf      	lsrs	r7, r1, #31
 800b7dc:	3801      	subs	r0, #1
 800b7de:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b7e2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b7e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b7ea:	d1f0      	bne.n	800b7ce <__ieee754_sqrt+0xb6>
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	2720      	movs	r7, #32
 800b7f0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	eb00 0e0c 	add.w	lr, r0, ip
 800b7fa:	db02      	blt.n	800b802 <__ieee754_sqrt+0xea>
 800b7fc:	d113      	bne.n	800b826 <__ieee754_sqrt+0x10e>
 800b7fe:	458e      	cmp	lr, r1
 800b800:	d811      	bhi.n	800b826 <__ieee754_sqrt+0x10e>
 800b802:	f1be 0f00 	cmp.w	lr, #0
 800b806:	eb0e 000c 	add.w	r0, lr, ip
 800b80a:	da42      	bge.n	800b892 <__ieee754_sqrt+0x17a>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	db40      	blt.n	800b892 <__ieee754_sqrt+0x17a>
 800b810:	f102 0801 	add.w	r8, r2, #1
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	458e      	cmp	lr, r1
 800b818:	bf88      	it	hi
 800b81a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b81e:	eba1 010e 	sub.w	r1, r1, lr
 800b822:	4464      	add	r4, ip
 800b824:	4642      	mov	r2, r8
 800b826:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b82a:	3f01      	subs	r7, #1
 800b82c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b830:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b834:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b838:	d1dc      	bne.n	800b7f4 <__ieee754_sqrt+0xdc>
 800b83a:	4319      	orrs	r1, r3
 800b83c:	d01b      	beq.n	800b876 <__ieee754_sqrt+0x15e>
 800b83e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b8c4 <__ieee754_sqrt+0x1ac>
 800b842:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b8c8 <__ieee754_sqrt+0x1b0>
 800b846:	e9da 0100 	ldrd	r0, r1, [sl]
 800b84a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b84e:	f7f4 fd1b 	bl	8000288 <__aeabi_dsub>
 800b852:	e9da 8900 	ldrd	r8, r9, [sl]
 800b856:	4602      	mov	r2, r0
 800b858:	460b      	mov	r3, r1
 800b85a:	4640      	mov	r0, r8
 800b85c:	4649      	mov	r1, r9
 800b85e:	f7f5 f947 	bl	8000af0 <__aeabi_dcmple>
 800b862:	b140      	cbz	r0, 800b876 <__ieee754_sqrt+0x15e>
 800b864:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b868:	e9da 0100 	ldrd	r0, r1, [sl]
 800b86c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b870:	d111      	bne.n	800b896 <__ieee754_sqrt+0x17e>
 800b872:	3601      	adds	r6, #1
 800b874:	463c      	mov	r4, r7
 800b876:	1072      	asrs	r2, r6, #1
 800b878:	0863      	lsrs	r3, r4, #1
 800b87a:	07f1      	lsls	r1, r6, #31
 800b87c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b880:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b884:	bf48      	it	mi
 800b886:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b88a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b88e:	4618      	mov	r0, r3
 800b890:	e756      	b.n	800b740 <__ieee754_sqrt+0x28>
 800b892:	4690      	mov	r8, r2
 800b894:	e7be      	b.n	800b814 <__ieee754_sqrt+0xfc>
 800b896:	f7f4 fcf9 	bl	800028c <__adddf3>
 800b89a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4640      	mov	r0, r8
 800b8a4:	4649      	mov	r1, r9
 800b8a6:	f7f5 f919 	bl	8000adc <__aeabi_dcmplt>
 800b8aa:	b120      	cbz	r0, 800b8b6 <__ieee754_sqrt+0x19e>
 800b8ac:	1ca0      	adds	r0, r4, #2
 800b8ae:	bf08      	it	eq
 800b8b0:	3601      	addeq	r6, #1
 800b8b2:	3402      	adds	r4, #2
 800b8b4:	e7df      	b.n	800b876 <__ieee754_sqrt+0x15e>
 800b8b6:	1c63      	adds	r3, r4, #1
 800b8b8:	f023 0401 	bic.w	r4, r3, #1
 800b8bc:	e7db      	b.n	800b876 <__ieee754_sqrt+0x15e>
 800b8be:	bf00      	nop
 800b8c0:	7ff00000 	.word	0x7ff00000
 800b8c4:	200001e0 	.word	0x200001e0
 800b8c8:	200001d8 	.word	0x200001d8

0800b8cc <trunc>:
 800b8cc:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800b8d0:	ec5c bb10 	vmov	fp, ip, d0
 800b8d4:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800b8d8:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800b8dc:	2913      	cmp	r1, #19
 800b8de:	4664      	mov	r4, ip
 800b8e0:	dc14      	bgt.n	800b90c <trunc+0x40>
 800b8e2:	2900      	cmp	r1, #0
 800b8e4:	bfa4      	itt	ge
 800b8e6:	4b15      	ldrge	r3, [pc, #84]	@ (800b93c <trunc+0x70>)
 800b8e8:	fa43 f101 	asrge.w	r1, r3, r1
 800b8ec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800b8f0:	bfad      	iteet	ge
 800b8f2:	4021      	andge	r1, r4
 800b8f4:	2200      	movlt	r2, #0
 800b8f6:	4603      	movlt	r3, r0
 800b8f8:	2200      	movge	r2, #0
 800b8fa:	bfa8      	it	ge
 800b8fc:	ea41 0300 	orrge.w	r3, r1, r0
 800b900:	4693      	mov	fp, r2
 800b902:	469c      	mov	ip, r3
 800b904:	ec4c bb10 	vmov	d0, fp, ip
 800b908:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800b90c:	2933      	cmp	r1, #51	@ 0x33
 800b90e:	dd0b      	ble.n	800b928 <trunc+0x5c>
 800b910:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b914:	d1f6      	bne.n	800b904 <trunc+0x38>
 800b916:	465a      	mov	r2, fp
 800b918:	4663      	mov	r3, ip
 800b91a:	4658      	mov	r0, fp
 800b91c:	4621      	mov	r1, r4
 800b91e:	f7f4 fcb5 	bl	800028c <__adddf3>
 800b922:	4683      	mov	fp, r0
 800b924:	468c      	mov	ip, r1
 800b926:	e7ed      	b.n	800b904 <trunc+0x38>
 800b928:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 800b92c:	f04f 33ff 	mov.w	r3, #4294967295
 800b930:	40c3      	lsrs	r3, r0
 800b932:	ea2b 0603 	bic.w	r6, fp, r3
 800b936:	46b3      	mov	fp, r6
 800b938:	46a4      	mov	ip, r4
 800b93a:	e7e3      	b.n	800b904 <trunc+0x38>
 800b93c:	fff00000 	.word	0xfff00000

0800b940 <__kernel_cos>:
 800b940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b944:	ec57 6b10 	vmov	r6, r7, d0
 800b948:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b94c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b950:	ed8d 1b00 	vstr	d1, [sp]
 800b954:	d206      	bcs.n	800b964 <__kernel_cos+0x24>
 800b956:	4630      	mov	r0, r6
 800b958:	4639      	mov	r1, r7
 800b95a:	f7f5 f8fd 	bl	8000b58 <__aeabi_d2iz>
 800b95e:	2800      	cmp	r0, #0
 800b960:	f000 8088 	beq.w	800ba74 <__kernel_cos+0x134>
 800b964:	4632      	mov	r2, r6
 800b966:	463b      	mov	r3, r7
 800b968:	4630      	mov	r0, r6
 800b96a:	4639      	mov	r1, r7
 800b96c:	f7f4 fe44 	bl	80005f8 <__aeabi_dmul>
 800b970:	4b51      	ldr	r3, [pc, #324]	@ (800bab8 <__kernel_cos+0x178>)
 800b972:	2200      	movs	r2, #0
 800b974:	4604      	mov	r4, r0
 800b976:	460d      	mov	r5, r1
 800b978:	f7f4 fe3e 	bl	80005f8 <__aeabi_dmul>
 800b97c:	a340      	add	r3, pc, #256	@ (adr r3, 800ba80 <__kernel_cos+0x140>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	4682      	mov	sl, r0
 800b984:	468b      	mov	fp, r1
 800b986:	4620      	mov	r0, r4
 800b988:	4629      	mov	r1, r5
 800b98a:	f7f4 fe35 	bl	80005f8 <__aeabi_dmul>
 800b98e:	a33e      	add	r3, pc, #248	@ (adr r3, 800ba88 <__kernel_cos+0x148>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	f7f4 fc7a 	bl	800028c <__adddf3>
 800b998:	4622      	mov	r2, r4
 800b99a:	462b      	mov	r3, r5
 800b99c:	f7f4 fe2c 	bl	80005f8 <__aeabi_dmul>
 800b9a0:	a33b      	add	r3, pc, #236	@ (adr r3, 800ba90 <__kernel_cos+0x150>)
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	f7f4 fc6f 	bl	8000288 <__aeabi_dsub>
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	462b      	mov	r3, r5
 800b9ae:	f7f4 fe23 	bl	80005f8 <__aeabi_dmul>
 800b9b2:	a339      	add	r3, pc, #228	@ (adr r3, 800ba98 <__kernel_cos+0x158>)
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f4 fc68 	bl	800028c <__adddf3>
 800b9bc:	4622      	mov	r2, r4
 800b9be:	462b      	mov	r3, r5
 800b9c0:	f7f4 fe1a 	bl	80005f8 <__aeabi_dmul>
 800b9c4:	a336      	add	r3, pc, #216	@ (adr r3, 800baa0 <__kernel_cos+0x160>)
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f7f4 fc5d 	bl	8000288 <__aeabi_dsub>
 800b9ce:	4622      	mov	r2, r4
 800b9d0:	462b      	mov	r3, r5
 800b9d2:	f7f4 fe11 	bl	80005f8 <__aeabi_dmul>
 800b9d6:	a334      	add	r3, pc, #208	@ (adr r3, 800baa8 <__kernel_cos+0x168>)
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	f7f4 fc56 	bl	800028c <__adddf3>
 800b9e0:	4622      	mov	r2, r4
 800b9e2:	462b      	mov	r3, r5
 800b9e4:	f7f4 fe08 	bl	80005f8 <__aeabi_dmul>
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	462b      	mov	r3, r5
 800b9ec:	f7f4 fe04 	bl	80005f8 <__aeabi_dmul>
 800b9f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	460d      	mov	r5, r1
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	4639      	mov	r1, r7
 800b9fc:	f7f4 fdfc 	bl	80005f8 <__aeabi_dmul>
 800ba00:	460b      	mov	r3, r1
 800ba02:	4602      	mov	r2, r0
 800ba04:	4629      	mov	r1, r5
 800ba06:	4620      	mov	r0, r4
 800ba08:	f7f4 fc3e 	bl	8000288 <__aeabi_dsub>
 800ba0c:	4b2b      	ldr	r3, [pc, #172]	@ (800babc <__kernel_cos+0x17c>)
 800ba0e:	4598      	cmp	r8, r3
 800ba10:	4606      	mov	r6, r0
 800ba12:	460f      	mov	r7, r1
 800ba14:	d810      	bhi.n	800ba38 <__kernel_cos+0xf8>
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4650      	mov	r0, sl
 800ba1c:	4659      	mov	r1, fp
 800ba1e:	f7f4 fc33 	bl	8000288 <__aeabi_dsub>
 800ba22:	460b      	mov	r3, r1
 800ba24:	4926      	ldr	r1, [pc, #152]	@ (800bac0 <__kernel_cos+0x180>)
 800ba26:	4602      	mov	r2, r0
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f7f4 fc2d 	bl	8000288 <__aeabi_dsub>
 800ba2e:	ec41 0b10 	vmov	d0, r0, r1
 800ba32:	b003      	add	sp, #12
 800ba34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba38:	4b22      	ldr	r3, [pc, #136]	@ (800bac4 <__kernel_cos+0x184>)
 800ba3a:	4921      	ldr	r1, [pc, #132]	@ (800bac0 <__kernel_cos+0x180>)
 800ba3c:	4598      	cmp	r8, r3
 800ba3e:	bf8c      	ite	hi
 800ba40:	4d21      	ldrhi	r5, [pc, #132]	@ (800bac8 <__kernel_cos+0x188>)
 800ba42:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800ba46:	2400      	movs	r4, #0
 800ba48:	4622      	mov	r2, r4
 800ba4a:	462b      	mov	r3, r5
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	f7f4 fc1b 	bl	8000288 <__aeabi_dsub>
 800ba52:	4622      	mov	r2, r4
 800ba54:	4680      	mov	r8, r0
 800ba56:	4689      	mov	r9, r1
 800ba58:	462b      	mov	r3, r5
 800ba5a:	4650      	mov	r0, sl
 800ba5c:	4659      	mov	r1, fp
 800ba5e:	f7f4 fc13 	bl	8000288 <__aeabi_dsub>
 800ba62:	4632      	mov	r2, r6
 800ba64:	463b      	mov	r3, r7
 800ba66:	f7f4 fc0f 	bl	8000288 <__aeabi_dsub>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4640      	mov	r0, r8
 800ba70:	4649      	mov	r1, r9
 800ba72:	e7da      	b.n	800ba2a <__kernel_cos+0xea>
 800ba74:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800bab0 <__kernel_cos+0x170>
 800ba78:	e7db      	b.n	800ba32 <__kernel_cos+0xf2>
 800ba7a:	bf00      	nop
 800ba7c:	f3af 8000 	nop.w
 800ba80:	be8838d4 	.word	0xbe8838d4
 800ba84:	bda8fae9 	.word	0xbda8fae9
 800ba88:	bdb4b1c4 	.word	0xbdb4b1c4
 800ba8c:	3e21ee9e 	.word	0x3e21ee9e
 800ba90:	809c52ad 	.word	0x809c52ad
 800ba94:	3e927e4f 	.word	0x3e927e4f
 800ba98:	19cb1590 	.word	0x19cb1590
 800ba9c:	3efa01a0 	.word	0x3efa01a0
 800baa0:	16c15177 	.word	0x16c15177
 800baa4:	3f56c16c 	.word	0x3f56c16c
 800baa8:	5555554c 	.word	0x5555554c
 800baac:	3fa55555 	.word	0x3fa55555
 800bab0:	00000000 	.word	0x00000000
 800bab4:	3ff00000 	.word	0x3ff00000
 800bab8:	3fe00000 	.word	0x3fe00000
 800babc:	3fd33332 	.word	0x3fd33332
 800bac0:	3ff00000 	.word	0x3ff00000
 800bac4:	3fe90000 	.word	0x3fe90000
 800bac8:	3fd20000 	.word	0x3fd20000
 800bacc:	00000000 	.word	0x00000000

0800bad0 <__kernel_sin>:
 800bad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad4:	ec55 4b10 	vmov	r4, r5, d0
 800bad8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800badc:	b085      	sub	sp, #20
 800bade:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800bae2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bae6:	4680      	mov	r8, r0
 800bae8:	d205      	bcs.n	800baf6 <__kernel_sin+0x26>
 800baea:	4620      	mov	r0, r4
 800baec:	4629      	mov	r1, r5
 800baee:	f7f5 f833 	bl	8000b58 <__aeabi_d2iz>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d052      	beq.n	800bb9c <__kernel_sin+0xcc>
 800baf6:	4622      	mov	r2, r4
 800baf8:	462b      	mov	r3, r5
 800bafa:	4620      	mov	r0, r4
 800bafc:	4629      	mov	r1, r5
 800bafe:	f7f4 fd7b 	bl	80005f8 <__aeabi_dmul>
 800bb02:	4682      	mov	sl, r0
 800bb04:	468b      	mov	fp, r1
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	f7f4 fd73 	bl	80005f8 <__aeabi_dmul>
 800bb12:	a342      	add	r3, pc, #264	@ (adr r3, 800bc1c <__kernel_sin+0x14c>)
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	e9cd 0100 	strd	r0, r1, [sp]
 800bb1c:	4650      	mov	r0, sl
 800bb1e:	4659      	mov	r1, fp
 800bb20:	f7f4 fd6a 	bl	80005f8 <__aeabi_dmul>
 800bb24:	a33f      	add	r3, pc, #252	@ (adr r3, 800bc24 <__kernel_sin+0x154>)
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	f7f4 fbad 	bl	8000288 <__aeabi_dsub>
 800bb2e:	4652      	mov	r2, sl
 800bb30:	465b      	mov	r3, fp
 800bb32:	f7f4 fd61 	bl	80005f8 <__aeabi_dmul>
 800bb36:	a33d      	add	r3, pc, #244	@ (adr r3, 800bc2c <__kernel_sin+0x15c>)
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	f7f4 fba6 	bl	800028c <__adddf3>
 800bb40:	4652      	mov	r2, sl
 800bb42:	465b      	mov	r3, fp
 800bb44:	f7f4 fd58 	bl	80005f8 <__aeabi_dmul>
 800bb48:	a33a      	add	r3, pc, #232	@ (adr r3, 800bc34 <__kernel_sin+0x164>)
 800bb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4e:	f7f4 fb9b 	bl	8000288 <__aeabi_dsub>
 800bb52:	4652      	mov	r2, sl
 800bb54:	465b      	mov	r3, fp
 800bb56:	f7f4 fd4f 	bl	80005f8 <__aeabi_dmul>
 800bb5a:	a338      	add	r3, pc, #224	@ (adr r3, 800bc3c <__kernel_sin+0x16c>)
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	f7f4 fb94 	bl	800028c <__adddf3>
 800bb64:	4606      	mov	r6, r0
 800bb66:	460f      	mov	r7, r1
 800bb68:	f1b8 0f00 	cmp.w	r8, #0
 800bb6c:	d11b      	bne.n	800bba6 <__kernel_sin+0xd6>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	4650      	mov	r0, sl
 800bb74:	4659      	mov	r1, fp
 800bb76:	f7f4 fd3f 	bl	80005f8 <__aeabi_dmul>
 800bb7a:	a325      	add	r3, pc, #148	@ (adr r3, 800bc10 <__kernel_sin+0x140>)
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	f7f4 fb82 	bl	8000288 <__aeabi_dsub>
 800bb84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb88:	f7f4 fd36 	bl	80005f8 <__aeabi_dmul>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4620      	mov	r0, r4
 800bb92:	4629      	mov	r1, r5
 800bb94:	f7f4 fb7a 	bl	800028c <__adddf3>
 800bb98:	4604      	mov	r4, r0
 800bb9a:	460d      	mov	r5, r1
 800bb9c:	ec45 4b10 	vmov	d0, r4, r5
 800bba0:	b005      	add	sp, #20
 800bba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbaa:	4b1b      	ldr	r3, [pc, #108]	@ (800bc18 <__kernel_sin+0x148>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	f7f4 fd23 	bl	80005f8 <__aeabi_dmul>
 800bbb2:	4632      	mov	r2, r6
 800bbb4:	4680      	mov	r8, r0
 800bbb6:	4689      	mov	r9, r1
 800bbb8:	463b      	mov	r3, r7
 800bbba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbbe:	f7f4 fd1b 	bl	80005f8 <__aeabi_dmul>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4640      	mov	r0, r8
 800bbc8:	4649      	mov	r1, r9
 800bbca:	f7f4 fb5d 	bl	8000288 <__aeabi_dsub>
 800bbce:	4652      	mov	r2, sl
 800bbd0:	465b      	mov	r3, fp
 800bbd2:	f7f4 fd11 	bl	80005f8 <__aeabi_dmul>
 800bbd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbda:	f7f4 fb55 	bl	8000288 <__aeabi_dsub>
 800bbde:	a30c      	add	r3, pc, #48	@ (adr r3, 800bc10 <__kernel_sin+0x140>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	4606      	mov	r6, r0
 800bbe6:	460f      	mov	r7, r1
 800bbe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbec:	f7f4 fd04 	bl	80005f8 <__aeabi_dmul>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f7f4 fb48 	bl	800028c <__adddf3>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	4620      	mov	r0, r4
 800bc02:	4629      	mov	r1, r5
 800bc04:	f7f4 fb40 	bl	8000288 <__aeabi_dsub>
 800bc08:	e7c6      	b.n	800bb98 <__kernel_sin+0xc8>
 800bc0a:	bf00      	nop
 800bc0c:	f3af 8000 	nop.w
 800bc10:	55555549 	.word	0x55555549
 800bc14:	3fc55555 	.word	0x3fc55555
 800bc18:	3fe00000 	.word	0x3fe00000
 800bc1c:	5acfd57c 	.word	0x5acfd57c
 800bc20:	3de5d93a 	.word	0x3de5d93a
 800bc24:	8a2b9ceb 	.word	0x8a2b9ceb
 800bc28:	3e5ae5e6 	.word	0x3e5ae5e6
 800bc2c:	57b1fe7d 	.word	0x57b1fe7d
 800bc30:	3ec71de3 	.word	0x3ec71de3
 800bc34:	19c161d5 	.word	0x19c161d5
 800bc38:	3f2a01a0 	.word	0x3f2a01a0
 800bc3c:	1110f8a6 	.word	0x1110f8a6
 800bc40:	3f811111 	.word	0x3f811111

0800bc44 <__ieee754_cosh>:
 800bc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc48:	ec53 2b10 	vmov	r2, r3, d0
 800bc4c:	4945      	ldr	r1, [pc, #276]	@ (800bd64 <__ieee754_cosh+0x120>)
 800bc4e:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800bc52:	428e      	cmp	r6, r1
 800bc54:	d904      	bls.n	800bc60 <__ieee754_cosh+0x1c>
 800bc56:	4610      	mov	r0, r2
 800bc58:	4619      	mov	r1, r3
 800bc5a:	f7f4 fccd 	bl	80005f8 <__aeabi_dmul>
 800bc5e:	e02b      	b.n	800bcb8 <__ieee754_cosh+0x74>
 800bc60:	4941      	ldr	r1, [pc, #260]	@ (800bd68 <__ieee754_cosh+0x124>)
 800bc62:	428e      	cmp	r6, r1
 800bc64:	d82e      	bhi.n	800bcc4 <__ieee754_cosh+0x80>
 800bc66:	f7ff fd43 	bl	800b6f0 <fabs>
 800bc6a:	f000 fd0d 	bl	800c688 <expm1>
 800bc6e:	ec59 8b10 	vmov	r8, r9, d0
 800bc72:	4b3e      	ldr	r3, [pc, #248]	@ (800bd6c <__ieee754_cosh+0x128>)
 800bc74:	2200      	movs	r2, #0
 800bc76:	4640      	mov	r0, r8
 800bc78:	4649      	mov	r1, r9
 800bc7a:	f7f4 fb07 	bl	800028c <__adddf3>
 800bc7e:	f1b6 5f72 	cmp.w	r6, #1015021568	@ 0x3c800000
 800bc82:	4604      	mov	r4, r0
 800bc84:	460d      	mov	r5, r1
 800bc86:	d319      	bcc.n	800bcbc <__ieee754_cosh+0x78>
 800bc88:	4642      	mov	r2, r8
 800bc8a:	464b      	mov	r3, r9
 800bc8c:	4640      	mov	r0, r8
 800bc8e:	4649      	mov	r1, r9
 800bc90:	f7f4 fcb2 	bl	80005f8 <__aeabi_dmul>
 800bc94:	4622      	mov	r2, r4
 800bc96:	4606      	mov	r6, r0
 800bc98:	460f      	mov	r7, r1
 800bc9a:	462b      	mov	r3, r5
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	4629      	mov	r1, r5
 800bca0:	f7f4 faf4 	bl	800028c <__adddf3>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4630      	mov	r0, r6
 800bcaa:	4639      	mov	r1, r7
 800bcac:	f7f4 fdce 	bl	800084c <__aeabi_ddiv>
 800bcb0:	4b2e      	ldr	r3, [pc, #184]	@ (800bd6c <__ieee754_cosh+0x128>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f7f4 faea 	bl	800028c <__adddf3>
 800bcb8:	4604      	mov	r4, r0
 800bcba:	460d      	mov	r5, r1
 800bcbc:	ec45 4b10 	vmov	d0, r4, r5
 800bcc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcc4:	492a      	ldr	r1, [pc, #168]	@ (800bd70 <__ieee754_cosh+0x12c>)
 800bcc6:	428e      	cmp	r6, r1
 800bcc8:	d818      	bhi.n	800bcfc <__ieee754_cosh+0xb8>
 800bcca:	f7ff fd11 	bl	800b6f0 <fabs>
 800bcce:	f000 f85b 	bl	800bd88 <__ieee754_exp>
 800bcd2:	ec55 4b10 	vmov	r4, r5, d0
 800bcd6:	4b27      	ldr	r3, [pc, #156]	@ (800bd74 <__ieee754_cosh+0x130>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	4620      	mov	r0, r4
 800bcdc:	4629      	mov	r1, r5
 800bcde:	f7f4 fc8b 	bl	80005f8 <__aeabi_dmul>
 800bce2:	4622      	mov	r2, r4
 800bce4:	4606      	mov	r6, r0
 800bce6:	460f      	mov	r7, r1
 800bce8:	462b      	mov	r3, r5
 800bcea:	4922      	ldr	r1, [pc, #136]	@ (800bd74 <__ieee754_cosh+0x130>)
 800bcec:	2000      	movs	r0, #0
 800bcee:	f7f4 fdad 	bl	800084c <__aeabi_ddiv>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	e7db      	b.n	800bcb4 <__ieee754_cosh+0x70>
 800bcfc:	491e      	ldr	r1, [pc, #120]	@ (800bd78 <__ieee754_cosh+0x134>)
 800bcfe:	428e      	cmp	r6, r1
 800bd00:	d808      	bhi.n	800bd14 <__ieee754_cosh+0xd0>
 800bd02:	f7ff fcf5 	bl	800b6f0 <fabs>
 800bd06:	f000 f83f 	bl	800bd88 <__ieee754_exp>
 800bd0a:	4b1a      	ldr	r3, [pc, #104]	@ (800bd74 <__ieee754_cosh+0x130>)
 800bd0c:	ec51 0b10 	vmov	r0, r1, d0
 800bd10:	2200      	movs	r2, #0
 800bd12:	e7a2      	b.n	800bc5a <__ieee754_cosh+0x16>
 800bd14:	4919      	ldr	r1, [pc, #100]	@ (800bd7c <__ieee754_cosh+0x138>)
 800bd16:	428e      	cmp	r6, r1
 800bd18:	d905      	bls.n	800bd26 <__ieee754_cosh+0xe2>
 800bd1a:	3101      	adds	r1, #1
 800bd1c:	428e      	cmp	r6, r1
 800bd1e:	d11b      	bne.n	800bd58 <__ieee754_cosh+0x114>
 800bd20:	4917      	ldr	r1, [pc, #92]	@ (800bd80 <__ieee754_cosh+0x13c>)
 800bd22:	428a      	cmp	r2, r1
 800bd24:	d818      	bhi.n	800bd58 <__ieee754_cosh+0x114>
 800bd26:	ec43 2b10 	vmov	d0, r2, r3
 800bd2a:	f7ff fce1 	bl	800b6f0 <fabs>
 800bd2e:	4b11      	ldr	r3, [pc, #68]	@ (800bd74 <__ieee754_cosh+0x130>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	ec51 0b10 	vmov	r0, r1, d0
 800bd36:	f7f4 fc5f 	bl	80005f8 <__aeabi_dmul>
 800bd3a:	ec41 0b10 	vmov	d0, r0, r1
 800bd3e:	f000 f823 	bl	800bd88 <__ieee754_exp>
 800bd42:	ec55 4b10 	vmov	r4, r5, d0
 800bd46:	4b0b      	ldr	r3, [pc, #44]	@ (800bd74 <__ieee754_cosh+0x130>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	f7f4 fc53 	bl	80005f8 <__aeabi_dmul>
 800bd52:	4622      	mov	r2, r4
 800bd54:	462b      	mov	r3, r5
 800bd56:	e780      	b.n	800bc5a <__ieee754_cosh+0x16>
 800bd58:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f000 bef7 	b.w	800cb50 <__math_oflow>
 800bd62:	bf00      	nop
 800bd64:	7fefffff 	.word	0x7fefffff
 800bd68:	3fd62e42 	.word	0x3fd62e42
 800bd6c:	3ff00000 	.word	0x3ff00000
 800bd70:	4035ffff 	.word	0x4035ffff
 800bd74:	3fe00000 	.word	0x3fe00000
 800bd78:	40862e41 	.word	0x40862e41
 800bd7c:	408633cd 	.word	0x408633cd
 800bd80:	8fb9f87d 	.word	0x8fb9f87d
 800bd84:	00000000 	.word	0x00000000

0800bd88 <__ieee754_exp>:
 800bd88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd8c:	ec55 4b10 	vmov	r4, r5, d0
 800bd90:	49b1      	ldr	r1, [pc, #708]	@ (800c058 <__ieee754_exp+0x2d0>)
 800bd92:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bd96:	428a      	cmp	r2, r1
 800bd98:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800bd9c:	d936      	bls.n	800be0c <__ieee754_exp+0x84>
 800bd9e:	49af      	ldr	r1, [pc, #700]	@ (800c05c <__ieee754_exp+0x2d4>)
 800bda0:	428a      	cmp	r2, r1
 800bda2:	d914      	bls.n	800bdce <__ieee754_exp+0x46>
 800bda4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bda8:	4323      	orrs	r3, r4
 800bdaa:	4622      	mov	r2, r4
 800bdac:	d007      	beq.n	800bdbe <__ieee754_exp+0x36>
 800bdae:	462b      	mov	r3, r5
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	f7f4 fa6a 	bl	800028c <__adddf3>
 800bdb8:	4604      	mov	r4, r0
 800bdba:	460d      	mov	r5, r1
 800bdbc:	e002      	b.n	800bdc4 <__ieee754_exp+0x3c>
 800bdbe:	2e00      	cmp	r6, #0
 800bdc0:	f040 8118 	bne.w	800bff4 <__ieee754_exp+0x26c>
 800bdc4:	ec45 4b10 	vmov	d0, r4, r5
 800bdc8:	b004      	add	sp, #16
 800bdca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdce:	a38c      	add	r3, pc, #560	@ (adr r3, 800c000 <__ieee754_exp+0x278>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	f7f4 fe9e 	bl	8000b18 <__aeabi_dcmpgt>
 800bddc:	4607      	mov	r7, r0
 800bdde:	b128      	cbz	r0, 800bdec <__ieee754_exp+0x64>
 800bde0:	2000      	movs	r0, #0
 800bde2:	b004      	add	sp, #16
 800bde4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde8:	f000 beb2 	b.w	800cb50 <__math_oflow>
 800bdec:	a386      	add	r3, pc, #536	@ (adr r3, 800c008 <__ieee754_exp+0x280>)
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	f7f4 fe71 	bl	8000adc <__aeabi_dcmplt>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	f000 8087 	beq.w	800bf0e <__ieee754_exp+0x186>
 800be00:	4638      	mov	r0, r7
 800be02:	b004      	add	sp, #16
 800be04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be08:	f000 be9a 	b.w	800cb40 <__math_uflow>
 800be0c:	4b94      	ldr	r3, [pc, #592]	@ (800c060 <__ieee754_exp+0x2d8>)
 800be0e:	429a      	cmp	r2, r3
 800be10:	f240 80a9 	bls.w	800bf66 <__ieee754_exp+0x1de>
 800be14:	4b93      	ldr	r3, [pc, #588]	@ (800c064 <__ieee754_exp+0x2dc>)
 800be16:	429a      	cmp	r2, r3
 800be18:	d879      	bhi.n	800bf0e <__ieee754_exp+0x186>
 800be1a:	4b93      	ldr	r3, [pc, #588]	@ (800c068 <__ieee754_exp+0x2e0>)
 800be1c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be24:	4620      	mov	r0, r4
 800be26:	4629      	mov	r1, r5
 800be28:	f7f4 fa2e 	bl	8000288 <__aeabi_dsub>
 800be2c:	4b8f      	ldr	r3, [pc, #572]	@ (800c06c <__ieee754_exp+0x2e4>)
 800be2e:	00f7      	lsls	r7, r6, #3
 800be30:	443b      	add	r3, r7
 800be32:	ed93 7b00 	vldr	d7, [r3]
 800be36:	ed8d 7b00 	vstr	d7, [sp]
 800be3a:	f1c6 0a01 	rsb	sl, r6, #1
 800be3e:	4680      	mov	r8, r0
 800be40:	4689      	mov	r9, r1
 800be42:	ebaa 0a06 	sub.w	sl, sl, r6
 800be46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be4a:	4640      	mov	r0, r8
 800be4c:	4649      	mov	r1, r9
 800be4e:	f7f4 fa1b 	bl	8000288 <__aeabi_dsub>
 800be52:	4604      	mov	r4, r0
 800be54:	460d      	mov	r5, r1
 800be56:	4622      	mov	r2, r4
 800be58:	462b      	mov	r3, r5
 800be5a:	4620      	mov	r0, r4
 800be5c:	4629      	mov	r1, r5
 800be5e:	f7f4 fbcb 	bl	80005f8 <__aeabi_dmul>
 800be62:	a36b      	add	r3, pc, #428	@ (adr r3, 800c010 <__ieee754_exp+0x288>)
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	4606      	mov	r6, r0
 800be6a:	460f      	mov	r7, r1
 800be6c:	f7f4 fbc4 	bl	80005f8 <__aeabi_dmul>
 800be70:	a369      	add	r3, pc, #420	@ (adr r3, 800c018 <__ieee754_exp+0x290>)
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	f7f4 fa07 	bl	8000288 <__aeabi_dsub>
 800be7a:	4632      	mov	r2, r6
 800be7c:	463b      	mov	r3, r7
 800be7e:	f7f4 fbbb 	bl	80005f8 <__aeabi_dmul>
 800be82:	a367      	add	r3, pc, #412	@ (adr r3, 800c020 <__ieee754_exp+0x298>)
 800be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be88:	f7f4 fa00 	bl	800028c <__adddf3>
 800be8c:	4632      	mov	r2, r6
 800be8e:	463b      	mov	r3, r7
 800be90:	f7f4 fbb2 	bl	80005f8 <__aeabi_dmul>
 800be94:	a364      	add	r3, pc, #400	@ (adr r3, 800c028 <__ieee754_exp+0x2a0>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 f9f5 	bl	8000288 <__aeabi_dsub>
 800be9e:	4632      	mov	r2, r6
 800bea0:	463b      	mov	r3, r7
 800bea2:	f7f4 fba9 	bl	80005f8 <__aeabi_dmul>
 800bea6:	a362      	add	r3, pc, #392	@ (adr r3, 800c030 <__ieee754_exp+0x2a8>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	f7f4 f9ee 	bl	800028c <__adddf3>
 800beb0:	4632      	mov	r2, r6
 800beb2:	463b      	mov	r3, r7
 800beb4:	f7f4 fba0 	bl	80005f8 <__aeabi_dmul>
 800beb8:	4602      	mov	r2, r0
 800beba:	460b      	mov	r3, r1
 800bebc:	4620      	mov	r0, r4
 800bebe:	4629      	mov	r1, r5
 800bec0:	f7f4 f9e2 	bl	8000288 <__aeabi_dsub>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4606      	mov	r6, r0
 800beca:	460f      	mov	r7, r1
 800becc:	4620      	mov	r0, r4
 800bece:	4629      	mov	r1, r5
 800bed0:	f7f4 fb92 	bl	80005f8 <__aeabi_dmul>
 800bed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bed8:	f1ba 0f00 	cmp.w	sl, #0
 800bedc:	d15c      	bne.n	800bf98 <__ieee754_exp+0x210>
 800bede:	2200      	movs	r2, #0
 800bee0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bee4:	4630      	mov	r0, r6
 800bee6:	4639      	mov	r1, r7
 800bee8:	f7f4 f9ce 	bl	8000288 <__aeabi_dsub>
 800beec:	4602      	mov	r2, r0
 800beee:	460b      	mov	r3, r1
 800bef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bef4:	f7f4 fcaa 	bl	800084c <__aeabi_ddiv>
 800bef8:	4622      	mov	r2, r4
 800befa:	462b      	mov	r3, r5
 800befc:	f7f4 f9c4 	bl	8000288 <__aeabi_dsub>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	2000      	movs	r0, #0
 800bf06:	495a      	ldr	r1, [pc, #360]	@ (800c070 <__ieee754_exp+0x2e8>)
 800bf08:	f7f4 f9be 	bl	8000288 <__aeabi_dsub>
 800bf0c:	e754      	b.n	800bdb8 <__ieee754_exp+0x30>
 800bf0e:	4b59      	ldr	r3, [pc, #356]	@ (800c074 <__ieee754_exp+0x2ec>)
 800bf10:	4620      	mov	r0, r4
 800bf12:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bf16:	4629      	mov	r1, r5
 800bf18:	a347      	add	r3, pc, #284	@ (adr r3, 800c038 <__ieee754_exp+0x2b0>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	f7f4 fb6b 	bl	80005f8 <__aeabi_dmul>
 800bf22:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf26:	f7f4 f9b1 	bl	800028c <__adddf3>
 800bf2a:	f7f4 fe15 	bl	8000b58 <__aeabi_d2iz>
 800bf2e:	4682      	mov	sl, r0
 800bf30:	f7f4 faf8 	bl	8000524 <__aeabi_i2d>
 800bf34:	a342      	add	r3, pc, #264	@ (adr r3, 800c040 <__ieee754_exp+0x2b8>)
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	4606      	mov	r6, r0
 800bf3c:	460f      	mov	r7, r1
 800bf3e:	f7f4 fb5b 	bl	80005f8 <__aeabi_dmul>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4620      	mov	r0, r4
 800bf48:	4629      	mov	r1, r5
 800bf4a:	f7f4 f99d 	bl	8000288 <__aeabi_dsub>
 800bf4e:	a33e      	add	r3, pc, #248	@ (adr r3, 800c048 <__ieee754_exp+0x2c0>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	4680      	mov	r8, r0
 800bf56:	4689      	mov	r9, r1
 800bf58:	4630      	mov	r0, r6
 800bf5a:	4639      	mov	r1, r7
 800bf5c:	f7f4 fb4c 	bl	80005f8 <__aeabi_dmul>
 800bf60:	e9cd 0100 	strd	r0, r1, [sp]
 800bf64:	e76f      	b.n	800be46 <__ieee754_exp+0xbe>
 800bf66:	4b44      	ldr	r3, [pc, #272]	@ (800c078 <__ieee754_exp+0x2f0>)
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d810      	bhi.n	800bf8e <__ieee754_exp+0x206>
 800bf6c:	a338      	add	r3, pc, #224	@ (adr r3, 800c050 <__ieee754_exp+0x2c8>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	4620      	mov	r0, r4
 800bf74:	4629      	mov	r1, r5
 800bf76:	f7f4 f989 	bl	800028c <__adddf3>
 800bf7a:	4b3d      	ldr	r3, [pc, #244]	@ (800c070 <__ieee754_exp+0x2e8>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f7f4 fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 800bf82:	b138      	cbz	r0, 800bf94 <__ieee754_exp+0x20c>
 800bf84:	4b3a      	ldr	r3, [pc, #232]	@ (800c070 <__ieee754_exp+0x2e8>)
 800bf86:	2200      	movs	r2, #0
 800bf88:	4620      	mov	r0, r4
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	e712      	b.n	800bdb4 <__ieee754_exp+0x2c>
 800bf8e:	f04f 0a00 	mov.w	sl, #0
 800bf92:	e760      	b.n	800be56 <__ieee754_exp+0xce>
 800bf94:	4682      	mov	sl, r0
 800bf96:	e75e      	b.n	800be56 <__ieee754_exp+0xce>
 800bf98:	4632      	mov	r2, r6
 800bf9a:	463b      	mov	r3, r7
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bfa2:	f7f4 f971 	bl	8000288 <__aeabi_dsub>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfae:	f7f4 fc4d 	bl	800084c <__aeabi_ddiv>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfba:	f7f4 f965 	bl	8000288 <__aeabi_dsub>
 800bfbe:	4642      	mov	r2, r8
 800bfc0:	464b      	mov	r3, r9
 800bfc2:	f7f4 f961 	bl	8000288 <__aeabi_dsub>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	2000      	movs	r0, #0
 800bfcc:	4928      	ldr	r1, [pc, #160]	@ (800c070 <__ieee754_exp+0x2e8>)
 800bfce:	f7f4 f95b 	bl	8000288 <__aeabi_dsub>
 800bfd2:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800bfd6:	4592      	cmp	sl, r2
 800bfd8:	db02      	blt.n	800bfe0 <__ieee754_exp+0x258>
 800bfda:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800bfde:	e6eb      	b.n	800bdb8 <__ieee754_exp+0x30>
 800bfe0:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800bfe4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800bfee:	f7f4 fb03 	bl	80005f8 <__aeabi_dmul>
 800bff2:	e6e1      	b.n	800bdb8 <__ieee754_exp+0x30>
 800bff4:	2400      	movs	r4, #0
 800bff6:	2500      	movs	r5, #0
 800bff8:	e6e4      	b.n	800bdc4 <__ieee754_exp+0x3c>
 800bffa:	bf00      	nop
 800bffc:	f3af 8000 	nop.w
 800c000:	fefa39ef 	.word	0xfefa39ef
 800c004:	40862e42 	.word	0x40862e42
 800c008:	d52d3051 	.word	0xd52d3051
 800c00c:	c0874910 	.word	0xc0874910
 800c010:	72bea4d0 	.word	0x72bea4d0
 800c014:	3e663769 	.word	0x3e663769
 800c018:	c5d26bf1 	.word	0xc5d26bf1
 800c01c:	3ebbbd41 	.word	0x3ebbbd41
 800c020:	af25de2c 	.word	0xaf25de2c
 800c024:	3f11566a 	.word	0x3f11566a
 800c028:	16bebd93 	.word	0x16bebd93
 800c02c:	3f66c16c 	.word	0x3f66c16c
 800c030:	5555553e 	.word	0x5555553e
 800c034:	3fc55555 	.word	0x3fc55555
 800c038:	652b82fe 	.word	0x652b82fe
 800c03c:	3ff71547 	.word	0x3ff71547
 800c040:	fee00000 	.word	0xfee00000
 800c044:	3fe62e42 	.word	0x3fe62e42
 800c048:	35793c76 	.word	0x35793c76
 800c04c:	3dea39ef 	.word	0x3dea39ef
 800c050:	8800759c 	.word	0x8800759c
 800c054:	7e37e43c 	.word	0x7e37e43c
 800c058:	40862e41 	.word	0x40862e41
 800c05c:	7fefffff 	.word	0x7fefffff
 800c060:	3fd62e42 	.word	0x3fd62e42
 800c064:	3ff0a2b1 	.word	0x3ff0a2b1
 800c068:	0800d988 	.word	0x0800d988
 800c06c:	0800d978 	.word	0x0800d978
 800c070:	3ff00000 	.word	0x3ff00000
 800c074:	0800d998 	.word	0x0800d998
 800c078:	3defffff 	.word	0x3defffff

0800c07c <__ieee754_fmod>:
 800c07c:	ec53 2b11 	vmov	r2, r3, d1
 800c080:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800c084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c088:	ea52 040c 	orrs.w	r4, r2, ip
 800c08c:	ec51 0b10 	vmov	r0, r1, d0
 800c090:	461e      	mov	r6, r3
 800c092:	4617      	mov	r7, r2
 800c094:	4696      	mov	lr, r2
 800c096:	d00c      	beq.n	800c0b2 <__ieee754_fmod+0x36>
 800c098:	4c77      	ldr	r4, [pc, #476]	@ (800c278 <__ieee754_fmod+0x1fc>)
 800c09a:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800c09e:	45a0      	cmp	r8, r4
 800c0a0:	4689      	mov	r9, r1
 800c0a2:	d806      	bhi.n	800c0b2 <__ieee754_fmod+0x36>
 800c0a4:	4254      	negs	r4, r2
 800c0a6:	4d75      	ldr	r5, [pc, #468]	@ (800c27c <__ieee754_fmod+0x200>)
 800c0a8:	4314      	orrs	r4, r2
 800c0aa:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800c0ae:	42ac      	cmp	r4, r5
 800c0b0:	d909      	bls.n	800c0c6 <__ieee754_fmod+0x4a>
 800c0b2:	f7f4 faa1 	bl	80005f8 <__aeabi_dmul>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	f7f4 fbc7 	bl	800084c <__aeabi_ddiv>
 800c0be:	ec41 0b10 	vmov	d0, r0, r1
 800c0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c6:	45e0      	cmp	r8, ip
 800c0c8:	4682      	mov	sl, r0
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c0d0:	dc09      	bgt.n	800c0e6 <__ieee754_fmod+0x6a>
 800c0d2:	dbf4      	blt.n	800c0be <__ieee754_fmod+0x42>
 800c0d4:	4282      	cmp	r2, r0
 800c0d6:	d8f2      	bhi.n	800c0be <__ieee754_fmod+0x42>
 800c0d8:	d105      	bne.n	800c0e6 <__ieee754_fmod+0x6a>
 800c0da:	4b69      	ldr	r3, [pc, #420]	@ (800c280 <__ieee754_fmod+0x204>)
 800c0dc:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800c0e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0e4:	e7eb      	b.n	800c0be <__ieee754_fmod+0x42>
 800c0e6:	4a65      	ldr	r2, [pc, #404]	@ (800c27c <__ieee754_fmod+0x200>)
 800c0e8:	ea19 0f02 	tst.w	r9, r2
 800c0ec:	d148      	bne.n	800c180 <__ieee754_fmod+0x104>
 800c0ee:	f1b8 0f00 	cmp.w	r8, #0
 800c0f2:	d13d      	bne.n	800c170 <__ieee754_fmod+0xf4>
 800c0f4:	4963      	ldr	r1, [pc, #396]	@ (800c284 <__ieee754_fmod+0x208>)
 800c0f6:	4653      	mov	r3, sl
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	dc36      	bgt.n	800c16a <__ieee754_fmod+0xee>
 800c0fc:	4216      	tst	r6, r2
 800c0fe:	d14f      	bne.n	800c1a0 <__ieee754_fmod+0x124>
 800c100:	f1bc 0f00 	cmp.w	ip, #0
 800c104:	d144      	bne.n	800c190 <__ieee754_fmod+0x114>
 800c106:	4a5f      	ldr	r2, [pc, #380]	@ (800c284 <__ieee754_fmod+0x208>)
 800c108:	463b      	mov	r3, r7
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	dc3d      	bgt.n	800c18a <__ieee754_fmod+0x10e>
 800c10e:	485e      	ldr	r0, [pc, #376]	@ (800c288 <__ieee754_fmod+0x20c>)
 800c110:	4281      	cmp	r1, r0
 800c112:	db4a      	blt.n	800c1aa <__ieee754_fmod+0x12e>
 800c114:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c118:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c11c:	485a      	ldr	r0, [pc, #360]	@ (800c288 <__ieee754_fmod+0x20c>)
 800c11e:	4282      	cmp	r2, r0
 800c120:	db57      	blt.n	800c1d2 <__ieee754_fmod+0x156>
 800c122:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800c126:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800c12a:	1a89      	subs	r1, r1, r2
 800c12c:	1b98      	subs	r0, r3, r6
 800c12e:	eba4 070e 	sub.w	r7, r4, lr
 800c132:	2900      	cmp	r1, #0
 800c134:	d162      	bne.n	800c1fc <__ieee754_fmod+0x180>
 800c136:	4574      	cmp	r4, lr
 800c138:	bf38      	it	cc
 800c13a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c13e:	2800      	cmp	r0, #0
 800c140:	bfa4      	itt	ge
 800c142:	463c      	movge	r4, r7
 800c144:	4603      	movge	r3, r0
 800c146:	ea53 0104 	orrs.w	r1, r3, r4
 800c14a:	d0c6      	beq.n	800c0da <__ieee754_fmod+0x5e>
 800c14c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c150:	db69      	blt.n	800c226 <__ieee754_fmod+0x1aa>
 800c152:	494d      	ldr	r1, [pc, #308]	@ (800c288 <__ieee754_fmod+0x20c>)
 800c154:	428a      	cmp	r2, r1
 800c156:	db6c      	blt.n	800c232 <__ieee754_fmod+0x1b6>
 800c158:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c15c:	432b      	orrs	r3, r5
 800c15e:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800c162:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c166:	4620      	mov	r0, r4
 800c168:	e7a9      	b.n	800c0be <__ieee754_fmod+0x42>
 800c16a:	3901      	subs	r1, #1
 800c16c:	005b      	lsls	r3, r3, #1
 800c16e:	e7c3      	b.n	800c0f8 <__ieee754_fmod+0x7c>
 800c170:	4945      	ldr	r1, [pc, #276]	@ (800c288 <__ieee754_fmod+0x20c>)
 800c172:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800c176:	2b00      	cmp	r3, #0
 800c178:	ddc0      	ble.n	800c0fc <__ieee754_fmod+0x80>
 800c17a:	3901      	subs	r1, #1
 800c17c:	005b      	lsls	r3, r3, #1
 800c17e:	e7fa      	b.n	800c176 <__ieee754_fmod+0xfa>
 800c180:	ea4f 5128 	mov.w	r1, r8, asr #20
 800c184:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c188:	e7b8      	b.n	800c0fc <__ieee754_fmod+0x80>
 800c18a:	3a01      	subs	r2, #1
 800c18c:	005b      	lsls	r3, r3, #1
 800c18e:	e7bc      	b.n	800c10a <__ieee754_fmod+0x8e>
 800c190:	4a3d      	ldr	r2, [pc, #244]	@ (800c288 <__ieee754_fmod+0x20c>)
 800c192:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800c196:	2b00      	cmp	r3, #0
 800c198:	ddb9      	ble.n	800c10e <__ieee754_fmod+0x92>
 800c19a:	3a01      	subs	r2, #1
 800c19c:	005b      	lsls	r3, r3, #1
 800c19e:	e7fa      	b.n	800c196 <__ieee754_fmod+0x11a>
 800c1a0:	ea4f 522c 	mov.w	r2, ip, asr #20
 800c1a4:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c1a8:	e7b1      	b.n	800c10e <__ieee754_fmod+0x92>
 800c1aa:	1a40      	subs	r0, r0, r1
 800c1ac:	281f      	cmp	r0, #31
 800c1ae:	dc0a      	bgt.n	800c1c6 <__ieee754_fmod+0x14a>
 800c1b0:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800c1b4:	fa08 f800 	lsl.w	r8, r8, r0
 800c1b8:	fa2a f303 	lsr.w	r3, sl, r3
 800c1bc:	ea43 0308 	orr.w	r3, r3, r8
 800c1c0:	fa0a f400 	lsl.w	r4, sl, r0
 800c1c4:	e7aa      	b.n	800c11c <__ieee754_fmod+0xa0>
 800c1c6:	4b31      	ldr	r3, [pc, #196]	@ (800c28c <__ieee754_fmod+0x210>)
 800c1c8:	1a5b      	subs	r3, r3, r1
 800c1ca:	fa0a f303 	lsl.w	r3, sl, r3
 800c1ce:	2400      	movs	r4, #0
 800c1d0:	e7a4      	b.n	800c11c <__ieee754_fmod+0xa0>
 800c1d2:	1a80      	subs	r0, r0, r2
 800c1d4:	281f      	cmp	r0, #31
 800c1d6:	dc0a      	bgt.n	800c1ee <__ieee754_fmod+0x172>
 800c1d8:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800c1dc:	fa0c fc00 	lsl.w	ip, ip, r0
 800c1e0:	fa27 f606 	lsr.w	r6, r7, r6
 800c1e4:	ea46 060c 	orr.w	r6, r6, ip
 800c1e8:	fa07 fe00 	lsl.w	lr, r7, r0
 800c1ec:	e79d      	b.n	800c12a <__ieee754_fmod+0xae>
 800c1ee:	4e27      	ldr	r6, [pc, #156]	@ (800c28c <__ieee754_fmod+0x210>)
 800c1f0:	1ab6      	subs	r6, r6, r2
 800c1f2:	fa07 f606 	lsl.w	r6, r7, r6
 800c1f6:	f04f 0e00 	mov.w	lr, #0
 800c1fa:	e796      	b.n	800c12a <__ieee754_fmod+0xae>
 800c1fc:	4574      	cmp	r4, lr
 800c1fe:	bf38      	it	cc
 800c200:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c204:	2800      	cmp	r0, #0
 800c206:	da05      	bge.n	800c214 <__ieee754_fmod+0x198>
 800c208:	0fe0      	lsrs	r0, r4, #31
 800c20a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c20e:	0064      	lsls	r4, r4, #1
 800c210:	3901      	subs	r1, #1
 800c212:	e78b      	b.n	800c12c <__ieee754_fmod+0xb0>
 800c214:	ea50 0307 	orrs.w	r3, r0, r7
 800c218:	f43f af5f 	beq.w	800c0da <__ieee754_fmod+0x5e>
 800c21c:	0ffb      	lsrs	r3, r7, #31
 800c21e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c222:	007c      	lsls	r4, r7, #1
 800c224:	e7f4      	b.n	800c210 <__ieee754_fmod+0x194>
 800c226:	0fe1      	lsrs	r1, r4, #31
 800c228:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c22c:	0064      	lsls	r4, r4, #1
 800c22e:	3a01      	subs	r2, #1
 800c230:	e78c      	b.n	800c14c <__ieee754_fmod+0xd0>
 800c232:	1a89      	subs	r1, r1, r2
 800c234:	2914      	cmp	r1, #20
 800c236:	dc0a      	bgt.n	800c24e <__ieee754_fmod+0x1d2>
 800c238:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800c23c:	fa03 f202 	lsl.w	r2, r3, r2
 800c240:	40cc      	lsrs	r4, r1
 800c242:	4322      	orrs	r2, r4
 800c244:	410b      	asrs	r3, r1
 800c246:	ea43 0105 	orr.w	r1, r3, r5
 800c24a:	4610      	mov	r0, r2
 800c24c:	e737      	b.n	800c0be <__ieee754_fmod+0x42>
 800c24e:	291f      	cmp	r1, #31
 800c250:	dc07      	bgt.n	800c262 <__ieee754_fmod+0x1e6>
 800c252:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800c256:	40cc      	lsrs	r4, r1
 800c258:	fa03 f202 	lsl.w	r2, r3, r2
 800c25c:	4322      	orrs	r2, r4
 800c25e:	462b      	mov	r3, r5
 800c260:	e7f1      	b.n	800c246 <__ieee754_fmod+0x1ca>
 800c262:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800c266:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c26a:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800c26e:	32e2      	adds	r2, #226	@ 0xe2
 800c270:	fa43 f202 	asr.w	r2, r3, r2
 800c274:	e7f3      	b.n	800c25e <__ieee754_fmod+0x1e2>
 800c276:	bf00      	nop
 800c278:	7fefffff 	.word	0x7fefffff
 800c27c:	7ff00000 	.word	0x7ff00000
 800c280:	0800d9a8 	.word	0x0800d9a8
 800c284:	fffffbed 	.word	0xfffffbed
 800c288:	fffffc02 	.word	0xfffffc02
 800c28c:	fffffbe2 	.word	0xfffffbe2

0800c290 <__ieee754_rem_pio2>:
 800c290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	ec57 6b10 	vmov	r6, r7, d0
 800c298:	4bc5      	ldr	r3, [pc, #788]	@ (800c5b0 <__ieee754_rem_pio2+0x320>)
 800c29a:	b08d      	sub	sp, #52	@ 0x34
 800c29c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c2a0:	4598      	cmp	r8, r3
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	9704      	str	r7, [sp, #16]
 800c2a6:	d807      	bhi.n	800c2b8 <__ieee754_rem_pio2+0x28>
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	ed80 0b00 	vstr	d0, [r0]
 800c2b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c2b4:	2500      	movs	r5, #0
 800c2b6:	e028      	b.n	800c30a <__ieee754_rem_pio2+0x7a>
 800c2b8:	4bbe      	ldr	r3, [pc, #760]	@ (800c5b4 <__ieee754_rem_pio2+0x324>)
 800c2ba:	4598      	cmp	r8, r3
 800c2bc:	d878      	bhi.n	800c3b0 <__ieee754_rem_pio2+0x120>
 800c2be:	9b04      	ldr	r3, [sp, #16]
 800c2c0:	4dbd      	ldr	r5, [pc, #756]	@ (800c5b8 <__ieee754_rem_pio2+0x328>)
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800c578 <__ieee754_rem_pio2+0x2e8>)
 800c2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	dd38      	ble.n	800c342 <__ieee754_rem_pio2+0xb2>
 800c2d0:	f7f3 ffda 	bl	8000288 <__aeabi_dsub>
 800c2d4:	45a8      	cmp	r8, r5
 800c2d6:	4606      	mov	r6, r0
 800c2d8:	460f      	mov	r7, r1
 800c2da:	d01a      	beq.n	800c312 <__ieee754_rem_pio2+0x82>
 800c2dc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800c580 <__ieee754_rem_pio2+0x2f0>)
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	f7f3 ffd1 	bl	8000288 <__aeabi_dsub>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	4680      	mov	r8, r0
 800c2ec:	4689      	mov	r9, r1
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	4639      	mov	r1, r7
 800c2f2:	f7f3 ffc9 	bl	8000288 <__aeabi_dsub>
 800c2f6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c580 <__ieee754_rem_pio2+0x2f0>)
 800c2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fc:	f7f3 ffc4 	bl	8000288 <__aeabi_dsub>
 800c300:	e9c4 8900 	strd	r8, r9, [r4]
 800c304:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c308:	2501      	movs	r5, #1
 800c30a:	4628      	mov	r0, r5
 800c30c:	b00d      	add	sp, #52	@ 0x34
 800c30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c312:	a39d      	add	r3, pc, #628	@ (adr r3, 800c588 <__ieee754_rem_pio2+0x2f8>)
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	f7f3 ffb6 	bl	8000288 <__aeabi_dsub>
 800c31c:	a39c      	add	r3, pc, #624	@ (adr r3, 800c590 <__ieee754_rem_pio2+0x300>)
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	4606      	mov	r6, r0
 800c324:	460f      	mov	r7, r1
 800c326:	f7f3 ffaf 	bl	8000288 <__aeabi_dsub>
 800c32a:	4602      	mov	r2, r0
 800c32c:	460b      	mov	r3, r1
 800c32e:	4680      	mov	r8, r0
 800c330:	4689      	mov	r9, r1
 800c332:	4630      	mov	r0, r6
 800c334:	4639      	mov	r1, r7
 800c336:	f7f3 ffa7 	bl	8000288 <__aeabi_dsub>
 800c33a:	a395      	add	r3, pc, #596	@ (adr r3, 800c590 <__ieee754_rem_pio2+0x300>)
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	e7dc      	b.n	800c2fc <__ieee754_rem_pio2+0x6c>
 800c342:	f7f3 ffa3 	bl	800028c <__adddf3>
 800c346:	45a8      	cmp	r8, r5
 800c348:	4606      	mov	r6, r0
 800c34a:	460f      	mov	r7, r1
 800c34c:	d018      	beq.n	800c380 <__ieee754_rem_pio2+0xf0>
 800c34e:	a38c      	add	r3, pc, #560	@ (adr r3, 800c580 <__ieee754_rem_pio2+0x2f0>)
 800c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c354:	f7f3 ff9a 	bl	800028c <__adddf3>
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	4680      	mov	r8, r0
 800c35e:	4689      	mov	r9, r1
 800c360:	4630      	mov	r0, r6
 800c362:	4639      	mov	r1, r7
 800c364:	f7f3 ff90 	bl	8000288 <__aeabi_dsub>
 800c368:	a385      	add	r3, pc, #532	@ (adr r3, 800c580 <__ieee754_rem_pio2+0x2f0>)
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f7f3 ff8d 	bl	800028c <__adddf3>
 800c372:	f04f 35ff 	mov.w	r5, #4294967295
 800c376:	e9c4 8900 	strd	r8, r9, [r4]
 800c37a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c37e:	e7c4      	b.n	800c30a <__ieee754_rem_pio2+0x7a>
 800c380:	a381      	add	r3, pc, #516	@ (adr r3, 800c588 <__ieee754_rem_pio2+0x2f8>)
 800c382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c386:	f7f3 ff81 	bl	800028c <__adddf3>
 800c38a:	a381      	add	r3, pc, #516	@ (adr r3, 800c590 <__ieee754_rem_pio2+0x300>)
 800c38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c390:	4606      	mov	r6, r0
 800c392:	460f      	mov	r7, r1
 800c394:	f7f3 ff7a 	bl	800028c <__adddf3>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4680      	mov	r8, r0
 800c39e:	4689      	mov	r9, r1
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	4639      	mov	r1, r7
 800c3a4:	f7f3 ff70 	bl	8000288 <__aeabi_dsub>
 800c3a8:	a379      	add	r3, pc, #484	@ (adr r3, 800c590 <__ieee754_rem_pio2+0x300>)
 800c3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ae:	e7de      	b.n	800c36e <__ieee754_rem_pio2+0xde>
 800c3b0:	4b82      	ldr	r3, [pc, #520]	@ (800c5bc <__ieee754_rem_pio2+0x32c>)
 800c3b2:	4598      	cmp	r8, r3
 800c3b4:	f200 80d1 	bhi.w	800c55a <__ieee754_rem_pio2+0x2ca>
 800c3b8:	f7ff f99a 	bl	800b6f0 <fabs>
 800c3bc:	ec57 6b10 	vmov	r6, r7, d0
 800c3c0:	a375      	add	r3, pc, #468	@ (adr r3, 800c598 <__ieee754_rem_pio2+0x308>)
 800c3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c6:	4630      	mov	r0, r6
 800c3c8:	4639      	mov	r1, r7
 800c3ca:	f7f4 f915 	bl	80005f8 <__aeabi_dmul>
 800c3ce:	4b7c      	ldr	r3, [pc, #496]	@ (800c5c0 <__ieee754_rem_pio2+0x330>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f7f3 ff5b 	bl	800028c <__adddf3>
 800c3d6:	f7f4 fbbf 	bl	8000b58 <__aeabi_d2iz>
 800c3da:	4605      	mov	r5, r0
 800c3dc:	f7f4 f8a2 	bl	8000524 <__aeabi_i2d>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3e8:	a363      	add	r3, pc, #396	@ (adr r3, 800c578 <__ieee754_rem_pio2+0x2e8>)
 800c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ee:	f7f4 f903 	bl	80005f8 <__aeabi_dmul>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	f7f3 ff45 	bl	8000288 <__aeabi_dsub>
 800c3fe:	a360      	add	r3, pc, #384	@ (adr r3, 800c580 <__ieee754_rem_pio2+0x2f0>)
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	4682      	mov	sl, r0
 800c406:	468b      	mov	fp, r1
 800c408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c40c:	f7f4 f8f4 	bl	80005f8 <__aeabi_dmul>
 800c410:	2d1f      	cmp	r5, #31
 800c412:	4606      	mov	r6, r0
 800c414:	460f      	mov	r7, r1
 800c416:	dc0c      	bgt.n	800c432 <__ieee754_rem_pio2+0x1a2>
 800c418:	4b6a      	ldr	r3, [pc, #424]	@ (800c5c4 <__ieee754_rem_pio2+0x334>)
 800c41a:	1e6a      	subs	r2, r5, #1
 800c41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c420:	4543      	cmp	r3, r8
 800c422:	d006      	beq.n	800c432 <__ieee754_rem_pio2+0x1a2>
 800c424:	4632      	mov	r2, r6
 800c426:	463b      	mov	r3, r7
 800c428:	4650      	mov	r0, sl
 800c42a:	4659      	mov	r1, fp
 800c42c:	f7f3 ff2c 	bl	8000288 <__aeabi_dsub>
 800c430:	e00e      	b.n	800c450 <__ieee754_rem_pio2+0x1c0>
 800c432:	463b      	mov	r3, r7
 800c434:	4632      	mov	r2, r6
 800c436:	4650      	mov	r0, sl
 800c438:	4659      	mov	r1, fp
 800c43a:	f7f3 ff25 	bl	8000288 <__aeabi_dsub>
 800c43e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c442:	9305      	str	r3, [sp, #20]
 800c444:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c448:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c44c:	2b10      	cmp	r3, #16
 800c44e:	dc02      	bgt.n	800c456 <__ieee754_rem_pio2+0x1c6>
 800c450:	e9c4 0100 	strd	r0, r1, [r4]
 800c454:	e039      	b.n	800c4ca <__ieee754_rem_pio2+0x23a>
 800c456:	a34c      	add	r3, pc, #304	@ (adr r3, 800c588 <__ieee754_rem_pio2+0x2f8>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c460:	f7f4 f8ca 	bl	80005f8 <__aeabi_dmul>
 800c464:	4606      	mov	r6, r0
 800c466:	460f      	mov	r7, r1
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	4650      	mov	r0, sl
 800c46e:	4659      	mov	r1, fp
 800c470:	f7f3 ff0a 	bl	8000288 <__aeabi_dsub>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	4680      	mov	r8, r0
 800c47a:	4689      	mov	r9, r1
 800c47c:	4650      	mov	r0, sl
 800c47e:	4659      	mov	r1, fp
 800c480:	f7f3 ff02 	bl	8000288 <__aeabi_dsub>
 800c484:	4632      	mov	r2, r6
 800c486:	463b      	mov	r3, r7
 800c488:	f7f3 fefe 	bl	8000288 <__aeabi_dsub>
 800c48c:	a340      	add	r3, pc, #256	@ (adr r3, 800c590 <__ieee754_rem_pio2+0x300>)
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	4606      	mov	r6, r0
 800c494:	460f      	mov	r7, r1
 800c496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c49a:	f7f4 f8ad 	bl	80005f8 <__aeabi_dmul>
 800c49e:	4632      	mov	r2, r6
 800c4a0:	463b      	mov	r3, r7
 800c4a2:	f7f3 fef1 	bl	8000288 <__aeabi_dsub>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4606      	mov	r6, r0
 800c4ac:	460f      	mov	r7, r1
 800c4ae:	4640      	mov	r0, r8
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	f7f3 fee9 	bl	8000288 <__aeabi_dsub>
 800c4b6:	9a05      	ldr	r2, [sp, #20]
 800c4b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	2b31      	cmp	r3, #49	@ 0x31
 800c4c0:	dc20      	bgt.n	800c504 <__ieee754_rem_pio2+0x274>
 800c4c2:	e9c4 0100 	strd	r0, r1, [r4]
 800c4c6:	46c2      	mov	sl, r8
 800c4c8:	46cb      	mov	fp, r9
 800c4ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c4ce:	4650      	mov	r0, sl
 800c4d0:	4642      	mov	r2, r8
 800c4d2:	464b      	mov	r3, r9
 800c4d4:	4659      	mov	r1, fp
 800c4d6:	f7f3 fed7 	bl	8000288 <__aeabi_dsub>
 800c4da:	463b      	mov	r3, r7
 800c4dc:	4632      	mov	r2, r6
 800c4de:	f7f3 fed3 	bl	8000288 <__aeabi_dsub>
 800c4e2:	9b04      	ldr	r3, [sp, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c4ea:	f6bf af0e 	bge.w	800c30a <__ieee754_rem_pio2+0x7a>
 800c4ee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c4f2:	6063      	str	r3, [r4, #4]
 800c4f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c4f8:	f8c4 8000 	str.w	r8, [r4]
 800c4fc:	60a0      	str	r0, [r4, #8]
 800c4fe:	60e3      	str	r3, [r4, #12]
 800c500:	426d      	negs	r5, r5
 800c502:	e702      	b.n	800c30a <__ieee754_rem_pio2+0x7a>
 800c504:	a326      	add	r3, pc, #152	@ (adr r3, 800c5a0 <__ieee754_rem_pio2+0x310>)
 800c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c50e:	f7f4 f873 	bl	80005f8 <__aeabi_dmul>
 800c512:	4606      	mov	r6, r0
 800c514:	460f      	mov	r7, r1
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	4640      	mov	r0, r8
 800c51c:	4649      	mov	r1, r9
 800c51e:	f7f3 feb3 	bl	8000288 <__aeabi_dsub>
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	4682      	mov	sl, r0
 800c528:	468b      	mov	fp, r1
 800c52a:	4640      	mov	r0, r8
 800c52c:	4649      	mov	r1, r9
 800c52e:	f7f3 feab 	bl	8000288 <__aeabi_dsub>
 800c532:	4632      	mov	r2, r6
 800c534:	463b      	mov	r3, r7
 800c536:	f7f3 fea7 	bl	8000288 <__aeabi_dsub>
 800c53a:	a31b      	add	r3, pc, #108	@ (adr r3, 800c5a8 <__ieee754_rem_pio2+0x318>)
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	4606      	mov	r6, r0
 800c542:	460f      	mov	r7, r1
 800c544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c548:	f7f4 f856 	bl	80005f8 <__aeabi_dmul>
 800c54c:	4632      	mov	r2, r6
 800c54e:	463b      	mov	r3, r7
 800c550:	f7f3 fe9a 	bl	8000288 <__aeabi_dsub>
 800c554:	4606      	mov	r6, r0
 800c556:	460f      	mov	r7, r1
 800c558:	e764      	b.n	800c424 <__ieee754_rem_pio2+0x194>
 800c55a:	4b1b      	ldr	r3, [pc, #108]	@ (800c5c8 <__ieee754_rem_pio2+0x338>)
 800c55c:	4598      	cmp	r8, r3
 800c55e:	d935      	bls.n	800c5cc <__ieee754_rem_pio2+0x33c>
 800c560:	4632      	mov	r2, r6
 800c562:	463b      	mov	r3, r7
 800c564:	4630      	mov	r0, r6
 800c566:	4639      	mov	r1, r7
 800c568:	f7f3 fe8e 	bl	8000288 <__aeabi_dsub>
 800c56c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c570:	e9c4 0100 	strd	r0, r1, [r4]
 800c574:	e69e      	b.n	800c2b4 <__ieee754_rem_pio2+0x24>
 800c576:	bf00      	nop
 800c578:	54400000 	.word	0x54400000
 800c57c:	3ff921fb 	.word	0x3ff921fb
 800c580:	1a626331 	.word	0x1a626331
 800c584:	3dd0b461 	.word	0x3dd0b461
 800c588:	1a600000 	.word	0x1a600000
 800c58c:	3dd0b461 	.word	0x3dd0b461
 800c590:	2e037073 	.word	0x2e037073
 800c594:	3ba3198a 	.word	0x3ba3198a
 800c598:	6dc9c883 	.word	0x6dc9c883
 800c59c:	3fe45f30 	.word	0x3fe45f30
 800c5a0:	2e000000 	.word	0x2e000000
 800c5a4:	3ba3198a 	.word	0x3ba3198a
 800c5a8:	252049c1 	.word	0x252049c1
 800c5ac:	397b839a 	.word	0x397b839a
 800c5b0:	3fe921fb 	.word	0x3fe921fb
 800c5b4:	4002d97b 	.word	0x4002d97b
 800c5b8:	3ff921fb 	.word	0x3ff921fb
 800c5bc:	413921fb 	.word	0x413921fb
 800c5c0:	3fe00000 	.word	0x3fe00000
 800c5c4:	0800d9b8 	.word	0x0800d9b8
 800c5c8:	7fefffff 	.word	0x7fefffff
 800c5cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c5d0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c5d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c5d8:	4630      	mov	r0, r6
 800c5da:	460f      	mov	r7, r1
 800c5dc:	f7f4 fabc 	bl	8000b58 <__aeabi_d2iz>
 800c5e0:	f7f3 ffa0 	bl	8000524 <__aeabi_i2d>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	4639      	mov	r1, r7
 800c5ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c5f0:	f7f3 fe4a 	bl	8000288 <__aeabi_dsub>
 800c5f4:	4b22      	ldr	r3, [pc, #136]	@ (800c680 <__ieee754_rem_pio2+0x3f0>)
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f7f3 fffe 	bl	80005f8 <__aeabi_dmul>
 800c5fc:	460f      	mov	r7, r1
 800c5fe:	4606      	mov	r6, r0
 800c600:	f7f4 faaa 	bl	8000b58 <__aeabi_d2iz>
 800c604:	f7f3 ff8e 	bl	8000524 <__aeabi_i2d>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4630      	mov	r0, r6
 800c60e:	4639      	mov	r1, r7
 800c610:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c614:	f7f3 fe38 	bl	8000288 <__aeabi_dsub>
 800c618:	4b19      	ldr	r3, [pc, #100]	@ (800c680 <__ieee754_rem_pio2+0x3f0>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	f7f3 ffec 	bl	80005f8 <__aeabi_dmul>
 800c620:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c624:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c628:	f04f 0803 	mov.w	r8, #3
 800c62c:	2600      	movs	r6, #0
 800c62e:	2700      	movs	r7, #0
 800c630:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c634:	4632      	mov	r2, r6
 800c636:	463b      	mov	r3, r7
 800c638:	46c2      	mov	sl, r8
 800c63a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c63e:	f7f4 fa43 	bl	8000ac8 <__aeabi_dcmpeq>
 800c642:	2800      	cmp	r0, #0
 800c644:	d1f4      	bne.n	800c630 <__ieee754_rem_pio2+0x3a0>
 800c646:	4b0f      	ldr	r3, [pc, #60]	@ (800c684 <__ieee754_rem_pio2+0x3f4>)
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	2302      	movs	r3, #2
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	462a      	mov	r2, r5
 800c650:	4653      	mov	r3, sl
 800c652:	4621      	mov	r1, r4
 800c654:	a806      	add	r0, sp, #24
 800c656:	f000 fa83 	bl	800cb60 <__kernel_rem_pio2>
 800c65a:	9b04      	ldr	r3, [sp, #16]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	4605      	mov	r5, r0
 800c660:	f6bf ae53 	bge.w	800c30a <__ieee754_rem_pio2+0x7a>
 800c664:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c668:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c66c:	e9c4 2300 	strd	r2, r3, [r4]
 800c670:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c674:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c678:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c67c:	e740      	b.n	800c500 <__ieee754_rem_pio2+0x270>
 800c67e:	bf00      	nop
 800c680:	41700000 	.word	0x41700000
 800c684:	0800da38 	.word	0x0800da38

0800c688 <expm1>:
 800c688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	ec5b ab10 	vmov	sl, fp, d0
 800c690:	49cf      	ldr	r1, [pc, #828]	@ (800c9d0 <expm1+0x348>)
 800c692:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c696:	428b      	cmp	r3, r1
 800c698:	b085      	sub	sp, #20
 800c69a:	f00b 4400 	and.w	r4, fp, #2147483648	@ 0x80000000
 800c69e:	d93b      	bls.n	800c718 <expm1+0x90>
 800c6a0:	49cc      	ldr	r1, [pc, #816]	@ (800c9d4 <expm1+0x34c>)
 800c6a2:	428b      	cmp	r3, r1
 800c6a4:	d922      	bls.n	800c6ec <expm1+0x64>
 800c6a6:	49cc      	ldr	r1, [pc, #816]	@ (800c9d8 <expm1+0x350>)
 800c6a8:	428b      	cmp	r3, r1
 800c6aa:	d911      	bls.n	800c6d0 <expm1+0x48>
 800c6ac:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800c6b0:	4653      	mov	r3, sl
 800c6b2:	431a      	orrs	r2, r3
 800c6b4:	d006      	beq.n	800c6c4 <expm1+0x3c>
 800c6b6:	4652      	mov	r2, sl
 800c6b8:	465b      	mov	r3, fp
 800c6ba:	4650      	mov	r0, sl
 800c6bc:	4659      	mov	r1, fp
 800c6be:	f7f3 fde5 	bl	800028c <__adddf3>
 800c6c2:	e1b7      	b.n	800ca34 <expm1+0x3ac>
 800c6c4:	bb1c      	cbnz	r4, 800c70e <expm1+0x86>
 800c6c6:	ec4b ab10 	vmov	d0, sl, fp
 800c6ca:	b005      	add	sp, #20
 800c6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d0:	a3a7      	add	r3, pc, #668	@ (adr r3, 800c970 <expm1+0x2e8>)
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	4650      	mov	r0, sl
 800c6d8:	4659      	mov	r1, fp
 800c6da:	f7f4 fa1d 	bl	8000b18 <__aeabi_dcmpgt>
 800c6de:	b128      	cbz	r0, 800c6ec <expm1+0x64>
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	b005      	add	sp, #20
 800c6e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	f000 ba32 	b.w	800cb50 <__math_oflow>
 800c6ec:	2c00      	cmp	r4, #0
 800c6ee:	f000 80c1 	beq.w	800c874 <expm1+0x1ec>
 800c6f2:	a3a1      	add	r3, pc, #644	@ (adr r3, 800c978 <expm1+0x2f0>)
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	4650      	mov	r0, sl
 800c6fa:	4659      	mov	r1, fp
 800c6fc:	f7f3 fdc6 	bl	800028c <__adddf3>
 800c700:	2200      	movs	r2, #0
 800c702:	2300      	movs	r3, #0
 800c704:	f7f4 f9ea 	bl	8000adc <__aeabi_dcmplt>
 800c708:	2800      	cmp	r0, #0
 800c70a:	f000 80de 	beq.w	800c8ca <expm1+0x242>
 800c70e:	f8df b2ec 	ldr.w	fp, [pc, #748]	@ 800c9fc <expm1+0x374>
 800c712:	f04f 0a00 	mov.w	sl, #0
 800c716:	e7d6      	b.n	800c6c6 <expm1+0x3e>
 800c718:	4ab0      	ldr	r2, [pc, #704]	@ (800c9dc <expm1+0x354>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	f240 80ed 	bls.w	800c8fa <expm1+0x272>
 800c720:	4aaf      	ldr	r2, [pc, #700]	@ (800c9e0 <expm1+0x358>)
 800c722:	4293      	cmp	r3, r2
 800c724:	f200 80dd 	bhi.w	800c8e2 <expm1+0x25a>
 800c728:	a395      	add	r3, pc, #596	@ (adr r3, 800c980 <expm1+0x2f8>)
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	4650      	mov	r0, sl
 800c730:	4659      	mov	r1, fp
 800c732:	2c00      	cmp	r4, #0
 800c734:	f040 8093 	bne.w	800c85e <expm1+0x1d6>
 800c738:	f7f3 fda6 	bl	8000288 <__aeabi_dsub>
 800c73c:	f20f 2948 	addw	r9, pc, #584	@ 0x248
 800c740:	e9d9 8900 	ldrd	r8, r9, [r9]
 800c744:	4606      	mov	r6, r0
 800c746:	460f      	mov	r7, r1
 800c748:	2401      	movs	r4, #1
 800c74a:	4642      	mov	r2, r8
 800c74c:	464b      	mov	r3, r9
 800c74e:	4630      	mov	r0, r6
 800c750:	4639      	mov	r1, r7
 800c752:	f7f3 fd99 	bl	8000288 <__aeabi_dsub>
 800c756:	4602      	mov	r2, r0
 800c758:	460b      	mov	r3, r1
 800c75a:	4682      	mov	sl, r0
 800c75c:	468b      	mov	fp, r1
 800c75e:	4630      	mov	r0, r6
 800c760:	4639      	mov	r1, r7
 800c762:	f7f3 fd91 	bl	8000288 <__aeabi_dsub>
 800c766:	4642      	mov	r2, r8
 800c768:	464b      	mov	r3, r9
 800c76a:	f7f3 fd8d 	bl	8000288 <__aeabi_dsub>
 800c76e:	e9cd 0100 	strd	r0, r1, [sp]
 800c772:	4b9c      	ldr	r3, [pc, #624]	@ (800c9e4 <expm1+0x35c>)
 800c774:	2200      	movs	r2, #0
 800c776:	4650      	mov	r0, sl
 800c778:	4659      	mov	r1, fp
 800c77a:	f7f3 ff3d 	bl	80005f8 <__aeabi_dmul>
 800c77e:	4606      	mov	r6, r0
 800c780:	460f      	mov	r7, r1
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	4650      	mov	r0, sl
 800c788:	4659      	mov	r1, fp
 800c78a:	f7f3 ff35 	bl	80005f8 <__aeabi_dmul>
 800c78e:	a380      	add	r3, pc, #512	@ (adr r3, 800c990 <expm1+0x308>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	4680      	mov	r8, r0
 800c796:	4689      	mov	r9, r1
 800c798:	f7f3 ff2e 	bl	80005f8 <__aeabi_dmul>
 800c79c:	a37e      	add	r3, pc, #504	@ (adr r3, 800c998 <expm1+0x310>)
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	f7f3 fd73 	bl	800028c <__adddf3>
 800c7a6:	4642      	mov	r2, r8
 800c7a8:	464b      	mov	r3, r9
 800c7aa:	f7f3 ff25 	bl	80005f8 <__aeabi_dmul>
 800c7ae:	a37c      	add	r3, pc, #496	@ (adr r3, 800c9a0 <expm1+0x318>)
 800c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b4:	f7f3 fd68 	bl	8000288 <__aeabi_dsub>
 800c7b8:	4642      	mov	r2, r8
 800c7ba:	464b      	mov	r3, r9
 800c7bc:	f7f3 ff1c 	bl	80005f8 <__aeabi_dmul>
 800c7c0:	a379      	add	r3, pc, #484	@ (adr r3, 800c9a8 <expm1+0x320>)
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	f7f3 fd61 	bl	800028c <__adddf3>
 800c7ca:	4642      	mov	r2, r8
 800c7cc:	464b      	mov	r3, r9
 800c7ce:	f7f3 ff13 	bl	80005f8 <__aeabi_dmul>
 800c7d2:	a377      	add	r3, pc, #476	@ (adr r3, 800c9b0 <expm1+0x328>)
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	f7f3 fd56 	bl	8000288 <__aeabi_dsub>
 800c7dc:	4642      	mov	r2, r8
 800c7de:	464b      	mov	r3, r9
 800c7e0:	f7f3 ff0a 	bl	80005f8 <__aeabi_dmul>
 800c7e4:	4b80      	ldr	r3, [pc, #512]	@ (800c9e8 <expm1+0x360>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f7f3 fd50 	bl	800028c <__adddf3>
 800c7ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	f7f3 fefe 	bl	80005f8 <__aeabi_dmul>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	2000      	movs	r0, #0
 800c802:	497a      	ldr	r1, [pc, #488]	@ (800c9ec <expm1+0x364>)
 800c804:	f7f3 fd40 	bl	8000288 <__aeabi_dsub>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4606      	mov	r6, r0
 800c80e:	460f      	mov	r7, r1
 800c810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c814:	f7f3 fd38 	bl	8000288 <__aeabi_dsub>
 800c818:	4632      	mov	r2, r6
 800c81a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c81e:	463b      	mov	r3, r7
 800c820:	4650      	mov	r0, sl
 800c822:	4659      	mov	r1, fp
 800c824:	f7f3 fee8 	bl	80005f8 <__aeabi_dmul>
 800c828:	4602      	mov	r2, r0
 800c82a:	460b      	mov	r3, r1
 800c82c:	2000      	movs	r0, #0
 800c82e:	4970      	ldr	r1, [pc, #448]	@ (800c9f0 <expm1+0x368>)
 800c830:	f7f3 fd2a 	bl	8000288 <__aeabi_dsub>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c83c:	f7f4 f806 	bl	800084c <__aeabi_ddiv>
 800c840:	4642      	mov	r2, r8
 800c842:	464b      	mov	r3, r9
 800c844:	f7f3 fed8 	bl	80005f8 <__aeabi_dmul>
 800c848:	4602      	mov	r2, r0
 800c84a:	460b      	mov	r3, r1
 800c84c:	2c00      	cmp	r4, #0
 800c84e:	d16b      	bne.n	800c928 <expm1+0x2a0>
 800c850:	4650      	mov	r0, sl
 800c852:	4659      	mov	r1, fp
 800c854:	f7f3 fed0 	bl	80005f8 <__aeabi_dmul>
 800c858:	4642      	mov	r2, r8
 800c85a:	464b      	mov	r3, r9
 800c85c:	e059      	b.n	800c912 <expm1+0x28a>
 800c85e:	f7f3 fd15 	bl	800028c <__adddf3>
 800c862:	f20f 1954 	addw	r9, pc, #340	@ 0x154
 800c866:	e9d9 8900 	ldrd	r8, r9, [r9]
 800c86a:	4606      	mov	r6, r0
 800c86c:	460f      	mov	r7, r1
 800c86e:	f04f 34ff 	mov.w	r4, #4294967295
 800c872:	e76a      	b.n	800c74a <expm1+0xc2>
 800c874:	a352      	add	r3, pc, #328	@ (adr r3, 800c9c0 <expm1+0x338>)
 800c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87a:	4650      	mov	r0, sl
 800c87c:	4659      	mov	r1, fp
 800c87e:	f7f3 febb 	bl	80005f8 <__aeabi_dmul>
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	4957      	ldr	r1, [pc, #348]	@ (800c9e4 <expm1+0x35c>)
 800c888:	2000      	movs	r0, #0
 800c88a:	f7f3 fcff 	bl	800028c <__adddf3>
 800c88e:	f7f4 f963 	bl	8000b58 <__aeabi_d2iz>
 800c892:	4604      	mov	r4, r0
 800c894:	f7f3 fe46 	bl	8000524 <__aeabi_i2d>
 800c898:	a339      	add	r3, pc, #228	@ (adr r3, 800c980 <expm1+0x2f8>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	4680      	mov	r8, r0
 800c8a0:	4689      	mov	r9, r1
 800c8a2:	f7f3 fea9 	bl	80005f8 <__aeabi_dmul>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4650      	mov	r0, sl
 800c8ac:	4659      	mov	r1, fp
 800c8ae:	f7f3 fceb 	bl	8000288 <__aeabi_dsub>
 800c8b2:	a335      	add	r3, pc, #212	@ (adr r3, 800c988 <expm1+0x300>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	4606      	mov	r6, r0
 800c8ba:	460f      	mov	r7, r1
 800c8bc:	4640      	mov	r0, r8
 800c8be:	4649      	mov	r1, r9
 800c8c0:	f7f3 fe9a 	bl	80005f8 <__aeabi_dmul>
 800c8c4:	4680      	mov	r8, r0
 800c8c6:	4689      	mov	r9, r1
 800c8c8:	e73f      	b.n	800c74a <expm1+0xc2>
 800c8ca:	a33d      	add	r3, pc, #244	@ (adr r3, 800c9c0 <expm1+0x338>)
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	4650      	mov	r0, sl
 800c8d2:	4659      	mov	r1, fp
 800c8d4:	f7f3 fe90 	bl	80005f8 <__aeabi_dmul>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	4945      	ldr	r1, [pc, #276]	@ (800c9f4 <expm1+0x36c>)
 800c8de:	2000      	movs	r0, #0
 800c8e0:	e7d3      	b.n	800c88a <expm1+0x202>
 800c8e2:	a337      	add	r3, pc, #220	@ (adr r3, 800c9c0 <expm1+0x338>)
 800c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e8:	4650      	mov	r0, sl
 800c8ea:	4659      	mov	r1, fp
 800c8ec:	f7f3 fe84 	bl	80005f8 <__aeabi_dmul>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	2c00      	cmp	r4, #0
 800c8f6:	d1f1      	bne.n	800c8dc <expm1+0x254>
 800c8f8:	e7c5      	b.n	800c886 <expm1+0x1fe>
 800c8fa:	4a3f      	ldr	r2, [pc, #252]	@ (800c9f8 <expm1+0x370>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d811      	bhi.n	800c924 <expm1+0x29c>
 800c900:	a331      	add	r3, pc, #196	@ (adr r3, 800c9c8 <expm1+0x340>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	4650      	mov	r0, sl
 800c908:	4659      	mov	r1, fp
 800c90a:	f7f3 fcbf 	bl	800028c <__adddf3>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	f7f3 fcb9 	bl	8000288 <__aeabi_dsub>
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	4650      	mov	r0, sl
 800c91c:	4659      	mov	r1, fp
 800c91e:	f7f3 fcb3 	bl	8000288 <__aeabi_dsub>
 800c922:	e087      	b.n	800ca34 <expm1+0x3ac>
 800c924:	2400      	movs	r4, #0
 800c926:	e724      	b.n	800c772 <expm1+0xea>
 800c928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c92c:	f7f3 fcac 	bl	8000288 <__aeabi_dsub>
 800c930:	4652      	mov	r2, sl
 800c932:	465b      	mov	r3, fp
 800c934:	f7f3 fe60 	bl	80005f8 <__aeabi_dmul>
 800c938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c93c:	f7f3 fca4 	bl	8000288 <__aeabi_dsub>
 800c940:	464b      	mov	r3, r9
 800c942:	4642      	mov	r2, r8
 800c944:	f7f3 fca0 	bl	8000288 <__aeabi_dsub>
 800c948:	1c63      	adds	r3, r4, #1
 800c94a:	4606      	mov	r6, r0
 800c94c:	460f      	mov	r7, r1
 800c94e:	d157      	bne.n	800ca00 <expm1+0x378>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4650      	mov	r0, sl
 800c956:	4659      	mov	r1, fp
 800c958:	f7f3 fc96 	bl	8000288 <__aeabi_dsub>
 800c95c:	4b21      	ldr	r3, [pc, #132]	@ (800c9e4 <expm1+0x35c>)
 800c95e:	2200      	movs	r2, #0
 800c960:	f7f3 fe4a 	bl	80005f8 <__aeabi_dmul>
 800c964:	4b1f      	ldr	r3, [pc, #124]	@ (800c9e4 <expm1+0x35c>)
 800c966:	2200      	movs	r2, #0
 800c968:	e7d9      	b.n	800c91e <expm1+0x296>
 800c96a:	bf00      	nop
 800c96c:	f3af 8000 	nop.w
 800c970:	fefa39ef 	.word	0xfefa39ef
 800c974:	40862e42 	.word	0x40862e42
 800c978:	c2f8f359 	.word	0xc2f8f359
 800c97c:	01a56e1f 	.word	0x01a56e1f
 800c980:	fee00000 	.word	0xfee00000
 800c984:	3fe62e42 	.word	0x3fe62e42
 800c988:	35793c76 	.word	0x35793c76
 800c98c:	3dea39ef 	.word	0x3dea39ef
 800c990:	6e09c32d 	.word	0x6e09c32d
 800c994:	be8afdb7 	.word	0xbe8afdb7
 800c998:	86e65239 	.word	0x86e65239
 800c99c:	3ed0cfca 	.word	0x3ed0cfca
 800c9a0:	9eaadbb7 	.word	0x9eaadbb7
 800c9a4:	3f14ce19 	.word	0x3f14ce19
 800c9a8:	19fe5585 	.word	0x19fe5585
 800c9ac:	3f5a01a0 	.word	0x3f5a01a0
 800c9b0:	111110f4 	.word	0x111110f4
 800c9b4:	3fa11111 	.word	0x3fa11111
 800c9b8:	35793c76 	.word	0x35793c76
 800c9bc:	bdea39ef 	.word	0xbdea39ef
 800c9c0:	652b82fe 	.word	0x652b82fe
 800c9c4:	3ff71547 	.word	0x3ff71547
 800c9c8:	8800759c 	.word	0x8800759c
 800c9cc:	7e37e43c 	.word	0x7e37e43c
 800c9d0:	40436879 	.word	0x40436879
 800c9d4:	40862e41 	.word	0x40862e41
 800c9d8:	7fefffff 	.word	0x7fefffff
 800c9dc:	3fd62e42 	.word	0x3fd62e42
 800c9e0:	3ff0a2b1 	.word	0x3ff0a2b1
 800c9e4:	3fe00000 	.word	0x3fe00000
 800c9e8:	3ff00000 	.word	0x3ff00000
 800c9ec:	40080000 	.word	0x40080000
 800c9f0:	40180000 	.word	0x40180000
 800c9f4:	bfe00000 	.word	0xbfe00000
 800c9f8:	3c8fffff 	.word	0x3c8fffff
 800c9fc:	bff00000 	.word	0xbff00000
 800ca00:	2c01      	cmp	r4, #1
 800ca02:	d127      	bne.n	800ca54 <expm1+0x3cc>
 800ca04:	4b34      	ldr	r3, [pc, #208]	@ (800cad8 <expm1+0x450>)
 800ca06:	2200      	movs	r2, #0
 800ca08:	4650      	mov	r0, sl
 800ca0a:	4659      	mov	r1, fp
 800ca0c:	f7f4 f866 	bl	8000adc <__aeabi_dcmplt>
 800ca10:	b198      	cbz	r0, 800ca3a <expm1+0x3b2>
 800ca12:	4b32      	ldr	r3, [pc, #200]	@ (800cadc <expm1+0x454>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	4650      	mov	r0, sl
 800ca18:	4659      	mov	r1, fp
 800ca1a:	f7f3 fc37 	bl	800028c <__adddf3>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	4630      	mov	r0, r6
 800ca24:	4639      	mov	r1, r7
 800ca26:	f7f3 fc2f 	bl	8000288 <__aeabi_dsub>
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800ca30:	f7f3 fde2 	bl	80005f8 <__aeabi_dmul>
 800ca34:	4682      	mov	sl, r0
 800ca36:	468b      	mov	fp, r1
 800ca38:	e645      	b.n	800c6c6 <expm1+0x3e>
 800ca3a:	4632      	mov	r2, r6
 800ca3c:	463b      	mov	r3, r7
 800ca3e:	4650      	mov	r0, sl
 800ca40:	4659      	mov	r1, fp
 800ca42:	f7f3 fc21 	bl	8000288 <__aeabi_dsub>
 800ca46:	4602      	mov	r2, r0
 800ca48:	460b      	mov	r3, r1
 800ca4a:	f7f3 fc1f 	bl	800028c <__adddf3>
 800ca4e:	4b24      	ldr	r3, [pc, #144]	@ (800cae0 <expm1+0x458>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	e634      	b.n	800c6be <expm1+0x36>
 800ca54:	1c63      	adds	r3, r4, #1
 800ca56:	2b39      	cmp	r3, #57	@ 0x39
 800ca58:	ea4f 5504 	mov.w	r5, r4, lsl #20
 800ca5c:	d90e      	bls.n	800ca7c <expm1+0x3f4>
 800ca5e:	4652      	mov	r2, sl
 800ca60:	465b      	mov	r3, fp
 800ca62:	f7f3 fc11 	bl	8000288 <__aeabi_dsub>
 800ca66:	4602      	mov	r2, r0
 800ca68:	460b      	mov	r3, r1
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	491c      	ldr	r1, [pc, #112]	@ (800cae0 <expm1+0x458>)
 800ca6e:	f7f3 fc0b 	bl	8000288 <__aeabi_dsub>
 800ca72:	186b      	adds	r3, r5, r1
 800ca74:	4619      	mov	r1, r3
 800ca76:	2200      	movs	r2, #0
 800ca78:	4b19      	ldr	r3, [pc, #100]	@ (800cae0 <expm1+0x458>)
 800ca7a:	e750      	b.n	800c91e <expm1+0x296>
 800ca7c:	2c13      	cmp	r4, #19
 800ca7e:	f04f 0200 	mov.w	r2, #0
 800ca82:	dc17      	bgt.n	800cab4 <expm1+0x42c>
 800ca84:	f44f 1600 	mov.w	r6, #2097152	@ 0x200000
 800ca88:	fa46 f404 	asr.w	r4, r6, r4
 800ca8c:	f1c4 537f 	rsb	r3, r4, #1069547520	@ 0x3fc00000
 800ca90:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
 800ca94:	4616      	mov	r6, r2
 800ca96:	461f      	mov	r7, r3
 800ca98:	4652      	mov	r2, sl
 800ca9a:	465b      	mov	r3, fp
 800ca9c:	f7f3 fbf4 	bl	8000288 <__aeabi_dsub>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4630      	mov	r0, r6
 800caa6:	4639      	mov	r1, r7
 800caa8:	f7f3 fbee 	bl	8000288 <__aeabi_dsub>
 800caac:	4682      	mov	sl, r0
 800caae:	eb05 0b01 	add.w	fp, r5, r1
 800cab2:	e608      	b.n	800c6c6 <expm1+0x3e>
 800cab4:	f5c4 747f 	rsb	r4, r4, #1020	@ 0x3fc
 800cab8:	3403      	adds	r4, #3
 800caba:	0523      	lsls	r3, r4, #20
 800cabc:	f7f3 fbe6 	bl	800028c <__adddf3>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4650      	mov	r0, sl
 800cac6:	4659      	mov	r1, fp
 800cac8:	f7f3 fbde 	bl	8000288 <__aeabi_dsub>
 800cacc:	4b04      	ldr	r3, [pc, #16]	@ (800cae0 <expm1+0x458>)
 800cace:	2200      	movs	r2, #0
 800cad0:	f7f3 fbdc 	bl	800028c <__adddf3>
 800cad4:	e7ea      	b.n	800caac <expm1+0x424>
 800cad6:	bf00      	nop
 800cad8:	bfd00000 	.word	0xbfd00000
 800cadc:	3fe00000 	.word	0x3fe00000
 800cae0:	3ff00000 	.word	0x3ff00000

0800cae4 <with_errno>:
 800cae4:	b510      	push	{r4, lr}
 800cae6:	ed2d 8b02 	vpush	{d8}
 800caea:	eeb0 8a40 	vmov.f32	s16, s0
 800caee:	eef0 8a60 	vmov.f32	s17, s1
 800caf2:	4604      	mov	r4, r0
 800caf4:	f7fb ff66 	bl	80089c4 <__errno>
 800caf8:	eeb0 0a48 	vmov.f32	s0, s16
 800cafc:	eef0 0a68 	vmov.f32	s1, s17
 800cb00:	ecbd 8b02 	vpop	{d8}
 800cb04:	6004      	str	r4, [r0, #0]
 800cb06:	bd10      	pop	{r4, pc}

0800cb08 <xflow>:
 800cb08:	4603      	mov	r3, r0
 800cb0a:	b507      	push	{r0, r1, r2, lr}
 800cb0c:	ec51 0b10 	vmov	r0, r1, d0
 800cb10:	b183      	cbz	r3, 800cb34 <xflow+0x2c>
 800cb12:	4602      	mov	r2, r0
 800cb14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cb18:	e9cd 2300 	strd	r2, r3, [sp]
 800cb1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb20:	f7f3 fd6a 	bl	80005f8 <__aeabi_dmul>
 800cb24:	ec41 0b10 	vmov	d0, r0, r1
 800cb28:	2022      	movs	r0, #34	@ 0x22
 800cb2a:	b003      	add	sp, #12
 800cb2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb30:	f7ff bfd8 	b.w	800cae4 <with_errno>
 800cb34:	4602      	mov	r2, r0
 800cb36:	460b      	mov	r3, r1
 800cb38:	e7ee      	b.n	800cb18 <xflow+0x10>
 800cb3a:	0000      	movs	r0, r0
 800cb3c:	0000      	movs	r0, r0
	...

0800cb40 <__math_uflow>:
 800cb40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cb48 <__math_uflow+0x8>
 800cb44:	f7ff bfe0 	b.w	800cb08 <xflow>
 800cb48:	00000000 	.word	0x00000000
 800cb4c:	10000000 	.word	0x10000000

0800cb50 <__math_oflow>:
 800cb50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cb58 <__math_oflow+0x8>
 800cb54:	f7ff bfd8 	b.w	800cb08 <xflow>
 800cb58:	00000000 	.word	0x00000000
 800cb5c:	70000000 	.word	0x70000000

0800cb60 <__kernel_rem_pio2>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	ed2d 8b02 	vpush	{d8}
 800cb68:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800cb6c:	f112 0f14 	cmn.w	r2, #20
 800cb70:	9306      	str	r3, [sp, #24]
 800cb72:	9104      	str	r1, [sp, #16]
 800cb74:	4bbe      	ldr	r3, [pc, #760]	@ (800ce70 <__kernel_rem_pio2+0x310>)
 800cb76:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800cb78:	9008      	str	r0, [sp, #32]
 800cb7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	9b06      	ldr	r3, [sp, #24]
 800cb82:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb86:	bfa8      	it	ge
 800cb88:	1ed4      	subge	r4, r2, #3
 800cb8a:	9305      	str	r3, [sp, #20]
 800cb8c:	bfb2      	itee	lt
 800cb8e:	2400      	movlt	r4, #0
 800cb90:	2318      	movge	r3, #24
 800cb92:	fb94 f4f3 	sdivge	r4, r4, r3
 800cb96:	f06f 0317 	mvn.w	r3, #23
 800cb9a:	fb04 3303 	mla	r3, r4, r3, r3
 800cb9e:	eb03 0b02 	add.w	fp, r3, r2
 800cba2:	9b00      	ldr	r3, [sp, #0]
 800cba4:	9a05      	ldr	r2, [sp, #20]
 800cba6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800ce60 <__kernel_rem_pio2+0x300>
 800cbaa:	eb03 0802 	add.w	r8, r3, r2
 800cbae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cbb0:	1aa7      	subs	r7, r4, r2
 800cbb2:	ae20      	add	r6, sp, #128	@ 0x80
 800cbb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cbb8:	2500      	movs	r5, #0
 800cbba:	4545      	cmp	r5, r8
 800cbbc:	dd13      	ble.n	800cbe6 <__kernel_rem_pio2+0x86>
 800cbbe:	9b06      	ldr	r3, [sp, #24]
 800cbc0:	aa20      	add	r2, sp, #128	@ 0x80
 800cbc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cbc6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800cbca:	f04f 0800 	mov.w	r8, #0
 800cbce:	9b00      	ldr	r3, [sp, #0]
 800cbd0:	4598      	cmp	r8, r3
 800cbd2:	dc31      	bgt.n	800cc38 <__kernel_rem_pio2+0xd8>
 800cbd4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800ce60 <__kernel_rem_pio2+0x300>
 800cbd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cbdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cbe0:	462f      	mov	r7, r5
 800cbe2:	2600      	movs	r6, #0
 800cbe4:	e01b      	b.n	800cc1e <__kernel_rem_pio2+0xbe>
 800cbe6:	42ef      	cmn	r7, r5
 800cbe8:	d407      	bmi.n	800cbfa <__kernel_rem_pio2+0x9a>
 800cbea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cbee:	f7f3 fc99 	bl	8000524 <__aeabi_i2d>
 800cbf2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cbf6:	3501      	adds	r5, #1
 800cbf8:	e7df      	b.n	800cbba <__kernel_rem_pio2+0x5a>
 800cbfa:	ec51 0b18 	vmov	r0, r1, d8
 800cbfe:	e7f8      	b.n	800cbf2 <__kernel_rem_pio2+0x92>
 800cc00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cc08:	f7f3 fcf6 	bl	80005f8 <__aeabi_dmul>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc14:	f7f3 fb3a 	bl	800028c <__adddf3>
 800cc18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc1c:	3601      	adds	r6, #1
 800cc1e:	9b05      	ldr	r3, [sp, #20]
 800cc20:	429e      	cmp	r6, r3
 800cc22:	f1a7 0708 	sub.w	r7, r7, #8
 800cc26:	ddeb      	ble.n	800cc00 <__kernel_rem_pio2+0xa0>
 800cc28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc2c:	f108 0801 	add.w	r8, r8, #1
 800cc30:	ecaa 7b02 	vstmia	sl!, {d7}
 800cc34:	3508      	adds	r5, #8
 800cc36:	e7ca      	b.n	800cbce <__kernel_rem_pio2+0x6e>
 800cc38:	9b00      	ldr	r3, [sp, #0]
 800cc3a:	f8dd 8000 	ldr.w	r8, [sp]
 800cc3e:	aa0c      	add	r2, sp, #48	@ 0x30
 800cc40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc44:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc46:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cc48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cc4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc4e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800cc52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc54:	ab98      	add	r3, sp, #608	@ 0x260
 800cc56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cc5a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800cc5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc62:	ac0c      	add	r4, sp, #48	@ 0x30
 800cc64:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cc66:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800cc6a:	46a1      	mov	r9, r4
 800cc6c:	46c2      	mov	sl, r8
 800cc6e:	f1ba 0f00 	cmp.w	sl, #0
 800cc72:	f1a5 0508 	sub.w	r5, r5, #8
 800cc76:	dc77      	bgt.n	800cd68 <__kernel_rem_pio2+0x208>
 800cc78:	4658      	mov	r0, fp
 800cc7a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800cc7e:	f000 fac7 	bl	800d210 <scalbn>
 800cc82:	ec57 6b10 	vmov	r6, r7, d0
 800cc86:	2200      	movs	r2, #0
 800cc88:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	4639      	mov	r1, r7
 800cc90:	f7f3 fcb2 	bl	80005f8 <__aeabi_dmul>
 800cc94:	ec41 0b10 	vmov	d0, r0, r1
 800cc98:	f000 fb3a 	bl	800d310 <floor>
 800cc9c:	4b75      	ldr	r3, [pc, #468]	@ (800ce74 <__kernel_rem_pio2+0x314>)
 800cc9e:	ec51 0b10 	vmov	r0, r1, d0
 800cca2:	2200      	movs	r2, #0
 800cca4:	f7f3 fca8 	bl	80005f8 <__aeabi_dmul>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	4630      	mov	r0, r6
 800ccae:	4639      	mov	r1, r7
 800ccb0:	f7f3 faea 	bl	8000288 <__aeabi_dsub>
 800ccb4:	460f      	mov	r7, r1
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	f7f3 ff4e 	bl	8000b58 <__aeabi_d2iz>
 800ccbc:	9002      	str	r0, [sp, #8]
 800ccbe:	f7f3 fc31 	bl	8000524 <__aeabi_i2d>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	4639      	mov	r1, r7
 800ccca:	f7f3 fadd 	bl	8000288 <__aeabi_dsub>
 800ccce:	f1bb 0f00 	cmp.w	fp, #0
 800ccd2:	4606      	mov	r6, r0
 800ccd4:	460f      	mov	r7, r1
 800ccd6:	dd6c      	ble.n	800cdb2 <__kernel_rem_pio2+0x252>
 800ccd8:	f108 31ff 	add.w	r1, r8, #4294967295
 800ccdc:	ab0c      	add	r3, sp, #48	@ 0x30
 800ccde:	9d02      	ldr	r5, [sp, #8]
 800cce0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cce4:	f1cb 0018 	rsb	r0, fp, #24
 800cce8:	fa43 f200 	asr.w	r2, r3, r0
 800ccec:	4415      	add	r5, r2
 800ccee:	4082      	lsls	r2, r0
 800ccf0:	1a9b      	subs	r3, r3, r2
 800ccf2:	aa0c      	add	r2, sp, #48	@ 0x30
 800ccf4:	9502      	str	r5, [sp, #8]
 800ccf6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ccfa:	f1cb 0217 	rsb	r2, fp, #23
 800ccfe:	fa43 f902 	asr.w	r9, r3, r2
 800cd02:	f1b9 0f00 	cmp.w	r9, #0
 800cd06:	dd64      	ble.n	800cdd2 <__kernel_rem_pio2+0x272>
 800cd08:	9b02      	ldr	r3, [sp, #8]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	9302      	str	r3, [sp, #8]
 800cd10:	4615      	mov	r5, r2
 800cd12:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800cd16:	4590      	cmp	r8, r2
 800cd18:	f300 80b8 	bgt.w	800ce8c <__kernel_rem_pio2+0x32c>
 800cd1c:	f1bb 0f00 	cmp.w	fp, #0
 800cd20:	dd07      	ble.n	800cd32 <__kernel_rem_pio2+0x1d2>
 800cd22:	f1bb 0f01 	cmp.w	fp, #1
 800cd26:	f000 80bf 	beq.w	800cea8 <__kernel_rem_pio2+0x348>
 800cd2a:	f1bb 0f02 	cmp.w	fp, #2
 800cd2e:	f000 80c6 	beq.w	800cebe <__kernel_rem_pio2+0x35e>
 800cd32:	f1b9 0f02 	cmp.w	r9, #2
 800cd36:	d14c      	bne.n	800cdd2 <__kernel_rem_pio2+0x272>
 800cd38:	4632      	mov	r2, r6
 800cd3a:	463b      	mov	r3, r7
 800cd3c:	494e      	ldr	r1, [pc, #312]	@ (800ce78 <__kernel_rem_pio2+0x318>)
 800cd3e:	2000      	movs	r0, #0
 800cd40:	f7f3 faa2 	bl	8000288 <__aeabi_dsub>
 800cd44:	4606      	mov	r6, r0
 800cd46:	460f      	mov	r7, r1
 800cd48:	2d00      	cmp	r5, #0
 800cd4a:	d042      	beq.n	800cdd2 <__kernel_rem_pio2+0x272>
 800cd4c:	4658      	mov	r0, fp
 800cd4e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800ce68 <__kernel_rem_pio2+0x308>
 800cd52:	f000 fa5d 	bl	800d210 <scalbn>
 800cd56:	4630      	mov	r0, r6
 800cd58:	4639      	mov	r1, r7
 800cd5a:	ec53 2b10 	vmov	r2, r3, d0
 800cd5e:	f7f3 fa93 	bl	8000288 <__aeabi_dsub>
 800cd62:	4606      	mov	r6, r0
 800cd64:	460f      	mov	r7, r1
 800cd66:	e034      	b.n	800cdd2 <__kernel_rem_pio2+0x272>
 800cd68:	4b44      	ldr	r3, [pc, #272]	@ (800ce7c <__kernel_rem_pio2+0x31c>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd70:	f7f3 fc42 	bl	80005f8 <__aeabi_dmul>
 800cd74:	f7f3 fef0 	bl	8000b58 <__aeabi_d2iz>
 800cd78:	f7f3 fbd4 	bl	8000524 <__aeabi_i2d>
 800cd7c:	4b40      	ldr	r3, [pc, #256]	@ (800ce80 <__kernel_rem_pio2+0x320>)
 800cd7e:	2200      	movs	r2, #0
 800cd80:	4606      	mov	r6, r0
 800cd82:	460f      	mov	r7, r1
 800cd84:	f7f3 fc38 	bl	80005f8 <__aeabi_dmul>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd90:	f7f3 fa7a 	bl	8000288 <__aeabi_dsub>
 800cd94:	f7f3 fee0 	bl	8000b58 <__aeabi_d2iz>
 800cd98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd9c:	f849 0b04 	str.w	r0, [r9], #4
 800cda0:	4639      	mov	r1, r7
 800cda2:	4630      	mov	r0, r6
 800cda4:	f7f3 fa72 	bl	800028c <__adddf3>
 800cda8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdb0:	e75d      	b.n	800cc6e <__kernel_rem_pio2+0x10e>
 800cdb2:	d107      	bne.n	800cdc4 <__kernel_rem_pio2+0x264>
 800cdb4:	f108 33ff 	add.w	r3, r8, #4294967295
 800cdb8:	aa0c      	add	r2, sp, #48	@ 0x30
 800cdba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdbe:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800cdc2:	e79e      	b.n	800cd02 <__kernel_rem_pio2+0x1a2>
 800cdc4:	4b2f      	ldr	r3, [pc, #188]	@ (800ce84 <__kernel_rem_pio2+0x324>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f7f3 fe9c 	bl	8000b04 <__aeabi_dcmpge>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d143      	bne.n	800ce58 <__kernel_rem_pio2+0x2f8>
 800cdd0:	4681      	mov	r9, r0
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	4630      	mov	r0, r6
 800cdd8:	4639      	mov	r1, r7
 800cdda:	f7f3 fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	f000 80bf 	beq.w	800cf62 <__kernel_rem_pio2+0x402>
 800cde4:	f108 33ff 	add.w	r3, r8, #4294967295
 800cde8:	2200      	movs	r2, #0
 800cdea:	9900      	ldr	r1, [sp, #0]
 800cdec:	428b      	cmp	r3, r1
 800cdee:	da6e      	bge.n	800cece <__kernel_rem_pio2+0x36e>
 800cdf0:	2a00      	cmp	r2, #0
 800cdf2:	f000 8089 	beq.w	800cf08 <__kernel_rem_pio2+0x3a8>
 800cdf6:	f108 38ff 	add.w	r8, r8, #4294967295
 800cdfa:	ab0c      	add	r3, sp, #48	@ 0x30
 800cdfc:	f1ab 0b18 	sub.w	fp, fp, #24
 800ce00:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d0f6      	beq.n	800cdf6 <__kernel_rem_pio2+0x296>
 800ce08:	4658      	mov	r0, fp
 800ce0a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800ce68 <__kernel_rem_pio2+0x308>
 800ce0e:	f000 f9ff 	bl	800d210 <scalbn>
 800ce12:	f108 0301 	add.w	r3, r8, #1
 800ce16:	00da      	lsls	r2, r3, #3
 800ce18:	9205      	str	r2, [sp, #20]
 800ce1a:	ec55 4b10 	vmov	r4, r5, d0
 800ce1e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ce20:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800ce7c <__kernel_rem_pio2+0x31c>
 800ce24:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ce28:	4646      	mov	r6, r8
 800ce2a:	f04f 0a00 	mov.w	sl, #0
 800ce2e:	2e00      	cmp	r6, #0
 800ce30:	f280 80cf 	bge.w	800cfd2 <__kernel_rem_pio2+0x472>
 800ce34:	4644      	mov	r4, r8
 800ce36:	2c00      	cmp	r4, #0
 800ce38:	f2c0 80fd 	blt.w	800d036 <__kernel_rem_pio2+0x4d6>
 800ce3c:	4b12      	ldr	r3, [pc, #72]	@ (800ce88 <__kernel_rem_pio2+0x328>)
 800ce3e:	461f      	mov	r7, r3
 800ce40:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ce42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce46:	9306      	str	r3, [sp, #24]
 800ce48:	f04f 0a00 	mov.w	sl, #0
 800ce4c:	f04f 0b00 	mov.w	fp, #0
 800ce50:	2600      	movs	r6, #0
 800ce52:	eba8 0504 	sub.w	r5, r8, r4
 800ce56:	e0e2      	b.n	800d01e <__kernel_rem_pio2+0x4be>
 800ce58:	f04f 0902 	mov.w	r9, #2
 800ce5c:	e754      	b.n	800cd08 <__kernel_rem_pio2+0x1a8>
 800ce5e:	bf00      	nop
	...
 800ce6c:	3ff00000 	.word	0x3ff00000
 800ce70:	0800db80 	.word	0x0800db80
 800ce74:	40200000 	.word	0x40200000
 800ce78:	3ff00000 	.word	0x3ff00000
 800ce7c:	3e700000 	.word	0x3e700000
 800ce80:	41700000 	.word	0x41700000
 800ce84:	3fe00000 	.word	0x3fe00000
 800ce88:	0800db40 	.word	0x0800db40
 800ce8c:	f854 3b04 	ldr.w	r3, [r4], #4
 800ce90:	b945      	cbnz	r5, 800cea4 <__kernel_rem_pio2+0x344>
 800ce92:	b123      	cbz	r3, 800ce9e <__kernel_rem_pio2+0x33e>
 800ce94:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800ce98:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	3201      	adds	r2, #1
 800cea0:	461d      	mov	r5, r3
 800cea2:	e738      	b.n	800cd16 <__kernel_rem_pio2+0x1b6>
 800cea4:	1acb      	subs	r3, r1, r3
 800cea6:	e7f7      	b.n	800ce98 <__kernel_rem_pio2+0x338>
 800cea8:	f108 32ff 	add.w	r2, r8, #4294967295
 800ceac:	ab0c      	add	r3, sp, #48	@ 0x30
 800ceae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceb2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ceb6:	a90c      	add	r1, sp, #48	@ 0x30
 800ceb8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cebc:	e739      	b.n	800cd32 <__kernel_rem_pio2+0x1d2>
 800cebe:	f108 32ff 	add.w	r2, r8, #4294967295
 800cec2:	ab0c      	add	r3, sp, #48	@ 0x30
 800cec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cec8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cecc:	e7f3      	b.n	800ceb6 <__kernel_rem_pio2+0x356>
 800cece:	a90c      	add	r1, sp, #48	@ 0x30
 800ced0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ced4:	3b01      	subs	r3, #1
 800ced6:	430a      	orrs	r2, r1
 800ced8:	e787      	b.n	800cdea <__kernel_rem_pio2+0x28a>
 800ceda:	3401      	adds	r4, #1
 800cedc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cee0:	2a00      	cmp	r2, #0
 800cee2:	d0fa      	beq.n	800ceda <__kernel_rem_pio2+0x37a>
 800cee4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cee6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ceea:	eb0d 0503 	add.w	r5, sp, r3
 800ceee:	9b06      	ldr	r3, [sp, #24]
 800cef0:	aa20      	add	r2, sp, #128	@ 0x80
 800cef2:	4443      	add	r3, r8
 800cef4:	f108 0701 	add.w	r7, r8, #1
 800cef8:	3d98      	subs	r5, #152	@ 0x98
 800cefa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800cefe:	4444      	add	r4, r8
 800cf00:	42bc      	cmp	r4, r7
 800cf02:	da04      	bge.n	800cf0e <__kernel_rem_pio2+0x3ae>
 800cf04:	46a0      	mov	r8, r4
 800cf06:	e6a2      	b.n	800cc4e <__kernel_rem_pio2+0xee>
 800cf08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf0a:	2401      	movs	r4, #1
 800cf0c:	e7e6      	b.n	800cedc <__kernel_rem_pio2+0x37c>
 800cf0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf10:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800cf14:	f7f3 fb06 	bl	8000524 <__aeabi_i2d>
 800cf18:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800d1e0 <__kernel_rem_pio2+0x680>
 800cf1c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cf20:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf28:	46b2      	mov	sl, r6
 800cf2a:	f04f 0800 	mov.w	r8, #0
 800cf2e:	9b05      	ldr	r3, [sp, #20]
 800cf30:	4598      	cmp	r8, r3
 800cf32:	dd05      	ble.n	800cf40 <__kernel_rem_pio2+0x3e0>
 800cf34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf38:	3701      	adds	r7, #1
 800cf3a:	eca5 7b02 	vstmia	r5!, {d7}
 800cf3e:	e7df      	b.n	800cf00 <__kernel_rem_pio2+0x3a0>
 800cf40:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800cf44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cf48:	f7f3 fb56 	bl	80005f8 <__aeabi_dmul>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	460b      	mov	r3, r1
 800cf50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf54:	f7f3 f99a 	bl	800028c <__adddf3>
 800cf58:	f108 0801 	add.w	r8, r8, #1
 800cf5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf60:	e7e5      	b.n	800cf2e <__kernel_rem_pio2+0x3ce>
 800cf62:	f1cb 0000 	rsb	r0, fp, #0
 800cf66:	ec47 6b10 	vmov	d0, r6, r7
 800cf6a:	f000 f951 	bl	800d210 <scalbn>
 800cf6e:	ec55 4b10 	vmov	r4, r5, d0
 800cf72:	4b9d      	ldr	r3, [pc, #628]	@ (800d1e8 <__kernel_rem_pio2+0x688>)
 800cf74:	2200      	movs	r2, #0
 800cf76:	4620      	mov	r0, r4
 800cf78:	4629      	mov	r1, r5
 800cf7a:	f7f3 fdc3 	bl	8000b04 <__aeabi_dcmpge>
 800cf7e:	b300      	cbz	r0, 800cfc2 <__kernel_rem_pio2+0x462>
 800cf80:	4b9a      	ldr	r3, [pc, #616]	@ (800d1ec <__kernel_rem_pio2+0x68c>)
 800cf82:	2200      	movs	r2, #0
 800cf84:	4620      	mov	r0, r4
 800cf86:	4629      	mov	r1, r5
 800cf88:	f7f3 fb36 	bl	80005f8 <__aeabi_dmul>
 800cf8c:	f7f3 fde4 	bl	8000b58 <__aeabi_d2iz>
 800cf90:	4606      	mov	r6, r0
 800cf92:	f7f3 fac7 	bl	8000524 <__aeabi_i2d>
 800cf96:	4b94      	ldr	r3, [pc, #592]	@ (800d1e8 <__kernel_rem_pio2+0x688>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f7f3 fb2d 	bl	80005f8 <__aeabi_dmul>
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f7f3 f96f 	bl	8000288 <__aeabi_dsub>
 800cfaa:	f7f3 fdd5 	bl	8000b58 <__aeabi_d2iz>
 800cfae:	ab0c      	add	r3, sp, #48	@ 0x30
 800cfb0:	f10b 0b18 	add.w	fp, fp, #24
 800cfb4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cfb8:	f108 0801 	add.w	r8, r8, #1
 800cfbc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800cfc0:	e722      	b.n	800ce08 <__kernel_rem_pio2+0x2a8>
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	f7f3 fdc7 	bl	8000b58 <__aeabi_d2iz>
 800cfca:	ab0c      	add	r3, sp, #48	@ 0x30
 800cfcc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cfd0:	e71a      	b.n	800ce08 <__kernel_rem_pio2+0x2a8>
 800cfd2:	ab0c      	add	r3, sp, #48	@ 0x30
 800cfd4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cfd8:	f7f3 faa4 	bl	8000524 <__aeabi_i2d>
 800cfdc:	4622      	mov	r2, r4
 800cfde:	462b      	mov	r3, r5
 800cfe0:	f7f3 fb0a 	bl	80005f8 <__aeabi_dmul>
 800cfe4:	4652      	mov	r2, sl
 800cfe6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800cfea:	465b      	mov	r3, fp
 800cfec:	4620      	mov	r0, r4
 800cfee:	4629      	mov	r1, r5
 800cff0:	f7f3 fb02 	bl	80005f8 <__aeabi_dmul>
 800cff4:	3e01      	subs	r6, #1
 800cff6:	4604      	mov	r4, r0
 800cff8:	460d      	mov	r5, r1
 800cffa:	e718      	b.n	800ce2e <__kernel_rem_pio2+0x2ce>
 800cffc:	9906      	ldr	r1, [sp, #24]
 800cffe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d002:	9106      	str	r1, [sp, #24]
 800d004:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d008:	f7f3 faf6 	bl	80005f8 <__aeabi_dmul>
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	4650      	mov	r0, sl
 800d012:	4659      	mov	r1, fp
 800d014:	f7f3 f93a 	bl	800028c <__adddf3>
 800d018:	3601      	adds	r6, #1
 800d01a:	4682      	mov	sl, r0
 800d01c:	468b      	mov	fp, r1
 800d01e:	9b00      	ldr	r3, [sp, #0]
 800d020:	429e      	cmp	r6, r3
 800d022:	dc01      	bgt.n	800d028 <__kernel_rem_pio2+0x4c8>
 800d024:	42b5      	cmp	r5, r6
 800d026:	dae9      	bge.n	800cffc <__kernel_rem_pio2+0x49c>
 800d028:	ab48      	add	r3, sp, #288	@ 0x120
 800d02a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d02e:	e9c5 ab00 	strd	sl, fp, [r5]
 800d032:	3c01      	subs	r4, #1
 800d034:	e6ff      	b.n	800ce36 <__kernel_rem_pio2+0x2d6>
 800d036:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d038:	2b02      	cmp	r3, #2
 800d03a:	dc0b      	bgt.n	800d054 <__kernel_rem_pio2+0x4f4>
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	dc39      	bgt.n	800d0b4 <__kernel_rem_pio2+0x554>
 800d040:	d05d      	beq.n	800d0fe <__kernel_rem_pio2+0x59e>
 800d042:	9b02      	ldr	r3, [sp, #8]
 800d044:	f003 0007 	and.w	r0, r3, #7
 800d048:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d04c:	ecbd 8b02 	vpop	{d8}
 800d050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d054:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d056:	2b03      	cmp	r3, #3
 800d058:	d1f3      	bne.n	800d042 <__kernel_rem_pio2+0x4e2>
 800d05a:	9b05      	ldr	r3, [sp, #20]
 800d05c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d060:	eb0d 0403 	add.w	r4, sp, r3
 800d064:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d068:	4625      	mov	r5, r4
 800d06a:	46c2      	mov	sl, r8
 800d06c:	f1ba 0f00 	cmp.w	sl, #0
 800d070:	f1a5 0508 	sub.w	r5, r5, #8
 800d074:	dc6b      	bgt.n	800d14e <__kernel_rem_pio2+0x5ee>
 800d076:	4645      	mov	r5, r8
 800d078:	2d01      	cmp	r5, #1
 800d07a:	f1a4 0408 	sub.w	r4, r4, #8
 800d07e:	f300 8087 	bgt.w	800d190 <__kernel_rem_pio2+0x630>
 800d082:	9c05      	ldr	r4, [sp, #20]
 800d084:	ab48      	add	r3, sp, #288	@ 0x120
 800d086:	441c      	add	r4, r3
 800d088:	2000      	movs	r0, #0
 800d08a:	2100      	movs	r1, #0
 800d08c:	f1b8 0f01 	cmp.w	r8, #1
 800d090:	f300 809c 	bgt.w	800d1cc <__kernel_rem_pio2+0x66c>
 800d094:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800d098:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800d09c:	f1b9 0f00 	cmp.w	r9, #0
 800d0a0:	f040 80a6 	bne.w	800d1f0 <__kernel_rem_pio2+0x690>
 800d0a4:	9b04      	ldr	r3, [sp, #16]
 800d0a6:	e9c3 7800 	strd	r7, r8, [r3]
 800d0aa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d0ae:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d0b2:	e7c6      	b.n	800d042 <__kernel_rem_pio2+0x4e2>
 800d0b4:	9d05      	ldr	r5, [sp, #20]
 800d0b6:	ab48      	add	r3, sp, #288	@ 0x120
 800d0b8:	441d      	add	r5, r3
 800d0ba:	4644      	mov	r4, r8
 800d0bc:	2000      	movs	r0, #0
 800d0be:	2100      	movs	r1, #0
 800d0c0:	2c00      	cmp	r4, #0
 800d0c2:	da35      	bge.n	800d130 <__kernel_rem_pio2+0x5d0>
 800d0c4:	f1b9 0f00 	cmp.w	r9, #0
 800d0c8:	d038      	beq.n	800d13c <__kernel_rem_pio2+0x5dc>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d0d0:	9c04      	ldr	r4, [sp, #16]
 800d0d2:	e9c4 2300 	strd	r2, r3, [r4]
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	460b      	mov	r3, r1
 800d0da:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800d0de:	f7f3 f8d3 	bl	8000288 <__aeabi_dsub>
 800d0e2:	ad4a      	add	r5, sp, #296	@ 0x128
 800d0e4:	2401      	movs	r4, #1
 800d0e6:	45a0      	cmp	r8, r4
 800d0e8:	da2b      	bge.n	800d142 <__kernel_rem_pio2+0x5e2>
 800d0ea:	f1b9 0f00 	cmp.w	r9, #0
 800d0ee:	d002      	beq.n	800d0f6 <__kernel_rem_pio2+0x596>
 800d0f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	9b04      	ldr	r3, [sp, #16]
 800d0f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d0fc:	e7a1      	b.n	800d042 <__kernel_rem_pio2+0x4e2>
 800d0fe:	9c05      	ldr	r4, [sp, #20]
 800d100:	ab48      	add	r3, sp, #288	@ 0x120
 800d102:	441c      	add	r4, r3
 800d104:	2000      	movs	r0, #0
 800d106:	2100      	movs	r1, #0
 800d108:	f1b8 0f00 	cmp.w	r8, #0
 800d10c:	da09      	bge.n	800d122 <__kernel_rem_pio2+0x5c2>
 800d10e:	f1b9 0f00 	cmp.w	r9, #0
 800d112:	d002      	beq.n	800d11a <__kernel_rem_pio2+0x5ba>
 800d114:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d118:	4619      	mov	r1, r3
 800d11a:	9b04      	ldr	r3, [sp, #16]
 800d11c:	e9c3 0100 	strd	r0, r1, [r3]
 800d120:	e78f      	b.n	800d042 <__kernel_rem_pio2+0x4e2>
 800d122:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d126:	f7f3 f8b1 	bl	800028c <__adddf3>
 800d12a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d12e:	e7eb      	b.n	800d108 <__kernel_rem_pio2+0x5a8>
 800d130:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d134:	f7f3 f8aa 	bl	800028c <__adddf3>
 800d138:	3c01      	subs	r4, #1
 800d13a:	e7c1      	b.n	800d0c0 <__kernel_rem_pio2+0x560>
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	e7c6      	b.n	800d0d0 <__kernel_rem_pio2+0x570>
 800d142:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d146:	f7f3 f8a1 	bl	800028c <__adddf3>
 800d14a:	3401      	adds	r4, #1
 800d14c:	e7cb      	b.n	800d0e6 <__kernel_rem_pio2+0x586>
 800d14e:	ed95 7b00 	vldr	d7, [r5]
 800d152:	ed8d 7b00 	vstr	d7, [sp]
 800d156:	ed95 7b02 	vldr	d7, [r5, #8]
 800d15a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d15e:	ec53 2b17 	vmov	r2, r3, d7
 800d162:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d166:	f7f3 f891 	bl	800028c <__adddf3>
 800d16a:	4602      	mov	r2, r0
 800d16c:	460b      	mov	r3, r1
 800d16e:	4606      	mov	r6, r0
 800d170:	460f      	mov	r7, r1
 800d172:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d176:	f7f3 f887 	bl	8000288 <__aeabi_dsub>
 800d17a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d17e:	f7f3 f885 	bl	800028c <__adddf3>
 800d182:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d186:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d18a:	e9c5 6700 	strd	r6, r7, [r5]
 800d18e:	e76d      	b.n	800d06c <__kernel_rem_pio2+0x50c>
 800d190:	ed94 7b00 	vldr	d7, [r4]
 800d194:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800d198:	ec51 0b17 	vmov	r0, r1, d7
 800d19c:	4652      	mov	r2, sl
 800d19e:	465b      	mov	r3, fp
 800d1a0:	ed8d 7b00 	vstr	d7, [sp]
 800d1a4:	f7f3 f872 	bl	800028c <__adddf3>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4606      	mov	r6, r0
 800d1ae:	460f      	mov	r7, r1
 800d1b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1b4:	f7f3 f868 	bl	8000288 <__aeabi_dsub>
 800d1b8:	4652      	mov	r2, sl
 800d1ba:	465b      	mov	r3, fp
 800d1bc:	f7f3 f866 	bl	800028c <__adddf3>
 800d1c0:	3d01      	subs	r5, #1
 800d1c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d1c6:	e9c4 6700 	strd	r6, r7, [r4]
 800d1ca:	e755      	b.n	800d078 <__kernel_rem_pio2+0x518>
 800d1cc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d1d0:	f7f3 f85c 	bl	800028c <__adddf3>
 800d1d4:	f108 38ff 	add.w	r8, r8, #4294967295
 800d1d8:	e758      	b.n	800d08c <__kernel_rem_pio2+0x52c>
 800d1da:	bf00      	nop
 800d1dc:	f3af 8000 	nop.w
	...
 800d1e8:	41700000 	.word	0x41700000
 800d1ec:	3e700000 	.word	0x3e700000
 800d1f0:	9b04      	ldr	r3, [sp, #16]
 800d1f2:	9a04      	ldr	r2, [sp, #16]
 800d1f4:	601f      	str	r7, [r3, #0]
 800d1f6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800d1fa:	605c      	str	r4, [r3, #4]
 800d1fc:	609d      	str	r5, [r3, #8]
 800d1fe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d202:	60d3      	str	r3, [r2, #12]
 800d204:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d208:	6110      	str	r0, [r2, #16]
 800d20a:	6153      	str	r3, [r2, #20]
 800d20c:	e719      	b.n	800d042 <__kernel_rem_pio2+0x4e2>
 800d20e:	bf00      	nop

0800d210 <scalbn>:
 800d210:	b570      	push	{r4, r5, r6, lr}
 800d212:	ec55 4b10 	vmov	r4, r5, d0
 800d216:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d21a:	4606      	mov	r6, r0
 800d21c:	462b      	mov	r3, r5
 800d21e:	b991      	cbnz	r1, 800d246 <scalbn+0x36>
 800d220:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d224:	4323      	orrs	r3, r4
 800d226:	d03d      	beq.n	800d2a4 <scalbn+0x94>
 800d228:	4b35      	ldr	r3, [pc, #212]	@ (800d300 <scalbn+0xf0>)
 800d22a:	4620      	mov	r0, r4
 800d22c:	4629      	mov	r1, r5
 800d22e:	2200      	movs	r2, #0
 800d230:	f7f3 f9e2 	bl	80005f8 <__aeabi_dmul>
 800d234:	4b33      	ldr	r3, [pc, #204]	@ (800d304 <scalbn+0xf4>)
 800d236:	429e      	cmp	r6, r3
 800d238:	4604      	mov	r4, r0
 800d23a:	460d      	mov	r5, r1
 800d23c:	da0f      	bge.n	800d25e <scalbn+0x4e>
 800d23e:	a328      	add	r3, pc, #160	@ (adr r3, 800d2e0 <scalbn+0xd0>)
 800d240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d244:	e01e      	b.n	800d284 <scalbn+0x74>
 800d246:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d24a:	4291      	cmp	r1, r2
 800d24c:	d10b      	bne.n	800d266 <scalbn+0x56>
 800d24e:	4622      	mov	r2, r4
 800d250:	4620      	mov	r0, r4
 800d252:	4629      	mov	r1, r5
 800d254:	f7f3 f81a 	bl	800028c <__adddf3>
 800d258:	4604      	mov	r4, r0
 800d25a:	460d      	mov	r5, r1
 800d25c:	e022      	b.n	800d2a4 <scalbn+0x94>
 800d25e:	460b      	mov	r3, r1
 800d260:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d264:	3936      	subs	r1, #54	@ 0x36
 800d266:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d26a:	4296      	cmp	r6, r2
 800d26c:	dd0d      	ble.n	800d28a <scalbn+0x7a>
 800d26e:	2d00      	cmp	r5, #0
 800d270:	a11d      	add	r1, pc, #116	@ (adr r1, 800d2e8 <scalbn+0xd8>)
 800d272:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d276:	da02      	bge.n	800d27e <scalbn+0x6e>
 800d278:	a11d      	add	r1, pc, #116	@ (adr r1, 800d2f0 <scalbn+0xe0>)
 800d27a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d27e:	a31a      	add	r3, pc, #104	@ (adr r3, 800d2e8 <scalbn+0xd8>)
 800d280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d284:	f7f3 f9b8 	bl	80005f8 <__aeabi_dmul>
 800d288:	e7e6      	b.n	800d258 <scalbn+0x48>
 800d28a:	1872      	adds	r2, r6, r1
 800d28c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d290:	428a      	cmp	r2, r1
 800d292:	dcec      	bgt.n	800d26e <scalbn+0x5e>
 800d294:	2a00      	cmp	r2, #0
 800d296:	dd08      	ble.n	800d2aa <scalbn+0x9a>
 800d298:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d29c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d2a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d2a4:	ec45 4b10 	vmov	d0, r4, r5
 800d2a8:	bd70      	pop	{r4, r5, r6, pc}
 800d2aa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d2ae:	da08      	bge.n	800d2c2 <scalbn+0xb2>
 800d2b0:	2d00      	cmp	r5, #0
 800d2b2:	a10b      	add	r1, pc, #44	@ (adr r1, 800d2e0 <scalbn+0xd0>)
 800d2b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2b8:	dac1      	bge.n	800d23e <scalbn+0x2e>
 800d2ba:	a10f      	add	r1, pc, #60	@ (adr r1, 800d2f8 <scalbn+0xe8>)
 800d2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2c0:	e7bd      	b.n	800d23e <scalbn+0x2e>
 800d2c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d2c6:	3236      	adds	r2, #54	@ 0x36
 800d2c8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d2cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d308 <scalbn+0xf8>)
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	e7d4      	b.n	800d284 <scalbn+0x74>
 800d2da:	bf00      	nop
 800d2dc:	f3af 8000 	nop.w
 800d2e0:	c2f8f359 	.word	0xc2f8f359
 800d2e4:	01a56e1f 	.word	0x01a56e1f
 800d2e8:	8800759c 	.word	0x8800759c
 800d2ec:	7e37e43c 	.word	0x7e37e43c
 800d2f0:	8800759c 	.word	0x8800759c
 800d2f4:	fe37e43c 	.word	0xfe37e43c
 800d2f8:	c2f8f359 	.word	0xc2f8f359
 800d2fc:	81a56e1f 	.word	0x81a56e1f
 800d300:	43500000 	.word	0x43500000
 800d304:	ffff3cb0 	.word	0xffff3cb0
 800d308:	3c900000 	.word	0x3c900000
 800d30c:	00000000 	.word	0x00000000

0800d310 <floor>:
 800d310:	ec51 0b10 	vmov	r0, r1, d0
 800d314:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d31c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d320:	2e13      	cmp	r6, #19
 800d322:	460c      	mov	r4, r1
 800d324:	4605      	mov	r5, r0
 800d326:	4680      	mov	r8, r0
 800d328:	dc34      	bgt.n	800d394 <floor+0x84>
 800d32a:	2e00      	cmp	r6, #0
 800d32c:	da17      	bge.n	800d35e <floor+0x4e>
 800d32e:	a332      	add	r3, pc, #200	@ (adr r3, 800d3f8 <floor+0xe8>)
 800d330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d334:	f7f2 ffaa 	bl	800028c <__adddf3>
 800d338:	2200      	movs	r2, #0
 800d33a:	2300      	movs	r3, #0
 800d33c:	f7f3 fbec 	bl	8000b18 <__aeabi_dcmpgt>
 800d340:	b150      	cbz	r0, 800d358 <floor+0x48>
 800d342:	2c00      	cmp	r4, #0
 800d344:	da55      	bge.n	800d3f2 <floor+0xe2>
 800d346:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d34a:	432c      	orrs	r4, r5
 800d34c:	2500      	movs	r5, #0
 800d34e:	42ac      	cmp	r4, r5
 800d350:	4c2b      	ldr	r4, [pc, #172]	@ (800d400 <floor+0xf0>)
 800d352:	bf08      	it	eq
 800d354:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d358:	4621      	mov	r1, r4
 800d35a:	4628      	mov	r0, r5
 800d35c:	e023      	b.n	800d3a6 <floor+0x96>
 800d35e:	4f29      	ldr	r7, [pc, #164]	@ (800d404 <floor+0xf4>)
 800d360:	4137      	asrs	r7, r6
 800d362:	ea01 0307 	and.w	r3, r1, r7
 800d366:	4303      	orrs	r3, r0
 800d368:	d01d      	beq.n	800d3a6 <floor+0x96>
 800d36a:	a323      	add	r3, pc, #140	@ (adr r3, 800d3f8 <floor+0xe8>)
 800d36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d370:	f7f2 ff8c 	bl	800028c <__adddf3>
 800d374:	2200      	movs	r2, #0
 800d376:	2300      	movs	r3, #0
 800d378:	f7f3 fbce 	bl	8000b18 <__aeabi_dcmpgt>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d0eb      	beq.n	800d358 <floor+0x48>
 800d380:	2c00      	cmp	r4, #0
 800d382:	bfbe      	ittt	lt
 800d384:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d388:	4133      	asrlt	r3, r6
 800d38a:	18e4      	addlt	r4, r4, r3
 800d38c:	ea24 0407 	bic.w	r4, r4, r7
 800d390:	2500      	movs	r5, #0
 800d392:	e7e1      	b.n	800d358 <floor+0x48>
 800d394:	2e33      	cmp	r6, #51	@ 0x33
 800d396:	dd0a      	ble.n	800d3ae <floor+0x9e>
 800d398:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d39c:	d103      	bne.n	800d3a6 <floor+0x96>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	f7f2 ff73 	bl	800028c <__adddf3>
 800d3a6:	ec41 0b10 	vmov	d0, r0, r1
 800d3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d3b2:	f04f 37ff 	mov.w	r7, #4294967295
 800d3b6:	40df      	lsrs	r7, r3
 800d3b8:	4207      	tst	r7, r0
 800d3ba:	d0f4      	beq.n	800d3a6 <floor+0x96>
 800d3bc:	a30e      	add	r3, pc, #56	@ (adr r3, 800d3f8 <floor+0xe8>)
 800d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c2:	f7f2 ff63 	bl	800028c <__adddf3>
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	f7f3 fba5 	bl	8000b18 <__aeabi_dcmpgt>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d0c2      	beq.n	800d358 <floor+0x48>
 800d3d2:	2c00      	cmp	r4, #0
 800d3d4:	da0a      	bge.n	800d3ec <floor+0xdc>
 800d3d6:	2e14      	cmp	r6, #20
 800d3d8:	d101      	bne.n	800d3de <floor+0xce>
 800d3da:	3401      	adds	r4, #1
 800d3dc:	e006      	b.n	800d3ec <floor+0xdc>
 800d3de:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	40b3      	lsls	r3, r6
 800d3e6:	441d      	add	r5, r3
 800d3e8:	4545      	cmp	r5, r8
 800d3ea:	d3f6      	bcc.n	800d3da <floor+0xca>
 800d3ec:	ea25 0507 	bic.w	r5, r5, r7
 800d3f0:	e7b2      	b.n	800d358 <floor+0x48>
 800d3f2:	2500      	movs	r5, #0
 800d3f4:	462c      	mov	r4, r5
 800d3f6:	e7af      	b.n	800d358 <floor+0x48>
 800d3f8:	8800759c 	.word	0x8800759c
 800d3fc:	7e37e43c 	.word	0x7e37e43c
 800d400:	bff00000 	.word	0xbff00000
 800d404:	000fffff 	.word	0x000fffff

0800d408 <_init>:
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	bf00      	nop
 800d40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d40e:	bc08      	pop	{r3}
 800d410:	469e      	mov	lr, r3
 800d412:	4770      	bx	lr

0800d414 <_fini>:
 800d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d416:	bf00      	nop
 800d418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d41a:	bc08      	pop	{r3}
 800d41c:	469e      	mov	lr, r3
 800d41e:	4770      	bx	lr
