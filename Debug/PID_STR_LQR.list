
PID_STR_LQR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baa4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800bc38  0800bc38  0000cc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1b0  0800c1b0  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1b0  0800c1b0  0000d1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1b8  0800c1b8  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1b8  0800c1b8  0000d1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1bc  0800c1bc  0000d1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c1c0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d4  2**0
                  CONTENTS
 10 .bss          00000564  200001d8  200001d8  0000e1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000073c  2000073c  0000e1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000edbb  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024da  00000000  00000000  0001cfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  0001f4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0d  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002233e  00000000  00000000  00020e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a56  00000000  00000000  00043143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce254  00000000  00000000  00053b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121ded  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051a0  00000000  00000000  00121e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00126fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc1c 	.word	0x0800bc1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800bc1c 	.word	0x0800bc1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <Motor_Control_STR_step>:
static RT_MODEL_Motor_Control_STR_T Motor_Control_STR_M_;
RT_MODEL_Motor_Control_STR_T *const Motor_Control_STR_M = &Motor_Control_STR_M_;

/* Model step function */
void Motor_Control_STR_step(void)
{
 8000fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fec:	b0fa      	sub	sp, #488	@ 0x1e8
 8000fee:	af00      	add	r7, sp, #0
  int32_T tmp_1;

  /* SwitchCase: '<Root>/Switch Case' incorporates:
   *  Inport: '<Root>/Case'
   */
  PHI_1 = trunc(Case);
 8000ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80011e8 <Motor_Control_STR_step+0x200>)
 8000ff2:	ed93 7b00 	vldr	d7, [r3]
 8000ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffa:	eef0 0a67 	vmov.f32	s1, s15
 8000ffe:	f00a fcc9 	bl	800b994 <trunc>
 8001002:	ed87 0b76 	vstr	d0, [r7, #472]	@ 0x1d8
  if (rtIsNaN(PHI_1) || rtIsInf(PHI_1)) {
 8001006:	ed97 0b76 	vldr	d0, [r7, #472]	@ 0x1d8
 800100a:	f001 f97d 	bl	8002308 <rtIsNaN>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <Motor_Control_STR_step+0x3a>
 8001014:	ed97 0b76 	vldr	d0, [r7, #472]	@ 0x1d8
 8001018:	f001 f952 	bl	80022c0 <rtIsInf>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <Motor_Control_STR_step+0x48>
    PHI_1 = 0.0;
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
 800102e:	e007      	b.n	8001040 <Motor_Control_STR_step+0x58>
  } else {
    PHI_1 = fmod(PHI_1, 4.294967296E+9);
 8001030:	ed9f 1b69 	vldr	d1, [pc, #420]	@ 80011d8 <Motor_Control_STR_step+0x1f0>
 8001034:	ed97 0b76 	vldr	d0, [r7, #472]	@ 0x1d8
 8001038:	f00a fc7e 	bl	800b938 <fmod>
 800103c:	ed87 0b76 	vstr	d0, [r7, #472]	@ 0x1d8
  }

  switch (PHI_1 < 0.0 ? -(int32_T)(uint32_T)-PHI_1 : (int32_T)(uint32_T)PHI_1) {
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 800104c:	f7ff fd46 	bl	8000adc <__aeabi_dcmplt>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00c      	beq.n	8001070 <Motor_Control_STR_step+0x88>
 8001056:	f8d7 41d8 	ldr.w	r4, [r7, #472]	@ 0x1d8
 800105a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800105e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001062:	4620      	mov	r0, r4
 8001064:	4629      	mov	r1, r5
 8001066:	f7ff fd9f 	bl	8000ba8 <__aeabi_d2uiz>
 800106a:	4603      	mov	r3, r0
 800106c:	425b      	negs	r3, r3
 800106e:	e004      	b.n	800107a <Motor_Control_STR_step+0x92>
 8001070:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8001074:	f7ff fd98 	bl	8000ba8 <__aeabi_d2uiz>
 8001078:	4603      	mov	r3, r0
 800107a:	2b03      	cmp	r3, #3
 800107c:	f000 86ed 	beq.w	8001e5a <Motor_Control_STR_step+0xe72>
 8001080:	2b03      	cmp	r3, #3
 8001082:	f300 8748 	bgt.w	8001f16 <Motor_Control_STR_step+0xf2e>
 8001086:	2b01      	cmp	r3, #1
 8001088:	d004      	beq.n	8001094 <Motor_Control_STR_step+0xac>
 800108a:	2b02      	cmp	r3, #2
 800108c:	f000 80c0 	beq.w	8001210 <Motor_Control_STR_step+0x228>
    /* End of Outputs for SubSystem: '<Root>/Switch Case Action Subsystem2' */
    break;
  }

  /* End of SwitchCase: '<Root>/Switch Case' */
}
 8001090:	f000 bf41 	b.w	8001f16 <Motor_Control_STR_step+0xf2e>
    rtb_Sum_o = Setpoint - Sensor;
 8001094:	4b55      	ldr	r3, [pc, #340]	@ (80011ec <Motor_Control_STR_step+0x204>)
 8001096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800109a:	4b55      	ldr	r3, [pc, #340]	@ (80011f0 <Motor_Control_STR_step+0x208>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff f8f2 	bl	8000288 <__aeabi_dsub>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    rtb_NProdOut = (rtb_Sum_o * Kd - Motor_Control_STR_DW.Filter_DSTATE) * 100.0;
 80010ac:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <Motor_Control_STR_step+0x20c>)
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80010b6:	f7ff fa9f 	bl	80005f8 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	4b4d      	ldr	r3, [pc, #308]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 80010c4:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80010c8:	f7ff f8de 	bl	8000288 <__aeabi_dsub>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b48      	ldr	r3, [pc, #288]	@ (80011fc <Motor_Control_STR_step+0x214>)
 80010da:	f7ff fa8d 	bl	80005f8 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
    rtb_Sum = (rtb_Sum_o * Kp + Motor_Control_STR_DW.Integrator_DSTATE) +
 80010e6:	4b46      	ldr	r3, [pc, #280]	@ (8001200 <Motor_Control_STR_step+0x218>)
 80010e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ec:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80010f0:	f7ff fa82 	bl	80005f8 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	4b3e      	ldr	r3, [pc, #248]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 80010fe:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8001102:	f7ff f8c3 	bl	800028c <__adddf3>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 800110e:	f7ff f8bd 	bl	800028c <__adddf3>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
    if (rtb_Sum > 100.0) {
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <Motor_Control_STR_step+0x214>)
 8001120:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8001124:	f7ff fcf8 	bl	8000b18 <__aeabi_dcmpgt>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <Motor_Control_STR_step+0x154>
      pwm1 = 100.0;
 800112e:	4935      	ldr	r1, [pc, #212]	@ (8001204 <Motor_Control_STR_step+0x21c>)
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <Motor_Control_STR_step+0x214>)
 8001136:	e9c1 2300 	strd	r2, r3, [r1]
 800113a:	e015      	b.n	8001168 <Motor_Control_STR_step+0x180>
    } else if (rtb_Sum < -100.0) {
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b31      	ldr	r3, [pc, #196]	@ (8001208 <Motor_Control_STR_step+0x220>)
 8001142:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8001146:	f7ff fcc9 	bl	8000adc <__aeabi_dcmplt>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <Motor_Control_STR_step+0x176>
      pwm1 = -100.0;
 8001150:	492c      	ldr	r1, [pc, #176]	@ (8001204 <Motor_Control_STR_step+0x21c>)
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <Motor_Control_STR_step+0x220>)
 8001158:	e9c1 2300 	strd	r2, r3, [r1]
 800115c:	e004      	b.n	8001168 <Motor_Control_STR_step+0x180>
      pwm1 = rtb_Sum;
 800115e:	4929      	ldr	r1, [pc, #164]	@ (8001204 <Motor_Control_STR_step+0x21c>)
 8001160:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8001164:	e9c1 2300 	strd	r2, r3, [r1]
    Motor_Control_STR_DW.Filter_DSTATE += 0.005 * rtb_NProdOut;
 8001168:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 800116a:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	@ 0xe0
 800116e:	a31c      	add	r3, pc, #112	@ (adr r3, 80011e0 <Motor_Control_STR_step+0x1f8>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8001178:	f7ff fa3e 	bl	80005f8 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	f7ff f882 	bl	800028c <__adddf3>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	491a      	ldr	r1, [pc, #104]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 800118e:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
    Motor_Control_STR_DW.Integrator_DSTATE += rtb_Sum_o * Ki * 0.005;
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 8001194:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	@ 0xe8
 8001198:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <Motor_Control_STR_step+0x224>)
 800119a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119e:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80011a2:	f7ff fa29 	bl	80005f8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80011e0 <Motor_Control_STR_step+0x1f8>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fa20 	bl	80005f8 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff f864 	bl	800028c <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	490b      	ldr	r1, [pc, #44]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 80011ca:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
    break;
 80011ce:	f000 bea2 	b.w	8001f16 <Motor_Control_STR_step+0xf2e>
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	00000000 	.word	0x00000000
 80011dc:	41f00000 	.word	0x41f00000
 80011e0:	47ae147b 	.word	0x47ae147b
 80011e4:	3f747ae1 	.word	0x3f747ae1
 80011e8:	20000200 	.word	0x20000200
 80011ec:	20000208 	.word	0x20000208
 80011f0:	200001f8 	.word	0x200001f8
 80011f4:	20000220 	.word	0x20000220
 80011f8:	20000278 	.word	0x20000278
 80011fc:	40590000 	.word	0x40590000
 8001200:	20000210 	.word	0x20000210
 8001204:	20000250 	.word	0x20000250
 8001208:	c0590000 	.word	0xc0590000
 800120c:	20000218 	.word	0x20000218
    rtb_Sum_o = pwm2;
 8001210:	4b9a      	ldr	r3, [pc, #616]	@ (800147c <Motor_Control_STR_step+0x494>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    rtb_NProdOut = Motor_Control_STR_DW.UnitDelay6_DSTATE;
 800121a:	4b99      	ldr	r3, [pc, #612]	@ (8001480 <Motor_Control_STR_step+0x498>)
 800121c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001220:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
    PHI[0] = -Motor_Control_STR_DW.UnitDelay6_DSTATE;
 8001224:	4b96      	ldr	r3, [pc, #600]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001226:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800122a:	4690      	mov	r8, r2
 800122c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001230:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001234:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001238:	e9c3 8900 	strd	r8, r9, [r3]
    PHI[1] = -Motor_Control_STR_DW.UnitDelay5_DSTATE;
 800123c:	4b90      	ldr	r3, [pc, #576]	@ (8001480 <Motor_Control_STR_step+0x498>)
 800123e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001242:	4692      	mov	sl, r2
 8001244:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001248:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800124c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001250:	e9c3 ab02 	strd	sl, fp, [r3, #8]
    PHI[2] = pwm2;
 8001254:	4b89      	ldr	r3, [pc, #548]	@ (800147c <Motor_Control_STR_step+0x494>)
 8001256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800125a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800125e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001262:	e9c3 0104 	strd	r0, r1, [r3, #16]
    PHI[3] = Motor_Control_STR_DW.UnitDelay2_DSTATE;
 8001266:	4b86      	ldr	r3, [pc, #536]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001268:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800126c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001270:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001274:	e9c3 0106 	strd	r0, r1, [r3, #24]
    rtb_Sum = Sensor - (((-Motor_Control_STR_DW.UnitDelay6_DSTATE *
 8001278:	4b82      	ldr	r3, [pc, #520]	@ (8001484 <Motor_Control_STR_step+0x49c>)
 800127a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800127e:	4b80      	ldr	r3, [pc, #512]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001280:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001284:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001286:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] +
 800128c:	4b7c      	ldr	r3, [pc, #496]	@ (8001480 <Motor_Control_STR_step+0x498>)
 800128e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
    rtb_Sum = Sensor - (((-Motor_Control_STR_DW.UnitDelay6_DSTATE *
 8001292:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001296:	f7ff f9af 	bl	80005f8 <__aeabi_dmul>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4614      	mov	r4, r2
 80012a0:	461d      	mov	r5, r3
                          -Motor_Control_STR_DW.UnitDelay5_DSTATE *
 80012a2:	4b77      	ldr	r3, [pc, #476]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80012a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80012aa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[1]) + pwm2 *
 80012b0:	4b73      	ldr	r3, [pc, #460]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80012b2:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
                          -Motor_Control_STR_DW.UnitDelay5_DSTATE *
 80012b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80012ba:	f7ff f99d 	bl	80005f8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] +
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7fe ffe1 	bl	800028c <__adddf3>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	461d      	mov	r5, r3
                         Motor_Control_STR_DW.UnitDelay_DSTATE_j[2]) +
 80012d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80012d4:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[1]) + pwm2 *
 80012d8:	4b68      	ldr	r3, [pc, #416]	@ (800147c <Motor_Control_STR_step+0x494>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff f98b 	bl	80005f8 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4620      	mov	r0, r4
 80012e8:	4629      	mov	r1, r5
 80012ea:	f7fe ffcf 	bl	800028c <__adddf3>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4614      	mov	r4, r2
 80012f4:	461d      	mov	r5, r3
                        Motor_Control_STR_DW.UnitDelay2_DSTATE *
 80012f6:	4b62      	ldr	r3, [pc, #392]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80012f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                        Motor_Control_STR_DW.UnitDelay_DSTATE_j[3]);
 80012fc:	4b60      	ldr	r3, [pc, #384]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80012fe:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
                        Motor_Control_STR_DW.UnitDelay2_DSTATE *
 8001302:	f7ff f979 	bl	80005f8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
                         Motor_Control_STR_DW.UnitDelay_DSTATE_j[2]) +
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7fe ffbd 	bl	800028c <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
    rtb_Sum = Sensor - (((-Motor_Control_STR_DW.UnitDelay6_DSTATE *
 8001316:	4640      	mov	r0, r8
 8001318:	4649      	mov	r1, r9
 800131a:	f7fe ffb5 	bl	8000288 <__aeabi_dsub>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
    PHI_0 = 0.0;
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    for (i = 0; i < 4; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001338:	e084      	b.n	8001444 <Motor_Control_STR_step+0x45c>
      PHI_tmp = i << 2;
 800133a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
      PHI_0 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 8001344:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001348:	3301      	adds	r3, #1
 800134a:	4a4d      	ldr	r2, [pc, #308]	@ (8001480 <Motor_Control_STR_step+0x498>)
 800134c:	3304      	adds	r3, #4
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 8001356:	4b4a      	ldr	r3, [pc, #296]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001358:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800135c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800135e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001362:	62fb      	str	r3, [r7, #44]	@ 0x2c
      PHI_0 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 8001364:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001368:	f7ff f946 	bl	80005f8 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4614      	mov	r4, r2
 8001372:	461d      	mov	r5, r3
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 8001374:	4a42      	ldr	r2, [pc, #264]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001376:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800137a:	3304      	adds	r3, #4
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4413      	add	r3, r2
 8001380:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 8001384:	4b3e      	ldr	r3, [pc, #248]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001386:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800138a:	623a      	str	r2, [r7, #32]
 800138c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 8001392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001396:	f7ff f92f 	bl	80005f8 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 800139e:	4620      	mov	r0, r4
 80013a0:	4629      	mov	r1, r5
 80013a2:	f7fe ff73 	bl	800028c <__adddf3>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4614      	mov	r4, r2
 80013ac:	461d      	mov	r5, r3
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 80013ae:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013b2:	3302      	adds	r3, #2
 80013b4:	4a32      	ldr	r2, [pc, #200]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80013b6:	3304      	adds	r3, #4
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4413      	add	r3, r2
 80013bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c0:	4b2e      	ldr	r3, [pc, #184]	@ (800147c <Motor_Control_STR_step+0x494>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f917 	bl	80005f8 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7fe ff5b 	bl	800028c <__adddf3>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4614      	mov	r4, r2
 80013dc:	461d      	mov	r5, r3
                Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 80013de:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013e2:	3303      	adds	r3, #3
 80013e4:	4a26      	ldr	r2, [pc, #152]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80013e6:	3304      	adds	r3, #4
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	e9d3 0100 	ldrd	r0, r1, [r3]
                Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80013f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 80013f6:	f7ff f8ff 	bl	80005f8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	f7fe ff43 	bl	800028c <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
                Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 800140e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001412:	f5a3 72c4 	sub.w	r2, r3, #392	@ 0x188
 8001416:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4413      	add	r3, r2
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f8e9 	bl	80005f8 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
      PHI_0 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 800142a:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 800142e:	f7fe ff2d 	bl	800028c <__adddf3>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    for (i = 0; i < 4; i++) {
 800143a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800143e:	3301      	adds	r3, #1
 8001440:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001444:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001448:	2b03      	cmp	r3, #3
 800144a:	f77f af76 	ble.w	800133a <Motor_Control_STR_step+0x352>
    PHI_1 = 0.0;
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    a = 1.0 / lamda;
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <Motor_Control_STR_step+0x4a0>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f04f 0000 	mov.w	r0, #0
 8001464:	4909      	ldr	r1, [pc, #36]	@ (800148c <Motor_Control_STR_step+0x4a4>)
 8001466:	f7ff f9f1 	bl	800084c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
    for (i = 0; i < 4; i++) {
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001478:	e12c      	b.n	80016d4 <Motor_Control_STR_step+0x6ec>
 800147a:	bf00      	nop
 800147c:	20000248 	.word	0x20000248
 8001480:	20000278 	.word	0x20000278
 8001484:	200001f8 	.word	0x200001f8
 8001488:	20000238 	.word	0x20000238
 800148c:	3ff00000 	.word	0x3ff00000
      b_gamma = ((Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 4] *
 8001490:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001494:	3304      	adds	r3, #4
 8001496:	4abc      	ldr	r2, [pc, #752]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001498:	3304      	adds	r3, #4
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 80014a2:	4bb9      	ldr	r3, [pc, #740]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80014a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014a8:	61ba      	str	r2, [r7, #24]
 80014aa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014ae:	61fb      	str	r3, [r7, #28]
      b_gamma = ((Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 4] *
 80014b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014b4:	f7ff f8a0 	bl	80005f8 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4614      	mov	r4, r2
 80014be:	461d      	mov	r5, r3
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[i] *
 80014c0:	4ab1      	ldr	r2, [pc, #708]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80014c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80014c6:	3304      	adds	r3, #4
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 80014d0:	4bad      	ldr	r3, [pc, #692]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80014d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014d6:	613a      	str	r2, [r7, #16]
 80014d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014dc:	617b      	str	r3, [r7, #20]
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[i] *
 80014de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014e2:	f7ff f889 	bl	80005f8 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 80014ea:	4620      	mov	r0, r4
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7fe fecd 	bl	800028c <__adddf3>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4614      	mov	r4, r2
 80014f8:	461d      	mov	r5, r3
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 8] * pwm2) +
 80014fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80014fe:	3308      	adds	r3, #8
 8001500:	4aa1      	ldr	r2, [pc, #644]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001502:	3304      	adds	r3, #4
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150c:	4b9f      	ldr	r3, [pc, #636]	@ (800178c <Motor_Control_STR_step+0x7a4>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f871 	bl	80005f8 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe feb5 	bl	800028c <__adddf3>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4614      	mov	r4, r2
 8001528:	461d      	mov	r5, r3
        Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 12] *
 800152a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800152e:	330c      	adds	r3, #12
 8001530:	4a95      	ldr	r2, [pc, #596]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001532:	3304      	adds	r3, #4
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	e9d3 0100 	ldrd	r0, r1, [r3]
        Motor_Control_STR_DW.UnitDelay2_DSTATE;
 800153c:	4b92      	ldr	r3, [pc, #584]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 800153e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 12] *
 8001542:	f7ff f859 	bl	80005f8 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
      b_gamma = ((Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 4] *
 800154a:	4620      	mov	r0, r4
 800154c:	4629      	mov	r1, r5
 800154e:	f7fe fe9d 	bl	800028c <__adddf3>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      Theta_tmp[i] = b_gamma;
 800155a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800155e:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 8001562:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	18d1      	adds	r1, r2, r3
 800156a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800156e:	e9c1 2300 	strd	r2, r3, [r1]
      PHI_tmp = i << 2;
 8001572:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
      PHI_1 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 800157c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001580:	3301      	adds	r3, #1
 8001582:	4a81      	ldr	r2, [pc, #516]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001584:	3304      	adds	r3, #4
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 800158e:	4b7e      	ldr	r3, [pc, #504]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001590:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800159a:	60fb      	str	r3, [r7, #12]
      PHI_1 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 800159c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015a0:	f7ff f82a 	bl	80005f8 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4614      	mov	r4, r2
 80015aa:	461d      	mov	r5, r3
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 80015ac:	4a76      	ldr	r2, [pc, #472]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80015ae:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80015b2:	3304      	adds	r3, #4
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 80015bc:	4b72      	ldr	r3, [pc, #456]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80015be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015c2:	603a      	str	r2, [r7, #0]
 80015c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015c8:	607b      	str	r3, [r7, #4]
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 80015ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ce:	f7ff f813 	bl	80005f8 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 80015d6:	4620      	mov	r0, r4
 80015d8:	4629      	mov	r1, r5
 80015da:	f7fe fe57 	bl	800028c <__adddf3>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4614      	mov	r4, r2
 80015e4:	461d      	mov	r5, r3
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 80015e6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80015ea:	3302      	adds	r3, #2
 80015ec:	4a66      	ldr	r2, [pc, #408]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80015ee:	3304      	adds	r3, #4
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f8:	4b64      	ldr	r3, [pc, #400]	@ (800178c <Motor_Control_STR_step+0x7a4>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe fffb 	bl	80005f8 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 8001606:	4620      	mov	r0, r4
 8001608:	4629      	mov	r1, r5
 800160a:	f7fe fe3f 	bl	800028c <__adddf3>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4614      	mov	r4, r2
 8001614:	461d      	mov	r5, r3
                Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 8001616:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800161a:	3303      	adds	r3, #3
 800161c:	4a5a      	ldr	r2, [pc, #360]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 800161e:	3304      	adds	r3, #4
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	e9d3 0100 	ldrd	r0, r1, [r3]
                Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 8001628:	4b57      	ldr	r3, [pc, #348]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 800162a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 800162e:	f7fe ffe3 	bl	80005f8 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 8001636:	4620      	mov	r0, r4
 8001638:	4629      	mov	r1, r5
 800163a:	f7fe fe27 	bl	800028c <__adddf3>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
                Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 8001646:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800164a:	f5a3 72c4 	sub.w	r2, r3, #392	@ 0x188
 800164e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe ffcd 	bl	80005f8 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
      PHI_1 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 8001662:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8001666:	f7fe fe11 	bl	800028c <__adddf3>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
      Motor_Control_STR_B.Theta[i] = b_gamma / (lamda + PHI_0) * rtb_Sum +
 8001672:	4b47      	ldr	r3, [pc, #284]	@ (8001790 <Motor_Control_STR_step+0x7a8>)
 8001674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001678:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 800167c:	f7fe fe06 	bl	800028c <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8001688:	f7ff f8e0 	bl	800084c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8001698:	f7fe ffae 	bl	80005f8 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
        Motor_Control_STR_DW.UnitDelay_DSTATE_j[i];
 80016a4:	4a38      	ldr	r2, [pc, #224]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80016a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016aa:	3314      	adds	r3, #20
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
      Motor_Control_STR_B.Theta[i] = b_gamma / (lamda + PHI_0) * rtb_Sum +
 80016b4:	f7fe fdea 	bl	800028c <__adddf3>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4835      	ldr	r0, [pc, #212]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 80016be:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 80016c2:	00c9      	lsls	r1, r1, #3
 80016c4:	4401      	add	r1, r0
 80016c6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 4; i++) {
 80016ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016ce:	3301      	adds	r3, #1
 80016d0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80016d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016d8:	2b03      	cmp	r3, #3
 80016da:	f77f aed9 	ble.w	8001490 <Motor_Control_STR_step+0x4a8>
    rtb_Sum = Setpoint - Sensor;
 80016de:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <Motor_Control_STR_step+0x7b0>)
 80016e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e4:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <Motor_Control_STR_step+0x7b4>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fdcd 	bl	8000288 <__aeabi_dsub>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
    rtb_UnitDelay_n = Motor_Control_STR_DW.UnitDelay_DSTATE_f;
 80016f6:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80016f8:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80016fc:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
    rtb_UnitDelay3_d = Motor_Control_STR_DW.UnitDelay3_DSTATE_d;
 8001700:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001702:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 8001706:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    q2 = Motor_Control_STR_B.Theta[2] + Motor_Control_STR_B.Theta[3];
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 800170c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 8001712:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001716:	f7fe fdb9 	bl	800028c <__adddf3>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    q2 = (((Motor_Control_STR_B.Theta[2] * 0.96117383180138871 -
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 8001724:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001728:	a313      	add	r3, pc, #76	@ (adr r3, 8001778 <Motor_Control_STR_step+0x790>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe ff63 	bl	80005f8 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4614      	mov	r4, r2
 8001738:	461d      	mov	r5, r3
            Motor_Control_STR_B.Theta[3] * -1.960781661356499) -
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 800173c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001740:	a30f      	add	r3, pc, #60	@ (adr r3, 8001780 <Motor_Control_STR_step+0x798>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe ff57 	bl	80005f8 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
    q2 = (((Motor_Control_STR_B.Theta[2] * 0.96117383180138871 -
 800174e:	4620      	mov	r0, r4
 8001750:	4629      	mov	r1, r5
 8001752:	f7fe fd9b 	bl	800028c <__adddf3>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
           Motor_Control_STR_B.Theta[3]) * Motor_Control_STR_B.Theta[3] +
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 8001760:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
            Motor_Control_STR_B.Theta[3] * -1.960781661356499) -
 8001764:	f7fe fd90 	bl	8000288 <__aeabi_dsub>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
           Motor_Control_STR_B.Theta[3]) * Motor_Control_STR_B.Theta[3] +
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 8001772:	e015      	b.n	80017a0 <Motor_Control_STR_step+0x7b8>
 8001774:	f3af 8000 	nop.w
 8001778:	9fab747c 	.word	0x9fab747c
 800177c:	3feec1ef 	.word	0x3feec1ef
 8001780:	9761f69f 	.word	0x9761f69f
 8001784:	3fff5f5c 	.word	0x3fff5f5c
 8001788:	20000278 	.word	0x20000278
 800178c:	20000248 	.word	0x20000248
 8001790:	20000238 	.word	0x20000238
 8001794:	20000258 	.word	0x20000258
 8001798:	20000208 	.word	0x20000208
 800179c:	200001f8 	.word	0x200001f8
 80017a0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017a4:	f7fe ff28 	bl	80005f8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4614      	mov	r4, r2
 80017ae:	461d      	mov	r5, r3
          (Motor_Control_STR_B.Theta[0] * Motor_Control_STR_B.Theta[3] -
 80017b0:	4bb7      	ldr	r3, [pc, #732]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80017b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b6:	4bb6      	ldr	r3, [pc, #728]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80017b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017bc:	f7fe ff1c 	bl	80005f8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4690      	mov	r8, r2
 80017c6:	4699      	mov	r9, r3
           Motor_Control_STR_B.Theta[1] * Motor_Control_STR_B.Theta[2]) * q2) *
 80017c8:	4bb1      	ldr	r3, [pc, #708]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80017ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017ce:	4bb0      	ldr	r3, [pc, #704]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80017d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80017d4:	f7fe ff10 	bl	80005f8 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
          (Motor_Control_STR_B.Theta[0] * Motor_Control_STR_B.Theta[3] -
 80017dc:	4640      	mov	r0, r8
 80017de:	4649      	mov	r1, r9
 80017e0:	f7fe fd52 	bl	8000288 <__aeabi_dsub>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
           Motor_Control_STR_B.Theta[1] * Motor_Control_STR_B.Theta[2]) * q2) *
 80017ec:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80017f0:	f7fe ff02 	bl	80005f8 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
           Motor_Control_STR_B.Theta[3]) * Motor_Control_STR_B.Theta[3] +
 80017f8:	4620      	mov	r0, r4
 80017fa:	4629      	mov	r1, r5
 80017fc:	f7fe fd46 	bl	800028c <__adddf3>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
      Motor_Control_STR_B.Theta[1] / (((Motor_Control_STR_B.Theta[0] *
 8001808:	4ba1      	ldr	r3, [pc, #644]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800180a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
           Motor_Control_STR_B.Theta[1] * Motor_Control_STR_B.Theta[2]) * q2) *
 800180e:	f7fe fef3 	bl	80005f8 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4614      	mov	r4, r2
 8001818:	461d      	mov	r5, r3
      Motor_Control_STR_B.Theta[1] / (((Motor_Control_STR_B.Theta[0] *
 800181a:	4b9d      	ldr	r3, [pc, #628]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800181c:	e9d3 0100 	ldrd	r0, r1, [r3]
      Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[3] -
 8001820:	4b9b      	ldr	r3, [pc, #620]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001822:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
      Motor_Control_STR_B.Theta[1] / (((Motor_Control_STR_B.Theta[0] *
 8001826:	f7fe fee7 	bl	80005f8 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
      Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[3] -
 8001832:	4b97      	ldr	r3, [pc, #604]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001834:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001838:	f7fe fede 	bl	80005f8 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4690      	mov	r8, r2
 8001842:	4699      	mov	r9, r3
      Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[2] *
 8001844:	4b92      	ldr	r3, [pc, #584]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001846:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800184a:	4b91      	ldr	r3, [pc, #580]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800184c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001850:	f7fe fed2 	bl	80005f8 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
      Motor_Control_STR_B.Theta[1]) - Motor_Control_STR_B.Theta[3] *
 800185c:	4b8c      	ldr	r3, [pc, #560]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800185e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
      Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[2] *
 8001862:	f7fe fec9 	bl	80005f8 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
      Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[3] -
 800186a:	4640      	mov	r0, r8
 800186c:	4649      	mov	r1, r9
 800186e:	f7fe fd0b 	bl	8000288 <__aeabi_dsub>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4690      	mov	r8, r2
 8001878:	4699      	mov	r9, r3
      Motor_Control_STR_B.Theta[1]) - Motor_Control_STR_B.Theta[3] *
 800187a:	4b85      	ldr	r3, [pc, #532]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800187c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
      Motor_Control_STR_B.Theta[3]) * q2);
 8001880:	4b83      	ldr	r3, [pc, #524]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001882:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
      Motor_Control_STR_B.Theta[1]) - Motor_Control_STR_B.Theta[3] *
 8001886:	f7fe feb7 	bl	80005f8 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4640      	mov	r0, r8
 8001890:	4649      	mov	r1, r9
 8001892:	f7fe fcf9 	bl	8000288 <__aeabi_dsub>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
      Motor_Control_STR_B.Theta[3]) * q2);
 800189e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80018a2:	f7fe fea9 	bl	80005f8 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
    q2 = (((Motor_Control_STR_B.Theta[2] * 0.96117383180138871 -
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe ffcd 	bl	800084c <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    b_gamma = q2 * Motor_Control_STR_B.Theta[3] / Motor_Control_STR_B.Theta[1];
 80018ba:	4b75      	ldr	r3, [pc, #468]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80018bc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018c0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80018c4:	f7fe fe98 	bl	80005f8 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80018d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d6:	f7fe ffb9 	bl	800084c <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    q2 = ((((Motor_Control_STR_B.Theta[1] / Motor_Control_STR_B.Theta[3] -
 80018e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80018e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018e8:	4b69      	ldr	r3, [pc, #420]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80018ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018ee:	f7fe ffad 	bl	800084c <__aeabi_ddiv>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	461d      	mov	r5, r3
             ((Motor_Control_STR_B.Theta[2] / Motor_Control_STR_B.Theta[3] -
 80018fa:	4b65      	ldr	r3, [pc, #404]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80018fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001900:	4b63      	ldr	r3, [pc, #396]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001902:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001906:	f7fe ffa1 	bl	800084c <__aeabi_ddiv>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4690      	mov	r8, r2
 8001910:	4699      	mov	r9, r3
               Motor_Control_STR_B.Theta[0] / Motor_Control_STR_B.Theta[1]) +
 8001912:	4b5f      	ldr	r3, [pc, #380]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001914:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001918:	4b5d      	ldr	r3, [pc, #372]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800191a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800191e:	f7fe ff95 	bl	800084c <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
             ((Motor_Control_STR_B.Theta[2] / Motor_Control_STR_B.Theta[3] -
 8001926:	4640      	mov	r0, r8
 8001928:	4649      	mov	r1, r9
 800192a:	f7fe fcad 	bl	8000288 <__aeabi_dsub>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
               Motor_Control_STR_B.Theta[0] / Motor_Control_STR_B.Theta[1]) +
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4b56      	ldr	r3, [pc, #344]	@ (8001a94 <Motor_Control_STR_step+0xaac>)
 800193c:	f7fe fca6 	bl	800028c <__adddf3>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
              1.0) * q2) * Motor_Control_STR_DW.UnitDelay_DSTATE_f +
 8001948:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 800194c:	f7fe fe54 	bl	80005f8 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
    q2 = ((((Motor_Control_STR_B.Theta[1] / Motor_Control_STR_B.Theta[3] -
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fc96 	bl	8000288 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
              1.0) * q2) * Motor_Control_STR_DW.UnitDelay_DSTATE_f +
 8001964:	4b4c      	ldr	r3, [pc, #304]	@ (8001a98 <Motor_Control_STR_step+0xab0>)
 8001966:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 800196a:	f7fe fe45 	bl	80005f8 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4614      	mov	r4, r2
 8001974:	461d      	mov	r5, r3
            ((-0.960781661356499 - Motor_Control_STR_B.Theta[0]) - b_gamma) /
 8001976:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	a142      	add	r1, pc, #264	@ (adr r1, 8001a88 <Motor_Control_STR_step+0xaa0>)
 800197e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001982:	f7fe fc81 	bl	8000288 <__aeabi_dsub>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001992:	f7fe fc79 	bl	8000288 <__aeabi_dsub>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
            Motor_Control_STR_B.Theta[2] * rtb_Sum) + q2 *
 800199e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80019a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
            ((-0.960781661356499 - Motor_Control_STR_B.Theta[0]) - b_gamma) /
 80019a4:	f7fe ff52 	bl	800084c <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
            Motor_Control_STR_B.Theta[2] * rtb_Sum) + q2 *
 80019b0:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 80019b4:	f7fe fe20 	bl	80005f8 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
              1.0) * q2) * Motor_Control_STR_DW.UnitDelay_DSTATE_f +
 80019bc:	4620      	mov	r0, r4
 80019be:	4629      	mov	r1, r5
 80019c0:	f7fe fc64 	bl	800028c <__adddf3>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
           Motor_Control_STR_DW.UnitDelay2_DSTATE_m) + (1.0 - b_gamma) *
 80019cc:	4b32      	ldr	r3, [pc, #200]	@ (8001a98 <Motor_Control_STR_step+0xab0>)
 80019ce:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
            Motor_Control_STR_B.Theta[2] * rtb_Sum) + q2 *
 80019d2:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80019d6:	f7fe fe0f 	bl	80005f8 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4620      	mov	r0, r4
 80019e0:	4629      	mov	r1, r5
 80019e2:	f7fe fc53 	bl	800028c <__adddf3>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4614      	mov	r4, r2
 80019ec:	461d      	mov	r5, r3
           Motor_Control_STR_DW.UnitDelay2_DSTATE_m) + (1.0 - b_gamma) *
 80019ee:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80019f2:	f04f 0000 	mov.w	r0, #0
 80019f6:	4927      	ldr	r1, [pc, #156]	@ (8001a94 <Motor_Control_STR_step+0xaac>)
 80019f8:	f7fe fc46 	bl	8000288 <__aeabi_dsub>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
          Motor_Control_STR_DW.UnitDelay3_DSTATE_d) + b_gamma *
 8001a04:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <Motor_Control_STR_step+0xab0>)
 8001a06:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
           Motor_Control_STR_DW.UnitDelay2_DSTATE_m) + (1.0 - b_gamma) *
 8001a0a:	f7fe fdf5 	bl	80005f8 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4620      	mov	r0, r4
 8001a14:	4629      	mov	r1, r5
 8001a16:	f7fe fc39 	bl	800028c <__adddf3>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4614      	mov	r4, r2
 8001a20:	461d      	mov	r5, r3
      Motor_Control_STR_DW.UnitDelay1_DSTATE_n;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <Motor_Control_STR_step+0xab0>)
 8001a24:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
          Motor_Control_STR_DW.UnitDelay3_DSTATE_d) + b_gamma *
 8001a28:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001a2c:	f7fe fde4 	bl	80005f8 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
    q2 = ((((Motor_Control_STR_B.Theta[1] / Motor_Control_STR_B.Theta[3] -
 8001a34:	4620      	mov	r0, r4
 8001a36:	4629      	mov	r1, r5
 8001a38:	f7fe fc28 	bl	800028c <__adddf3>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    if (q2 > 100.0) {
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <Motor_Control_STR_step+0xab4>)
 8001a4a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8001a4e:	f7ff f863 	bl	8000b18 <__aeabi_dcmpgt>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <Motor_Control_STR_step+0xa7e>
      pwm2 = 100.0;
 8001a58:	4911      	ldr	r1, [pc, #68]	@ (8001aa0 <Motor_Control_STR_step+0xab8>)
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <Motor_Control_STR_step+0xab4>)
 8001a60:	e9c1 2300 	strd	r2, r3, [r1]
 8001a64:	e025      	b.n	8001ab2 <Motor_Control_STR_step+0xaca>
    } else if (q2 < -100.0) {
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <Motor_Control_STR_step+0xabc>)
 8001a6c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8001a70:	f7ff f834 	bl	8000adc <__aeabi_dcmplt>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d016      	beq.n	8001aa8 <Motor_Control_STR_step+0xac0>
      pwm2 = -100.0;
 8001a7a:	4909      	ldr	r1, [pc, #36]	@ (8001aa0 <Motor_Control_STR_step+0xab8>)
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <Motor_Control_STR_step+0xabc>)
 8001a82:	e9c1 2300 	strd	r2, r3, [r1]
 8001a86:	e014      	b.n	8001ab2 <Motor_Control_STR_step+0xaca>
 8001a88:	2ec3ed3e 	.word	0x2ec3ed3e
 8001a8c:	bfeebeb9 	.word	0xbfeebeb9
 8001a90:	20000258 	.word	0x20000258
 8001a94:	3ff00000 	.word	0x3ff00000
 8001a98:	20000278 	.word	0x20000278
 8001a9c:	40590000 	.word	0x40590000
 8001aa0:	20000248 	.word	0x20000248
 8001aa4:	c0590000 	.word	0xc0590000
      pwm2 = q2;
 8001aa8:	4975      	ldr	r1, [pc, #468]	@ (8001c80 <Motor_Control_STR_step+0xc98>)
 8001aaa:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001aae:	e9c1 2300 	strd	r2, r3, [r1]
    Motor_Control_STR_DW.UnitDelay2_DSTATE = rtb_Sum_o;
 8001ab2:	4974      	ldr	r1, [pc, #464]	@ (8001c84 <Motor_Control_STR_step+0xc9c>)
 8001ab4:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8001ab8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Motor_Control_STR_DW.UnitDelay6_DSTATE = Sensor;
 8001abc:	4b72      	ldr	r3, [pc, #456]	@ (8001c88 <Motor_Control_STR_step+0xca0>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	4970      	ldr	r1, [pc, #448]	@ (8001c84 <Motor_Control_STR_step+0xc9c>)
 8001ac4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    Motor_Control_STR_DW.UnitDelay5_DSTATE = rtb_NProdOut;
 8001ac8:	496e      	ldr	r1, [pc, #440]	@ (8001c84 <Motor_Control_STR_step+0xc9c>)
 8001aca:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8001ace:	e9c1 2306 	strd	r2, r3, [r1, #24]
    b_gamma = Theta_tmp[0];
 8001ad2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001ad6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    rtb_Sum_o = Theta_tmp[1];
 8001ae2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001ae6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001aea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aee:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    rtb_NProdOut = Theta_tmp[2];
 8001af2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001af6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001afa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001afe:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
    Theta_tmp_1 = Theta_tmp[3];
 8001b02:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001b06:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b0a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b0e:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
    for (i = 0; i < 4; i++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001b18:	e064      	b.n	8001be4 <Motor_Control_STR_step+0xbfc>
      PHI_0 = PHI[i];
 8001b1a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001b1e:	f5a3 72c4 	sub.w	r2, r3, #392	@ 0x188
 8001b22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
      PHI_tmp = i << 2;
 8001b32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
      Theta_tmp_0[PHI_tmp] = b_gamma * PHI_0;
 8001b3c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001b40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8001b44:	f7fe fd58 	bl	80005f8 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	f8d7 11d4 	ldr.w	r1, [r7, #468]	@ 0x1d4
 8001b50:	00c9      	lsls	r1, r1, #3
 8001b52:	f501 71d4 	add.w	r1, r1, #424	@ 0x1a8
 8001b56:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001b5a:	4401      	add	r1, r0
 8001b5c:	39e8      	subs	r1, #232	@ 0xe8
 8001b5e:	e9c1 2300 	strd	r2, r3, [r1]
      Theta_tmp_0[PHI_tmp + 1] = rtb_Sum_o * PHI_0;
 8001b62:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001b66:	1c5c      	adds	r4, r3, #1
 8001b68:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001b6c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 8001b70:	f7fe fd42 	bl	80005f8 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	00e1      	lsls	r1, r4, #3
 8001b7a:	f501 71d4 	add.w	r1, r1, #424	@ 0x1a8
 8001b7e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001b82:	4401      	add	r1, r0
 8001b84:	39e8      	subs	r1, #232	@ 0xe8
 8001b86:	e9c1 2300 	strd	r2, r3, [r1]
      Theta_tmp_0[PHI_tmp + 2] = rtb_NProdOut * PHI_0;
 8001b8a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001b8e:	1c9c      	adds	r4, r3, #2
 8001b90:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001b94:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8001b98:	f7fe fd2e 	bl	80005f8 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	00e1      	lsls	r1, r4, #3
 8001ba2:	f501 71d4 	add.w	r1, r1, #424	@ 0x1a8
 8001ba6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001baa:	4401      	add	r1, r0
 8001bac:	39e8      	subs	r1, #232	@ 0xe8
 8001bae:	e9c1 2300 	strd	r2, r3, [r1]
      Theta_tmp_0[PHI_tmp + 3] = Theta_tmp_1 * PHI_0;
 8001bb2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001bb6:	1cdc      	adds	r4, r3, #3
 8001bb8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001bbc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8001bc0:	f7fe fd1a 	bl	80005f8 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	00e1      	lsls	r1, r4, #3
 8001bca:	f501 71d4 	add.w	r1, r1, #424	@ 0x1a8
 8001bce:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001bd2:	4401      	add	r1, r0
 8001bd4:	39e8      	subs	r1, #232	@ 0xe8
 8001bd6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 4; i++) {
 8001bda:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001bde:	3301      	adds	r3, #1
 8001be0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001be4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	dd96      	ble.n	8001b1a <Motor_Control_STR_step+0xb32>
    PHI_1 += lamda;
 8001bec:	4b27      	ldr	r3, [pc, #156]	@ (8001c8c <Motor_Control_STR_step+0xca4>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8001bf6:	f7fe fb49 	bl	800028c <__adddf3>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    for (i = 0; i < 4; i++) {
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001c08:	e0d0      	b.n	8001dac <Motor_Control_STR_step+0xdc4>
      b_gamma = Theta_tmp_0[i + 4];
 8001c0a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c0e:	3304      	adds	r3, #4
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001c16:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3be8      	subs	r3, #232	@ 0xe8
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      rtb_Sum_o = Theta_tmp_0[i];
 8001c26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001c30:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c34:	4413      	add	r3, r2
 8001c36:	3be8      	subs	r3, #232	@ 0xe8
 8001c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3c:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
      rtb_NProdOut = Theta_tmp_0[i + 8];
 8001c40:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c44:	3308      	adds	r3, #8
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001c4c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c50:	4413      	add	r3, r2
 8001c52:	3be8      	subs	r3, #232	@ 0xe8
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
      Theta_tmp_1 = Theta_tmp_0[i + 12];
 8001c5c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c60:	330c      	adds	r3, #12
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001c68:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3be8      	subs	r3, #232	@ 0xe8
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      for (PHI_tmp = 0; PHI_tmp < 4; PHI_tmp++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8001c7e:	e08b      	b.n	8001d98 <Motor_Control_STR_step+0xdb0>
 8001c80:	20000248 	.word	0x20000248
 8001c84:	20000278 	.word	0x20000278
 8001c88:	200001f8 	.word	0x200001f8
 8001c8c:	20000238 	.word	0x20000238
        tmp_0 = PHI_tmp << 2;
 8001c90:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
        tmp_1 = tmp_0 + i;
 8001c9a:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8001c9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        tmp[tmp_1] = Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_1] -
 8001ca8:	4a9e      	ldr	r2, [pc, #632]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001caa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001cae:	3304      	adds	r3, #4
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	e9d3 4500 	ldrd	r4, r5, [r3]
          (((Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 1] * b_gamma +
 8001cb8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	4a99      	ldr	r2, [pc, #612]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cca:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001cce:	f7fe fc93 	bl	80005f8 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4690      	mov	r8, r2
 8001cd8:	4699      	mov	r9, r3
             Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0] * rtb_Sum_o) +
 8001cda:	4a92      	ldr	r2, [pc, #584]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001cdc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cea:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8001cee:	f7fe fc83 	bl	80005f8 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
          (((Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 1] * b_gamma +
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	f7fe fac7 	bl	800028c <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4690      	mov	r8, r2
 8001d04:	4699      	mov	r9, r3
            Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 2] * rtb_NProdOut) +
 8001d06:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	4a85      	ldr	r2, [pc, #532]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001d0e:	3304      	adds	r3, #4
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d18:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8001d1c:	f7fe fc6c 	bl	80005f8 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
             Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0] * rtb_Sum_o) +
 8001d24:	4640      	mov	r0, r8
 8001d26:	4649      	mov	r1, r9
 8001d28:	f7fe fab0 	bl	800028c <__adddf3>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4690      	mov	r8, r2
 8001d32:	4699      	mov	r9, r3
           Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 3] * Theta_tmp_1) /
 8001d34:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001d38:	3303      	adds	r3, #3
 8001d3a:	4a7a      	ldr	r2, [pc, #488]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4413      	add	r3, r2
 8001d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d46:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001d4a:	f7fe fc55 	bl	80005f8 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
            Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 2] * rtb_NProdOut) +
 8001d52:	4640      	mov	r0, r8
 8001d54:	4649      	mov	r1, r9
 8001d56:	f7fe fa99 	bl	800028c <__adddf3>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
           Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 3] * Theta_tmp_1) /
 8001d62:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8001d66:	f7fe fd71 	bl	800084c <__aeabi_ddiv>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
        tmp[tmp_1] = Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_1] -
 8001d6e:	4620      	mov	r0, r4
 8001d70:	4629      	mov	r1, r5
 8001d72:	f7fe fa89 	bl	8000288 <__aeabi_dsub>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	f507 71f4 	add.w	r1, r7, #488	@ 0x1e8
 8001d7e:	f5a1 70b4 	sub.w	r0, r1, #360	@ 0x168
 8001d82:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 8001d86:	00c9      	lsls	r1, r1, #3
 8001d88:	4401      	add	r1, r0
 8001d8a:	e9c1 2300 	strd	r2, r3, [r1]
      for (PHI_tmp = 0; PHI_tmp < 4; PHI_tmp++) {
 8001d8e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001d92:	3301      	adds	r3, #1
 8001d94:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8001d98:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	f77f af77 	ble.w	8001c90 <Motor_Control_STR_step+0xca8>
    for (i = 0; i < 4; i++) {
 8001da2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001da6:	3301      	adds	r3, #1
 8001da8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001dac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	f77f af2a 	ble.w	8001c0a <Motor_Control_STR_step+0xc22>
    for (i = 0; i < 16; i++) {
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001dbc:	e01c      	b.n	8001df8 <Motor_Control_STR_step+0xe10>
      Motor_Control_STR_DW.UnitDelay1_DSTATE[i] = a * tmp[i];
 8001dbe:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001dc2:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8001dc6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dd2:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8001dd6:	f7fe fc0f 	bl	80005f8 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4851      	ldr	r0, [pc, #324]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001de0:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8001de4:	3104      	adds	r1, #4
 8001de6:	00c9      	lsls	r1, r1, #3
 8001de8:	4401      	add	r1, r0
 8001dea:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 16; i++) {
 8001dee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001df2:	3301      	adds	r3, #1
 8001df4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001df8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	ddde      	ble.n	8001dbe <Motor_Control_STR_step+0xdd6>
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] = Motor_Control_STR_B.Theta[0];
 8001e00:	4b49      	ldr	r3, [pc, #292]	@ (8001f28 <Motor_Control_STR_step+0xf40>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	4947      	ldr	r1, [pc, #284]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e08:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[1] = Motor_Control_STR_B.Theta[1];
 8001e0c:	4b46      	ldr	r3, [pc, #280]	@ (8001f28 <Motor_Control_STR_step+0xf40>)
 8001e0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e12:	4944      	ldr	r1, [pc, #272]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e14:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[2] = Motor_Control_STR_B.Theta[2];
 8001e18:	4b43      	ldr	r3, [pc, #268]	@ (8001f28 <Motor_Control_STR_step+0xf40>)
 8001e1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e1e:	4941      	ldr	r1, [pc, #260]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e20:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[3] = Motor_Control_STR_B.Theta[3];
 8001e24:	4b40      	ldr	r3, [pc, #256]	@ (8001f28 <Motor_Control_STR_step+0xf40>)
 8001e26:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e2a:	493e      	ldr	r1, [pc, #248]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e2c:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
    Motor_Control_STR_DW.UnitDelay_DSTATE_f = rtb_Sum;
 8001e30:	493c      	ldr	r1, [pc, #240]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e32:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8001e36:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
    Motor_Control_STR_DW.UnitDelay2_DSTATE_m = rtb_UnitDelay_n;
 8001e3a:	493a      	ldr	r1, [pc, #232]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e3c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8001e40:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
    Motor_Control_STR_DW.UnitDelay3_DSTATE_d = q2;
 8001e44:	4937      	ldr	r1, [pc, #220]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e46:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001e4a:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    Motor_Control_STR_DW.UnitDelay1_DSTATE_n = rtb_UnitDelay3_d;
 8001e4e:	4935      	ldr	r1, [pc, #212]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e50:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8001e54:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    break;
 8001e58:	e05d      	b.n	8001f16 <Motor_Control_STR_step+0xf2e>
    rtb_Sum = (Setpoint - Sensor) * K1 + (Sensor -
 8001e5a:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <Motor_Control_STR_step+0xf44>)
 8001e5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e60:	4b33      	ldr	r3, [pc, #204]	@ (8001f30 <Motor_Control_STR_step+0xf48>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	f7fe fa0f 	bl	8000288 <__aeabi_dsub>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	4b30      	ldr	r3, [pc, #192]	@ (8001f34 <Motor_Control_STR_step+0xf4c>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbbe 	bl	80005f8 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <Motor_Control_STR_step+0xf48>)
 8001e86:	e9d3 0100 	ldrd	r0, r1, [r3]
      Motor_Control_STR_DW.UnitDelay_DSTATE) * K2;
 8001e8a:	4b26      	ldr	r3, [pc, #152]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Sum = (Setpoint - Sensor) * K1 + (Sensor -
 8001e90:	f7fe f9fa 	bl	8000288 <__aeabi_dsub>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
      Motor_Control_STR_DW.UnitDelay_DSTATE) * K2;
 8001e9c:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <Motor_Control_STR_step+0xf50>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fba9 	bl	80005f8 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
    rtb_Sum = (Setpoint - Sensor) * K1 + (Sensor -
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe f9ed 	bl	800028c <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
    if (rtb_Sum > 100.0) {
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <Motor_Control_STR_step+0xf54>)
 8001ec0:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8001ec4:	f7fe fe28 	bl	8000b18 <__aeabi_dcmpgt>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d006      	beq.n	8001edc <Motor_Control_STR_step+0xef4>
      pwm3 = 100.0;
 8001ece:	491c      	ldr	r1, [pc, #112]	@ (8001f40 <Motor_Control_STR_step+0xf58>)
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <Motor_Control_STR_step+0xf54>)
 8001ed6:	e9c1 2300 	strd	r2, r3, [r1]
 8001eda:	e015      	b.n	8001f08 <Motor_Control_STR_step+0xf20>
    } else if (rtb_Sum < -100.0) {
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <Motor_Control_STR_step+0xf5c>)
 8001ee2:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8001ee6:	f7fe fdf9 	bl	8000adc <__aeabi_dcmplt>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <Motor_Control_STR_step+0xf16>
      pwm3 = -100.0;
 8001ef0:	4913      	ldr	r1, [pc, #76]	@ (8001f40 <Motor_Control_STR_step+0xf58>)
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <Motor_Control_STR_step+0xf5c>)
 8001ef8:	e9c1 2300 	strd	r2, r3, [r1]
 8001efc:	e004      	b.n	8001f08 <Motor_Control_STR_step+0xf20>
      pwm3 = rtb_Sum;
 8001efe:	4910      	ldr	r1, [pc, #64]	@ (8001f40 <Motor_Control_STR_step+0xf58>)
 8001f00:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8001f04:	e9c1 2300 	strd	r2, r3, [r1]
    Motor_Control_STR_DW.UnitDelay_DSTATE = Sensor;
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <Motor_Control_STR_step+0xf48>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	4905      	ldr	r1, [pc, #20]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001f10:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8001f14:	bf00      	nop
}
 8001f16:	bf00      	nop
 8001f18:	f507 77f4 	add.w	r7, r7, #488	@ 0x1e8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f22:	bf00      	nop
 8001f24:	20000278 	.word	0x20000278
 8001f28:	20000258 	.word	0x20000258
 8001f2c:	20000208 	.word	0x20000208
 8001f30:	200001f8 	.word	0x200001f8
 8001f34:	20000228 	.word	0x20000228
 8001f38:	20000230 	.word	0x20000230
 8001f3c:	40590000 	.word	0x40590000
 8001f40:	20000240 	.word	0x20000240
 8001f44:	c0590000 	.word	0xc0590000

08001f48 <Motor_Control_STR_initialize>:

/* Model initialize function */
void Motor_Control_STR_initialize(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8001f4c:	2008      	movs	r0, #8
 8001f4e:	f000 f973 	bl	8002238 <rt_InitInfAndNaN>

  /* initialize error status */
  rtmSetErrorStatus(Motor_Control_STR_M, (NULL));
 8001f52:	4b43      	ldr	r3, [pc, #268]	@ (8002060 <Motor_Control_STR_initialize+0x118>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

  /* block I/O */
  (void) memset(((void *) &Motor_Control_STR_B), 0,
 8001f58:	2220      	movs	r2, #32
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4841      	ldr	r0, [pc, #260]	@ (8002064 <Motor_Control_STR_initialize+0x11c>)
 8001f5e:	f006 fe9e 	bl	8008c9e <memset>
                sizeof(B_Motor_Control_STR_T));

  /* exported global signals */
  pwm3 = 0.0;
 8001f62:	4941      	ldr	r1, [pc, #260]	@ (8002068 <Motor_Control_STR_initialize+0x120>)
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9c1 2300 	strd	r2, r3, [r1]
  pwm2 = 0.0;
 8001f70:	493e      	ldr	r1, [pc, #248]	@ (800206c <Motor_Control_STR_initialize+0x124>)
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	e9c1 2300 	strd	r2, r3, [r1]
  pwm1 = 0.0;
 8001f7e:	493c      	ldr	r1, [pc, #240]	@ (8002070 <Motor_Control_STR_initialize+0x128>)
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9c1 2300 	strd	r2, r3, [r1]

  /* states (dwork) */
  (void) memset((void *)&Motor_Control_STR_DW, 0,
 8001f8c:	22f0      	movs	r2, #240	@ 0xf0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4838      	ldr	r0, [pc, #224]	@ (8002074 <Motor_Control_STR_initialize+0x12c>)
 8001f92:	f006 fe84 	bl	8008c9e <memset>
                sizeof(DW_Motor_Control_STR_T));

  /* external inputs */
  Sensor = 0.0;
 8001f96:	4938      	ldr	r1, [pc, #224]	@ (8002078 <Motor_Control_STR_initialize+0x130>)
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	e9c1 2300 	strd	r2, r3, [r1]
  Case = 0.0;
 8001fa4:	4935      	ldr	r1, [pc, #212]	@ (800207c <Motor_Control_STR_initialize+0x134>)
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	e9c1 2300 	strd	r2, r3, [r1]
  Setpoint = 0.0;
 8001fb2:	4933      	ldr	r1, [pc, #204]	@ (8002080 <Motor_Control_STR_initialize+0x138>)
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9c1 2300 	strd	r2, r3, [r1]
  Kp = 0.0;
 8001fc0:	4930      	ldr	r1, [pc, #192]	@ (8002084 <Motor_Control_STR_initialize+0x13c>)
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	e9c1 2300 	strd	r2, r3, [r1]
  Ki = 0.0;
 8001fce:	492e      	ldr	r1, [pc, #184]	@ (8002088 <Motor_Control_STR_initialize+0x140>)
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9c1 2300 	strd	r2, r3, [r1]
  Kd = 0.0;
 8001fdc:	492b      	ldr	r1, [pc, #172]	@ (800208c <Motor_Control_STR_initialize+0x144>)
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	e9c1 2300 	strd	r2, r3, [r1]
  K1 = 0.0;
 8001fea:	4929      	ldr	r1, [pc, #164]	@ (8002090 <Motor_Control_STR_initialize+0x148>)
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9c1 2300 	strd	r2, r3, [r1]
  K2 = 0.0;
 8001ff8:	4926      	ldr	r1, [pc, #152]	@ (8002094 <Motor_Control_STR_initialize+0x14c>)
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	e9c1 2300 	strd	r2, r3, [r1]
  lamda = 0.0;
 8002006:	4924      	ldr	r1, [pc, #144]	@ (8002098 <Motor_Control_STR_initialize+0x150>)
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9c1 2300 	strd	r2, r3, [r1]

  /* SystemInitialize for IfAction SubSystem: '<Root>/Switch Case Action Subsystem' */
  /* InitializeConditions for UnitDelay: '<S5>/Unit Delay1' */
  memcpy(&Motor_Control_STR_DW.UnitDelay1_DSTATE[0],
 8002014:	2280      	movs	r2, #128	@ 0x80
 8002016:	4921      	ldr	r1, [pc, #132]	@ (800209c <Motor_Control_STR_initialize+0x154>)
 8002018:	4821      	ldr	r0, [pc, #132]	@ (80020a0 <Motor_Control_STR_initialize+0x158>)
 800201a:	f006 ff50 	bl	8008ebe <memcpy>
         &Motor_Control_STR_ConstP.UnitDelay1_InitialCondition[0], sizeof(real_T)
         << 4U);

  /* InitializeConditions for UnitDelay: '<S5>/Unit Delay' */
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] = -1.0;
 800201e:	4915      	ldr	r1, [pc, #84]	@ (8002074 <Motor_Control_STR_initialize+0x12c>)
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <Motor_Control_STR_initialize+0x15c>)
 8002026:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[1] = 0.1;
 800202a:	4912      	ldr	r1, [pc, #72]	@ (8002074 <Motor_Control_STR_initialize+0x12c>)
 800202c:	a30a      	add	r3, pc, #40	@ (adr r3, 8002058 <Motor_Control_STR_initialize+0x110>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[2] = 0.1;
 8002036:	490f      	ldr	r1, [pc, #60]	@ (8002074 <Motor_Control_STR_initialize+0x12c>)
 8002038:	a307      	add	r3, pc, #28	@ (adr r3, 8002058 <Motor_Control_STR_initialize+0x110>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[3] = 1.0;
 8002042:	490c      	ldr	r1, [pc, #48]	@ (8002074 <Motor_Control_STR_initialize+0x12c>)
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b17      	ldr	r3, [pc, #92]	@ (80020a8 <Motor_Control_STR_initialize+0x160>)
 800204a:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8

  /* End of SystemInitialize for SubSystem: '<Root>/Switch Case Action Subsystem' */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	f3af 8000 	nop.w
 8002058:	9999999a 	.word	0x9999999a
 800205c:	3fb99999 	.word	0x3fb99999
 8002060:	20000368 	.word	0x20000368
 8002064:	20000258 	.word	0x20000258
 8002068:	20000240 	.word	0x20000240
 800206c:	20000248 	.word	0x20000248
 8002070:	20000250 	.word	0x20000250
 8002074:	20000278 	.word	0x20000278
 8002078:	200001f8 	.word	0x200001f8
 800207c:	20000200 	.word	0x20000200
 8002080:	20000208 	.word	0x20000208
 8002084:	20000210 	.word	0x20000210
 8002088:	20000218 	.word	0x20000218
 800208c:	20000220 	.word	0x20000220
 8002090:	20000228 	.word	0x20000228
 8002094:	20000230 	.word	0x20000230
 8002098:	20000238 	.word	0x20000238
 800209c:	0800bc70 	.word	0x0800bc70
 80020a0:	20000298 	.word	0x20000298
 80020a4:	bff00000 	.word	0xbff00000
 80020a8:	3ff00000 	.word	0x3ff00000

080020ac <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80020b2:	2340      	movs	r3, #64	@ 0x40
 80020b4:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d10b      	bne.n	80020e0 <rtGetInf+0x34>
    inf = rtGetInfF();
 80020c8:	f000 f820 	bl	800210c <rtGetInfF>
 80020cc:	ee10 3a10 	vmov	r3, s0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa39 	bl	8000548 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80020de:	e007      	b.n	80020f0 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <rtGetInf+0x5c>)
 80020e2:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 80020e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 80020f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80020f8:	eeb0 0a47 	vmov.f32	s0, s14
 80020fc:	eef0 0a67 	vmov.f32	s1, s15
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	7ff00000 	.word	0x7ff00000

0800210c <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8002112:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8002116:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	ee07 3a90 	vmov	s15, r3
}
 800211e:	eeb0 0a67 	vmov.f32	s0, s15
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002132:	2340      	movs	r3, #64	@ 0x40
 8002134:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b20      	cmp	r3, #32
 8002146:	d10b      	bne.n	8002160 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 8002148:	f000 f820 	bl	800218c <rtGetMinusInfF>
 800214c:	ee10 3a10 	vmov	r3, s0
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f9f9 	bl	8000548 <__aeabi_f2d>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800215e:	e007      	b.n	8002170 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <rtGetMinusInf+0x5c>)
 8002162:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8002164:	2300      	movs	r3, #0
 8002166:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 8002168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800216c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 8002170:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002174:	ec43 2b17 	vmov	d7, r2, r3
}
 8002178:	eeb0 0a47 	vmov.f32	s0, s14
 800217c:	eef0 0a67 	vmov.f32	s1, s15
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	fff00000 	.word	0xfff00000

0800218c <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <rtGetMinusInfF+0x20>)
 8002194:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	ee07 3a90 	vmov	s15, r3
}
 800219c:	eeb0 0a67 	vmov.f32	s0, s15
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	ff800000 	.word	0xff800000

080021b0 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80021b6:	2340      	movs	r3, #64	@ 0x40
 80021b8:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d10b      	bne.n	80021e4 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 80021cc:	f000 f820 	bl	8002210 <rtGetNaNF>
 80021d0:	ee10 3a10 	vmov	r3, s0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f9b7 	bl	8000548 <__aeabi_f2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80021e2:	e007      	b.n	80021f4 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 80021e4:	4b09      	ldr	r3, [pc, #36]	@ (800220c <rtGetNaN+0x5c>)
 80021e6:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 80021ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 80021f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021f8:	ec43 2b17 	vmov	d7, r2, r3
}
 80021fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002200:	eef0 0a67 	vmov.f32	s1, s15
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	fff80000 	.word	0xfff80000

08002210 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <rtGetNaNF+0x24>)
 800221e:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	ee07 3a90 	vmov	s15, r3
}
 8002226:	eeb0 0a67 	vmov.f32	s0, s15
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	ffc00000 	.word	0xffc00000

08002238 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8002240:	f7ff ffb6 	bl	80021b0 <rtGetNaN>
 8002244:	eeb0 7a40 	vmov.f32	s14, s0
 8002248:	eef0 7a60 	vmov.f32	s15, s1
 800224c:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <rt_InitInfAndNaN+0x70>)
 800224e:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 8002252:	f7ff ffdd 	bl	8002210 <rtGetNaNF>
 8002256:	eef0 7a40 	vmov.f32	s15, s0
 800225a:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <rt_InitInfAndNaN+0x74>)
 800225c:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 8002260:	f7ff ff24 	bl	80020ac <rtGetInf>
 8002264:	eeb0 7a40 	vmov.f32	s14, s0
 8002268:	eef0 7a60 	vmov.f32	s15, s1
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <rt_InitInfAndNaN+0x78>)
 800226e:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 8002272:	f7ff ff4b 	bl	800210c <rtGetInfF>
 8002276:	eef0 7a40 	vmov.f32	s15, s0
 800227a:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <rt_InitInfAndNaN+0x7c>)
 800227c:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 8002280:	f7ff ff54 	bl	800212c <rtGetMinusInf>
 8002284:	eeb0 7a40 	vmov.f32	s14, s0
 8002288:	eef0 7a60 	vmov.f32	s15, s1
 800228c:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <rt_InitInfAndNaN+0x80>)
 800228e:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 8002292:	f7ff ff7b 	bl	800218c <rtGetMinusInfF>
 8002296:	eef0 7a40 	vmov.f32	s15, s0
 800229a:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <rt_InitInfAndNaN+0x84>)
 800229c:	edc3 7a00 	vstr	s15, [r3]
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000380 	.word	0x20000380
 80022ac:	20000390 	.word	0x20000390
 80022b0:	20000370 	.word	0x20000370
 80022b4:	20000388 	.word	0x20000388
 80022b8:	20000378 	.word	0x20000378
 80022bc:	2000038c 	.word	0x2000038c

080022c0 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 80022ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <rtIsInf+0x40>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022d4:	f7fe fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <rtIsInf+0x32>
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <rtIsInf+0x44>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022e8:	f7fe fbee 	bl	8000ac8 <__aeabi_dcmpeq>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <rtIsInf+0x36>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <rtIsInf+0x38>
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000370 	.word	0x20000370
 8002304:	20000378 	.word	0x20000378

08002308 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002316:	2340      	movs	r3, #64	@ 0x40
 8002318:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b20      	cmp	r3, #32
 800231e:	d10b      	bne.n	8002338 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 8002320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002324:	f7fe fc60 	bl	8000be8 <__aeabi_d2f>
 8002328:	4603      	mov	r3, r0
 800232a:	ee00 3a10 	vmov	s0, r3
 800232e:	f000 f821 	bl	8002374 <rtIsNaNF>
 8002332:	4603      	mov	r3, r0
 8002334:	75fb      	strb	r3, [r7, #23]
 8002336:	e015      	b.n	8002364 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 8002338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800233c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <rtIsNaN+0x68>)
 8002344:	4013      	ands	r3, r2
 8002346:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <rtIsNaN+0x68>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d109      	bne.n	8002360 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 8002356:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <rtIsNaN+0x5a>
 8002360:	2300      	movs	r3, #0
 8002362:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002364:	7dfb      	ldrb	r3, [r7, #23]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	7ff00000 	.word	0x7ff00000

08002374 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 43ff 	and.w	r3, r3, #2139095040	@ 0x7f800000
 8002388:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800238c:	d106      	bne.n	800239c <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <rtIsNaNF+0x28>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <rtIsNaNF+0x2a>
 800239c:	2300      	movs	r3, #0
 800239e:	b2db      	uxtb	r3, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <rt_OneStep>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void rt_OneStep(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  static boolean_T OverrunFlag = false;

  /* Disable interrupts here */

  /* Check for overrun */
  if (OverrunFlag) {
 80023b0:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <rt_OneStep+0x28>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <rt_OneStep+0x16>
    rtmSetErrorStatus(Motor_Control_STR_M, "Overrun");
 80023b8:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <rt_OneStep+0x2c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <rt_OneStep+0x30>)
 80023be:	601a      	str	r2, [r3, #0]
    return;
 80023c0:	e007      	b.n	80023d2 <rt_OneStep+0x26>
  }

  OverrunFlag = true;
 80023c2:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <rt_OneStep+0x28>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
  /* Save FPU context here (if necessary) */
  /* Re-enable timer or interrupt here */
  /* Set model inputs here */

  /* Step the model */
  Motor_Control_STR_step();
 80023c8:	f7fe fe0e 	bl	8000fe8 <Motor_Control_STR_step>

  /* Get model outputs here */

  /* Indicate task complete */
  OverrunFlag = false;
 80023cc:	4b01      	ldr	r3, [pc, #4]	@ (80023d4 <rt_OneStep+0x28>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]

  /* Disable interrupts here */
  /* Restore FPU context here (if necessary) */
  /* Enable interrupts here */
}
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200005e6 	.word	0x200005e6
 80023d8:	0800bc68 	.word	0x0800bc68
 80023dc:	0800bc38 	.word	0x0800bc38

080023e0 <float_to_string>:

void float_to_string(float number, char *buffer) {
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	@ 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80023ea:	6038      	str	r0, [r7, #0]
    int int_part = (int)number;
 80023ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f4:	ee17 3a90 	vmov	r3, s15
 80023f8:	61fb      	str	r3, [r7, #28]
    int decimal_part = (int)((number - int_part) * 100);
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002404:	ed97 7a01 	vldr	s14, [r7, #4]
 8002408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800254c <float_to_string+0x16c>
 8002410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002418:	ee17 3a90 	vmov	r3, s15
 800241c:	61bb      	str	r3, [r7, #24]
    if (decimal_part < 0) decimal_part = -decimal_part;
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	da02      	bge.n	800242a <float_to_string+0x4a>
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	425b      	negs	r3, r3
 8002428:	61bb      	str	r3, [r7, #24]

    int index = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]

    if (number < 0) {
 800242e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243a:	d50a      	bpl.n	8002452 <float_to_string+0x72>
        buffer[index++] = '-';
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	617a      	str	r2, [r7, #20]
 8002442:	461a      	mov	r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4413      	add	r3, r2
 8002448:	222d      	movs	r2, #45	@ 0x2d
 800244a:	701a      	strb	r2, [r3, #0]
        int_part = -int_part;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	425b      	negs	r3, r3
 8002450:	61fb      	str	r3, [r7, #28]
    }

    int temp = int_part;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	613b      	str	r3, [r7, #16]
    int len = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
    while (temp > 0) {
 800245a:	e00a      	b.n	8002472 <float_to_string+0x92>
        temp /= 10;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4a3c      	ldr	r2, [pc, #240]	@ (8002550 <float_to_string+0x170>)
 8002460:	fb82 1203 	smull	r1, r2, r2, r3
 8002464:	1092      	asrs	r2, r2, #2
 8002466:	17db      	asrs	r3, r3, #31
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	613b      	str	r3, [r7, #16]
        len++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3301      	adds	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
    while (temp > 0) {
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	dcf1      	bgt.n	800245c <float_to_string+0x7c>
    }

    for (int i = len - 1; i >= 0; i--) {
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3b01      	subs	r3, #1
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	e020      	b.n	80024c2 <float_to_string+0xe2>
        buffer[index + i] = (int_part % 10) + '0';
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	4b33      	ldr	r3, [pc, #204]	@ (8002550 <float_to_string+0x170>)
 8002484:	fb83 1302 	smull	r1, r3, r3, r2
 8002488:	1099      	asrs	r1, r3, #2
 800248a:	17d3      	asrs	r3, r2, #31
 800248c:	1ac9      	subs	r1, r1, r3
 800248e:	460b      	mov	r3, r1
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	1ad1      	subs	r1, r2, r3
 8002498:	b2ca      	uxtb	r2, r1
 800249a:	6979      	ldr	r1, [r7, #20]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	440b      	add	r3, r1
 80024a0:	4619      	mov	r1, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	440b      	add	r3, r1
 80024a6:	3230      	adds	r2, #48	@ 0x30
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]
        int_part /= 10;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <float_to_string+0x170>)
 80024b0:	fb82 1203 	smull	r1, r2, r2, r3
 80024b4:	1092      	asrs	r2, r2, #2
 80024b6:	17db      	asrs	r3, r3, #31
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	61fb      	str	r3, [r7, #28]
    for (int i = len - 1; i >= 0; i--) {
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3b01      	subs	r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	dadb      	bge.n	8002480 <float_to_string+0xa0>
    }
    index += len > 0 ? len : 1;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	bfb8      	it	lt
 80024ce:	2301      	movlt	r3, #1
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4413      	add	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
    buffer[index++] = '.';
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	617a      	str	r2, [r7, #20]
 80024dc:	461a      	mov	r2, r3
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	222e      	movs	r2, #46	@ 0x2e
 80024e4:	701a      	strb	r2, [r3, #0]

    buffer[index++] = (decimal_part / 10) + '0';
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4a19      	ldr	r2, [pc, #100]	@ (8002550 <float_to_string+0x170>)
 80024ea:	fb82 1203 	smull	r1, r2, r2, r3
 80024ee:	1092      	asrs	r2, r2, #2
 80024f0:	17db      	asrs	r3, r3, #31
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	1c59      	adds	r1, r3, #1
 80024fa:	6179      	str	r1, [r7, #20]
 80024fc:	4619      	mov	r1, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	440b      	add	r3, r1
 8002502:	3230      	adds	r2, #48	@ 0x30
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]
    buffer[index++] = (decimal_part % 10) + '0';
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <float_to_string+0x170>)
 800250c:	fb83 1302 	smull	r1, r3, r3, r2
 8002510:	1099      	asrs	r1, r3, #2
 8002512:	17d3      	asrs	r3, r2, #31
 8002514:	1ac9      	subs	r1, r1, r3
 8002516:	460b      	mov	r3, r1
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	1ad1      	subs	r1, r2, r3
 8002520:	b2ca      	uxtb	r2, r1
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	1c59      	adds	r1, r3, #1
 8002526:	6179      	str	r1, [r7, #20]
 8002528:	4619      	mov	r1, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	440b      	add	r3, r1
 800252e:	3230      	adds	r2, #48	@ 0x30
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
    buffer[index] = '\0';
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
}
 800253e:	bf00      	nop
 8002540:	3724      	adds	r7, #36	@ 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	42c80000 	.word	0x42c80000
 8002550:	66666667 	.word	0x66666667

08002554 <process_buffers>:

void process_buffers(float dposition, float sp, char *cposition, char *csp, char *result) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	ed87 0a05 	vstr	s0, [r7, #20]
 800255e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
    if (dposition != 0) {
 8002568:	edd7 7a05 	vldr	s15, [r7, #20]
 800256c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d005      	beq.n	8002582 <process_buffers+0x2e>
        float_to_string(dposition, cposition);
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	ed97 0a05 	vldr	s0, [r7, #20]
 800257c:	f7ff ff30 	bl	80023e0 <float_to_string>
 8002580:	e005      	b.n	800258e <process_buffers+0x3a>
    } else {
        strcpy(cposition, "0");
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4924      	ldr	r1, [pc, #144]	@ (8002618 <process_buffers+0xc4>)
 8002586:	461a      	mov	r2, r3
 8002588:	460b      	mov	r3, r1
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	8013      	strh	r3, [r2, #0]
    }

    if (sp != 0) {
 800258e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002592:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	d005      	beq.n	80025a8 <process_buffers+0x54>
        float_to_string(sp, csp);
 800259c:	68b8      	ldr	r0, [r7, #8]
 800259e:	ed97 0a04 	vldr	s0, [r7, #16]
 80025a2:	f7ff ff1d 	bl	80023e0 <float_to_string>
 80025a6:	e005      	b.n	80025b4 <process_buffers+0x60>
    } else {
        strcpy(csp, "0");
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	491b      	ldr	r1, [pc, #108]	@ (8002618 <process_buffers+0xc4>)
 80025ac:	461a      	mov	r2, r3
 80025ae:	460b      	mov	r3, r1
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	8013      	strh	r3, [r2, #0]
    }

    result[0] = '\0';
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
    strcat(result, "Y, ");
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fd fe58 	bl	8000270 <strlen>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a14      	ldr	r2, [pc, #80]	@ (800261c <process_buffers+0xc8>)
 80025ca:	6810      	ldr	r0, [r2, #0]
 80025cc:	6018      	str	r0, [r3, #0]
    strcat(result, cposition);
 80025ce:	68f9      	ldr	r1, [r7, #12]
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f006 fb6c 	bl	8008cae <strcat>
    strcat(result, ", ");
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fd fe4a 	bl	8000270 <strlen>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002620 <process_buffers+0xcc>)
 80025e6:	8811      	ldrh	r1, [r2, #0]
 80025e8:	7892      	ldrb	r2, [r2, #2]
 80025ea:	8019      	strh	r1, [r3, #0]
 80025ec:	709a      	strb	r2, [r3, #2]
    strcat(result, csp);
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f006 fb5c 	bl	8008cae <strcat>
    strcat(result, "\r\n");
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fd fe3a 	bl	8000270 <strlen>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	4a07      	ldr	r2, [pc, #28]	@ (8002624 <process_buffers+0xd0>)
 8002606:	8811      	ldrh	r1, [r2, #0]
 8002608:	7892      	ldrb	r2, [r2, #2]
 800260a:	8019      	strh	r1, [r3, #0]
 800260c:	709a      	strb	r2, [r3, #2]
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	0800bc40 	.word	0x0800bc40
 800261c:	0800bc44 	.word	0x0800bc44
 8002620:	0800bc48 	.word	0x0800bc48
 8002624:	0800bc4c 	.word	0x0800bc4c

08002628 <StrCompare>:

bool StrCompare(char *pBuff, uint8_t *pSample, uint8_t nSize)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	4613      	mov	r3, r2
 8002634:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < nSize; i++)
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e00e      	b.n	800265a <StrCompare+0x32>
    {
        if(pBuff[i] != pSample[i])
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	781a      	ldrb	r2, [r3, #0]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	440b      	add	r3, r1
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <StrCompare+0x2c>
        {
            return false;
 8002650:	2300      	movs	r3, #0
 8002652:	e007      	b.n	8002664 <StrCompare+0x3c>
    for (int i = 0; i < nSize; i++)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3301      	adds	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	429a      	cmp	r2, r3
 8002660:	dbec      	blt.n	800263c <StrCompare+0x14>
        }
    }
    return true;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <process_uart_string>:

void process_uart_string(char *uart_string, UART_Data *data) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
    char *token;

    memset(data, 0, sizeof(UART_Data));
 800267a:	2214      	movs	r2, #20
 800267c:	2100      	movs	r1, #0
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	f006 fb0d 	bl	8008c9e <memset>

    token = strtok(uart_string, " ");
 8002684:	4984      	ldr	r1, [pc, #528]	@ (8002898 <process_uart_string+0x228>)
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f006 fb46 	bl	8008d18 <strtok>
 800268c:	60b8      	str	r0, [r7, #8]
    if (token) {
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <process_uart_string+0x36>
        strncpy(data->type, token, 3);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2203      	movs	r2, #3
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	4618      	mov	r0, r3
 800269c:	f006 fb28 	bl	8008cf0 <strncpy>
        data->type[3] = '\0';
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	70da      	strb	r2, [r3, #3]
    }

    token = strtok(NULL, " ");
 80026a6:	497c      	ldr	r1, [pc, #496]	@ (8002898 <process_uart_string+0x228>)
 80026a8:	2000      	movs	r0, #0
 80026aa:	f006 fb35 	bl	8008d18 <strtok>
 80026ae:	60b8      	str	r0, [r7, #8]
    if (token) data->sp = atof(token);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <process_uart_string+0x5e>
 80026b6:	68b8      	ldr	r0, [r7, #8]
 80026b8:	f004 fd46 	bl	8007148 <atof>
 80026bc:	ec53 2b10 	vmov	r2, r3, d0
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fe fa90 	bl	8000be8 <__aeabi_d2f>
 80026c8:	4602      	mov	r2, r0
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	605a      	str	r2, [r3, #4]

    if (StrCompare(data->type, (uint8_t *)"PID", 3)) {
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2203      	movs	r2, #3
 80026d2:	4972      	ldr	r1, [pc, #456]	@ (800289c <process_uart_string+0x22c>)
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ffa7 	bl	8002628 <StrCompare>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d043      	beq.n	8002768 <process_uart_string+0xf8>
        Case = 1.0;
 80026e0:	496f      	ldr	r1, [pc, #444]	@ (80028a0 <process_uart_string+0x230>)
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	4b6f      	ldr	r3, [pc, #444]	@ (80028a4 <process_uart_string+0x234>)
 80026e8:	e9c1 2300 	strd	r2, r3, [r1]
        token = strtok(NULL, " ");
 80026ec:	496a      	ldr	r1, [pc, #424]	@ (8002898 <process_uart_string+0x228>)
 80026ee:	2000      	movs	r0, #0
 80026f0:	f006 fb12 	bl	8008d18 <strtok>
 80026f4:	60b8      	str	r0, [r7, #8]
        if (token) data->value1 = atof(token);
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <process_uart_string+0xa4>
 80026fc:	68b8      	ldr	r0, [r7, #8]
 80026fe:	f004 fd23 	bl	8007148 <atof>
 8002702:	ec53 2b10 	vmov	r2, r3, d0
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f7fe fa6d 	bl	8000be8 <__aeabi_d2f>
 800270e:	4602      	mov	r2, r0
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	609a      	str	r2, [r3, #8]

        token = strtok(NULL, " ");
 8002714:	4960      	ldr	r1, [pc, #384]	@ (8002898 <process_uart_string+0x228>)
 8002716:	2000      	movs	r0, #0
 8002718:	f006 fafe 	bl	8008d18 <strtok>
 800271c:	60b8      	str	r0, [r7, #8]
        if (token) data->value2 = atof(token);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <process_uart_string+0xcc>
 8002724:	68b8      	ldr	r0, [r7, #8]
 8002726:	f004 fd0f 	bl	8007148 <atof>
 800272a:	ec53 2b10 	vmov	r2, r3, d0
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe fa59 	bl	8000be8 <__aeabi_d2f>
 8002736:	4602      	mov	r2, r0
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	60da      	str	r2, [r3, #12]

        token = strtok(NULL, " ");
 800273c:	4956      	ldr	r1, [pc, #344]	@ (8002898 <process_uart_string+0x228>)
 800273e:	2000      	movs	r0, #0
 8002740:	f006 faea 	bl	8008d18 <strtok>
 8002744:	60b8      	str	r0, [r7, #8]
        if (token) data->value3 = atof(token);
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a0 	beq.w	800288e <process_uart_string+0x21e>
 800274e:	68b8      	ldr	r0, [r7, #8]
 8002750:	f004 fcfa 	bl	8007148 <atof>
 8002754:	ec53 2b10 	vmov	r2, r3, d0
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe fa44 	bl	8000be8 <__aeabi_d2f>
 8002760:	4602      	mov	r2, r0
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	611a      	str	r2, [r3, #16]
           Case = 0;
           dposition = 0;
           icounter = 0;
           MOTOR_CONTROL_REGISTER = 0;
       }
}
 8002766:	e092      	b.n	800288e <process_uart_string+0x21e>
    else if (StrCompare(data->type, (uint8_t *)"STR", 3)) {
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2203      	movs	r2, #3
 800276c:	494e      	ldr	r1, [pc, #312]	@ (80028a8 <process_uart_string+0x238>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff5a 	bl	8002628 <StrCompare>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <process_uart_string+0x11a>
        Case = 2.0;
 800277a:	4949      	ldr	r1, [pc, #292]	@ (80028a0 <process_uart_string+0x230>)
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002784:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002788:	e081      	b.n	800288e <process_uart_string+0x21e>
    else if (StrCompare(data->type, (uint8_t *)"LQR", 3)) {
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2203      	movs	r2, #3
 800278e:	4947      	ldr	r1, [pc, #284]	@ (80028ac <process_uart_string+0x23c>)
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff49 	bl	8002628 <StrCompare>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02e      	beq.n	80027fa <process_uart_string+0x18a>
        Case = 3.0;
 800279c:	4940      	ldr	r1, [pc, #256]	@ (80028a0 <process_uart_string+0x230>)
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	4b43      	ldr	r3, [pc, #268]	@ (80028b0 <process_uart_string+0x240>)
 80027a4:	e9c1 2300 	strd	r2, r3, [r1]
        token = strtok(NULL, " ");
 80027a8:	493b      	ldr	r1, [pc, #236]	@ (8002898 <process_uart_string+0x228>)
 80027aa:	2000      	movs	r0, #0
 80027ac:	f006 fab4 	bl	8008d18 <strtok>
 80027b0:	60b8      	str	r0, [r7, #8]
        if (token) data->value1 = atof(token);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00b      	beq.n	80027d0 <process_uart_string+0x160>
 80027b8:	68b8      	ldr	r0, [r7, #8]
 80027ba:	f004 fcc5 	bl	8007148 <atof>
 80027be:	ec53 2b10 	vmov	r2, r3, d0
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f7fe fa0f 	bl	8000be8 <__aeabi_d2f>
 80027ca:	4602      	mov	r2, r0
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	609a      	str	r2, [r3, #8]
        token = strtok(NULL, " ");
 80027d0:	4931      	ldr	r1, [pc, #196]	@ (8002898 <process_uart_string+0x228>)
 80027d2:	2000      	movs	r0, #0
 80027d4:	f006 faa0 	bl	8008d18 <strtok>
 80027d8:	60b8      	str	r0, [r7, #8]
        if (token) data->value2 = atof(token);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d056      	beq.n	800288e <process_uart_string+0x21e>
 80027e0:	68b8      	ldr	r0, [r7, #8]
 80027e2:	f004 fcb1 	bl	8007148 <atof>
 80027e6:	ec53 2b10 	vmov	r2, r3, d0
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7fe f9fb 	bl	8000be8 <__aeabi_d2f>
 80027f2:	4602      	mov	r2, r0
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	60da      	str	r2, [r3, #12]
}
 80027f8:	e049      	b.n	800288e <process_uart_string+0x21e>
    else if (StrCompare(data->type, (uint8_t *)"C", 1)) {
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2201      	movs	r2, #1
 80027fe:	492d      	ldr	r1, [pc, #180]	@ (80028b4 <process_uart_string+0x244>)
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff11 	bl	8002628 <StrCompare>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d025      	beq.n	8002858 <process_uart_string+0x1e8>
        int count = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
        process_buffers(0.0, 0.0, cposition, csp, txbuf);
 8002810:	4a29      	ldr	r2, [pc, #164]	@ (80028b8 <process_uart_string+0x248>)
 8002812:	492a      	ldr	r1, [pc, #168]	@ (80028bc <process_uart_string+0x24c>)
 8002814:	482a      	ldr	r0, [pc, #168]	@ (80028c0 <process_uart_string+0x250>)
 8002816:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 80028c4 <process_uart_string+0x254>
 800281a:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80028c4 <process_uart_string+0x254>
 800281e:	f7ff fe99 	bl	8002554 <process_buffers>
        while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002822:	e002      	b.n	800282a <process_uart_string+0x1ba>
            count++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3301      	adds	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
        while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 800282a:	4a23      	ldr	r2, [pc, #140]	@ (80028b8 <process_uart_string+0x248>)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <process_uart_string+0x1d2>
 8002836:	4a20      	ldr	r2, [pc, #128]	@ (80028b8 <process_uart_string+0x248>)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b0a      	cmp	r3, #10
 8002840:	d1f0      	bne.n	8002824 <process_uart_string+0x1b4>
        HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count + 1), HAL_MAX_DELAY);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	b29b      	uxth	r3, r3
 8002846:	3301      	adds	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	491a      	ldr	r1, [pc, #104]	@ (80028b8 <process_uart_string+0x248>)
 8002850:	481d      	ldr	r0, [pc, #116]	@ (80028c8 <process_uart_string+0x258>)
 8002852:	f003 fc73 	bl	800613c <HAL_UART_Transmit>
}
 8002856:	e01a      	b.n	800288e <process_uart_string+0x21e>
    else if (StrCompare(data->type, (uint8_t *)"STO", 3)) {
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2203      	movs	r2, #3
 800285c:	491b      	ldr	r1, [pc, #108]	@ (80028cc <process_uart_string+0x25c>)
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fee2 	bl	8002628 <StrCompare>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d011      	beq.n	800288e <process_uart_string+0x21e>
           Case = 0;
 800286a:	490d      	ldr	r1, [pc, #52]	@ (80028a0 <process_uart_string+0x230>)
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	e9c1 2300 	strd	r2, r3, [r1]
           dposition = 0;
 8002878:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <process_uart_string+0x260>)
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
           icounter = 0;
 8002880:	4b14      	ldr	r3, [pc, #80]	@ (80028d4 <process_uart_string+0x264>)
 8002882:	2200      	movs	r2, #0
 8002884:	801a      	strh	r2, [r3, #0]
           MOTOR_CONTROL_REGISTER = 0;
 8002886:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <process_uart_string+0x268>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2200      	movs	r2, #0
 800288c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	0800bc50 	.word	0x0800bc50
 800289c:	0800bc54 	.word	0x0800bc54
 80028a0:	20000200 	.word	0x20000200
 80028a4:	3ff00000 	.word	0x3ff00000
 80028a8:	0800bc58 	.word	0x0800bc58
 80028ac:	0800bc5c 	.word	0x0800bc5c
 80028b0:	40080000 	.word	0x40080000
 80028b4:	0800bc60 	.word	0x0800bc60
 80028b8:	200005b4 	.word	0x200005b4
 80028bc:	200005a8 	.word	0x200005a8
 80028c0:	2000059c 	.word	0x2000059c
 80028c4:	00000000 	.word	0x00000000
 80028c8:	2000046c 	.word	0x2000046c
 80028cc:	0800bc64 	.word	0x0800bc64
 80028d0:	20000594 	.word	0x20000594
 80028d4:	20000590 	.word	0x20000590
 80028d8:	200003dc 	.word	0x200003dc

080028dc <motor_set_duty>:


void motor_set_duty(int32_t iduty)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    if (iduty >= 0)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	db10      	blt.n	800290c <motor_set_duty+0x30>
    {
    	MOTOR_CONTROL_REGISTER = iduty;
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <motor_set_duty+0x60>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	635a      	str	r2, [r3, #52]	@ 0x34
    	HAL_GPIO_WritePin(DIR_Port, FOWARD_Pin, 1);
 80028f2:	2201      	movs	r2, #1
 80028f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028f8:	4811      	ldr	r0, [pc, #68]	@ (8002940 <motor_set_duty+0x64>)
 80028fa:	f001 fdc3 	bl	8004484 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(DIR_Port, BACKWARD_Pin, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002904:	480e      	ldr	r0, [pc, #56]	@ (8002940 <motor_set_duty+0x64>)
 8002906:	f001 fdbd 	bl	8004484 <HAL_GPIO_WritePin>
    {
    	MOTOR_CONTROL_REGISTER = abs(iduty);
    	HAL_GPIO_WritePin(DIR_Port, FOWARD_Pin, 0);
    	HAL_GPIO_WritePin(DIR_Port, BACKWARD_Pin, 1);
    }
}
 800290a:	e013      	b.n	8002934 <motor_set_duty+0x58>
    	MOTOR_CONTROL_REGISTER = abs(iduty);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002912:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <motor_set_duty+0x60>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	635a      	str	r2, [r3, #52]	@ 0x34
    	HAL_GPIO_WritePin(DIR_Port, FOWARD_Pin, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002922:	4807      	ldr	r0, [pc, #28]	@ (8002940 <motor_set_duty+0x64>)
 8002924:	f001 fdae 	bl	8004484 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(DIR_Port, BACKWARD_Pin, 1);
 8002928:	2201      	movs	r2, #1
 800292a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800292e:	4804      	ldr	r0, [pc, #16]	@ (8002940 <motor_set_duty+0x64>)
 8002930:	f001 fda8 	bl	8004484 <HAL_GPIO_WritePin>
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200003dc 	.word	0x200003dc
 8002940:	40020400 	.word	0x40020400

08002944 <motor_read_encoder>:

void motor_read_encoder(float *dpos, TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]

    icounter = (int16_t)htim->Instance->CNT;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	b21a      	sxth	r2, r3
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <motor_read_encoder+0x58>)
 8002958:	801a      	strh	r2, [r3, #0]
    *dpos += ((float)icounter / (float)PPR) * NUMBER_OF_DEGREES_ON_A_CIRCLE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	ed93 7a00 	vldr	s14, [r3]
 8002960:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <motor_read_encoder+0x58>)
 8002962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800296e:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 80029a0 <motor_read_encoder+0x5c>
 8002972:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002976:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80029a4 <motor_read_encoder+0x60>
 800297a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800297e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	edc3 7a00 	vstr	s15, [r3]
    htim->Instance->CNT = 0;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2200      	movs	r2, #0
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	20000590 	.word	0x20000590
 80029a0:	4639a000 	.word	0x4639a000
 80029a4:	43b40000 	.word	0x43b40000

080029a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029ac:	f000 fece 	bl	800374c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029b0:	f000 f83a 	bl	8002a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b4:	f000 f9ea 	bl	8002d8c <MX_GPIO_Init>
  MX_DMA_Init();
 80029b8:	f000 f9c8 	bl	8002d4c <MX_DMA_Init>
  MX_UART4_Init();
 80029bc:	f000 f99c 	bl	8002cf8 <MX_UART4_Init>
  MX_TIM1_Init();
 80029c0:	f000 f89c 	bl	8002afc <MX_TIM1_Init>
  MX_TIM3_Init();
 80029c4:	f000 f8f2 	bl	8002bac <MX_TIM3_Init>
  MX_TIM4_Init();
 80029c8:	f000 f948 	bl	8002c5c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&INTERUPT_TIMER);
 80029cc:	4810      	ldr	r0, [pc, #64]	@ (8002a10 <main+0x68>)
 80029ce:	f002 fa5b 	bl	8004e88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&ECODER_TIMER, TIM_CHANNEL_1);
 80029d2:	2100      	movs	r1, #0
 80029d4:	480f      	ldr	r0, [pc, #60]	@ (8002a14 <main+0x6c>)
 80029d6:	f002 fc85 	bl	80052e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&ECODER_TIMER, TIM_CHANNEL_2);
 80029da:	2104      	movs	r1, #4
 80029dc:	480d      	ldr	r0, [pc, #52]	@ (8002a14 <main+0x6c>)
 80029de:	f002 fc81 	bl	80052e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&PWM_TIMER, TIM_CHANNEL_1);
 80029e2:	2100      	movs	r1, #0
 80029e4:	480c      	ldr	r0, [pc, #48]	@ (8002a18 <main+0x70>)
 80029e6:	f002 fb0f 	bl	8005008 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&UART_COM, &urx, 1);
 80029ea:	2201      	movs	r2, #1
 80029ec:	490b      	ldr	r1, [pc, #44]	@ (8002a1c <main+0x74>)
 80029ee:	480c      	ldr	r0, [pc, #48]	@ (8002a20 <main+0x78>)
 80029f0:	f003 fc2f 	bl	8006252 <HAL_UART_Receive_IT>
  Motor_Control_STR_initialize();
 80029f4:	f7ff faa8 	bl	8001f48 <Motor_Control_STR_initialize>

  lamda = 0.92;
 80029f8:	490a      	ldr	r1, [pc, #40]	@ (8002a24 <main+0x7c>)
 80029fa:	a303      	add	r3, pc, #12	@ (adr r3, 8002a08 <main+0x60>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a04:	bf00      	nop
 8002a06:	e7fd      	b.n	8002a04 <main+0x5c>
 8002a08:	d70a3d71 	.word	0xd70a3d71
 8002a0c:	3fed70a3 	.word	0x3fed70a3
 8002a10:	20000424 	.word	0x20000424
 8002a14:	20000394 	.word	0x20000394
 8002a18:	200003dc 	.word	0x200003dc
 8002a1c:	20000529 	.word	0x20000529
 8002a20:	2000046c 	.word	0x2000046c
 8002a24:	20000238 	.word	0x20000238

08002a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b094      	sub	sp, #80	@ 0x50
 8002a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a2e:	f107 0320 	add.w	r3, r7, #32
 8002a32:	2230      	movs	r2, #48	@ 0x30
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f006 f931 	bl	8008c9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	4b28      	ldr	r3, [pc, #160]	@ (8002af4 <SystemClock_Config+0xcc>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	4a27      	ldr	r2, [pc, #156]	@ (8002af4 <SystemClock_Config+0xcc>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a5c:	4b25      	ldr	r3, [pc, #148]	@ (8002af4 <SystemClock_Config+0xcc>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	4b22      	ldr	r3, [pc, #136]	@ (8002af8 <SystemClock_Config+0xd0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a21      	ldr	r2, [pc, #132]	@ (8002af8 <SystemClock_Config+0xd0>)
 8002a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b1f      	ldr	r3, [pc, #124]	@ (8002af8 <SystemClock_Config+0xd0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a84:	2302      	movs	r3, #2
 8002a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a90:	2302      	movs	r3, #2
 8002a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a94:	2300      	movs	r3, #0
 8002a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a9c:	23a8      	movs	r3, #168	@ 0xa8
 8002a9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa8:	f107 0320 	add.w	r3, r7, #32
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 fd03 	bl	80044b8 <HAL_RCC_OscConfig>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ab8:	f000 fb7c 	bl	80031b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002abc:	230f      	movs	r3, #15
 8002abe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ac8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002acc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002ace:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ad2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	2105      	movs	r1, #5
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 ff64 	bl	80049a8 <HAL_RCC_ClockConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ae6:	f000 fb65 	bl	80031b4 <Error_Handler>
  }
}
 8002aea:	bf00      	nop
 8002aec:	3750      	adds	r7, #80	@ 0x50
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40007000 	.word	0x40007000

08002afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	@ 0x30
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2224      	movs	r2, #36	@ 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f006 f8c7 	bl	8008c9e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b18:	4b22      	ldr	r3, [pc, #136]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b1a:	4a23      	ldr	r2, [pc, #140]	@ (8002ba8 <MX_TIM1_Init+0xac>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b44:	2303      	movs	r3, #3
 8002b46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480d      	ldr	r0, [pc, #52]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b70:	f002 fb12 	bl	8005198 <HAL_TIM_Encoder_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002b7a:	f000 fb1b 	bl	80031b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4806      	ldr	r0, [pc, #24]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b8c:	f003 f9f6 	bl	8005f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002b96:	f000 fb0d 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	3730      	adds	r7, #48	@ 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000394 	.word	0x20000394
 8002ba8:	40010000 	.word	0x40010000

08002bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	@ 0x28
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb2:	f107 0320 	add.w	r3, r7, #32
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	611a      	str	r2, [r3, #16]
 8002bca:	615a      	str	r2, [r3, #20]
 8002bcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bce:	4b21      	ldr	r3, [pc, #132]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002bd0:	4a21      	ldr	r2, [pc, #132]	@ (8002c58 <MX_TIM3_Init+0xac>)
 8002bd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 54;
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002bd6:	2236      	movs	r2, #54	@ 0x36
 8002bd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bda:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002be0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002be2:	2264      	movs	r2, #100	@ 0x64
 8002be4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bf2:	4818      	ldr	r0, [pc, #96]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002bf4:	f002 f9b8 	bl	8004f68 <HAL_TIM_PWM_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002bfe:	f000 fad9 	bl	80031b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c0a:	f107 0320 	add.w	r3, r7, #32
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4810      	ldr	r0, [pc, #64]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002c12:	f003 f9b3 	bl	8005f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002c1c:	f000 faca 	bl	80031b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c20:	2360      	movs	r3, #96	@ 0x60
 8002c22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	2200      	movs	r2, #0
 8002c34:	4619      	mov	r1, r3
 8002c36:	4807      	ldr	r0, [pc, #28]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002c38:	f002 fcd2 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002c42:	f000 fab7 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c46:	4803      	ldr	r0, [pc, #12]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002c48:	f000 fb74 	bl	8003334 <HAL_TIM_MspPostInit>

}
 8002c4c:	bf00      	nop
 8002c4e:	3728      	adds	r7, #40	@ 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	200003dc 	.word	0x200003dc
 8002c58:	40000400 	.word	0x40000400

08002c5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c70:	463b      	mov	r3, r7
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c78:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf4 <MX_TIM4_Init+0x98>)
 8002c7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c80:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002c84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 8002c8c:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c8e:	2231      	movs	r2, #49	@ 0x31
 8002c90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c92:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c98:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c9e:	4814      	ldr	r0, [pc, #80]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002ca0:	f002 f8a2 	bl	8004de8 <HAL_TIM_Base_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002caa:	f000 fa83 	bl	80031b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002cb4:	f107 0308 	add.w	r3, r7, #8
 8002cb8:	4619      	mov	r1, r3
 8002cba:	480d      	ldr	r0, [pc, #52]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002cbc:	f002 fd52 	bl	8005764 <HAL_TIM_ConfigClockSource>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002cc6:	f000 fa75 	bl	80031b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4806      	ldr	r0, [pc, #24]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002cd8:	f003 f950 	bl	8005f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002ce2:	f000 fa67 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000424 	.word	0x20000424
 8002cf4:	40000800 	.word	0x40000800

08002cf8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	@ (8002d48 <MX_UART4_Init+0x50>)
 8002d00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002d02:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d10:	4b0c      	ldr	r3, [pc, #48]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d1c:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d1e:	220c      	movs	r2, #12
 8002d20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d22:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d28:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d2e:	4805      	ldr	r0, [pc, #20]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d30:	f003 f9b4 	bl	800609c <HAL_UART_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002d3a:	f000 fa3b 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000046c 	.word	0x2000046c
 8002d48:	40004c00 	.word	0x40004c00

08002d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <MX_DMA_Init+0x3c>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d88 <MX_DMA_Init+0x3c>)
 8002d5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <MX_DMA_Init+0x3c>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	200f      	movs	r0, #15
 8002d74:	f000 fe37 	bl	80039e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002d78:	200f      	movs	r0, #15
 8002d7a:	f000 fe50 	bl	8003a1e <HAL_NVIC_EnableIRQ>

}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800

08002d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	@ 0x28
 8002d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	60da      	str	r2, [r3, #12]
 8002da0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	4b27      	ldr	r3, [pc, #156]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	4a26      	ldr	r2, [pc, #152]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db2:	4b24      	ldr	r3, [pc, #144]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	4b20      	ldr	r3, [pc, #128]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dce:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	4b19      	ldr	r3, [pc, #100]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	4a18      	ldr	r2, [pc, #96]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002de4:	f043 0310 	orr.w	r3, r3, #16
 8002de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dea:	4b16      	ldr	r3, [pc, #88]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	4a11      	ldr	r2, [pc, #68]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e06:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <MX_GPIO_Init+0xb8>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002e12:	2200      	movs	r2, #0
 8002e14:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002e18:	480b      	ldr	r0, [pc, #44]	@ (8002e48 <MX_GPIO_Init+0xbc>)
 8002e1a:	f001 fb33 	bl	8004484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002e1e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e24:	2301      	movs	r3, #1
 8002e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	4619      	mov	r1, r3
 8002e36:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <MX_GPIO_Init+0xbc>)
 8002e38:	f001 f988 	bl	800414c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e3c:	bf00      	nop
 8002e3e:	3728      	adds	r7, #40	@ 0x28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020400 	.word	0x40020400

08002e4c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Timer In
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if (htim->Instance == INTERUPT_TIMER_INSTANCE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4ba0      	ldr	r3, [pc, #640]	@ (80030dc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	f040 8139 	bne.w	80030d4 <HAL_TIM_PeriodElapsedCallback+0x288>
  {
	  int count = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]


	 // Read encoder
	  motor_read_encoder(&dposition, &ECODER_TIMER);
 8002e66:	499e      	ldr	r1, [pc, #632]	@ (80030e0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002e68:	489e      	ldr	r0, [pc, #632]	@ (80030e4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002e6a:	f7ff fd6b 	bl	8002944 <motor_read_encoder>
	 // switch case
	  switch ((int)Case) {
 8002e6e:	4b9e      	ldr	r3, [pc, #632]	@ (80030e8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	f7fd fe6e 	bl	8000b58 <__aeabi_d2iz>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	f000 80c4 	beq.w	800300c <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	f300 8124 	bgt.w	80030d2 <HAL_TIM_PeriodElapsedCallback+0x286>
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d002      	beq.n	8002e94 <HAL_TIM_PeriodElapsedCallback+0x48>
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d06d      	beq.n	8002f6e <HAL_TIM_PeriodElapsedCallback+0x122>
	        	  	        count++;
	        	  	    }
	        	  HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
	              break;
	          default:
	              break;
 8002e92:	e11e      	b.n	80030d2 <HAL_TIM_PeriodElapsedCallback+0x286>
	        	  Setpoint = t_data.sp;
 8002e94:	4b95      	ldr	r3, [pc, #596]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fb55 	bl	8000548 <__aeabi_f2d>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4993      	ldr	r1, [pc, #588]	@ (80030f0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002ea4:	e9c1 2300 	strd	r2, r3, [r1]
	        	  Sensor = dposition;
 8002ea8:	4b8e      	ldr	r3, [pc, #568]	@ (80030e4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd fb4b 	bl	8000548 <__aeabi_f2d>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	498f      	ldr	r1, [pc, #572]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002eb8:	e9c1 2300 	strd	r2, r3, [r1]
	              Kp = t_data.value1;
 8002ebc:	4b8b      	ldr	r3, [pc, #556]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fb41 	bl	8000548 <__aeabi_f2d>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	498b      	ldr	r1, [pc, #556]	@ (80030f8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002ecc:	e9c1 2300 	strd	r2, r3, [r1]
	              Ki = t_data.value2;
 8002ed0:	4b86      	ldr	r3, [pc, #536]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fb37 	bl	8000548 <__aeabi_f2d>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4987      	ldr	r1, [pc, #540]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002ee0:	e9c1 2300 	strd	r2, r3, [r1]
	              Kd = t_data.value3;
 8002ee4:	4b81      	ldr	r3, [pc, #516]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fb2d 	bl	8000548 <__aeabi_f2d>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4983      	ldr	r1, [pc, #524]	@ (8003100 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002ef4:	e9c1 2300 	strd	r2, r3, [r1]
	              rt_OneStep();
 8002ef8:	f7ff fa58 	bl	80023ac <rt_OneStep>
	              iu = (int)pwm1;
 8002efc:	4b81      	ldr	r3, [pc, #516]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fe27 	bl	8000b58 <__aeabi_d2iz>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4a7e      	ldr	r2, [pc, #504]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002f0e:	6013      	str	r3, [r2, #0]
	              motor_set_duty(iu);
 8002f10:	4b7d      	ldr	r3, [pc, #500]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fce1 	bl	80028dc <motor_set_duty>
	        	  process_buffers(dposition, t_data.sp, cposition, csp, txbuf);
 8002f1a:	4b72      	ldr	r3, [pc, #456]	@ (80030e4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	4b72      	ldr	r3, [pc, #456]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002f22:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f26:	4a79      	ldr	r2, [pc, #484]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002f28:	4979      	ldr	r1, [pc, #484]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002f2a:	487a      	ldr	r0, [pc, #488]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002f2c:	eef0 0a47 	vmov.f32	s1, s14
 8002f30:	eeb0 0a67 	vmov.f32	s0, s15
 8002f34:	f7ff fb0e 	bl	8002554 <process_buffers>
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002f38:	e002      	b.n	8002f40 <HAL_TIM_PeriodElapsedCallback+0xf4>
	        	  	        count++;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002f40:	4a72      	ldr	r2, [pc, #456]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4413      	add	r3, r2
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8002f4c:	4a6f      	ldr	r2, [pc, #444]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4413      	add	r3, r2
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b0a      	cmp	r3, #10
 8002f56:	d1f0      	bne.n	8002f3a <HAL_TIM_PeriodElapsedCallback+0xee>
	        	  HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	f04f 33ff 	mov.w	r3, #4294967295
 8002f64:	4969      	ldr	r1, [pc, #420]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002f66:	486c      	ldr	r0, [pc, #432]	@ (8003118 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002f68:	f003 f8e8 	bl	800613c <HAL_UART_Transmit>
	              break;
 8002f6c:	e0b2      	b.n	80030d4 <HAL_TIM_PeriodElapsedCallback+0x288>
	        	  Setpoint = t_data.sp;
 8002f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd fae8 	bl	8000548 <__aeabi_f2d>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	495c      	ldr	r1, [pc, #368]	@ (80030f0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002f7e:	e9c1 2300 	strd	r2, r3, [r1]
	        	  Sensor = dposition;
 8002f82:	4b58      	ldr	r3, [pc, #352]	@ (80030e4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fade 	bl	8000548 <__aeabi_f2d>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4958      	ldr	r1, [pc, #352]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002f92:	e9c1 2300 	strd	r2, r3, [r1]
	        	  rt_OneStep();
 8002f96:	f7ff fa09 	bl	80023ac <rt_OneStep>
	        	  iu = (int)pwm2;
 8002f9a:	4b60      	ldr	r3, [pc, #384]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f7fd fdd8 	bl	8000b58 <__aeabi_d2iz>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4a57      	ldr	r2, [pc, #348]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002fac:	6013      	str	r3, [r2, #0]
	        	  motor_set_duty(iu);
 8002fae:	4b56      	ldr	r3, [pc, #344]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fc92 	bl	80028dc <motor_set_duty>
	        	  process_buffers(dposition, t_data.sp, cposition, csp, txbuf);
 8002fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80030e4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002fc0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fc4:	4a51      	ldr	r2, [pc, #324]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002fc6:	4952      	ldr	r1, [pc, #328]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002fc8:	4852      	ldr	r0, [pc, #328]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002fca:	eef0 0a47 	vmov.f32	s1, s14
 8002fce:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd2:	f7ff fabf 	bl	8002554 <process_buffers>
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002fd6:	e002      	b.n	8002fde <HAL_TIM_PeriodElapsedCallback+0x192>
	        	  	        count++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002fde:	4a4b      	ldr	r2, [pc, #300]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8002fea:	4a48      	ldr	r2, [pc, #288]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b0a      	cmp	r3, #10
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_TIM_PeriodElapsedCallback+0x18c>
	        	  HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8003002:	4942      	ldr	r1, [pc, #264]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003004:	4844      	ldr	r0, [pc, #272]	@ (8003118 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003006:	f003 f899 	bl	800613c <HAL_UART_Transmit>
	              break;
 800300a:	e063      	b.n	80030d4 <HAL_TIM_PeriodElapsedCallback+0x288>
	        	  Setpoint = t_data.sp;
 800300c:	4b37      	ldr	r3, [pc, #220]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd fa99 	bl	8000548 <__aeabi_f2d>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4935      	ldr	r1, [pc, #212]	@ (80030f0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800301c:	e9c1 2300 	strd	r2, r3, [r1]
	        	  Sensor = dposition;
 8003020:	4b30      	ldr	r3, [pc, #192]	@ (80030e4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fa8f 	bl	8000548 <__aeabi_f2d>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4931      	ldr	r1, [pc, #196]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003030:	e9c1 2300 	strd	r2, r3, [r1]
	              K1 = t_data.value1;
 8003034:	4b2d      	ldr	r3, [pc, #180]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fd fa85 	bl	8000548 <__aeabi_f2d>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4937      	ldr	r1, [pc, #220]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8003044:	e9c1 2300 	strd	r2, r3, [r1]
	              K2 = t_data.value2;
 8003048:	4b28      	ldr	r3, [pc, #160]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fa7b 	bl	8000548 <__aeabi_f2d>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4933      	ldr	r1, [pc, #204]	@ (8003124 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003058:	e9c1 2300 	strd	r2, r3, [r1]
	        	  rt_OneStep();
 800305c:	f7ff f9a6 	bl	80023ac <rt_OneStep>
	        	  iu = (int)pwm3;
 8003060:	4b31      	ldr	r3, [pc, #196]	@ (8003128 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f7fd fd75 	bl	8000b58 <__aeabi_d2iz>
 800306e:	4603      	mov	r3, r0
 8003070:	4a25      	ldr	r2, [pc, #148]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003072:	6013      	str	r3, [r2, #0]
	        	  motor_set_duty(iu);
 8003074:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fc2f 	bl	80028dc <motor_set_duty>
	        	  process_buffers(dposition, t_data.sp, cposition, csp, txbuf);
 800307e:	4b19      	ldr	r3, [pc, #100]	@ (80030e4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003080:	edd3 7a00 	vldr	s15, [r3]
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003086:	ed93 7a01 	vldr	s14, [r3, #4]
 800308a:	4a20      	ldr	r2, [pc, #128]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800308c:	4920      	ldr	r1, [pc, #128]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800308e:	4821      	ldr	r0, [pc, #132]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003090:	eef0 0a47 	vmov.f32	s1, s14
 8003094:	eeb0 0a67 	vmov.f32	s0, s15
 8003098:	f7ff fa5c 	bl	8002554 <process_buffers>
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 800309c:	e002      	b.n	80030a4 <HAL_TIM_PeriodElapsedCallback+0x258>
	        	  	        count++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3301      	adds	r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 80030a4:	4a19      	ldr	r2, [pc, #100]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4413      	add	r3, r2
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_TIM_PeriodElapsedCallback+0x270>
 80030b0:	4a16      	ldr	r2, [pc, #88]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4413      	add	r3, r2
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b0a      	cmp	r3, #10
 80030ba:	d1f0      	bne.n	800309e <HAL_TIM_PeriodElapsedCallback+0x252>
	        	  HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	4910      	ldr	r1, [pc, #64]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80030ca:	4813      	ldr	r0, [pc, #76]	@ (8003118 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80030cc:	f003 f836 	bl	800613c <HAL_UART_Transmit>
	              break;
 80030d0:	e000      	b.n	80030d4 <HAL_TIM_PeriodElapsedCallback+0x288>
	              break;
 80030d2:	bf00      	nop
	      }

  }
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000424 	.word	0x20000424
 80030e0:	20000394 	.word	0x20000394
 80030e4:	20000594 	.word	0x20000594
 80030e8:	20000200 	.word	0x20000200
 80030ec:	20000514 	.word	0x20000514
 80030f0:	20000208 	.word	0x20000208
 80030f4:	200001f8 	.word	0x200001f8
 80030f8:	20000210 	.word	0x20000210
 80030fc:	20000218 	.word	0x20000218
 8003100:	20000220 	.word	0x20000220
 8003104:	20000250 	.word	0x20000250
 8003108:	20000598 	.word	0x20000598
 800310c:	200005b4 	.word	0x200005b4
 8003110:	200005a8 	.word	0x200005a8
 8003114:	2000059c 	.word	0x2000059c
 8003118:	2000046c 	.word	0x2000046c
 800311c:	20000248 	.word	0x20000248
 8003120:	20000228 	.word	0x20000228
 8003124:	20000230 	.word	0x20000230
 8003128:	20000240 	.word	0x20000240

0800312c <HAL_UART_RxCpltCallback>:

// UART Interupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART_COM_INSTANCE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b19      	ldr	r3, [pc, #100]	@ (80031a0 <HAL_UART_RxCpltCallback+0x74>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d125      	bne.n	800318c <HAL_UART_RxCpltCallback+0x60>
	{
		if (urx != '\n')
 8003140:	4b18      	ldr	r3, [pc, #96]	@ (80031a4 <HAL_UART_RxCpltCallback+0x78>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b0a      	cmp	r3, #10
 8003146:	d00d      	beq.n	8003164 <HAL_UART_RxCpltCallback+0x38>
		{
			urx_buff[urx_index] = urx;
 8003148:	4b17      	ldr	r3, [pc, #92]	@ (80031a8 <HAL_UART_RxCpltCallback+0x7c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <HAL_UART_RxCpltCallback+0x78>)
 8003150:	7819      	ldrb	r1, [r3, #0]
 8003152:	4b16      	ldr	r3, [pc, #88]	@ (80031ac <HAL_UART_RxCpltCallback+0x80>)
 8003154:	5499      	strb	r1, [r3, r2]
			urx_index++;
 8003156:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <HAL_UART_RxCpltCallback+0x7c>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <HAL_UART_RxCpltCallback+0x7c>)
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e013      	b.n	800318c <HAL_UART_RxCpltCallback+0x60>
		}
		else
		{
			urx_buff[urx_index] = urx;
 8003164:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <HAL_UART_RxCpltCallback+0x7c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <HAL_UART_RxCpltCallback+0x78>)
 800316c:	7819      	ldrb	r1, [r3, #0]
 800316e:	4b0f      	ldr	r3, [pc, #60]	@ (80031ac <HAL_UART_RxCpltCallback+0x80>)
 8003170:	5499      	strb	r1, [r3, r2]
			urx_index++;
 8003172:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <HAL_UART_RxCpltCallback+0x7c>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <HAL_UART_RxCpltCallback+0x7c>)
 800317c:	701a      	strb	r2, [r3, #0]
			process_uart_string((char *)urx_buff, &t_data);
 800317e:	490c      	ldr	r1, [pc, #48]	@ (80031b0 <HAL_UART_RxCpltCallback+0x84>)
 8003180:	480a      	ldr	r0, [pc, #40]	@ (80031ac <HAL_UART_RxCpltCallback+0x80>)
 8003182:	f7ff fa75 	bl	8002670 <process_uart_string>
			urx_index = 0;
 8003186:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <HAL_UART_RxCpltCallback+0x7c>)
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&UART_COM, &urx, 1);
 800318c:	2201      	movs	r2, #1
 800318e:	4905      	ldr	r1, [pc, #20]	@ (80031a4 <HAL_UART_RxCpltCallback+0x78>)
 8003190:	4803      	ldr	r0, [pc, #12]	@ (80031a0 <HAL_UART_RxCpltCallback+0x74>)
 8003192:	f003 f85e 	bl	8006252 <HAL_UART_Receive_IT>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	2000046c 	.word	0x2000046c
 80031a4:	20000529 	.word	0x20000529
 80031a8:	20000528 	.word	0x20000528
 80031ac:	2000052c 	.word	0x2000052c
 80031b0:	20000514 	.word	0x20000514

080031b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031b8:	b672      	cpsid	i
}
 80031ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <Error_Handler+0x8>

080031c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	4b10      	ldr	r3, [pc, #64]	@ (800320c <HAL_MspInit+0x4c>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	4a0f      	ldr	r2, [pc, #60]	@ (800320c <HAL_MspInit+0x4c>)
 80031d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80031d6:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <HAL_MspInit+0x4c>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4b09      	ldr	r3, [pc, #36]	@ (800320c <HAL_MspInit+0x4c>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	4a08      	ldr	r2, [pc, #32]	@ (800320c <HAL_MspInit+0x4c>)
 80031ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_MspInit+0x4c>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800

08003210 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	@ 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <HAL_TIM_Encoder_MspInit+0x84>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d12c      	bne.n	800328c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <HAL_TIM_Encoder_MspInit+0x88>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323a:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <HAL_TIM_Encoder_MspInit+0x88>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6453      	str	r3, [r2, #68]	@ 0x44
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <HAL_TIM_Encoder_MspInit+0x88>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <HAL_TIM_Encoder_MspInit+0x88>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	4a10      	ldr	r2, [pc, #64]	@ (8003298 <HAL_TIM_Encoder_MspInit+0x88>)
 8003258:	f043 0310 	orr.w	r3, r3, #16
 800325c:	6313      	str	r3, [r2, #48]	@ 0x30
 800325e:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <HAL_TIM_Encoder_MspInit+0x88>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800326a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800326e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003278:	2300      	movs	r3, #0
 800327a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800327c:	2301      	movs	r3, #1
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	4619      	mov	r1, r3
 8003286:	4805      	ldr	r0, [pc, #20]	@ (800329c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003288:	f000 ff60 	bl	800414c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800328c:	bf00      	nop
 800328e:	3728      	adds	r7, #40	@ 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40010000 	.word	0x40010000
 8003298:	40023800 	.word	0x40023800
 800329c:	40021000 	.word	0x40021000

080032a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0b      	ldr	r2, [pc, #44]	@ (80032dc <HAL_TIM_PWM_MspInit+0x3c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10d      	bne.n	80032ce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b0a      	ldr	r3, [pc, #40]	@ (80032e0 <HAL_TIM_PWM_MspInit+0x40>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	4a09      	ldr	r2, [pc, #36]	@ (80032e0 <HAL_TIM_PWM_MspInit+0x40>)
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c2:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <HAL_TIM_PWM_MspInit+0x40>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0e      	ldr	r2, [pc, #56]	@ (800332c <HAL_TIM_Base_MspInit+0x48>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d115      	bne.n	8003322 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <HAL_TIM_Base_MspInit+0x4c>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003330 <HAL_TIM_Base_MspInit+0x4c>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6413      	str	r3, [r2, #64]	@ 0x40
 8003306:	4b0a      	ldr	r3, [pc, #40]	@ (8003330 <HAL_TIM_Base_MspInit+0x4c>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003312:	2200      	movs	r2, #0
 8003314:	2101      	movs	r1, #1
 8003316:	201e      	movs	r0, #30
 8003318:	f000 fb65 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800331c:	201e      	movs	r0, #30
 800331e:	f000 fb7e 	bl	8003a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40000800 	.word	0x40000800
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 030c 	add.w	r3, r7, #12
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a12      	ldr	r2, [pc, #72]	@ (800339c <HAL_TIM_MspPostInit+0x68>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d11d      	bne.n	8003392 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <HAL_TIM_MspPostInit+0x6c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	4a10      	ldr	r2, [pc, #64]	@ (80033a0 <HAL_TIM_MspPostInit+0x6c>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6313      	str	r3, [r2, #48]	@ 0x30
 8003366:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <HAL_TIM_MspPostInit+0x6c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003372:	2340      	movs	r3, #64	@ 0x40
 8003374:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003382:	2302      	movs	r3, #2
 8003384:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003386:	f107 030c 	add.w	r3, r7, #12
 800338a:	4619      	mov	r1, r3
 800338c:	4805      	ldr	r0, [pc, #20]	@ (80033a4 <HAL_TIM_MspPostInit+0x70>)
 800338e:	f000 fedd 	bl	800414c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003392:	bf00      	nop
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40000400 	.word	0x40000400
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40020000 	.word	0x40020000

080033a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	@ 0x28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a34      	ldr	r2, [pc, #208]	@ (8003498 <HAL_UART_MspInit+0xf0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d162      	bne.n	8003490 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	4b33      	ldr	r3, [pc, #204]	@ (800349c <HAL_UART_MspInit+0xf4>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	4a32      	ldr	r2, [pc, #200]	@ (800349c <HAL_UART_MspInit+0xf4>)
 80033d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80033d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033da:	4b30      	ldr	r3, [pc, #192]	@ (800349c <HAL_UART_MspInit+0xf4>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	4b2c      	ldr	r3, [pc, #176]	@ (800349c <HAL_UART_MspInit+0xf4>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <HAL_UART_MspInit+0xf4>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f6:	4b29      	ldr	r3, [pc, #164]	@ (800349c <HAL_UART_MspInit+0xf4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003402:	2303      	movs	r3, #3
 8003404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003406:	2302      	movs	r3, #2
 8003408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340e:	2303      	movs	r3, #3
 8003410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003412:	2308      	movs	r3, #8
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003416:	f107 0314 	add.w	r3, r7, #20
 800341a:	4619      	mov	r1, r3
 800341c:	4820      	ldr	r0, [pc, #128]	@ (80034a0 <HAL_UART_MspInit+0xf8>)
 800341e:	f000 fe95 	bl	800414c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003422:	4b20      	ldr	r3, [pc, #128]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 8003424:	4a20      	ldr	r2, [pc, #128]	@ (80034a8 <HAL_UART_MspInit+0x100>)
 8003426:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003428:	4b1e      	ldr	r3, [pc, #120]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 800342a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800342e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003430:	4b1c      	ldr	r3, [pc, #112]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 8003432:	2240      	movs	r2, #64	@ 0x40
 8003434:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003436:	4b1b      	ldr	r3, [pc, #108]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 8003438:	2200      	movs	r2, #0
 800343a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800343c:	4b19      	ldr	r3, [pc, #100]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 800343e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003442:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003444:	4b17      	ldr	r3, [pc, #92]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 8003446:	2200      	movs	r2, #0
 8003448:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800344a:	4b16      	ldr	r3, [pc, #88]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 800344c:	2200      	movs	r2, #0
 800344e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003450:	4b14      	ldr	r3, [pc, #80]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003456:	4b13      	ldr	r3, [pc, #76]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 8003458:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800345c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800345e:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 8003460:	2200      	movs	r2, #0
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003464:	480f      	ldr	r0, [pc, #60]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 8003466:	f000 faf5 	bl	8003a54 <HAL_DMA_Init>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003470:	f7ff fea0 	bl	80031b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a0b      	ldr	r2, [pc, #44]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38
 800347a:	4a0a      	ldr	r2, [pc, #40]	@ (80034a4 <HAL_UART_MspInit+0xfc>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003480:	2200      	movs	r2, #0
 8003482:	2100      	movs	r1, #0
 8003484:	2034      	movs	r0, #52	@ 0x34
 8003486:	f000 faae 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800348a:	2034      	movs	r0, #52	@ 0x34
 800348c:	f000 fac7 	bl	8003a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003490:	bf00      	nop
 8003492:	3728      	adds	r7, #40	@ 0x28
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40004c00 	.word	0x40004c00
 800349c:	40023800 	.word	0x40023800
 80034a0:	40020000 	.word	0x40020000
 80034a4:	200004b4 	.word	0x200004b4
 80034a8:	40026070 	.word	0x40026070

080034ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034b0:	bf00      	nop
 80034b2:	e7fd      	b.n	80034b0 <NMI_Handler+0x4>

080034b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <HardFault_Handler+0x4>

080034bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <MemManage_Handler+0x4>

080034c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034c8:	bf00      	nop
 80034ca:	e7fd      	b.n	80034c8 <BusFault_Handler+0x4>

080034cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d0:	bf00      	nop
 80034d2:	e7fd      	b.n	80034d0 <UsageFault_Handler+0x4>

080034d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003502:	f000 f975 	bl	80037f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003510:	4802      	ldr	r0, [pc, #8]	@ (800351c <DMA1_Stream4_IRQHandler+0x10>)
 8003512:	f000 fbdf 	bl	8003cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	200004b4 	.word	0x200004b4

08003520 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003524:	4802      	ldr	r0, [pc, #8]	@ (8003530 <TIM4_IRQHandler+0x10>)
 8003526:	f001 ff6b 	bl	8005400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000424 	.word	0x20000424

08003534 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003538:	4802      	ldr	r0, [pc, #8]	@ (8003544 <UART4_IRQHandler+0x10>)
 800353a:	f002 feaf 	bl	800629c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	2000046c 	.word	0x2000046c

08003548 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return 1;
 800354c:	2301      	movs	r3, #1
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <_kill>:

int _kill(int pid, int sig)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003562:	f005 fc7f 	bl	8008e64 <__errno>
 8003566:	4603      	mov	r3, r0
 8003568:	2216      	movs	r2, #22
 800356a:	601a      	str	r2, [r3, #0]
  return -1;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_exit>:

void _exit (int status)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003580:	f04f 31ff 	mov.w	r1, #4294967295
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ffe7 	bl	8003558 <_kill>
  while (1) {}    /* Make sure we hang here */
 800358a:	bf00      	nop
 800358c:	e7fd      	b.n	800358a <_exit+0x12>

0800358e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	e00a      	b.n	80035b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035a0:	f3af 8000 	nop.w
 80035a4:	4601      	mov	r1, r0
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	60ba      	str	r2, [r7, #8]
 80035ac:	b2ca      	uxtb	r2, r1
 80035ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3301      	adds	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	dbf0      	blt.n	80035a0 <_read+0x12>
  }

  return len;
 80035be:	687b      	ldr	r3, [r7, #4]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	e009      	b.n	80035ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	60ba      	str	r2, [r7, #8]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	3301      	adds	r3, #1
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	dbf1      	blt.n	80035da <_write+0x12>
  }
  return len;
 80035f6:	687b      	ldr	r3, [r7, #4]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <_close>:

int _close(int file)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003628:	605a      	str	r2, [r3, #4]
  return 0;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <_isatty>:

int _isatty(int file)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003640:	2301      	movs	r3, #1
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003670:	4a14      	ldr	r2, [pc, #80]	@ (80036c4 <_sbrk+0x5c>)
 8003672:	4b15      	ldr	r3, [pc, #84]	@ (80036c8 <_sbrk+0x60>)
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800367c:	4b13      	ldr	r3, [pc, #76]	@ (80036cc <_sbrk+0x64>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003684:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <_sbrk+0x64>)
 8003686:	4a12      	ldr	r2, [pc, #72]	@ (80036d0 <_sbrk+0x68>)
 8003688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800368a:	4b10      	ldr	r3, [pc, #64]	@ (80036cc <_sbrk+0x64>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	429a      	cmp	r2, r3
 8003696:	d207      	bcs.n	80036a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003698:	f005 fbe4 	bl	8008e64 <__errno>
 800369c:	4603      	mov	r3, r0
 800369e:	220c      	movs	r2, #12
 80036a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036a2:	f04f 33ff 	mov.w	r3, #4294967295
 80036a6:	e009      	b.n	80036bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036a8:	4b08      	ldr	r3, [pc, #32]	@ (80036cc <_sbrk+0x64>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ae:	4b07      	ldr	r3, [pc, #28]	@ (80036cc <_sbrk+0x64>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4413      	add	r3, r2
 80036b6:	4a05      	ldr	r2, [pc, #20]	@ (80036cc <_sbrk+0x64>)
 80036b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ba:	68fb      	ldr	r3, [r7, #12]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20020000 	.word	0x20020000
 80036c8:	00000400 	.word	0x00000400
 80036cc:	200005e8 	.word	0x200005e8
 80036d0:	20000740 	.word	0x20000740

080036d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <SystemInit+0x20>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036de:	4a05      	ldr	r2, [pc, #20]	@ (80036f4 <SystemInit+0x20>)
 80036e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003730 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80036fc:	f7ff ffea 	bl	80036d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003700:	480c      	ldr	r0, [pc, #48]	@ (8003734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003702:	490d      	ldr	r1, [pc, #52]	@ (8003738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003704:	4a0d      	ldr	r2, [pc, #52]	@ (800373c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003708:	e002      	b.n	8003710 <LoopCopyDataInit>

0800370a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800370c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800370e:	3304      	adds	r3, #4

08003710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003714:	d3f9      	bcc.n	800370a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003716:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003718:	4c0a      	ldr	r4, [pc, #40]	@ (8003744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800371a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800371c:	e001      	b.n	8003722 <LoopFillZerobss>

0800371e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800371e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003720:	3204      	adds	r2, #4

08003722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003724:	d3fb      	bcc.n	800371e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003726:	f005 fba3 	bl	8008e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800372a:	f7ff f93d 	bl	80029a8 <main>
  bx  lr    
 800372e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003730:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003738:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800373c:	0800c1c0 	.word	0x0800c1c0
  ldr r2, =_sbss
 8003740:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003744:	2000073c 	.word	0x2000073c

08003748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003748:	e7fe      	b.n	8003748 <ADC_IRQHandler>
	...

0800374c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003750:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <HAL_Init+0x40>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a0d      	ldr	r2, [pc, #52]	@ (800378c <HAL_Init+0x40>)
 8003756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800375a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800375c:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <HAL_Init+0x40>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0a      	ldr	r2, [pc, #40]	@ (800378c <HAL_Init+0x40>)
 8003762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003768:	4b08      	ldr	r3, [pc, #32]	@ (800378c <HAL_Init+0x40>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a07      	ldr	r2, [pc, #28]	@ (800378c <HAL_Init+0x40>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003774:	2003      	movs	r0, #3
 8003776:	f000 f92b 	bl	80039d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800377a:	200f      	movs	r0, #15
 800377c:	f000 f808 	bl	8003790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003780:	f7ff fd1e 	bl	80031c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023c00 	.word	0x40023c00

08003790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003798:	4b12      	ldr	r3, [pc, #72]	@ (80037e4 <HAL_InitTick+0x54>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <HAL_InitTick+0x58>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	4619      	mov	r1, r3
 80037a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f943 	bl	8003a3a <HAL_SYSTICK_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e00e      	b.n	80037dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b0f      	cmp	r3, #15
 80037c2:	d80a      	bhi.n	80037da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037c4:	2200      	movs	r2, #0
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295
 80037cc:	f000 f90b 	bl	80039e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037d0:	4a06      	ldr	r2, [pc, #24]	@ (80037ec <HAL_InitTick+0x5c>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000000 	.word	0x20000000
 80037e8:	20000008 	.word	0x20000008
 80037ec:	20000004 	.word	0x20000004

080037f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037f4:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <HAL_IncTick+0x20>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <HAL_IncTick+0x24>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4413      	add	r3, r2
 8003800:	4a04      	ldr	r2, [pc, #16]	@ (8003814 <HAL_IncTick+0x24>)
 8003802:	6013      	str	r3, [r2, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000008 	.word	0x20000008
 8003814:	200005ec 	.word	0x200005ec

08003818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return uwTick;
 800381c:	4b03      	ldr	r3, [pc, #12]	@ (800382c <HAL_GetTick+0x14>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	200005ec 	.word	0x200005ec

08003830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003840:	4b0c      	ldr	r3, [pc, #48]	@ (8003874 <__NVIC_SetPriorityGrouping+0x44>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800384c:	4013      	ands	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003858:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800385c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003862:	4a04      	ldr	r2, [pc, #16]	@ (8003874 <__NVIC_SetPriorityGrouping+0x44>)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	60d3      	str	r3, [r2, #12]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800387c:	4b04      	ldr	r3, [pc, #16]	@ (8003890 <__NVIC_GetPriorityGrouping+0x18>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	0a1b      	lsrs	r3, r3, #8
 8003882:	f003 0307 	and.w	r3, r3, #7
}
 8003886:	4618      	mov	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	db0b      	blt.n	80038be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	f003 021f 	and.w	r2, r3, #31
 80038ac:	4907      	ldr	r1, [pc, #28]	@ (80038cc <__NVIC_EnableIRQ+0x38>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	2001      	movs	r0, #1
 80038b6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	e000e100 	.word	0xe000e100

080038d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	db0a      	blt.n	80038fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	490c      	ldr	r1, [pc, #48]	@ (800391c <__NVIC_SetPriority+0x4c>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	440b      	add	r3, r1
 80038f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f8:	e00a      	b.n	8003910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4908      	ldr	r1, [pc, #32]	@ (8003920 <__NVIC_SetPriority+0x50>)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	3b04      	subs	r3, #4
 8003908:	0112      	lsls	r2, r2, #4
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	440b      	add	r3, r1
 800390e:	761a      	strb	r2, [r3, #24]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000e100 	.word	0xe000e100
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003924:	b480      	push	{r7}
 8003926:	b089      	sub	sp, #36	@ 0x24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f1c3 0307 	rsb	r3, r3, #7
 800393e:	2b04      	cmp	r3, #4
 8003940:	bf28      	it	cs
 8003942:	2304      	movcs	r3, #4
 8003944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3304      	adds	r3, #4
 800394a:	2b06      	cmp	r3, #6
 800394c:	d902      	bls.n	8003954 <NVIC_EncodePriority+0x30>
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3b03      	subs	r3, #3
 8003952:	e000      	b.n	8003956 <NVIC_EncodePriority+0x32>
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003958:	f04f 32ff 	mov.w	r2, #4294967295
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43da      	mvns	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	401a      	ands	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800396c:	f04f 31ff 	mov.w	r1, #4294967295
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	43d9      	mvns	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	4313      	orrs	r3, r2
         );
}
 800397e:	4618      	mov	r0, r3
 8003980:	3724      	adds	r7, #36	@ 0x24
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800399c:	d301      	bcc.n	80039a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399e:	2301      	movs	r3, #1
 80039a0:	e00f      	b.n	80039c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a2:	4a0a      	ldr	r2, [pc, #40]	@ (80039cc <SysTick_Config+0x40>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039aa:	210f      	movs	r1, #15
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	f7ff ff8e 	bl	80038d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <SysTick_Config+0x40>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ba:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <SysTick_Config+0x40>)
 80039bc:	2207      	movs	r2, #7
 80039be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	e000e010 	.word	0xe000e010

080039d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff29 	bl	8003830 <__NVIC_SetPriorityGrouping>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f8:	f7ff ff3e 	bl	8003878 <__NVIC_GetPriorityGrouping>
 80039fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	6978      	ldr	r0, [r7, #20]
 8003a04:	f7ff ff8e 	bl	8003924 <NVIC_EncodePriority>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff5d 	bl	80038d0 <__NVIC_SetPriority>
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4603      	mov	r3, r0
 8003a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff31 	bl	8003894 <__NVIC_EnableIRQ>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ffa2 	bl	800398c <SysTick_Config>
 8003a48:	4603      	mov	r3, r0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a60:	f7ff feda 	bl	8003818 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e099      	b.n	8003ba4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a90:	e00f      	b.n	8003ab2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a92:	f7ff fec1 	bl	8003818 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d908      	bls.n	8003ab2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e078      	b.n	8003ba4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e8      	bne.n	8003a92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4b38      	ldr	r3, [pc, #224]	@ (8003bac <HAL_DMA_Init+0x158>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d107      	bne.n	8003b1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b14:	4313      	orrs	r3, r2
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f023 0307 	bic.w	r3, r3, #7
 8003b32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d117      	bne.n	8003b76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00e      	beq.n	8003b76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fa7b 	bl	8004054 <DMA_CheckFifoParam>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2240      	movs	r2, #64	@ 0x40
 8003b68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b72:	2301      	movs	r3, #1
 8003b74:	e016      	b.n	8003ba4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa32 	bl	8003fe8 <DMA_CalcBaseAndBitshift>
 8003b84:	4603      	mov	r3, r0
 8003b86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8c:	223f      	movs	r2, #63	@ 0x3f
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	f010803f 	.word	0xf010803f

08003bb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bbe:	f7ff fe2b 	bl	8003818 <HAL_GetTick>
 8003bc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d008      	beq.n	8003be2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2280      	movs	r2, #128	@ 0x80
 8003bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e052      	b.n	8003c88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0216 	bic.w	r2, r2, #22
 8003bf0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_DMA_Abort+0x62>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0208 	bic.w	r2, r2, #8
 8003c20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c32:	e013      	b.n	8003c5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c34:	f7ff fdf0 	bl	8003818 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d90c      	bls.n	8003c5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e015      	b.n	8003c88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e4      	bne.n	8003c34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6e:	223f      	movs	r2, #63	@ 0x3f
 8003c70:	409a      	lsls	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d004      	beq.n	8003cae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2280      	movs	r2, #128	@ 0x80
 8003ca8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e00c      	b.n	8003cc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2205      	movs	r2, #5
 8003cb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ce0:	4b8e      	ldr	r3, [pc, #568]	@ (8003f1c <HAL_DMA_IRQHandler+0x248>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a8e      	ldr	r2, [pc, #568]	@ (8003f20 <HAL_DMA_IRQHandler+0x24c>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0a9b      	lsrs	r3, r3, #10
 8003cec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfe:	2208      	movs	r2, #8
 8003d00:	409a      	lsls	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01a      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d013      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0204 	bic.w	r2, r2, #4
 8003d26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d38:	f043 0201 	orr.w	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d44:	2201      	movs	r2, #1
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d012      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d62:	2201      	movs	r2, #1
 8003d64:	409a      	lsls	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6e:	f043 0202 	orr.w	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d012      	beq.n	8003dac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d98:	2204      	movs	r2, #4
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da4:	f043 0204 	orr.w	r2, r3, #4
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db0:	2210      	movs	r2, #16
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d043      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d03c      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	2210      	movs	r2, #16
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d018      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d108      	bne.n	8003e04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d024      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
 8003e02:	e01f      	b.n	8003e44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01b      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
 8003e14:	e016      	b.n	8003e44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0208 	bic.w	r2, r2, #8
 8003e32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e48:	2220      	movs	r2, #32
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 808f 	beq.w	8003f74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8087 	beq.w	8003f74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d136      	bne.n	8003eec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0216 	bic.w	r2, r2, #22
 8003e8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <HAL_DMA_IRQHandler+0x1da>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0208 	bic.w	r2, r2, #8
 8003ebc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec2:	223f      	movs	r2, #63	@ 0x3f
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d07e      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
        }
        return;
 8003eea:	e079      	b.n	8003fe0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01d      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10d      	bne.n	8003f24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d031      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
 8003f18:	e02c      	b.n	8003f74 <HAL_DMA_IRQHandler+0x2a0>
 8003f1a:	bf00      	nop
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d023      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
 8003f34:	e01e      	b.n	8003f74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0210 	bic.w	r2, r2, #16
 8003f52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d032      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d022      	beq.n	8003fce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2205      	movs	r2, #5
 8003f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0201 	bic.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d307      	bcc.n	8003fbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f2      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x2cc>
 8003fba:	e000      	b.n	8003fbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
 8003fde:	e000      	b.n	8003fe2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fe0:	bf00      	nop
    }
  }
}
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	3b10      	subs	r3, #16
 8003ff8:	4a14      	ldr	r2, [pc, #80]	@ (800404c <DMA_CalcBaseAndBitshift+0x64>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004002:	4a13      	ldr	r2, [pc, #76]	@ (8004050 <DMA_CalcBaseAndBitshift+0x68>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d909      	bls.n	800402a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	659a      	str	r2, [r3, #88]	@ 0x58
 8004028:	e007      	b.n	800403a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	aaaaaaab 	.word	0xaaaaaaab
 8004050:	0800bd08 	.word	0x0800bd08

08004054 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11f      	bne.n	80040ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d856      	bhi.n	8004122 <DMA_CheckFifoParam+0xce>
 8004074:	a201      	add	r2, pc, #4	@ (adr r2, 800407c <DMA_CheckFifoParam+0x28>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	0800408d 	.word	0x0800408d
 8004080:	0800409f 	.word	0x0800409f
 8004084:	0800408d 	.word	0x0800408d
 8004088:	08004123 	.word	0x08004123
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d046      	beq.n	8004126 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800409c:	e043      	b.n	8004126 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040a6:	d140      	bne.n	800412a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ac:	e03d      	b.n	800412a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040b6:	d121      	bne.n	80040fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d837      	bhi.n	800412e <DMA_CheckFifoParam+0xda>
 80040be:	a201      	add	r2, pc, #4	@ (adr r2, 80040c4 <DMA_CheckFifoParam+0x70>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	080040db 	.word	0x080040db
 80040cc:	080040d5 	.word	0x080040d5
 80040d0:	080040ed 	.word	0x080040ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e030      	b.n	800413c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d025      	beq.n	8004132 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ea:	e022      	b.n	8004132 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040f4:	d11f      	bne.n	8004136 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040fa:	e01c      	b.n	8004136 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d903      	bls.n	800410a <DMA_CheckFifoParam+0xb6>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d003      	beq.n	8004110 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004108:	e018      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
      break;
 800410e:	e015      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00e      	beq.n	800413a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e00b      	b.n	800413a <DMA_CheckFifoParam+0xe6>
      break;
 8004122:	bf00      	nop
 8004124:	e00a      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 8004126:	bf00      	nop
 8004128:	e008      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800412a:	bf00      	nop
 800412c:	e006      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800412e:	bf00      	nop
 8004130:	e004      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;   
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800413a:	bf00      	nop
    }
  } 
  
  return status; 
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop

0800414c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800414c:	b480      	push	{r7}
 800414e:	b089      	sub	sp, #36	@ 0x24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	e16b      	b.n	8004440 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004168:	2201      	movs	r2, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	429a      	cmp	r2, r3
 8004182:	f040 815a 	bne.w	800443a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b01      	cmp	r3, #1
 8004190:	d005      	beq.n	800419e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800419a:	2b02      	cmp	r3, #2
 800419c:	d130      	bne.n	8004200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2203      	movs	r2, #3
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4013      	ands	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041d4:	2201      	movs	r2, #1
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 0201 	and.w	r2, r3, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b03      	cmp	r3, #3
 800420a:	d017      	beq.n	800423c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d123      	bne.n	8004290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	08da      	lsrs	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3208      	adds	r2, #8
 8004250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	220f      	movs	r2, #15
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	08da      	lsrs	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3208      	adds	r2, #8
 800428a:	69b9      	ldr	r1, [r7, #24]
 800428c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	2203      	movs	r2, #3
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0203 	and.w	r2, r3, #3
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80b4 	beq.w	800443a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	4b60      	ldr	r3, [pc, #384]	@ (8004458 <HAL_GPIO_Init+0x30c>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	4a5f      	ldr	r2, [pc, #380]	@ (8004458 <HAL_GPIO_Init+0x30c>)
 80042dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80042e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004458 <HAL_GPIO_Init+0x30c>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ee:	4a5b      	ldr	r2, [pc, #364]	@ (800445c <HAL_GPIO_Init+0x310>)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	3302      	adds	r3, #2
 80042f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	220f      	movs	r2, #15
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43db      	mvns	r3, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4013      	ands	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a52      	ldr	r2, [pc, #328]	@ (8004460 <HAL_GPIO_Init+0x314>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d02b      	beq.n	8004372 <HAL_GPIO_Init+0x226>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a51      	ldr	r2, [pc, #324]	@ (8004464 <HAL_GPIO_Init+0x318>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d025      	beq.n	800436e <HAL_GPIO_Init+0x222>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a50      	ldr	r2, [pc, #320]	@ (8004468 <HAL_GPIO_Init+0x31c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01f      	beq.n	800436a <HAL_GPIO_Init+0x21e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a4f      	ldr	r2, [pc, #316]	@ (800446c <HAL_GPIO_Init+0x320>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d019      	beq.n	8004366 <HAL_GPIO_Init+0x21a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a4e      	ldr	r2, [pc, #312]	@ (8004470 <HAL_GPIO_Init+0x324>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_GPIO_Init+0x216>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a4d      	ldr	r2, [pc, #308]	@ (8004474 <HAL_GPIO_Init+0x328>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00d      	beq.n	800435e <HAL_GPIO_Init+0x212>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a4c      	ldr	r2, [pc, #304]	@ (8004478 <HAL_GPIO_Init+0x32c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d007      	beq.n	800435a <HAL_GPIO_Init+0x20e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a4b      	ldr	r2, [pc, #300]	@ (800447c <HAL_GPIO_Init+0x330>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d101      	bne.n	8004356 <HAL_GPIO_Init+0x20a>
 8004352:	2307      	movs	r3, #7
 8004354:	e00e      	b.n	8004374 <HAL_GPIO_Init+0x228>
 8004356:	2308      	movs	r3, #8
 8004358:	e00c      	b.n	8004374 <HAL_GPIO_Init+0x228>
 800435a:	2306      	movs	r3, #6
 800435c:	e00a      	b.n	8004374 <HAL_GPIO_Init+0x228>
 800435e:	2305      	movs	r3, #5
 8004360:	e008      	b.n	8004374 <HAL_GPIO_Init+0x228>
 8004362:	2304      	movs	r3, #4
 8004364:	e006      	b.n	8004374 <HAL_GPIO_Init+0x228>
 8004366:	2303      	movs	r3, #3
 8004368:	e004      	b.n	8004374 <HAL_GPIO_Init+0x228>
 800436a:	2302      	movs	r3, #2
 800436c:	e002      	b.n	8004374 <HAL_GPIO_Init+0x228>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_GPIO_Init+0x228>
 8004372:	2300      	movs	r3, #0
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	f002 0203 	and.w	r2, r2, #3
 800437a:	0092      	lsls	r2, r2, #2
 800437c:	4093      	lsls	r3, r2
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004384:	4935      	ldr	r1, [pc, #212]	@ (800445c <HAL_GPIO_Init+0x310>)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	3302      	adds	r3, #2
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004392:	4b3b      	ldr	r3, [pc, #236]	@ (8004480 <HAL_GPIO_Init+0x334>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	43db      	mvns	r3, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4013      	ands	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043b6:	4a32      	ldr	r2, [pc, #200]	@ (8004480 <HAL_GPIO_Init+0x334>)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043bc:	4b30      	ldr	r3, [pc, #192]	@ (8004480 <HAL_GPIO_Init+0x334>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043e0:	4a27      	ldr	r2, [pc, #156]	@ (8004480 <HAL_GPIO_Init+0x334>)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043e6:	4b26      	ldr	r3, [pc, #152]	@ (8004480 <HAL_GPIO_Init+0x334>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4013      	ands	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800440a:	4a1d      	ldr	r2, [pc, #116]	@ (8004480 <HAL_GPIO_Init+0x334>)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004410:	4b1b      	ldr	r3, [pc, #108]	@ (8004480 <HAL_GPIO_Init+0x334>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	43db      	mvns	r3, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004434:	4a12      	ldr	r2, [pc, #72]	@ (8004480 <HAL_GPIO_Init+0x334>)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3301      	adds	r3, #1
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2b0f      	cmp	r3, #15
 8004444:	f67f ae90 	bls.w	8004168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3724      	adds	r7, #36	@ 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800
 800445c:	40013800 	.word	0x40013800
 8004460:	40020000 	.word	0x40020000
 8004464:	40020400 	.word	0x40020400
 8004468:	40020800 	.word	0x40020800
 800446c:	40020c00 	.word	0x40020c00
 8004470:	40021000 	.word	0x40021000
 8004474:	40021400 	.word	0x40021400
 8004478:	40021800 	.word	0x40021800
 800447c:	40021c00 	.word	0x40021c00
 8004480:	40013c00 	.word	0x40013c00

08004484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	807b      	strh	r3, [r7, #2]
 8004490:	4613      	mov	r3, r2
 8004492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004494:	787b      	ldrb	r3, [r7, #1]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044a0:	e003      	b.n	80044aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	041a      	lsls	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	619a      	str	r2, [r3, #24]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e267      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d075      	beq.n	80045c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044d6:	4b88      	ldr	r3, [pc, #544]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d00c      	beq.n	80044fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e2:	4b85      	ldr	r3, [pc, #532]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d112      	bne.n	8004514 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ee:	4b82      	ldr	r3, [pc, #520]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044fa:	d10b      	bne.n	8004514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fc:	4b7e      	ldr	r3, [pc, #504]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d05b      	beq.n	80045c0 <HAL_RCC_OscConfig+0x108>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d157      	bne.n	80045c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e242      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800451c:	d106      	bne.n	800452c <HAL_RCC_OscConfig+0x74>
 800451e:	4b76      	ldr	r3, [pc, #472]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a75      	ldr	r2, [pc, #468]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 8004524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e01d      	b.n	8004568 <HAL_RCC_OscConfig+0xb0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x98>
 8004536:	4b70      	ldr	r3, [pc, #448]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a6f      	ldr	r2, [pc, #444]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 800453c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b6d      	ldr	r3, [pc, #436]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a6c      	ldr	r2, [pc, #432]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e00b      	b.n	8004568 <HAL_RCC_OscConfig+0xb0>
 8004550:	4b69      	ldr	r3, [pc, #420]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a68      	ldr	r2, [pc, #416]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 8004556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b66      	ldr	r3, [pc, #408]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a65      	ldr	r2, [pc, #404]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 8004562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d013      	beq.n	8004598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7ff f952 	bl	8003818 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7ff f94e 	bl	8003818 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	@ 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e207      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	4b5b      	ldr	r3, [pc, #364]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0xc0>
 8004596:	e014      	b.n	80045c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7ff f93e 	bl	8003818 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7ff f93a 	bl	8003818 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	@ 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e1f3      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b2:	4b51      	ldr	r3, [pc, #324]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0xe8>
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d063      	beq.n	8004696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ce:	4b4a      	ldr	r3, [pc, #296]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045da:	4b47      	ldr	r3, [pc, #284]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d11c      	bne.n	8004620 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e6:	4b44      	ldr	r3, [pc, #272]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d116      	bne.n	8004620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f2:	4b41      	ldr	r3, [pc, #260]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_RCC_OscConfig+0x152>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d001      	beq.n	800460a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e1c7      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460a:	4b3b      	ldr	r3, [pc, #236]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4937      	ldr	r1, [pc, #220]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 800461a:	4313      	orrs	r3, r2
 800461c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461e:	e03a      	b.n	8004696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d020      	beq.n	800466a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004628:	4b34      	ldr	r3, [pc, #208]	@ (80046fc <HAL_RCC_OscConfig+0x244>)
 800462a:	2201      	movs	r2, #1
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462e:	f7ff f8f3 	bl	8003818 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004636:	f7ff f8ef 	bl	8003818 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e1a8      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004648:	4b2b      	ldr	r3, [pc, #172]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004654:	4b28      	ldr	r3, [pc, #160]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4925      	ldr	r1, [pc, #148]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]
 8004668:	e015      	b.n	8004696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466a:	4b24      	ldr	r3, [pc, #144]	@ (80046fc <HAL_RCC_OscConfig+0x244>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7ff f8d2 	bl	8003818 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004678:	f7ff f8ce 	bl	8003818 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e187      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468a:	4b1b      	ldr	r3, [pc, #108]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d036      	beq.n	8004710 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d016      	beq.n	80046d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046aa:	4b15      	ldr	r3, [pc, #84]	@ (8004700 <HAL_RCC_OscConfig+0x248>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7ff f8b2 	bl	8003818 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b8:	f7ff f8ae 	bl	8003818 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e167      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ca:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <HAL_RCC_OscConfig+0x240>)
 80046cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x200>
 80046d6:	e01b      	b.n	8004710 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d8:	4b09      	ldr	r3, [pc, #36]	@ (8004700 <HAL_RCC_OscConfig+0x248>)
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046de:	f7ff f89b 	bl	8003818 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	e00e      	b.n	8004704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e6:	f7ff f897 	bl	8003818 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d907      	bls.n	8004704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e150      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
 80046f8:	40023800 	.word	0x40023800
 80046fc:	42470000 	.word	0x42470000
 8004700:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004704:	4b88      	ldr	r3, [pc, #544]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1ea      	bne.n	80046e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 8097 	beq.w	800484c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004722:	4b81      	ldr	r3, [pc, #516]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	4b7d      	ldr	r3, [pc, #500]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	4a7c      	ldr	r2, [pc, #496]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800473c:	6413      	str	r3, [r2, #64]	@ 0x40
 800473e:	4b7a      	ldr	r3, [pc, #488]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474e:	4b77      	ldr	r3, [pc, #476]	@ (800492c <HAL_RCC_OscConfig+0x474>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d118      	bne.n	800478c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800475a:	4b74      	ldr	r3, [pc, #464]	@ (800492c <HAL_RCC_OscConfig+0x474>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a73      	ldr	r2, [pc, #460]	@ (800492c <HAL_RCC_OscConfig+0x474>)
 8004760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004766:	f7ff f857 	bl	8003818 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476e:	f7ff f853 	bl	8003818 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e10c      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004780:	4b6a      	ldr	r3, [pc, #424]	@ (800492c <HAL_RCC_OscConfig+0x474>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d106      	bne.n	80047a2 <HAL_RCC_OscConfig+0x2ea>
 8004794:	4b64      	ldr	r3, [pc, #400]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004798:	4a63      	ldr	r2, [pc, #396]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a0:	e01c      	b.n	80047dc <HAL_RCC_OscConfig+0x324>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x30c>
 80047aa:	4b5f      	ldr	r3, [pc, #380]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 80047b0:	f043 0304 	orr.w	r3, r3, #4
 80047b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c2:	e00b      	b.n	80047dc <HAL_RCC_OscConfig+0x324>
 80047c4:	4b58      	ldr	r3, [pc, #352]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c8:	4a57      	ldr	r2, [pc, #348]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d0:	4b55      	ldr	r3, [pc, #340]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 80047d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d4:	4a54      	ldr	r2, [pc, #336]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 80047d6:	f023 0304 	bic.w	r3, r3, #4
 80047da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d015      	beq.n	8004810 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e4:	f7ff f818 	bl	8003818 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ec:	f7ff f814 	bl	8003818 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e0cb      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004802:	4b49      	ldr	r3, [pc, #292]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0ee      	beq.n	80047ec <HAL_RCC_OscConfig+0x334>
 800480e:	e014      	b.n	800483a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004810:	f7ff f802 	bl	8003818 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004816:	e00a      	b.n	800482e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004818:	f7fe fffe 	bl	8003818 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e0b5      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482e:	4b3e      	ldr	r3, [pc, #248]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1ee      	bne.n	8004818 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d105      	bne.n	800484c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004840:	4b39      	ldr	r3, [pc, #228]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	4a38      	ldr	r2, [pc, #224]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800484a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80a1 	beq.w	8004998 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004856:	4b34      	ldr	r3, [pc, #208]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
 800485e:	2b08      	cmp	r3, #8
 8004860:	d05c      	beq.n	800491c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d141      	bne.n	80048ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486a:	4b31      	ldr	r3, [pc, #196]	@ (8004930 <HAL_RCC_OscConfig+0x478>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7fe ffd2 	bl	8003818 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004878:	f7fe ffce 	bl	8003818 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e087      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488a:	4b27      	ldr	r3, [pc, #156]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	019b      	lsls	r3, r3, #6
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	3b01      	subs	r3, #1
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	491b      	ldr	r1, [pc, #108]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004930 <HAL_RCC_OscConfig+0x478>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c6:	f7fe ffa7 	bl	8003818 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ce:	f7fe ffa3 	bl	8003818 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e05c      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e0:	4b11      	ldr	r3, [pc, #68]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x416>
 80048ec:	e054      	b.n	8004998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ee:	4b10      	ldr	r3, [pc, #64]	@ (8004930 <HAL_RCC_OscConfig+0x478>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f4:	f7fe ff90 	bl	8003818 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048fc:	f7fe ff8c 	bl	8003818 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e045      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <HAL_RCC_OscConfig+0x470>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f0      	bne.n	80048fc <HAL_RCC_OscConfig+0x444>
 800491a:	e03d      	b.n	8004998 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d107      	bne.n	8004934 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e038      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
 8004928:	40023800 	.word	0x40023800
 800492c:	40007000 	.word	0x40007000
 8004930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004934:	4b1b      	ldr	r3, [pc, #108]	@ (80049a4 <HAL_RCC_OscConfig+0x4ec>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d028      	beq.n	8004994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d121      	bne.n	8004994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d11a      	bne.n	8004994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004964:	4013      	ands	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800496a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800496c:	4293      	cmp	r3, r2
 800496e:	d111      	bne.n	8004994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	3b01      	subs	r3, #1
 800497e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d107      	bne.n	8004994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800

080049a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0cc      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049bc:	4b68      	ldr	r3, [pc, #416]	@ (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d90c      	bls.n	80049e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ca:	4b65      	ldr	r3, [pc, #404]	@ (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b63      	ldr	r3, [pc, #396]	@ (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0b8      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049fc:	4b59      	ldr	r3, [pc, #356]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4a58      	ldr	r2, [pc, #352]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a14:	4b53      	ldr	r3, [pc, #332]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4a52      	ldr	r2, [pc, #328]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a20:	4b50      	ldr	r3, [pc, #320]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	494d      	ldr	r1, [pc, #308]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d044      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b47      	ldr	r3, [pc, #284]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d119      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e07f      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	4b3f      	ldr	r3, [pc, #252]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e06f      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a76:	4b3b      	ldr	r3, [pc, #236]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e067      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a86:	4b37      	ldr	r3, [pc, #220]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f023 0203 	bic.w	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4934      	ldr	r1, [pc, #208]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a98:	f7fe febe 	bl	8003818 <HAL_GetTick>
 8004a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa0:	f7fe feba 	bl	8003818 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e04f      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 020c 	and.w	r2, r3, #12
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d1eb      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac8:	4b25      	ldr	r3, [pc, #148]	@ (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d20c      	bcs.n	8004af0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad6:	4b22      	ldr	r3, [pc, #136]	@ (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b20      	ldr	r3, [pc, #128]	@ (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e032      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004afc:	4b19      	ldr	r3, [pc, #100]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4916      	ldr	r1, [pc, #88]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b1a:	4b12      	ldr	r3, [pc, #72]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	490e      	ldr	r1, [pc, #56]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b2e:	f000 f821 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 8004b32:	4602      	mov	r2, r0
 8004b34:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	490a      	ldr	r1, [pc, #40]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 8004b40:	5ccb      	ldrb	r3, [r1, r3]
 8004b42:	fa22 f303 	lsr.w	r3, r2, r3
 8004b46:	4a09      	ldr	r2, [pc, #36]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b4a:	4b09      	ldr	r3, [pc, #36]	@ (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fe1e 	bl	8003790 <HAL_InitTick>

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40023c00 	.word	0x40023c00
 8004b64:	40023800 	.word	0x40023800
 8004b68:	0800bcf0 	.word	0x0800bcf0
 8004b6c:	20000000 	.word	0x20000000
 8004b70:	20000004 	.word	0x20000004

08004b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b78:	b094      	sub	sp, #80	@ 0x50
 8004b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b8c:	4b79      	ldr	r3, [pc, #484]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 030c 	and.w	r3, r3, #12
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d00d      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	f200 80e1 	bhi.w	8004d60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d003      	beq.n	8004bae <HAL_RCC_GetSysClockFreq+0x3a>
 8004ba6:	e0db      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba8:	4b73      	ldr	r3, [pc, #460]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004baa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bac:	e0db      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bae:	4b73      	ldr	r3, [pc, #460]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x208>)
 8004bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bb2:	e0d8      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bbc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d063      	beq.n	8004c92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bca:	4b6a      	ldr	r3, [pc, #424]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	099b      	lsrs	r3, r3, #6
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bde:	2300      	movs	r3, #0
 8004be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004be6:	4622      	mov	r2, r4
 8004be8:	462b      	mov	r3, r5
 8004bea:	f04f 0000 	mov.w	r0, #0
 8004bee:	f04f 0100 	mov.w	r1, #0
 8004bf2:	0159      	lsls	r1, r3, #5
 8004bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf8:	0150      	lsls	r0, r2, #5
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4621      	mov	r1, r4
 8004c00:	1a51      	subs	r1, r2, r1
 8004c02:	6139      	str	r1, [r7, #16]
 8004c04:	4629      	mov	r1, r5
 8004c06:	eb63 0301 	sbc.w	r3, r3, r1
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c18:	4659      	mov	r1, fp
 8004c1a:	018b      	lsls	r3, r1, #6
 8004c1c:	4651      	mov	r1, sl
 8004c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c22:	4651      	mov	r1, sl
 8004c24:	018a      	lsls	r2, r1, #6
 8004c26:	4651      	mov	r1, sl
 8004c28:	ebb2 0801 	subs.w	r8, r2, r1
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c46:	4690      	mov	r8, r2
 8004c48:	4699      	mov	r9, r3
 8004c4a:	4623      	mov	r3, r4
 8004c4c:	eb18 0303 	adds.w	r3, r8, r3
 8004c50:	60bb      	str	r3, [r7, #8]
 8004c52:	462b      	mov	r3, r5
 8004c54:	eb49 0303 	adc.w	r3, r9, r3
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c66:	4629      	mov	r1, r5
 8004c68:	024b      	lsls	r3, r1, #9
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c70:	4621      	mov	r1, r4
 8004c72:	024a      	lsls	r2, r1, #9
 8004c74:	4610      	mov	r0, r2
 8004c76:	4619      	mov	r1, r3
 8004c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c84:	f7fc f800 	bl	8000c88 <__aeabi_uldivmod>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c90:	e058      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c92:	4b38      	ldr	r3, [pc, #224]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	099b      	lsrs	r3, r3, #6
 8004c98:	2200      	movs	r2, #0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ca2:	623b      	str	r3, [r7, #32]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cac:	4642      	mov	r2, r8
 8004cae:	464b      	mov	r3, r9
 8004cb0:	f04f 0000 	mov.w	r0, #0
 8004cb4:	f04f 0100 	mov.w	r1, #0
 8004cb8:	0159      	lsls	r1, r3, #5
 8004cba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cbe:	0150      	lsls	r0, r2, #5
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cca:	4649      	mov	r1, r9
 8004ccc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ce0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ce4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ce8:	eb63 050b 	sbc.w	r5, r3, fp
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	00eb      	lsls	r3, r5, #3
 8004cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cfa:	00e2      	lsls	r2, r4, #3
 8004cfc:	4614      	mov	r4, r2
 8004cfe:	461d      	mov	r5, r3
 8004d00:	4643      	mov	r3, r8
 8004d02:	18e3      	adds	r3, r4, r3
 8004d04:	603b      	str	r3, [r7, #0]
 8004d06:	464b      	mov	r3, r9
 8004d08:	eb45 0303 	adc.w	r3, r5, r3
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	028b      	lsls	r3, r1, #10
 8004d1e:	4621      	mov	r1, r4
 8004d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d24:	4621      	mov	r1, r4
 8004d26:	028a      	lsls	r2, r1, #10
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d2e:	2200      	movs	r2, #0
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	61fa      	str	r2, [r7, #28]
 8004d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d38:	f7fb ffa6 	bl	8000c88 <__aeabi_uldivmod>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4613      	mov	r3, r2
 8004d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d44:	4b0b      	ldr	r3, [pc, #44]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	0c1b      	lsrs	r3, r3, #16
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d5e:	e002      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d60:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3750      	adds	r7, #80	@ 0x50
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	00f42400 	.word	0x00f42400
 8004d7c:	007a1200 	.word	0x007a1200

08004d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d84:	4b03      	ldr	r3, [pc, #12]	@ (8004d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d86:	681b      	ldr	r3, [r3, #0]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000000 	.word	0x20000000

08004d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d9c:	f7ff fff0 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b05      	ldr	r3, [pc, #20]	@ (8004db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	0a9b      	lsrs	r3, r3, #10
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4903      	ldr	r1, [pc, #12]	@ (8004dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	0800bd00 	.word	0x0800bd00

08004dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dc4:	f7ff ffdc 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	0b5b      	lsrs	r3, r3, #13
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4903      	ldr	r1, [pc, #12]	@ (8004de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40023800 	.word	0x40023800
 8004de4:	0800bd00 	.word	0x0800bd00

08004de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e041      	b.n	8004e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fe fa68 	bl	80032e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f000 fd8c 	bl	8005944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d001      	beq.n	8004ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e04e      	b.n	8004f3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a23      	ldr	r2, [pc, #140]	@ (8004f4c <HAL_TIM_Base_Start_IT+0xc4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d022      	beq.n	8004f08 <HAL_TIM_Base_Start_IT+0x80>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eca:	d01d      	beq.n	8004f08 <HAL_TIM_Base_Start_IT+0x80>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f50 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d018      	beq.n	8004f08 <HAL_TIM_Base_Start_IT+0x80>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1e      	ldr	r2, [pc, #120]	@ (8004f54 <HAL_TIM_Base_Start_IT+0xcc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d013      	beq.n	8004f08 <HAL_TIM_Base_Start_IT+0x80>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f58 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00e      	beq.n	8004f08 <HAL_TIM_Base_Start_IT+0x80>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1b      	ldr	r2, [pc, #108]	@ (8004f5c <HAL_TIM_Base_Start_IT+0xd4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d009      	beq.n	8004f08 <HAL_TIM_Base_Start_IT+0x80>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a19      	ldr	r2, [pc, #100]	@ (8004f60 <HAL_TIM_Base_Start_IT+0xd8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <HAL_TIM_Base_Start_IT+0x80>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a18      	ldr	r2, [pc, #96]	@ (8004f64 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d111      	bne.n	8004f2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d010      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0201 	orr.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2a:	e007      	b.n	8004f3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40000c00 	.word	0x40000c00
 8004f5c:	40010400 	.word	0x40010400
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40001800 	.word	0x40001800

08004f68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e041      	b.n	8004ffe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fe f986 	bl	80032a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f000 fccc 	bl	8005944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <HAL_TIM_PWM_Start+0x24>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	bf14      	ite	ne
 8005024:	2301      	movne	r3, #1
 8005026:	2300      	moveq	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	e022      	b.n	8005072 <HAL_TIM_PWM_Start+0x6a>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b04      	cmp	r3, #4
 8005030:	d109      	bne.n	8005046 <HAL_TIM_PWM_Start+0x3e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b01      	cmp	r3, #1
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e015      	b.n	8005072 <HAL_TIM_PWM_Start+0x6a>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d109      	bne.n	8005060 <HAL_TIM_PWM_Start+0x58>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	e008      	b.n	8005072 <HAL_TIM_PWM_Start+0x6a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	bf14      	ite	ne
 800506c:	2301      	movne	r3, #1
 800506e:	2300      	moveq	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e07c      	b.n	8005174 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <HAL_TIM_PWM_Start+0x82>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005088:	e013      	b.n	80050b2 <HAL_TIM_PWM_Start+0xaa>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b04      	cmp	r3, #4
 800508e:	d104      	bne.n	800509a <HAL_TIM_PWM_Start+0x92>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005098:	e00b      	b.n	80050b2 <HAL_TIM_PWM_Start+0xaa>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d104      	bne.n	80050aa <HAL_TIM_PWM_Start+0xa2>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a8:	e003      	b.n	80050b2 <HAL_TIM_PWM_Start+0xaa>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2201      	movs	r2, #1
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 ff38 	bl	8005f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2d      	ldr	r2, [pc, #180]	@ (800517c <HAL_TIM_PWM_Start+0x174>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <HAL_TIM_PWM_Start+0xcc>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005180 <HAL_TIM_PWM_Start+0x178>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d101      	bne.n	80050d8 <HAL_TIM_PWM_Start+0xd0>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <HAL_TIM_PWM_Start+0xd2>
 80050d8:	2300      	movs	r3, #0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a22      	ldr	r2, [pc, #136]	@ (800517c <HAL_TIM_PWM_Start+0x174>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d022      	beq.n	800513e <HAL_TIM_PWM_Start+0x136>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005100:	d01d      	beq.n	800513e <HAL_TIM_PWM_Start+0x136>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1f      	ldr	r2, [pc, #124]	@ (8005184 <HAL_TIM_PWM_Start+0x17c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d018      	beq.n	800513e <HAL_TIM_PWM_Start+0x136>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1d      	ldr	r2, [pc, #116]	@ (8005188 <HAL_TIM_PWM_Start+0x180>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <HAL_TIM_PWM_Start+0x136>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <HAL_TIM_PWM_Start+0x184>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00e      	beq.n	800513e <HAL_TIM_PWM_Start+0x136>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a16      	ldr	r2, [pc, #88]	@ (8005180 <HAL_TIM_PWM_Start+0x178>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d009      	beq.n	800513e <HAL_TIM_PWM_Start+0x136>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a18      	ldr	r2, [pc, #96]	@ (8005190 <HAL_TIM_PWM_Start+0x188>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <HAL_TIM_PWM_Start+0x136>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a16      	ldr	r2, [pc, #88]	@ (8005194 <HAL_TIM_PWM_Start+0x18c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d111      	bne.n	8005162 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b06      	cmp	r3, #6
 800514e:	d010      	beq.n	8005172 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005160:	e007      	b.n	8005172 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40010000 	.word	0x40010000
 8005180:	40010400 	.word	0x40010400
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00
 8005190:	40014000 	.word	0x40014000
 8005194:	40001800 	.word	0x40001800

08005198 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e097      	b.n	80052dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d106      	bne.n	80051c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7fe f825 	bl	8003210 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051dc:	f023 0307 	bic.w	r3, r3, #7
 80051e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3304      	adds	r3, #4
 80051ea:	4619      	mov	r1, r3
 80051ec:	4610      	mov	r0, r2
 80051ee:	f000 fba9 	bl	8005944 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800521a:	f023 0303 	bic.w	r3, r3, #3
 800521e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	4313      	orrs	r3, r2
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005238:	f023 030c 	bic.w	r3, r3, #12
 800523c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005244:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	4313      	orrs	r3, r2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	011a      	lsls	r2, r3, #4
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	031b      	lsls	r3, r3, #12
 8005268:	4313      	orrs	r3, r2
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005276:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	4313      	orrs	r3, r2
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005304:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800530c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d110      	bne.n	8005336 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d102      	bne.n	8005320 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800531a:	7b7b      	ldrb	r3, [r7, #13]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d001      	beq.n	8005324 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e069      	b.n	80053f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005334:	e031      	b.n	800539a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b04      	cmp	r3, #4
 800533a:	d110      	bne.n	800535e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800533c:	7bbb      	ldrb	r3, [r7, #14]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d102      	bne.n	8005348 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005342:	7b3b      	ldrb	r3, [r7, #12]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d001      	beq.n	800534c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e055      	b.n	80053f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800535c:	e01d      	b.n	800539a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d108      	bne.n	8005376 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005364:	7bbb      	ldrb	r3, [r7, #14]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d105      	bne.n	8005376 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800536a:	7b7b      	ldrb	r3, [r7, #13]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d102      	bne.n	8005376 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005370:	7b3b      	ldrb	r3, [r7, #12]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d001      	beq.n	800537a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e03e      	b.n	80053f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_TIM_Encoder_Start+0xc4>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d008      	beq.n	80053b8 <HAL_TIM_Encoder_Start+0xd4>
 80053a6:	e00f      	b.n	80053c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2201      	movs	r2, #1
 80053ae:	2100      	movs	r1, #0
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fdbd 	bl	8005f30 <TIM_CCxChannelCmd>
      break;
 80053b6:	e016      	b.n	80053e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2201      	movs	r2, #1
 80053be:	2104      	movs	r1, #4
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fdb5 	bl	8005f30 <TIM_CCxChannelCmd>
      break;
 80053c6:	e00e      	b.n	80053e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2201      	movs	r2, #1
 80053ce:	2100      	movs	r1, #0
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fdad 	bl	8005f30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2201      	movs	r2, #1
 80053dc:	2104      	movs	r1, #4
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fda6 	bl	8005f30 <TIM_CCxChannelCmd>
      break;
 80053e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d020      	beq.n	8005464 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0202 	mvn.w	r2, #2
 8005434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fa5b 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fa4d 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fa5e 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d020      	beq.n	80054b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01b      	beq.n	80054b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0204 	mvn.w	r2, #4
 8005480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fa35 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa27 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa38 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d020      	beq.n	80054fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01b      	beq.n	80054fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0208 	mvn.w	r2, #8
 80054cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2204      	movs	r2, #4
 80054d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa0f 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa01 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fa12 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d020      	beq.n	8005548 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01b      	beq.n	8005548 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0210 	mvn.w	r2, #16
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2208      	movs	r2, #8
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f9e9 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f9db 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f9ec 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00c      	beq.n	800556c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0201 	mvn.w	r2, #1
 8005564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fd fc70 	bl	8002e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00c      	beq.n	8005590 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fd7c 	bl	8006088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00c      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f9bd 	bl	800592e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0220 	mvn.w	r2, #32
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fd4e 	bl	8006074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e0ae      	b.n	800575c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b0c      	cmp	r3, #12
 800560a:	f200 809f 	bhi.w	800574c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800560e:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005649 	.word	0x08005649
 8005618:	0800574d 	.word	0x0800574d
 800561c:	0800574d 	.word	0x0800574d
 8005620:	0800574d 	.word	0x0800574d
 8005624:	08005689 	.word	0x08005689
 8005628:	0800574d 	.word	0x0800574d
 800562c:	0800574d 	.word	0x0800574d
 8005630:	0800574d 	.word	0x0800574d
 8005634:	080056cb 	.word	0x080056cb
 8005638:	0800574d 	.word	0x0800574d
 800563c:	0800574d 	.word	0x0800574d
 8005640:	0800574d 	.word	0x0800574d
 8005644:	0800570b 	.word	0x0800570b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fa24 	bl	8005a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0208 	orr.w	r2, r2, #8
 8005662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0204 	bic.w	r2, r2, #4
 8005672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6999      	ldr	r1, [r3, #24]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	619a      	str	r2, [r3, #24]
      break;
 8005686:	e064      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fa74 	bl	8005b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6999      	ldr	r1, [r3, #24]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	021a      	lsls	r2, r3, #8
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	619a      	str	r2, [r3, #24]
      break;
 80056c8:	e043      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fac9 	bl	8005c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0208 	orr.w	r2, r2, #8
 80056e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0204 	bic.w	r2, r2, #4
 80056f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69d9      	ldr	r1, [r3, #28]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	61da      	str	r2, [r3, #28]
      break;
 8005708:	e023      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fb1d 	bl	8005d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69d9      	ldr	r1, [r3, #28]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	021a      	lsls	r2, r3, #8
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	61da      	str	r2, [r3, #28]
      break;
 800574a:	e002      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	75fb      	strb	r3, [r7, #23]
      break;
 8005750:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800575a:	7dfb      	ldrb	r3, [r7, #23]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_TIM_ConfigClockSource+0x1c>
 800577c:	2302      	movs	r3, #2
 800577e:	e0b4      	b.n	80058ea <HAL_TIM_ConfigClockSource+0x186>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800579e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b8:	d03e      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0xd4>
 80057ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057be:	f200 8087 	bhi.w	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c6:	f000 8086 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x172>
 80057ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ce:	d87f      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b70      	cmp	r3, #112	@ 0x70
 80057d2:	d01a      	beq.n	800580a <HAL_TIM_ConfigClockSource+0xa6>
 80057d4:	2b70      	cmp	r3, #112	@ 0x70
 80057d6:	d87b      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b60      	cmp	r3, #96	@ 0x60
 80057da:	d050      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x11a>
 80057dc:	2b60      	cmp	r3, #96	@ 0x60
 80057de:	d877      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b50      	cmp	r3, #80	@ 0x50
 80057e2:	d03c      	beq.n	800585e <HAL_TIM_ConfigClockSource+0xfa>
 80057e4:	2b50      	cmp	r3, #80	@ 0x50
 80057e6:	d873      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e8:	2b40      	cmp	r3, #64	@ 0x40
 80057ea:	d058      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x13a>
 80057ec:	2b40      	cmp	r3, #64	@ 0x40
 80057ee:	d86f      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b30      	cmp	r3, #48	@ 0x30
 80057f2:	d064      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 80057f4:	2b30      	cmp	r3, #48	@ 0x30
 80057f6:	d86b      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d060      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d867      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b00      	cmp	r3, #0
 8005802:	d05c      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 8005804:	2b10      	cmp	r3, #16
 8005806:	d05a      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 8005808:	e062      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800581a:	f000 fb69 	bl	8005ef0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800582c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	609a      	str	r2, [r3, #8]
      break;
 8005836:	e04f      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005848:	f000 fb52 	bl	8005ef0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800585a:	609a      	str	r2, [r3, #8]
      break;
 800585c:	e03c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800586a:	461a      	mov	r2, r3
 800586c:	f000 fac6 	bl	8005dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2150      	movs	r1, #80	@ 0x50
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fb1f 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 800587c:	e02c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800588a:	461a      	mov	r2, r3
 800588c:	f000 fae5 	bl	8005e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2160      	movs	r1, #96	@ 0x60
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fb0f 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 800589c:	e01c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058aa:	461a      	mov	r2, r3
 80058ac:	f000 faa6 	bl	8005dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2140      	movs	r1, #64	@ 0x40
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 faff 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 80058bc:	e00c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4619      	mov	r1, r3
 80058c8:	4610      	mov	r0, r2
 80058ca:	f000 faf6 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 80058ce:	e003      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
      break;
 80058d4:	e000      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a46      	ldr	r2, [pc, #280]	@ (8005a70 <TIM_Base_SetConfig+0x12c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d013      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005962:	d00f      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a43      	ldr	r2, [pc, #268]	@ (8005a74 <TIM_Base_SetConfig+0x130>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00b      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a42      	ldr	r2, [pc, #264]	@ (8005a78 <TIM_Base_SetConfig+0x134>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a41      	ldr	r2, [pc, #260]	@ (8005a7c <TIM_Base_SetConfig+0x138>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a40      	ldr	r2, [pc, #256]	@ (8005a80 <TIM_Base_SetConfig+0x13c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a35      	ldr	r2, [pc, #212]	@ (8005a70 <TIM_Base_SetConfig+0x12c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d02b      	beq.n	80059f6 <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a4:	d027      	beq.n	80059f6 <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a32      	ldr	r2, [pc, #200]	@ (8005a74 <TIM_Base_SetConfig+0x130>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d023      	beq.n	80059f6 <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a31      	ldr	r2, [pc, #196]	@ (8005a78 <TIM_Base_SetConfig+0x134>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01f      	beq.n	80059f6 <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a30      	ldr	r2, [pc, #192]	@ (8005a7c <TIM_Base_SetConfig+0x138>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01b      	beq.n	80059f6 <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2f      	ldr	r2, [pc, #188]	@ (8005a80 <TIM_Base_SetConfig+0x13c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d017      	beq.n	80059f6 <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2e      	ldr	r2, [pc, #184]	@ (8005a84 <TIM_Base_SetConfig+0x140>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d013      	beq.n	80059f6 <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a88 <TIM_Base_SetConfig+0x144>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00f      	beq.n	80059f6 <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2c      	ldr	r2, [pc, #176]	@ (8005a8c <TIM_Base_SetConfig+0x148>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00b      	beq.n	80059f6 <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a90 <TIM_Base_SetConfig+0x14c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d007      	beq.n	80059f6 <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005a94 <TIM_Base_SetConfig+0x150>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a29      	ldr	r2, [pc, #164]	@ (8005a98 <TIM_Base_SetConfig+0x154>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d108      	bne.n	8005a08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a10      	ldr	r2, [pc, #64]	@ (8005a70 <TIM_Base_SetConfig+0x12c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_Base_SetConfig+0xf8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a12      	ldr	r2, [pc, #72]	@ (8005a80 <TIM_Base_SetConfig+0x13c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d103      	bne.n	8005a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d105      	bne.n	8005a62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f023 0201 	bic.w	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	611a      	str	r2, [r3, #16]
  }
}
 8005a62:	bf00      	nop
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40010000 	.word	0x40010000
 8005a74:	40000400 	.word	0x40000400
 8005a78:	40000800 	.word	0x40000800
 8005a7c:	40000c00 	.word	0x40000c00
 8005a80:	40010400 	.word	0x40010400
 8005a84:	40014000 	.word	0x40014000
 8005a88:	40014400 	.word	0x40014400
 8005a8c:	40014800 	.word	0x40014800
 8005a90:	40001800 	.word	0x40001800
 8005a94:	40001c00 	.word	0x40001c00
 8005a98:	40002000 	.word	0x40002000

08005a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f023 0201 	bic.w	r2, r3, #1
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 0302 	bic.w	r3, r3, #2
 8005ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a20      	ldr	r2, [pc, #128]	@ (8005b74 <TIM_OC1_SetConfig+0xd8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_OC1_SetConfig+0x64>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a1f      	ldr	r2, [pc, #124]	@ (8005b78 <TIM_OC1_SetConfig+0xdc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d10c      	bne.n	8005b1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0308 	bic.w	r3, r3, #8
 8005b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 0304 	bic.w	r3, r3, #4
 8005b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <TIM_OC1_SetConfig+0xd8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_OC1_SetConfig+0x8e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a14      	ldr	r2, [pc, #80]	@ (8005b78 <TIM_OC1_SetConfig+0xdc>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d111      	bne.n	8005b4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	621a      	str	r2, [r3, #32]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40010400 	.word	0x40010400

08005b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	f023 0210 	bic.w	r2, r3, #16
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f023 0320 	bic.w	r3, r3, #32
 8005bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a22      	ldr	r2, [pc, #136]	@ (8005c60 <TIM_OC2_SetConfig+0xe4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d003      	beq.n	8005be4 <TIM_OC2_SetConfig+0x68>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a21      	ldr	r2, [pc, #132]	@ (8005c64 <TIM_OC2_SetConfig+0xe8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d10d      	bne.n	8005c00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a17      	ldr	r2, [pc, #92]	@ (8005c60 <TIM_OC2_SetConfig+0xe4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_OC2_SetConfig+0x94>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a16      	ldr	r2, [pc, #88]	@ (8005c64 <TIM_OC2_SetConfig+0xe8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d113      	bne.n	8005c38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40010000 	.word	0x40010000
 8005c64:	40010400 	.word	0x40010400

08005c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a21      	ldr	r2, [pc, #132]	@ (8005d48 <TIM_OC3_SetConfig+0xe0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_OC3_SetConfig+0x66>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a20      	ldr	r2, [pc, #128]	@ (8005d4c <TIM_OC3_SetConfig+0xe4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d10d      	bne.n	8005cea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a16      	ldr	r2, [pc, #88]	@ (8005d48 <TIM_OC3_SetConfig+0xe0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_OC3_SetConfig+0x92>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a15      	ldr	r2, [pc, #84]	@ (8005d4c <TIM_OC3_SetConfig+0xe4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d113      	bne.n	8005d22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	621a      	str	r2, [r3, #32]
}
 8005d3c:	bf00      	nop
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40010400 	.word	0x40010400

08005d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	031b      	lsls	r3, r3, #12
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a12      	ldr	r2, [pc, #72]	@ (8005df4 <TIM_OC4_SetConfig+0xa4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_OC4_SetConfig+0x68>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a11      	ldr	r2, [pc, #68]	@ (8005df8 <TIM_OC4_SetConfig+0xa8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d109      	bne.n	8005dcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	019b      	lsls	r3, r3, #6
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40010400 	.word	0x40010400

08005dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0201 	bic.w	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 030a 	bic.w	r3, r3, #10
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	f023 0210 	bic.w	r2, r3, #16
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f043 0307 	orr.w	r3, r3, #7
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	609a      	str	r2, [r3, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	021a      	lsls	r2, r3, #8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	2201      	movs	r2, #1
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a1a      	ldr	r2, [r3, #32]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	401a      	ands	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1a      	ldr	r2, [r3, #32]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	fa01 f303 	lsl.w	r3, r1, r3
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
	...

08005f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e05a      	b.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a21      	ldr	r2, [pc, #132]	@ (8006058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d022      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe0:	d01d      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800605c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d018      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d013      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00e      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a18      	ldr	r2, [pc, #96]	@ (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d009      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a17      	ldr	r2, [pc, #92]	@ (800606c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d004      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a15      	ldr	r2, [pc, #84]	@ (8006070 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d10c      	bne.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	4313      	orrs	r3, r2
 800602e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40010000 	.word	0x40010000
 800605c:	40000400 	.word	0x40000400
 8006060:	40000800 	.word	0x40000800
 8006064:	40000c00 	.word	0x40000c00
 8006068:	40010400 	.word	0x40010400
 800606c:	40014000 	.word	0x40014000
 8006070:	40001800 	.word	0x40001800

08006074 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e042      	b.n	8006134 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fd f970 	bl	80033a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2224      	movs	r2, #36	@ 0x24
 80060cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fdbd 	bl	8006c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	@ 0x28
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b20      	cmp	r3, #32
 800615a:	d175      	bne.n	8006248 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_UART_Transmit+0x2c>
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e06e      	b.n	800624a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2221      	movs	r2, #33	@ 0x21
 8006176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800617a:	f7fd fb4d 	bl	8003818 <HAL_GetTick>
 800617e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	88fa      	ldrh	r2, [r7, #6]
 8006184:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	88fa      	ldrh	r2, [r7, #6]
 800618a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006194:	d108      	bne.n	80061a8 <HAL_UART_Transmit+0x6c>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e003      	b.n	80061b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061ac:	2300      	movs	r3, #0
 80061ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061b0:	e02e      	b.n	8006210 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2200      	movs	r2, #0
 80061ba:	2180      	movs	r1, #128	@ 0x80
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fb1f 	bl	8006800 <UART_WaitOnFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e03a      	b.n	800624a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10b      	bne.n	80061f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	3302      	adds	r3, #2
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	e007      	b.n	8006202 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	781a      	ldrb	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	3301      	adds	r3, #1
 8006200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1cb      	bne.n	80061b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2200      	movs	r2, #0
 8006222:	2140      	movs	r1, #64	@ 0x40
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 faeb 	bl	8006800 <UART_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e006      	b.n	800624a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	e000      	b.n	800624a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
  }
}
 800624a:	4618      	mov	r0, r3
 800624c:	3720      	adds	r7, #32
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	4613      	mov	r3, r2
 800625e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b20      	cmp	r3, #32
 800626a:	d112      	bne.n	8006292 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_UART_Receive_IT+0x26>
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e00b      	b.n	8006294 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	461a      	mov	r2, r3
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fb12 	bl	80068b2 <UART_Start_Receive_IT>
 800628e:	4603      	mov	r3, r0
 8006290:	e000      	b.n	8006294 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006292:	2302      	movs	r3, #2
  }
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b0ba      	sub	sp, #232	@ 0xe8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80062da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10f      	bne.n	8006302 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_UART_IRQHandler+0x66>
 80062ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fbf2 	bl	8006ae4 <UART_Receive_IT>
      return;
 8006300:	e25b      	b.n	80067ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80de 	beq.w	80064c8 <HAL_UART_IRQHandler+0x22c>
 800630c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800631c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 80d1 	beq.w	80064c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00b      	beq.n	800634a <HAL_UART_IRQHandler+0xae>
 8006332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006342:	f043 0201 	orr.w	r2, r3, #1
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800634a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <HAL_UART_IRQHandler+0xd2>
 8006356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006366:	f043 0202 	orr.w	r2, r3, #2
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800636e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <HAL_UART_IRQHandler+0xf6>
 800637a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638a:	f043 0204 	orr.w	r2, r3, #4
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d011      	beq.n	80063c2 <HAL_UART_IRQHandler+0x126>
 800639e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d105      	bne.n	80063b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	f043 0208 	orr.w	r2, r3, #8
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 81f2 	beq.w	80067b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <HAL_UART_IRQHandler+0x14e>
 80063d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fb7d 	bl	8006ae4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f4:	2b40      	cmp	r3, #64	@ 0x40
 80063f6:	bf0c      	ite	eq
 80063f8:	2301      	moveq	r3, #1
 80063fa:	2300      	movne	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d103      	bne.n	8006416 <HAL_UART_IRQHandler+0x17a>
 800640e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d04f      	beq.n	80064b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa85 	bl	8006926 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006426:	2b40      	cmp	r3, #64	@ 0x40
 8006428:	d141      	bne.n	80064ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3314      	adds	r3, #20
 8006430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3314      	adds	r3, #20
 8006452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006456:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800645a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800646e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1d9      	bne.n	800642a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d013      	beq.n	80064a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006482:	4a7e      	ldr	r2, [pc, #504]	@ (800667c <HAL_UART_IRQHandler+0x3e0>)
 8006484:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648a:	4618      	mov	r0, r3
 800648c:	f7fd fc00 	bl	8003c90 <HAL_DMA_Abort_IT>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d016      	beq.n	80064c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064a0:	4610      	mov	r0, r2
 80064a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a4:	e00e      	b.n	80064c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f994 	bl	80067d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ac:	e00a      	b.n	80064c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f990 	bl	80067d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	e006      	b.n	80064c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f98c 	bl	80067d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80064c2:	e175      	b.n	80067b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c4:	bf00      	nop
    return;
 80064c6:	e173      	b.n	80067b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	f040 814f 	bne.w	8006770 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d6:	f003 0310 	and.w	r3, r3, #16
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8148 	beq.w	8006770 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 8141 	beq.w	8006770 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650e:	2b40      	cmp	r3, #64	@ 0x40
 8006510:	f040 80b6 	bne.w	8006680 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006520:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8145 	beq.w	80067b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800652e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006532:	429a      	cmp	r2, r3
 8006534:	f080 813e 	bcs.w	80067b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800653e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654a:	f000 8088 	beq.w	800665e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800656c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	330c      	adds	r3, #12
 8006576:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800657a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800657e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006586:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800658a:	e841 2300 	strex	r3, r2, [r1]
 800658e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1d9      	bne.n	800654e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3314      	adds	r3, #20
 80065a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3314      	adds	r3, #20
 80065ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e1      	bne.n	800659a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3314      	adds	r3, #20
 80065dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3314      	adds	r3, #20
 80065f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006600:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e3      	bne.n	80065d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	330c      	adds	r3, #12
 8006622:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800662c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800662e:	f023 0310 	bic.w	r3, r3, #16
 8006632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	330c      	adds	r3, #12
 800663c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006640:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006642:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006646:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800664e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e3      	bne.n	800661c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006658:	4618      	mov	r0, r3
 800665a:	f7fd faa9 	bl	8003bb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2202      	movs	r2, #2
 8006662:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800666c:	b29b      	uxth	r3, r3
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	b29b      	uxth	r3, r3
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f8b7 	bl	80067e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800667a:	e09b      	b.n	80067b4 <HAL_UART_IRQHandler+0x518>
 800667c:	080069ed 	.word	0x080069ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006688:	b29b      	uxth	r3, r3
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006694:	b29b      	uxth	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 808e 	beq.w	80067b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800669c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 8089 	beq.w	80067b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	330c      	adds	r3, #12
 80066ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80066ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80066cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e3      	bne.n	80066a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3314      	adds	r3, #20
 80066e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	623b      	str	r3, [r7, #32]
   return(result);
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	f023 0301 	bic.w	r3, r3, #1
 80066f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3314      	adds	r3, #20
 80066fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006702:	633a      	str	r2, [r7, #48]	@ 0x30
 8006704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e3      	bne.n	80066de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	330c      	adds	r3, #12
 800672a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	60fb      	str	r3, [r7, #12]
   return(result);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0310 	bic.w	r3, r3, #16
 800673a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	330c      	adds	r3, #12
 8006744:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006748:	61fa      	str	r2, [r7, #28]
 800674a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	69b9      	ldr	r1, [r7, #24]
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	617b      	str	r3, [r7, #20]
   return(result);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e3      	bne.n	8006724 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006762:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f83d 	bl	80067e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800676e:	e023      	b.n	80067b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006778:	2b00      	cmp	r3, #0
 800677a:	d009      	beq.n	8006790 <HAL_UART_IRQHandler+0x4f4>
 800677c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f943 	bl	8006a14 <UART_Transmit_IT>
    return;
 800678e:	e014      	b.n	80067ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00e      	beq.n	80067ba <HAL_UART_IRQHandler+0x51e>
 800679c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f983 	bl	8006ab4 <UART_EndTransmit_IT>
    return;
 80067ae:	e004      	b.n	80067ba <HAL_UART_IRQHandler+0x51e>
    return;
 80067b0:	bf00      	nop
 80067b2:	e002      	b.n	80067ba <HAL_UART_IRQHandler+0x51e>
      return;
 80067b4:	bf00      	nop
 80067b6:	e000      	b.n	80067ba <HAL_UART_IRQHandler+0x51e>
      return;
 80067b8:	bf00      	nop
  }
}
 80067ba:	37e8      	adds	r7, #232	@ 0xe8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	4613      	mov	r3, r2
 800680e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006810:	e03b      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006818:	d037      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681a:	f7fc fffd 	bl	8003818 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	6a3a      	ldr	r2, [r7, #32]
 8006826:	429a      	cmp	r2, r3
 8006828:	d302      	bcc.n	8006830 <UART_WaitOnFlagUntilTimeout+0x30>
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e03a      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b00      	cmp	r3, #0
 8006840:	d023      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b80      	cmp	r3, #128	@ 0x80
 8006846:	d020      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b40      	cmp	r3, #64	@ 0x40
 800684c:	d01d      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b08      	cmp	r3, #8
 800685a:	d116      	bne.n	800688a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800685c:	2300      	movs	r3, #0
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f857 	bl	8006926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2208      	movs	r2, #8
 800687c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e00f      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4013      	ands	r3, r2
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	bf0c      	ite	eq
 800689a:	2301      	moveq	r3, #1
 800689c:	2300      	movne	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d0b4      	beq.n	8006812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b085      	sub	sp, #20
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	88fa      	ldrh	r2, [r7, #6]
 80068ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2222      	movs	r2, #34	@ 0x22
 80068dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0220 	orr.w	r2, r2, #32
 8006916:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006926:	b480      	push	{r7}
 8006928:	b095      	sub	sp, #84	@ 0x54
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	330c      	adds	r3, #12
 8006934:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006944:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	330c      	adds	r3, #12
 800694c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800694e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006950:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006954:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e5      	bne.n	800692e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3314      	adds	r3, #20
 8006968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	61fb      	str	r3, [r7, #28]
   return(result);
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3314      	adds	r3, #20
 8006980:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006984:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e5      	bne.n	8006962 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699a:	2b01      	cmp	r3, #1
 800699c:	d119      	bne.n	80069d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f023 0310 	bic.w	r3, r3, #16
 80069b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	330c      	adds	r3, #12
 80069bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069be:	61ba      	str	r2, [r7, #24]
 80069c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6979      	ldr	r1, [r7, #20]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	613b      	str	r3, [r7, #16]
   return(result);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e5      	bne.n	800699e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069e0:	bf00      	nop
 80069e2:	3754      	adds	r7, #84	@ 0x54
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff fee4 	bl	80067d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b21      	cmp	r3, #33	@ 0x21
 8006a26:	d13e      	bne.n	8006aa6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a30:	d114      	bne.n	8006a5c <UART_Transmit_IT+0x48>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d110      	bne.n	8006a5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	1c9a      	adds	r2, r3, #2
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	621a      	str	r2, [r3, #32]
 8006a5a:	e008      	b.n	8006a6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	1c59      	adds	r1, r3, #1
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6211      	str	r1, [r2, #32]
 8006a66:	781a      	ldrb	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	3b01      	subs	r3, #1
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10f      	bne.n	8006aa2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006aa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e000      	b.n	8006aa8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006aa6:	2302      	movs	r3, #2
  }
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff fe73 	bl	80067c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08c      	sub	sp, #48	@ 0x30
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b22      	cmp	r3, #34	@ 0x22
 8006af6:	f040 80ae 	bne.w	8006c56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b02:	d117      	bne.n	8006b34 <UART_Receive_IT+0x50>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d113      	bne.n	8006b34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2c:	1c9a      	adds	r2, r3, #2
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b32:	e026      	b.n	8006b82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b46:	d007      	beq.n	8006b58 <UART_Receive_IT+0x74>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <UART_Receive_IT+0x82>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d106      	bne.n	8006b66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	e008      	b.n	8006b78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d15d      	bne.n	8006c52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0220 	bic.w	r2, r2, #32
 8006ba4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006bb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695a      	ldr	r2, [r3, #20]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0201 	bic.w	r2, r2, #1
 8006bc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d135      	bne.n	8006c48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f023 0310 	bic.w	r3, r3, #16
 8006bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c02:	623a      	str	r2, [r7, #32]
 8006c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	69f9      	ldr	r1, [r7, #28]
 8006c08:	6a3a      	ldr	r2, [r7, #32]
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e5      	bne.n	8006be2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d10a      	bne.n	8006c3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff fdd1 	bl	80067e8 <HAL_UARTEx_RxEventCallback>
 8006c46:	e002      	b.n	8006c4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7fc fa6f 	bl	800312c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e002      	b.n	8006c58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e000      	b.n	8006c58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c56:	2302      	movs	r3, #2
  }
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3730      	adds	r7, #48	@ 0x30
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c64:	b0c0      	sub	sp, #256	@ 0x100
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7c:	68d9      	ldr	r1, [r3, #12]
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	ea40 0301 	orr.w	r3, r0, r1
 8006c88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006cb8:	f021 010c 	bic.w	r1, r1, #12
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cda:	6999      	ldr	r1, [r3, #24]
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	ea40 0301 	orr.w	r3, r0, r1
 8006ce6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4b8f      	ldr	r3, [pc, #572]	@ (8006f2c <UART_SetConfig+0x2cc>)
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d005      	beq.n	8006d00 <UART_SetConfig+0xa0>
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8006f30 <UART_SetConfig+0x2d0>)
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d104      	bne.n	8006d0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d00:	f7fe f85e 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 8006d04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d08:	e003      	b.n	8006d12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d0a:	f7fe f845 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8006d0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d1c:	f040 810c 	bne.w	8006f38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d32:	4622      	mov	r2, r4
 8006d34:	462b      	mov	r3, r5
 8006d36:	1891      	adds	r1, r2, r2
 8006d38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d3a:	415b      	adcs	r3, r3
 8006d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d42:	4621      	mov	r1, r4
 8006d44:	eb12 0801 	adds.w	r8, r2, r1
 8006d48:	4629      	mov	r1, r5
 8006d4a:	eb43 0901 	adc.w	r9, r3, r1
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d62:	4690      	mov	r8, r2
 8006d64:	4699      	mov	r9, r3
 8006d66:	4623      	mov	r3, r4
 8006d68:	eb18 0303 	adds.w	r3, r8, r3
 8006d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d70:	462b      	mov	r3, r5
 8006d72:	eb49 0303 	adc.w	r3, r9, r3
 8006d76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d8e:	460b      	mov	r3, r1
 8006d90:	18db      	adds	r3, r3, r3
 8006d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d94:	4613      	mov	r3, r2
 8006d96:	eb42 0303 	adc.w	r3, r2, r3
 8006d9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006da0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006da4:	f7f9 ff70 	bl	8000c88 <__aeabi_uldivmod>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4b61      	ldr	r3, [pc, #388]	@ (8006f34 <UART_SetConfig+0x2d4>)
 8006dae:	fba3 2302 	umull	r2, r3, r3, r2
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	011c      	lsls	r4, r3, #4
 8006db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006dc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006dc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006dc8:	4642      	mov	r2, r8
 8006dca:	464b      	mov	r3, r9
 8006dcc:	1891      	adds	r1, r2, r2
 8006dce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006dd0:	415b      	adcs	r3, r3
 8006dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006dd8:	4641      	mov	r1, r8
 8006dda:	eb12 0a01 	adds.w	sl, r2, r1
 8006dde:	4649      	mov	r1, r9
 8006de0:	eb43 0b01 	adc.w	fp, r3, r1
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006df0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006df8:	4692      	mov	sl, r2
 8006dfa:	469b      	mov	fp, r3
 8006dfc:	4643      	mov	r3, r8
 8006dfe:	eb1a 0303 	adds.w	r3, sl, r3
 8006e02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e06:	464b      	mov	r3, r9
 8006e08:	eb4b 0303 	adc.w	r3, fp, r3
 8006e0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e24:	460b      	mov	r3, r1
 8006e26:	18db      	adds	r3, r3, r3
 8006e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	eb42 0303 	adc.w	r3, r2, r3
 8006e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e3a:	f7f9 ff25 	bl	8000c88 <__aeabi_uldivmod>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	4611      	mov	r1, r2
 8006e44:	4b3b      	ldr	r3, [pc, #236]	@ (8006f34 <UART_SetConfig+0x2d4>)
 8006e46:	fba3 2301 	umull	r2, r3, r3, r1
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	2264      	movs	r2, #100	@ 0x64
 8006e4e:	fb02 f303 	mul.w	r3, r2, r3
 8006e52:	1acb      	subs	r3, r1, r3
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e5a:	4b36      	ldr	r3, [pc, #216]	@ (8006f34 <UART_SetConfig+0x2d4>)
 8006e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e68:	441c      	add	r4, r3
 8006e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e7c:	4642      	mov	r2, r8
 8006e7e:	464b      	mov	r3, r9
 8006e80:	1891      	adds	r1, r2, r2
 8006e82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e84:	415b      	adcs	r3, r3
 8006e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e8c:	4641      	mov	r1, r8
 8006e8e:	1851      	adds	r1, r2, r1
 8006e90:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e92:	4649      	mov	r1, r9
 8006e94:	414b      	adcs	r3, r1
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ea4:	4659      	mov	r1, fp
 8006ea6:	00cb      	lsls	r3, r1, #3
 8006ea8:	4651      	mov	r1, sl
 8006eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eae:	4651      	mov	r1, sl
 8006eb0:	00ca      	lsls	r2, r1, #3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	4642      	mov	r2, r8
 8006eba:	189b      	adds	r3, r3, r2
 8006ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ec0:	464b      	mov	r3, r9
 8006ec2:	460a      	mov	r2, r1
 8006ec4:	eb42 0303 	adc.w	r3, r2, r3
 8006ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ed8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006edc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	18db      	adds	r3, r3, r3
 8006ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	eb42 0303 	adc.w	r3, r2, r3
 8006eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ef2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ef6:	f7f9 fec7 	bl	8000c88 <__aeabi_uldivmod>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4b0d      	ldr	r3, [pc, #52]	@ (8006f34 <UART_SetConfig+0x2d4>)
 8006f00:	fba3 1302 	umull	r1, r3, r3, r2
 8006f04:	095b      	lsrs	r3, r3, #5
 8006f06:	2164      	movs	r1, #100	@ 0x64
 8006f08:	fb01 f303 	mul.w	r3, r1, r3
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	3332      	adds	r3, #50	@ 0x32
 8006f12:	4a08      	ldr	r2, [pc, #32]	@ (8006f34 <UART_SetConfig+0x2d4>)
 8006f14:	fba2 2303 	umull	r2, r3, r2, r3
 8006f18:	095b      	lsrs	r3, r3, #5
 8006f1a:	f003 0207 	and.w	r2, r3, #7
 8006f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4422      	add	r2, r4
 8006f26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f28:	e106      	b.n	8007138 <UART_SetConfig+0x4d8>
 8006f2a:	bf00      	nop
 8006f2c:	40011000 	.word	0x40011000
 8006f30:	40011400 	.word	0x40011400
 8006f34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f4a:	4642      	mov	r2, r8
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	1891      	adds	r1, r2, r2
 8006f50:	6239      	str	r1, [r7, #32]
 8006f52:	415b      	adcs	r3, r3
 8006f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f5a:	4641      	mov	r1, r8
 8006f5c:	1854      	adds	r4, r2, r1
 8006f5e:	4649      	mov	r1, r9
 8006f60:	eb43 0501 	adc.w	r5, r3, r1
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	00eb      	lsls	r3, r5, #3
 8006f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f72:	00e2      	lsls	r2, r4, #3
 8006f74:	4614      	mov	r4, r2
 8006f76:	461d      	mov	r5, r3
 8006f78:	4643      	mov	r3, r8
 8006f7a:	18e3      	adds	r3, r4, r3
 8006f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f80:	464b      	mov	r3, r9
 8006f82:	eb45 0303 	adc.w	r3, r5, r3
 8006f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	008b      	lsls	r3, r1, #2
 8006faa:	4621      	mov	r1, r4
 8006fac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	008a      	lsls	r2, r1, #2
 8006fb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fb8:	f7f9 fe66 	bl	8000c88 <__aeabi_uldivmod>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4b60      	ldr	r3, [pc, #384]	@ (8007144 <UART_SetConfig+0x4e4>)
 8006fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	011c      	lsls	r4, r3, #4
 8006fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006fd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	1891      	adds	r1, r2, r2
 8006fe2:	61b9      	str	r1, [r7, #24]
 8006fe4:	415b      	adcs	r3, r3
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fec:	4641      	mov	r1, r8
 8006fee:	1851      	adds	r1, r2, r1
 8006ff0:	6139      	str	r1, [r7, #16]
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	414b      	adcs	r3, r1
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007004:	4659      	mov	r1, fp
 8007006:	00cb      	lsls	r3, r1, #3
 8007008:	4651      	mov	r1, sl
 800700a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800700e:	4651      	mov	r1, sl
 8007010:	00ca      	lsls	r2, r1, #3
 8007012:	4610      	mov	r0, r2
 8007014:	4619      	mov	r1, r3
 8007016:	4603      	mov	r3, r0
 8007018:	4642      	mov	r2, r8
 800701a:	189b      	adds	r3, r3, r2
 800701c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007020:	464b      	mov	r3, r9
 8007022:	460a      	mov	r2, r1
 8007024:	eb42 0303 	adc.w	r3, r2, r3
 8007028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007036:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007044:	4649      	mov	r1, r9
 8007046:	008b      	lsls	r3, r1, #2
 8007048:	4641      	mov	r1, r8
 800704a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800704e:	4641      	mov	r1, r8
 8007050:	008a      	lsls	r2, r1, #2
 8007052:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007056:	f7f9 fe17 	bl	8000c88 <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4611      	mov	r1, r2
 8007060:	4b38      	ldr	r3, [pc, #224]	@ (8007144 <UART_SetConfig+0x4e4>)
 8007062:	fba3 2301 	umull	r2, r3, r3, r1
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	2264      	movs	r2, #100	@ 0x64
 800706a:	fb02 f303 	mul.w	r3, r2, r3
 800706e:	1acb      	subs	r3, r1, r3
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	3332      	adds	r3, #50	@ 0x32
 8007074:	4a33      	ldr	r2, [pc, #204]	@ (8007144 <UART_SetConfig+0x4e4>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007080:	441c      	add	r4, r3
 8007082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007086:	2200      	movs	r2, #0
 8007088:	673b      	str	r3, [r7, #112]	@ 0x70
 800708a:	677a      	str	r2, [r7, #116]	@ 0x74
 800708c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007090:	4642      	mov	r2, r8
 8007092:	464b      	mov	r3, r9
 8007094:	1891      	adds	r1, r2, r2
 8007096:	60b9      	str	r1, [r7, #8]
 8007098:	415b      	adcs	r3, r3
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070a0:	4641      	mov	r1, r8
 80070a2:	1851      	adds	r1, r2, r1
 80070a4:	6039      	str	r1, [r7, #0]
 80070a6:	4649      	mov	r1, r9
 80070a8:	414b      	adcs	r3, r1
 80070aa:	607b      	str	r3, [r7, #4]
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070b8:	4659      	mov	r1, fp
 80070ba:	00cb      	lsls	r3, r1, #3
 80070bc:	4651      	mov	r1, sl
 80070be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070c2:	4651      	mov	r1, sl
 80070c4:	00ca      	lsls	r2, r1, #3
 80070c6:	4610      	mov	r0, r2
 80070c8:	4619      	mov	r1, r3
 80070ca:	4603      	mov	r3, r0
 80070cc:	4642      	mov	r2, r8
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070d2:	464b      	mov	r3, r9
 80070d4:	460a      	mov	r2, r1
 80070d6:	eb42 0303 	adc.w	r3, r2, r3
 80070da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80070e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80070e8:	f04f 0200 	mov.w	r2, #0
 80070ec:	f04f 0300 	mov.w	r3, #0
 80070f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80070f4:	4649      	mov	r1, r9
 80070f6:	008b      	lsls	r3, r1, #2
 80070f8:	4641      	mov	r1, r8
 80070fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070fe:	4641      	mov	r1, r8
 8007100:	008a      	lsls	r2, r1, #2
 8007102:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007106:	f7f9 fdbf 	bl	8000c88 <__aeabi_uldivmod>
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	4b0d      	ldr	r3, [pc, #52]	@ (8007144 <UART_SetConfig+0x4e4>)
 8007110:	fba3 1302 	umull	r1, r3, r3, r2
 8007114:	095b      	lsrs	r3, r3, #5
 8007116:	2164      	movs	r1, #100	@ 0x64
 8007118:	fb01 f303 	mul.w	r3, r1, r3
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	3332      	adds	r3, #50	@ 0x32
 8007122:	4a08      	ldr	r2, [pc, #32]	@ (8007144 <UART_SetConfig+0x4e4>)
 8007124:	fba2 2303 	umull	r2, r3, r2, r3
 8007128:	095b      	lsrs	r3, r3, #5
 800712a:	f003 020f 	and.w	r2, r3, #15
 800712e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4422      	add	r2, r4
 8007136:	609a      	str	r2, [r3, #8]
}
 8007138:	bf00      	nop
 800713a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800713e:	46bd      	mov	sp, r7
 8007140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007144:	51eb851f 	.word	0x51eb851f

08007148 <atof>:
 8007148:	2100      	movs	r1, #0
 800714a:	f000 be0b 	b.w	8007d64 <strtod>

0800714e <sulp>:
 800714e:	b570      	push	{r4, r5, r6, lr}
 8007150:	4604      	mov	r4, r0
 8007152:	460d      	mov	r5, r1
 8007154:	ec45 4b10 	vmov	d0, r4, r5
 8007158:	4616      	mov	r6, r2
 800715a:	f003 fcf9 	bl	800ab50 <__ulp>
 800715e:	ec51 0b10 	vmov	r0, r1, d0
 8007162:	b17e      	cbz	r6, 8007184 <sulp+0x36>
 8007164:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007168:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800716c:	2b00      	cmp	r3, #0
 800716e:	dd09      	ble.n	8007184 <sulp+0x36>
 8007170:	051b      	lsls	r3, r3, #20
 8007172:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007176:	2400      	movs	r4, #0
 8007178:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800717c:	4622      	mov	r2, r4
 800717e:	462b      	mov	r3, r5
 8007180:	f7f9 fa3a 	bl	80005f8 <__aeabi_dmul>
 8007184:	ec41 0b10 	vmov	d0, r0, r1
 8007188:	bd70      	pop	{r4, r5, r6, pc}
 800718a:	0000      	movs	r0, r0
 800718c:	0000      	movs	r0, r0
	...

08007190 <_strtod_l>:
 8007190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	b09f      	sub	sp, #124	@ 0x7c
 8007196:	460c      	mov	r4, r1
 8007198:	9217      	str	r2, [sp, #92]	@ 0x5c
 800719a:	2200      	movs	r2, #0
 800719c:	921a      	str	r2, [sp, #104]	@ 0x68
 800719e:	9005      	str	r0, [sp, #20]
 80071a0:	f04f 0a00 	mov.w	sl, #0
 80071a4:	f04f 0b00 	mov.w	fp, #0
 80071a8:	460a      	mov	r2, r1
 80071aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80071ac:	7811      	ldrb	r1, [r2, #0]
 80071ae:	292b      	cmp	r1, #43	@ 0x2b
 80071b0:	d04a      	beq.n	8007248 <_strtod_l+0xb8>
 80071b2:	d838      	bhi.n	8007226 <_strtod_l+0x96>
 80071b4:	290d      	cmp	r1, #13
 80071b6:	d832      	bhi.n	800721e <_strtod_l+0x8e>
 80071b8:	2908      	cmp	r1, #8
 80071ba:	d832      	bhi.n	8007222 <_strtod_l+0x92>
 80071bc:	2900      	cmp	r1, #0
 80071be:	d03b      	beq.n	8007238 <_strtod_l+0xa8>
 80071c0:	2200      	movs	r2, #0
 80071c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80071c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80071c6:	782a      	ldrb	r2, [r5, #0]
 80071c8:	2a30      	cmp	r2, #48	@ 0x30
 80071ca:	f040 80b3 	bne.w	8007334 <_strtod_l+0x1a4>
 80071ce:	786a      	ldrb	r2, [r5, #1]
 80071d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80071d4:	2a58      	cmp	r2, #88	@ 0x58
 80071d6:	d16e      	bne.n	80072b6 <_strtod_l+0x126>
 80071d8:	9302      	str	r3, [sp, #8]
 80071da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	ab1a      	add	r3, sp, #104	@ 0x68
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	4a8e      	ldr	r2, [pc, #568]	@ (800741c <_strtod_l+0x28c>)
 80071e4:	9805      	ldr	r0, [sp, #20]
 80071e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80071e8:	a919      	add	r1, sp, #100	@ 0x64
 80071ea:	f002 fda3 	bl	8009d34 <__gethex>
 80071ee:	f010 060f 	ands.w	r6, r0, #15
 80071f2:	4604      	mov	r4, r0
 80071f4:	d005      	beq.n	8007202 <_strtod_l+0x72>
 80071f6:	2e06      	cmp	r6, #6
 80071f8:	d128      	bne.n	800724c <_strtod_l+0xbc>
 80071fa:	3501      	adds	r5, #1
 80071fc:	2300      	movs	r3, #0
 80071fe:	9519      	str	r5, [sp, #100]	@ 0x64
 8007200:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007202:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 858e 	bne.w	8007d26 <_strtod_l+0xb96>
 800720a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800720c:	b1cb      	cbz	r3, 8007242 <_strtod_l+0xb2>
 800720e:	4652      	mov	r2, sl
 8007210:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007214:	ec43 2b10 	vmov	d0, r2, r3
 8007218:	b01f      	add	sp, #124	@ 0x7c
 800721a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721e:	2920      	cmp	r1, #32
 8007220:	d1ce      	bne.n	80071c0 <_strtod_l+0x30>
 8007222:	3201      	adds	r2, #1
 8007224:	e7c1      	b.n	80071aa <_strtod_l+0x1a>
 8007226:	292d      	cmp	r1, #45	@ 0x2d
 8007228:	d1ca      	bne.n	80071c0 <_strtod_l+0x30>
 800722a:	2101      	movs	r1, #1
 800722c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800722e:	1c51      	adds	r1, r2, #1
 8007230:	9119      	str	r1, [sp, #100]	@ 0x64
 8007232:	7852      	ldrb	r2, [r2, #1]
 8007234:	2a00      	cmp	r2, #0
 8007236:	d1c5      	bne.n	80071c4 <_strtod_l+0x34>
 8007238:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800723a:	9419      	str	r4, [sp, #100]	@ 0x64
 800723c:	2b00      	cmp	r3, #0
 800723e:	f040 8570 	bne.w	8007d22 <_strtod_l+0xb92>
 8007242:	4652      	mov	r2, sl
 8007244:	465b      	mov	r3, fp
 8007246:	e7e5      	b.n	8007214 <_strtod_l+0x84>
 8007248:	2100      	movs	r1, #0
 800724a:	e7ef      	b.n	800722c <_strtod_l+0x9c>
 800724c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800724e:	b13a      	cbz	r2, 8007260 <_strtod_l+0xd0>
 8007250:	2135      	movs	r1, #53	@ 0x35
 8007252:	a81c      	add	r0, sp, #112	@ 0x70
 8007254:	f003 fd76 	bl	800ad44 <__copybits>
 8007258:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800725a:	9805      	ldr	r0, [sp, #20]
 800725c:	f003 f944 	bl	800a4e8 <_Bfree>
 8007260:	3e01      	subs	r6, #1
 8007262:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007264:	2e04      	cmp	r6, #4
 8007266:	d806      	bhi.n	8007276 <_strtod_l+0xe6>
 8007268:	e8df f006 	tbb	[pc, r6]
 800726c:	201d0314 	.word	0x201d0314
 8007270:	14          	.byte	0x14
 8007271:	00          	.byte	0x00
 8007272:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007276:	05e1      	lsls	r1, r4, #23
 8007278:	bf48      	it	mi
 800727a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800727e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007282:	0d1b      	lsrs	r3, r3, #20
 8007284:	051b      	lsls	r3, r3, #20
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1bb      	bne.n	8007202 <_strtod_l+0x72>
 800728a:	f001 fdeb 	bl	8008e64 <__errno>
 800728e:	2322      	movs	r3, #34	@ 0x22
 8007290:	6003      	str	r3, [r0, #0]
 8007292:	e7b6      	b.n	8007202 <_strtod_l+0x72>
 8007294:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007298:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800729c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80072a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80072a4:	e7e7      	b.n	8007276 <_strtod_l+0xe6>
 80072a6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007424 <_strtod_l+0x294>
 80072aa:	e7e4      	b.n	8007276 <_strtod_l+0xe6>
 80072ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80072b0:	f04f 3aff 	mov.w	sl, #4294967295
 80072b4:	e7df      	b.n	8007276 <_strtod_l+0xe6>
 80072b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	2b30      	cmp	r3, #48	@ 0x30
 80072c0:	d0f9      	beq.n	80072b6 <_strtod_l+0x126>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d09d      	beq.n	8007202 <_strtod_l+0x72>
 80072c6:	2301      	movs	r3, #1
 80072c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80072ce:	2300      	movs	r3, #0
 80072d0:	9308      	str	r3, [sp, #32]
 80072d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80072d4:	461f      	mov	r7, r3
 80072d6:	220a      	movs	r2, #10
 80072d8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80072da:	7805      	ldrb	r5, [r0, #0]
 80072dc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80072e0:	b2d9      	uxtb	r1, r3
 80072e2:	2909      	cmp	r1, #9
 80072e4:	d928      	bls.n	8007338 <_strtod_l+0x1a8>
 80072e6:	494e      	ldr	r1, [pc, #312]	@ (8007420 <_strtod_l+0x290>)
 80072e8:	2201      	movs	r2, #1
 80072ea:	f001 fcef 	bl	8008ccc <strncmp>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d032      	beq.n	8007358 <_strtod_l+0x1c8>
 80072f2:	2000      	movs	r0, #0
 80072f4:	462a      	mov	r2, r5
 80072f6:	4681      	mov	r9, r0
 80072f8:	463d      	mov	r5, r7
 80072fa:	4603      	mov	r3, r0
 80072fc:	2a65      	cmp	r2, #101	@ 0x65
 80072fe:	d001      	beq.n	8007304 <_strtod_l+0x174>
 8007300:	2a45      	cmp	r2, #69	@ 0x45
 8007302:	d114      	bne.n	800732e <_strtod_l+0x19e>
 8007304:	b91d      	cbnz	r5, 800730e <_strtod_l+0x17e>
 8007306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007308:	4302      	orrs	r2, r0
 800730a:	d095      	beq.n	8007238 <_strtod_l+0xa8>
 800730c:	2500      	movs	r5, #0
 800730e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007310:	1c62      	adds	r2, r4, #1
 8007312:	9219      	str	r2, [sp, #100]	@ 0x64
 8007314:	7862      	ldrb	r2, [r4, #1]
 8007316:	2a2b      	cmp	r2, #43	@ 0x2b
 8007318:	d077      	beq.n	800740a <_strtod_l+0x27a>
 800731a:	2a2d      	cmp	r2, #45	@ 0x2d
 800731c:	d07b      	beq.n	8007416 <_strtod_l+0x286>
 800731e:	f04f 0c00 	mov.w	ip, #0
 8007322:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007326:	2909      	cmp	r1, #9
 8007328:	f240 8082 	bls.w	8007430 <_strtod_l+0x2a0>
 800732c:	9419      	str	r4, [sp, #100]	@ 0x64
 800732e:	f04f 0800 	mov.w	r8, #0
 8007332:	e0a2      	b.n	800747a <_strtod_l+0x2ea>
 8007334:	2300      	movs	r3, #0
 8007336:	e7c7      	b.n	80072c8 <_strtod_l+0x138>
 8007338:	2f08      	cmp	r7, #8
 800733a:	bfd5      	itete	le
 800733c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800733e:	9908      	ldrgt	r1, [sp, #32]
 8007340:	fb02 3301 	mlale	r3, r2, r1, r3
 8007344:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007348:	f100 0001 	add.w	r0, r0, #1
 800734c:	bfd4      	ite	le
 800734e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007350:	9308      	strgt	r3, [sp, #32]
 8007352:	3701      	adds	r7, #1
 8007354:	9019      	str	r0, [sp, #100]	@ 0x64
 8007356:	e7bf      	b.n	80072d8 <_strtod_l+0x148>
 8007358:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	9219      	str	r2, [sp, #100]	@ 0x64
 800735e:	785a      	ldrb	r2, [r3, #1]
 8007360:	b37f      	cbz	r7, 80073c2 <_strtod_l+0x232>
 8007362:	4681      	mov	r9, r0
 8007364:	463d      	mov	r5, r7
 8007366:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800736a:	2b09      	cmp	r3, #9
 800736c:	d912      	bls.n	8007394 <_strtod_l+0x204>
 800736e:	2301      	movs	r3, #1
 8007370:	e7c4      	b.n	80072fc <_strtod_l+0x16c>
 8007372:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	9219      	str	r2, [sp, #100]	@ 0x64
 8007378:	785a      	ldrb	r2, [r3, #1]
 800737a:	3001      	adds	r0, #1
 800737c:	2a30      	cmp	r2, #48	@ 0x30
 800737e:	d0f8      	beq.n	8007372 <_strtod_l+0x1e2>
 8007380:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007384:	2b08      	cmp	r3, #8
 8007386:	f200 84d3 	bhi.w	8007d30 <_strtod_l+0xba0>
 800738a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800738c:	930c      	str	r3, [sp, #48]	@ 0x30
 800738e:	4681      	mov	r9, r0
 8007390:	2000      	movs	r0, #0
 8007392:	4605      	mov	r5, r0
 8007394:	3a30      	subs	r2, #48	@ 0x30
 8007396:	f100 0301 	add.w	r3, r0, #1
 800739a:	d02a      	beq.n	80073f2 <_strtod_l+0x262>
 800739c:	4499      	add	r9, r3
 800739e:	eb00 0c05 	add.w	ip, r0, r5
 80073a2:	462b      	mov	r3, r5
 80073a4:	210a      	movs	r1, #10
 80073a6:	4563      	cmp	r3, ip
 80073a8:	d10d      	bne.n	80073c6 <_strtod_l+0x236>
 80073aa:	1c69      	adds	r1, r5, #1
 80073ac:	4401      	add	r1, r0
 80073ae:	4428      	add	r0, r5
 80073b0:	2808      	cmp	r0, #8
 80073b2:	dc16      	bgt.n	80073e2 <_strtod_l+0x252>
 80073b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80073b6:	230a      	movs	r3, #10
 80073b8:	fb03 2300 	mla	r3, r3, r0, r2
 80073bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80073be:	2300      	movs	r3, #0
 80073c0:	e018      	b.n	80073f4 <_strtod_l+0x264>
 80073c2:	4638      	mov	r0, r7
 80073c4:	e7da      	b.n	800737c <_strtod_l+0x1ec>
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	f103 0301 	add.w	r3, r3, #1
 80073cc:	dc03      	bgt.n	80073d6 <_strtod_l+0x246>
 80073ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80073d0:	434e      	muls	r6, r1
 80073d2:	960a      	str	r6, [sp, #40]	@ 0x28
 80073d4:	e7e7      	b.n	80073a6 <_strtod_l+0x216>
 80073d6:	2b10      	cmp	r3, #16
 80073d8:	bfde      	ittt	le
 80073da:	9e08      	ldrle	r6, [sp, #32]
 80073dc:	434e      	mulle	r6, r1
 80073de:	9608      	strle	r6, [sp, #32]
 80073e0:	e7e1      	b.n	80073a6 <_strtod_l+0x216>
 80073e2:	280f      	cmp	r0, #15
 80073e4:	dceb      	bgt.n	80073be <_strtod_l+0x22e>
 80073e6:	9808      	ldr	r0, [sp, #32]
 80073e8:	230a      	movs	r3, #10
 80073ea:	fb03 2300 	mla	r3, r3, r0, r2
 80073ee:	9308      	str	r3, [sp, #32]
 80073f0:	e7e5      	b.n	80073be <_strtod_l+0x22e>
 80073f2:	4629      	mov	r1, r5
 80073f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073f6:	1c50      	adds	r0, r2, #1
 80073f8:	9019      	str	r0, [sp, #100]	@ 0x64
 80073fa:	7852      	ldrb	r2, [r2, #1]
 80073fc:	4618      	mov	r0, r3
 80073fe:	460d      	mov	r5, r1
 8007400:	e7b1      	b.n	8007366 <_strtod_l+0x1d6>
 8007402:	f04f 0900 	mov.w	r9, #0
 8007406:	2301      	movs	r3, #1
 8007408:	e77d      	b.n	8007306 <_strtod_l+0x176>
 800740a:	f04f 0c00 	mov.w	ip, #0
 800740e:	1ca2      	adds	r2, r4, #2
 8007410:	9219      	str	r2, [sp, #100]	@ 0x64
 8007412:	78a2      	ldrb	r2, [r4, #2]
 8007414:	e785      	b.n	8007322 <_strtod_l+0x192>
 8007416:	f04f 0c01 	mov.w	ip, #1
 800741a:	e7f8      	b.n	800740e <_strtod_l+0x27e>
 800741c:	0800bd28 	.word	0x0800bd28
 8007420:	0800bd10 	.word	0x0800bd10
 8007424:	7ff00000 	.word	0x7ff00000
 8007428:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800742a:	1c51      	adds	r1, r2, #1
 800742c:	9119      	str	r1, [sp, #100]	@ 0x64
 800742e:	7852      	ldrb	r2, [r2, #1]
 8007430:	2a30      	cmp	r2, #48	@ 0x30
 8007432:	d0f9      	beq.n	8007428 <_strtod_l+0x298>
 8007434:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007438:	2908      	cmp	r1, #8
 800743a:	f63f af78 	bhi.w	800732e <_strtod_l+0x19e>
 800743e:	3a30      	subs	r2, #48	@ 0x30
 8007440:	920e      	str	r2, [sp, #56]	@ 0x38
 8007442:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007444:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007446:	f04f 080a 	mov.w	r8, #10
 800744a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800744c:	1c56      	adds	r6, r2, #1
 800744e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007450:	7852      	ldrb	r2, [r2, #1]
 8007452:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007456:	f1be 0f09 	cmp.w	lr, #9
 800745a:	d939      	bls.n	80074d0 <_strtod_l+0x340>
 800745c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800745e:	1a76      	subs	r6, r6, r1
 8007460:	2e08      	cmp	r6, #8
 8007462:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007466:	dc03      	bgt.n	8007470 <_strtod_l+0x2e0>
 8007468:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800746a:	4588      	cmp	r8, r1
 800746c:	bfa8      	it	ge
 800746e:	4688      	movge	r8, r1
 8007470:	f1bc 0f00 	cmp.w	ip, #0
 8007474:	d001      	beq.n	800747a <_strtod_l+0x2ea>
 8007476:	f1c8 0800 	rsb	r8, r8, #0
 800747a:	2d00      	cmp	r5, #0
 800747c:	d14e      	bne.n	800751c <_strtod_l+0x38c>
 800747e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007480:	4308      	orrs	r0, r1
 8007482:	f47f aebe 	bne.w	8007202 <_strtod_l+0x72>
 8007486:	2b00      	cmp	r3, #0
 8007488:	f47f aed6 	bne.w	8007238 <_strtod_l+0xa8>
 800748c:	2a69      	cmp	r2, #105	@ 0x69
 800748e:	d028      	beq.n	80074e2 <_strtod_l+0x352>
 8007490:	dc25      	bgt.n	80074de <_strtod_l+0x34e>
 8007492:	2a49      	cmp	r2, #73	@ 0x49
 8007494:	d025      	beq.n	80074e2 <_strtod_l+0x352>
 8007496:	2a4e      	cmp	r2, #78	@ 0x4e
 8007498:	f47f aece 	bne.w	8007238 <_strtod_l+0xa8>
 800749c:	499b      	ldr	r1, [pc, #620]	@ (800770c <_strtod_l+0x57c>)
 800749e:	a819      	add	r0, sp, #100	@ 0x64
 80074a0:	f002 fe6a 	bl	800a178 <__match>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f43f aec7 	beq.w	8007238 <_strtod_l+0xa8>
 80074aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b28      	cmp	r3, #40	@ 0x28
 80074b0:	d12e      	bne.n	8007510 <_strtod_l+0x380>
 80074b2:	4997      	ldr	r1, [pc, #604]	@ (8007710 <_strtod_l+0x580>)
 80074b4:	aa1c      	add	r2, sp, #112	@ 0x70
 80074b6:	a819      	add	r0, sp, #100	@ 0x64
 80074b8:	f002 fe72 	bl	800a1a0 <__hexnan>
 80074bc:	2805      	cmp	r0, #5
 80074be:	d127      	bne.n	8007510 <_strtod_l+0x380>
 80074c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80074c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80074c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80074ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80074ce:	e698      	b.n	8007202 <_strtod_l+0x72>
 80074d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80074d2:	fb08 2101 	mla	r1, r8, r1, r2
 80074d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80074da:	920e      	str	r2, [sp, #56]	@ 0x38
 80074dc:	e7b5      	b.n	800744a <_strtod_l+0x2ba>
 80074de:	2a6e      	cmp	r2, #110	@ 0x6e
 80074e0:	e7da      	b.n	8007498 <_strtod_l+0x308>
 80074e2:	498c      	ldr	r1, [pc, #560]	@ (8007714 <_strtod_l+0x584>)
 80074e4:	a819      	add	r0, sp, #100	@ 0x64
 80074e6:	f002 fe47 	bl	800a178 <__match>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f43f aea4 	beq.w	8007238 <_strtod_l+0xa8>
 80074f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074f2:	4989      	ldr	r1, [pc, #548]	@ (8007718 <_strtod_l+0x588>)
 80074f4:	3b01      	subs	r3, #1
 80074f6:	a819      	add	r0, sp, #100	@ 0x64
 80074f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80074fa:	f002 fe3d 	bl	800a178 <__match>
 80074fe:	b910      	cbnz	r0, 8007506 <_strtod_l+0x376>
 8007500:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007502:	3301      	adds	r3, #1
 8007504:	9319      	str	r3, [sp, #100]	@ 0x64
 8007506:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007728 <_strtod_l+0x598>
 800750a:	f04f 0a00 	mov.w	sl, #0
 800750e:	e678      	b.n	8007202 <_strtod_l+0x72>
 8007510:	4882      	ldr	r0, [pc, #520]	@ (800771c <_strtod_l+0x58c>)
 8007512:	f001 fce5 	bl	8008ee0 <nan>
 8007516:	ec5b ab10 	vmov	sl, fp, d0
 800751a:	e672      	b.n	8007202 <_strtod_l+0x72>
 800751c:	eba8 0309 	sub.w	r3, r8, r9
 8007520:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007522:	9309      	str	r3, [sp, #36]	@ 0x24
 8007524:	2f00      	cmp	r7, #0
 8007526:	bf08      	it	eq
 8007528:	462f      	moveq	r7, r5
 800752a:	2d10      	cmp	r5, #16
 800752c:	462c      	mov	r4, r5
 800752e:	bfa8      	it	ge
 8007530:	2410      	movge	r4, #16
 8007532:	f7f8 ffe7 	bl	8000504 <__aeabi_ui2d>
 8007536:	2d09      	cmp	r5, #9
 8007538:	4682      	mov	sl, r0
 800753a:	468b      	mov	fp, r1
 800753c:	dc13      	bgt.n	8007566 <_strtod_l+0x3d6>
 800753e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	f43f ae5e 	beq.w	8007202 <_strtod_l+0x72>
 8007546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007548:	dd78      	ble.n	800763c <_strtod_l+0x4ac>
 800754a:	2b16      	cmp	r3, #22
 800754c:	dc5f      	bgt.n	800760e <_strtod_l+0x47e>
 800754e:	4974      	ldr	r1, [pc, #464]	@ (8007720 <_strtod_l+0x590>)
 8007550:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007558:	4652      	mov	r2, sl
 800755a:	465b      	mov	r3, fp
 800755c:	f7f9 f84c 	bl	80005f8 <__aeabi_dmul>
 8007560:	4682      	mov	sl, r0
 8007562:	468b      	mov	fp, r1
 8007564:	e64d      	b.n	8007202 <_strtod_l+0x72>
 8007566:	4b6e      	ldr	r3, [pc, #440]	@ (8007720 <_strtod_l+0x590>)
 8007568:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800756c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007570:	f7f9 f842 	bl	80005f8 <__aeabi_dmul>
 8007574:	4682      	mov	sl, r0
 8007576:	9808      	ldr	r0, [sp, #32]
 8007578:	468b      	mov	fp, r1
 800757a:	f7f8 ffc3 	bl	8000504 <__aeabi_ui2d>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4650      	mov	r0, sl
 8007584:	4659      	mov	r1, fp
 8007586:	f7f8 fe81 	bl	800028c <__adddf3>
 800758a:	2d0f      	cmp	r5, #15
 800758c:	4682      	mov	sl, r0
 800758e:	468b      	mov	fp, r1
 8007590:	ddd5      	ble.n	800753e <_strtod_l+0x3ae>
 8007592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007594:	1b2c      	subs	r4, r5, r4
 8007596:	441c      	add	r4, r3
 8007598:	2c00      	cmp	r4, #0
 800759a:	f340 8096 	ble.w	80076ca <_strtod_l+0x53a>
 800759e:	f014 030f 	ands.w	r3, r4, #15
 80075a2:	d00a      	beq.n	80075ba <_strtod_l+0x42a>
 80075a4:	495e      	ldr	r1, [pc, #376]	@ (8007720 <_strtod_l+0x590>)
 80075a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075aa:	4652      	mov	r2, sl
 80075ac:	465b      	mov	r3, fp
 80075ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b2:	f7f9 f821 	bl	80005f8 <__aeabi_dmul>
 80075b6:	4682      	mov	sl, r0
 80075b8:	468b      	mov	fp, r1
 80075ba:	f034 040f 	bics.w	r4, r4, #15
 80075be:	d073      	beq.n	80076a8 <_strtod_l+0x518>
 80075c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80075c4:	dd48      	ble.n	8007658 <_strtod_l+0x4c8>
 80075c6:	2400      	movs	r4, #0
 80075c8:	46a0      	mov	r8, r4
 80075ca:	940a      	str	r4, [sp, #40]	@ 0x28
 80075cc:	46a1      	mov	r9, r4
 80075ce:	9a05      	ldr	r2, [sp, #20]
 80075d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007728 <_strtod_l+0x598>
 80075d4:	2322      	movs	r3, #34	@ 0x22
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	f04f 0a00 	mov.w	sl, #0
 80075dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f43f ae0f 	beq.w	8007202 <_strtod_l+0x72>
 80075e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075e6:	9805      	ldr	r0, [sp, #20]
 80075e8:	f002 ff7e 	bl	800a4e8 <_Bfree>
 80075ec:	9805      	ldr	r0, [sp, #20]
 80075ee:	4649      	mov	r1, r9
 80075f0:	f002 ff7a 	bl	800a4e8 <_Bfree>
 80075f4:	9805      	ldr	r0, [sp, #20]
 80075f6:	4641      	mov	r1, r8
 80075f8:	f002 ff76 	bl	800a4e8 <_Bfree>
 80075fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075fe:	9805      	ldr	r0, [sp, #20]
 8007600:	f002 ff72 	bl	800a4e8 <_Bfree>
 8007604:	9805      	ldr	r0, [sp, #20]
 8007606:	4621      	mov	r1, r4
 8007608:	f002 ff6e 	bl	800a4e8 <_Bfree>
 800760c:	e5f9      	b.n	8007202 <_strtod_l+0x72>
 800760e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007610:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007614:	4293      	cmp	r3, r2
 8007616:	dbbc      	blt.n	8007592 <_strtod_l+0x402>
 8007618:	4c41      	ldr	r4, [pc, #260]	@ (8007720 <_strtod_l+0x590>)
 800761a:	f1c5 050f 	rsb	r5, r5, #15
 800761e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007622:	4652      	mov	r2, sl
 8007624:	465b      	mov	r3, fp
 8007626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800762a:	f7f8 ffe5 	bl	80005f8 <__aeabi_dmul>
 800762e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007630:	1b5d      	subs	r5, r3, r5
 8007632:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007636:	e9d4 2300 	ldrd	r2, r3, [r4]
 800763a:	e78f      	b.n	800755c <_strtod_l+0x3cc>
 800763c:	3316      	adds	r3, #22
 800763e:	dba8      	blt.n	8007592 <_strtod_l+0x402>
 8007640:	4b37      	ldr	r3, [pc, #220]	@ (8007720 <_strtod_l+0x590>)
 8007642:	eba9 0808 	sub.w	r8, r9, r8
 8007646:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800764a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800764e:	4650      	mov	r0, sl
 8007650:	4659      	mov	r1, fp
 8007652:	f7f9 f8fb 	bl	800084c <__aeabi_ddiv>
 8007656:	e783      	b.n	8007560 <_strtod_l+0x3d0>
 8007658:	4b32      	ldr	r3, [pc, #200]	@ (8007724 <_strtod_l+0x594>)
 800765a:	9308      	str	r3, [sp, #32]
 800765c:	2300      	movs	r3, #0
 800765e:	1124      	asrs	r4, r4, #4
 8007660:	4650      	mov	r0, sl
 8007662:	4659      	mov	r1, fp
 8007664:	461e      	mov	r6, r3
 8007666:	2c01      	cmp	r4, #1
 8007668:	dc21      	bgt.n	80076ae <_strtod_l+0x51e>
 800766a:	b10b      	cbz	r3, 8007670 <_strtod_l+0x4e0>
 800766c:	4682      	mov	sl, r0
 800766e:	468b      	mov	fp, r1
 8007670:	492c      	ldr	r1, [pc, #176]	@ (8007724 <_strtod_l+0x594>)
 8007672:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007676:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800767a:	4652      	mov	r2, sl
 800767c:	465b      	mov	r3, fp
 800767e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007682:	f7f8 ffb9 	bl	80005f8 <__aeabi_dmul>
 8007686:	4b28      	ldr	r3, [pc, #160]	@ (8007728 <_strtod_l+0x598>)
 8007688:	460a      	mov	r2, r1
 800768a:	400b      	ands	r3, r1
 800768c:	4927      	ldr	r1, [pc, #156]	@ (800772c <_strtod_l+0x59c>)
 800768e:	428b      	cmp	r3, r1
 8007690:	4682      	mov	sl, r0
 8007692:	d898      	bhi.n	80075c6 <_strtod_l+0x436>
 8007694:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007698:	428b      	cmp	r3, r1
 800769a:	bf86      	itte	hi
 800769c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007730 <_strtod_l+0x5a0>
 80076a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80076a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80076a8:	2300      	movs	r3, #0
 80076aa:	9308      	str	r3, [sp, #32]
 80076ac:	e07a      	b.n	80077a4 <_strtod_l+0x614>
 80076ae:	07e2      	lsls	r2, r4, #31
 80076b0:	d505      	bpl.n	80076be <_strtod_l+0x52e>
 80076b2:	9b08      	ldr	r3, [sp, #32]
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	f7f8 ff9e 	bl	80005f8 <__aeabi_dmul>
 80076bc:	2301      	movs	r3, #1
 80076be:	9a08      	ldr	r2, [sp, #32]
 80076c0:	3208      	adds	r2, #8
 80076c2:	3601      	adds	r6, #1
 80076c4:	1064      	asrs	r4, r4, #1
 80076c6:	9208      	str	r2, [sp, #32]
 80076c8:	e7cd      	b.n	8007666 <_strtod_l+0x4d6>
 80076ca:	d0ed      	beq.n	80076a8 <_strtod_l+0x518>
 80076cc:	4264      	negs	r4, r4
 80076ce:	f014 020f 	ands.w	r2, r4, #15
 80076d2:	d00a      	beq.n	80076ea <_strtod_l+0x55a>
 80076d4:	4b12      	ldr	r3, [pc, #72]	@ (8007720 <_strtod_l+0x590>)
 80076d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076da:	4650      	mov	r0, sl
 80076dc:	4659      	mov	r1, fp
 80076de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e2:	f7f9 f8b3 	bl	800084c <__aeabi_ddiv>
 80076e6:	4682      	mov	sl, r0
 80076e8:	468b      	mov	fp, r1
 80076ea:	1124      	asrs	r4, r4, #4
 80076ec:	d0dc      	beq.n	80076a8 <_strtod_l+0x518>
 80076ee:	2c1f      	cmp	r4, #31
 80076f0:	dd20      	ble.n	8007734 <_strtod_l+0x5a4>
 80076f2:	2400      	movs	r4, #0
 80076f4:	46a0      	mov	r8, r4
 80076f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80076f8:	46a1      	mov	r9, r4
 80076fa:	9a05      	ldr	r2, [sp, #20]
 80076fc:	2322      	movs	r3, #34	@ 0x22
 80076fe:	f04f 0a00 	mov.w	sl, #0
 8007702:	f04f 0b00 	mov.w	fp, #0
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	e768      	b.n	80075dc <_strtod_l+0x44c>
 800770a:	bf00      	nop
 800770c:	0800bd75 	.word	0x0800bd75
 8007710:	0800bd14 	.word	0x0800bd14
 8007714:	0800bd6d 	.word	0x0800bd6d
 8007718:	0800be59 	.word	0x0800be59
 800771c:	0800be55 	.word	0x0800be55
 8007720:	0800bfc0 	.word	0x0800bfc0
 8007724:	0800bf98 	.word	0x0800bf98
 8007728:	7ff00000 	.word	0x7ff00000
 800772c:	7ca00000 	.word	0x7ca00000
 8007730:	7fefffff 	.word	0x7fefffff
 8007734:	f014 0310 	ands.w	r3, r4, #16
 8007738:	bf18      	it	ne
 800773a:	236a      	movne	r3, #106	@ 0x6a
 800773c:	4ea9      	ldr	r6, [pc, #676]	@ (80079e4 <_strtod_l+0x854>)
 800773e:	9308      	str	r3, [sp, #32]
 8007740:	4650      	mov	r0, sl
 8007742:	4659      	mov	r1, fp
 8007744:	2300      	movs	r3, #0
 8007746:	07e2      	lsls	r2, r4, #31
 8007748:	d504      	bpl.n	8007754 <_strtod_l+0x5c4>
 800774a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800774e:	f7f8 ff53 	bl	80005f8 <__aeabi_dmul>
 8007752:	2301      	movs	r3, #1
 8007754:	1064      	asrs	r4, r4, #1
 8007756:	f106 0608 	add.w	r6, r6, #8
 800775a:	d1f4      	bne.n	8007746 <_strtod_l+0x5b6>
 800775c:	b10b      	cbz	r3, 8007762 <_strtod_l+0x5d2>
 800775e:	4682      	mov	sl, r0
 8007760:	468b      	mov	fp, r1
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	b1b3      	cbz	r3, 8007794 <_strtod_l+0x604>
 8007766:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800776a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800776e:	2b00      	cmp	r3, #0
 8007770:	4659      	mov	r1, fp
 8007772:	dd0f      	ble.n	8007794 <_strtod_l+0x604>
 8007774:	2b1f      	cmp	r3, #31
 8007776:	dd55      	ble.n	8007824 <_strtod_l+0x694>
 8007778:	2b34      	cmp	r3, #52	@ 0x34
 800777a:	bfde      	ittt	le
 800777c:	f04f 33ff 	movle.w	r3, #4294967295
 8007780:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007784:	4093      	lslle	r3, r2
 8007786:	f04f 0a00 	mov.w	sl, #0
 800778a:	bfcc      	ite	gt
 800778c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007790:	ea03 0b01 	andle.w	fp, r3, r1
 8007794:	2200      	movs	r2, #0
 8007796:	2300      	movs	r3, #0
 8007798:	4650      	mov	r0, sl
 800779a:	4659      	mov	r1, fp
 800779c:	f7f9 f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d1a6      	bne.n	80076f2 <_strtod_l+0x562>
 80077a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80077aa:	9805      	ldr	r0, [sp, #20]
 80077ac:	462b      	mov	r3, r5
 80077ae:	463a      	mov	r2, r7
 80077b0:	f002 ff02 	bl	800a5b8 <__s2b>
 80077b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f43f af05 	beq.w	80075c6 <_strtod_l+0x436>
 80077bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077be:	2a00      	cmp	r2, #0
 80077c0:	eba9 0308 	sub.w	r3, r9, r8
 80077c4:	bfa8      	it	ge
 80077c6:	2300      	movge	r3, #0
 80077c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80077ca:	2400      	movs	r4, #0
 80077cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80077d0:	9316      	str	r3, [sp, #88]	@ 0x58
 80077d2:	46a0      	mov	r8, r4
 80077d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077d6:	9805      	ldr	r0, [sp, #20]
 80077d8:	6859      	ldr	r1, [r3, #4]
 80077da:	f002 fe45 	bl	800a468 <_Balloc>
 80077de:	4681      	mov	r9, r0
 80077e0:	2800      	cmp	r0, #0
 80077e2:	f43f aef4 	beq.w	80075ce <_strtod_l+0x43e>
 80077e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077e8:	691a      	ldr	r2, [r3, #16]
 80077ea:	3202      	adds	r2, #2
 80077ec:	f103 010c 	add.w	r1, r3, #12
 80077f0:	0092      	lsls	r2, r2, #2
 80077f2:	300c      	adds	r0, #12
 80077f4:	f001 fb63 	bl	8008ebe <memcpy>
 80077f8:	ec4b ab10 	vmov	d0, sl, fp
 80077fc:	9805      	ldr	r0, [sp, #20]
 80077fe:	aa1c      	add	r2, sp, #112	@ 0x70
 8007800:	a91b      	add	r1, sp, #108	@ 0x6c
 8007802:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007806:	f003 fa13 	bl	800ac30 <__d2b>
 800780a:	901a      	str	r0, [sp, #104]	@ 0x68
 800780c:	2800      	cmp	r0, #0
 800780e:	f43f aede 	beq.w	80075ce <_strtod_l+0x43e>
 8007812:	9805      	ldr	r0, [sp, #20]
 8007814:	2101      	movs	r1, #1
 8007816:	f002 ff65 	bl	800a6e4 <__i2b>
 800781a:	4680      	mov	r8, r0
 800781c:	b948      	cbnz	r0, 8007832 <_strtod_l+0x6a2>
 800781e:	f04f 0800 	mov.w	r8, #0
 8007822:	e6d4      	b.n	80075ce <_strtod_l+0x43e>
 8007824:	f04f 32ff 	mov.w	r2, #4294967295
 8007828:	fa02 f303 	lsl.w	r3, r2, r3
 800782c:	ea03 0a0a 	and.w	sl, r3, sl
 8007830:	e7b0      	b.n	8007794 <_strtod_l+0x604>
 8007832:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007834:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007836:	2d00      	cmp	r5, #0
 8007838:	bfab      	itete	ge
 800783a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800783c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800783e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007840:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007842:	bfac      	ite	ge
 8007844:	18ef      	addge	r7, r5, r3
 8007846:	1b5e      	sublt	r6, r3, r5
 8007848:	9b08      	ldr	r3, [sp, #32]
 800784a:	1aed      	subs	r5, r5, r3
 800784c:	4415      	add	r5, r2
 800784e:	4b66      	ldr	r3, [pc, #408]	@ (80079e8 <_strtod_l+0x858>)
 8007850:	3d01      	subs	r5, #1
 8007852:	429d      	cmp	r5, r3
 8007854:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007858:	da50      	bge.n	80078fc <_strtod_l+0x76c>
 800785a:	1b5b      	subs	r3, r3, r5
 800785c:	2b1f      	cmp	r3, #31
 800785e:	eba2 0203 	sub.w	r2, r2, r3
 8007862:	f04f 0101 	mov.w	r1, #1
 8007866:	dc3d      	bgt.n	80078e4 <_strtod_l+0x754>
 8007868:	fa01 f303 	lsl.w	r3, r1, r3
 800786c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800786e:	2300      	movs	r3, #0
 8007870:	9310      	str	r3, [sp, #64]	@ 0x40
 8007872:	18bd      	adds	r5, r7, r2
 8007874:	9b08      	ldr	r3, [sp, #32]
 8007876:	42af      	cmp	r7, r5
 8007878:	4416      	add	r6, r2
 800787a:	441e      	add	r6, r3
 800787c:	463b      	mov	r3, r7
 800787e:	bfa8      	it	ge
 8007880:	462b      	movge	r3, r5
 8007882:	42b3      	cmp	r3, r6
 8007884:	bfa8      	it	ge
 8007886:	4633      	movge	r3, r6
 8007888:	2b00      	cmp	r3, #0
 800788a:	bfc2      	ittt	gt
 800788c:	1aed      	subgt	r5, r5, r3
 800788e:	1af6      	subgt	r6, r6, r3
 8007890:	1aff      	subgt	r7, r7, r3
 8007892:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007894:	2b00      	cmp	r3, #0
 8007896:	dd16      	ble.n	80078c6 <_strtod_l+0x736>
 8007898:	4641      	mov	r1, r8
 800789a:	9805      	ldr	r0, [sp, #20]
 800789c:	461a      	mov	r2, r3
 800789e:	f002 ffe1 	bl	800a864 <__pow5mult>
 80078a2:	4680      	mov	r8, r0
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d0ba      	beq.n	800781e <_strtod_l+0x68e>
 80078a8:	4601      	mov	r1, r0
 80078aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80078ac:	9805      	ldr	r0, [sp, #20]
 80078ae:	f002 ff2f 	bl	800a710 <__multiply>
 80078b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80078b4:	2800      	cmp	r0, #0
 80078b6:	f43f ae8a 	beq.w	80075ce <_strtod_l+0x43e>
 80078ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078bc:	9805      	ldr	r0, [sp, #20]
 80078be:	f002 fe13 	bl	800a4e8 <_Bfree>
 80078c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80078c6:	2d00      	cmp	r5, #0
 80078c8:	dc1d      	bgt.n	8007906 <_strtod_l+0x776>
 80078ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	dd23      	ble.n	8007918 <_strtod_l+0x788>
 80078d0:	4649      	mov	r1, r9
 80078d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80078d4:	9805      	ldr	r0, [sp, #20]
 80078d6:	f002 ffc5 	bl	800a864 <__pow5mult>
 80078da:	4681      	mov	r9, r0
 80078dc:	b9e0      	cbnz	r0, 8007918 <_strtod_l+0x788>
 80078de:	f04f 0900 	mov.w	r9, #0
 80078e2:	e674      	b.n	80075ce <_strtod_l+0x43e>
 80078e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80078e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80078ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80078f0:	35e2      	adds	r5, #226	@ 0xe2
 80078f2:	fa01 f305 	lsl.w	r3, r1, r5
 80078f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80078f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80078fa:	e7ba      	b.n	8007872 <_strtod_l+0x6e2>
 80078fc:	2300      	movs	r3, #0
 80078fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007900:	2301      	movs	r3, #1
 8007902:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007904:	e7b5      	b.n	8007872 <_strtod_l+0x6e2>
 8007906:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007908:	9805      	ldr	r0, [sp, #20]
 800790a:	462a      	mov	r2, r5
 800790c:	f003 f804 	bl	800a918 <__lshift>
 8007910:	901a      	str	r0, [sp, #104]	@ 0x68
 8007912:	2800      	cmp	r0, #0
 8007914:	d1d9      	bne.n	80078ca <_strtod_l+0x73a>
 8007916:	e65a      	b.n	80075ce <_strtod_l+0x43e>
 8007918:	2e00      	cmp	r6, #0
 800791a:	dd07      	ble.n	800792c <_strtod_l+0x79c>
 800791c:	4649      	mov	r1, r9
 800791e:	9805      	ldr	r0, [sp, #20]
 8007920:	4632      	mov	r2, r6
 8007922:	f002 fff9 	bl	800a918 <__lshift>
 8007926:	4681      	mov	r9, r0
 8007928:	2800      	cmp	r0, #0
 800792a:	d0d8      	beq.n	80078de <_strtod_l+0x74e>
 800792c:	2f00      	cmp	r7, #0
 800792e:	dd08      	ble.n	8007942 <_strtod_l+0x7b2>
 8007930:	4641      	mov	r1, r8
 8007932:	9805      	ldr	r0, [sp, #20]
 8007934:	463a      	mov	r2, r7
 8007936:	f002 ffef 	bl	800a918 <__lshift>
 800793a:	4680      	mov	r8, r0
 800793c:	2800      	cmp	r0, #0
 800793e:	f43f ae46 	beq.w	80075ce <_strtod_l+0x43e>
 8007942:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007944:	9805      	ldr	r0, [sp, #20]
 8007946:	464a      	mov	r2, r9
 8007948:	f003 f86e 	bl	800aa28 <__mdiff>
 800794c:	4604      	mov	r4, r0
 800794e:	2800      	cmp	r0, #0
 8007950:	f43f ae3d 	beq.w	80075ce <_strtod_l+0x43e>
 8007954:	68c3      	ldr	r3, [r0, #12]
 8007956:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007958:	2300      	movs	r3, #0
 800795a:	60c3      	str	r3, [r0, #12]
 800795c:	4641      	mov	r1, r8
 800795e:	f003 f847 	bl	800a9f0 <__mcmp>
 8007962:	2800      	cmp	r0, #0
 8007964:	da46      	bge.n	80079f4 <_strtod_l+0x864>
 8007966:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007968:	ea53 030a 	orrs.w	r3, r3, sl
 800796c:	d16c      	bne.n	8007a48 <_strtod_l+0x8b8>
 800796e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007972:	2b00      	cmp	r3, #0
 8007974:	d168      	bne.n	8007a48 <_strtod_l+0x8b8>
 8007976:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800797a:	0d1b      	lsrs	r3, r3, #20
 800797c:	051b      	lsls	r3, r3, #20
 800797e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007982:	d961      	bls.n	8007a48 <_strtod_l+0x8b8>
 8007984:	6963      	ldr	r3, [r4, #20]
 8007986:	b913      	cbnz	r3, 800798e <_strtod_l+0x7fe>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	2b01      	cmp	r3, #1
 800798c:	dd5c      	ble.n	8007a48 <_strtod_l+0x8b8>
 800798e:	4621      	mov	r1, r4
 8007990:	2201      	movs	r2, #1
 8007992:	9805      	ldr	r0, [sp, #20]
 8007994:	f002 ffc0 	bl	800a918 <__lshift>
 8007998:	4641      	mov	r1, r8
 800799a:	4604      	mov	r4, r0
 800799c:	f003 f828 	bl	800a9f0 <__mcmp>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	dd51      	ble.n	8007a48 <_strtod_l+0x8b8>
 80079a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079a8:	9a08      	ldr	r2, [sp, #32]
 80079aa:	0d1b      	lsrs	r3, r3, #20
 80079ac:	051b      	lsls	r3, r3, #20
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	d06b      	beq.n	8007a8a <_strtod_l+0x8fa>
 80079b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80079b6:	d868      	bhi.n	8007a8a <_strtod_l+0x8fa>
 80079b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80079bc:	f67f ae9d 	bls.w	80076fa <_strtod_l+0x56a>
 80079c0:	4b0a      	ldr	r3, [pc, #40]	@ (80079ec <_strtod_l+0x85c>)
 80079c2:	4650      	mov	r0, sl
 80079c4:	4659      	mov	r1, fp
 80079c6:	2200      	movs	r2, #0
 80079c8:	f7f8 fe16 	bl	80005f8 <__aeabi_dmul>
 80079cc:	4b08      	ldr	r3, [pc, #32]	@ (80079f0 <_strtod_l+0x860>)
 80079ce:	400b      	ands	r3, r1
 80079d0:	4682      	mov	sl, r0
 80079d2:	468b      	mov	fp, r1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f47f ae05 	bne.w	80075e4 <_strtod_l+0x454>
 80079da:	9a05      	ldr	r2, [sp, #20]
 80079dc:	2322      	movs	r3, #34	@ 0x22
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	e600      	b.n	80075e4 <_strtod_l+0x454>
 80079e2:	bf00      	nop
 80079e4:	0800bd40 	.word	0x0800bd40
 80079e8:	fffffc02 	.word	0xfffffc02
 80079ec:	39500000 	.word	0x39500000
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80079f8:	d165      	bne.n	8007ac6 <_strtod_l+0x936>
 80079fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80079fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a00:	b35a      	cbz	r2, 8007a5a <_strtod_l+0x8ca>
 8007a02:	4a9f      	ldr	r2, [pc, #636]	@ (8007c80 <_strtod_l+0xaf0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d12b      	bne.n	8007a60 <_strtod_l+0x8d0>
 8007a08:	9b08      	ldr	r3, [sp, #32]
 8007a0a:	4651      	mov	r1, sl
 8007a0c:	b303      	cbz	r3, 8007a50 <_strtod_l+0x8c0>
 8007a0e:	4b9d      	ldr	r3, [pc, #628]	@ (8007c84 <_strtod_l+0xaf4>)
 8007a10:	465a      	mov	r2, fp
 8007a12:	4013      	ands	r3, r2
 8007a14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007a18:	f04f 32ff 	mov.w	r2, #4294967295
 8007a1c:	d81b      	bhi.n	8007a56 <_strtod_l+0x8c6>
 8007a1e:	0d1b      	lsrs	r3, r3, #20
 8007a20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	4299      	cmp	r1, r3
 8007a2a:	d119      	bne.n	8007a60 <_strtod_l+0x8d0>
 8007a2c:	4b96      	ldr	r3, [pc, #600]	@ (8007c88 <_strtod_l+0xaf8>)
 8007a2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d102      	bne.n	8007a3a <_strtod_l+0x8aa>
 8007a34:	3101      	adds	r1, #1
 8007a36:	f43f adca 	beq.w	80075ce <_strtod_l+0x43e>
 8007a3a:	4b92      	ldr	r3, [pc, #584]	@ (8007c84 <_strtod_l+0xaf4>)
 8007a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a3e:	401a      	ands	r2, r3
 8007a40:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007a44:	f04f 0a00 	mov.w	sl, #0
 8007a48:	9b08      	ldr	r3, [sp, #32]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1b8      	bne.n	80079c0 <_strtod_l+0x830>
 8007a4e:	e5c9      	b.n	80075e4 <_strtod_l+0x454>
 8007a50:	f04f 33ff 	mov.w	r3, #4294967295
 8007a54:	e7e8      	b.n	8007a28 <_strtod_l+0x898>
 8007a56:	4613      	mov	r3, r2
 8007a58:	e7e6      	b.n	8007a28 <_strtod_l+0x898>
 8007a5a:	ea53 030a 	orrs.w	r3, r3, sl
 8007a5e:	d0a1      	beq.n	80079a4 <_strtod_l+0x814>
 8007a60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a62:	b1db      	cbz	r3, 8007a9c <_strtod_l+0x90c>
 8007a64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a66:	4213      	tst	r3, r2
 8007a68:	d0ee      	beq.n	8007a48 <_strtod_l+0x8b8>
 8007a6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a6c:	9a08      	ldr	r2, [sp, #32]
 8007a6e:	4650      	mov	r0, sl
 8007a70:	4659      	mov	r1, fp
 8007a72:	b1bb      	cbz	r3, 8007aa4 <_strtod_l+0x914>
 8007a74:	f7ff fb6b 	bl	800714e <sulp>
 8007a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a7c:	ec53 2b10 	vmov	r2, r3, d0
 8007a80:	f7f8 fc04 	bl	800028c <__adddf3>
 8007a84:	4682      	mov	sl, r0
 8007a86:	468b      	mov	fp, r1
 8007a88:	e7de      	b.n	8007a48 <_strtod_l+0x8b8>
 8007a8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007a8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a96:	f04f 3aff 	mov.w	sl, #4294967295
 8007a9a:	e7d5      	b.n	8007a48 <_strtod_l+0x8b8>
 8007a9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a9e:	ea13 0f0a 	tst.w	r3, sl
 8007aa2:	e7e1      	b.n	8007a68 <_strtod_l+0x8d8>
 8007aa4:	f7ff fb53 	bl	800714e <sulp>
 8007aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aac:	ec53 2b10 	vmov	r2, r3, d0
 8007ab0:	f7f8 fbea 	bl	8000288 <__aeabi_dsub>
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	4682      	mov	sl, r0
 8007aba:	468b      	mov	fp, r1
 8007abc:	f7f9 f804 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d0c1      	beq.n	8007a48 <_strtod_l+0x8b8>
 8007ac4:	e619      	b.n	80076fa <_strtod_l+0x56a>
 8007ac6:	4641      	mov	r1, r8
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f003 f909 	bl	800ace0 <__ratio>
 8007ace:	ec57 6b10 	vmov	r6, r7, d0
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f9 f808 	bl	8000af0 <__aeabi_dcmple>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d06f      	beq.n	8007bc4 <_strtod_l+0xa34>
 8007ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d17a      	bne.n	8007be0 <_strtod_l+0xa50>
 8007aea:	f1ba 0f00 	cmp.w	sl, #0
 8007aee:	d158      	bne.n	8007ba2 <_strtod_l+0xa12>
 8007af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007af2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d15a      	bne.n	8007bb0 <_strtod_l+0xa20>
 8007afa:	4b64      	ldr	r3, [pc, #400]	@ (8007c8c <_strtod_l+0xafc>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	4630      	mov	r0, r6
 8007b00:	4639      	mov	r1, r7
 8007b02:	f7f8 ffeb 	bl	8000adc <__aeabi_dcmplt>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d159      	bne.n	8007bbe <_strtod_l+0xa2e>
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4b60      	ldr	r3, [pc, #384]	@ (8007c90 <_strtod_l+0xb00>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	f7f8 fd71 	bl	80005f8 <__aeabi_dmul>
 8007b16:	4606      	mov	r6, r0
 8007b18:	460f      	mov	r7, r1
 8007b1a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007b1e:	9606      	str	r6, [sp, #24]
 8007b20:	9307      	str	r3, [sp, #28]
 8007b22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b26:	4d57      	ldr	r5, [pc, #348]	@ (8007c84 <_strtod_l+0xaf4>)
 8007b28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007b2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b2e:	401d      	ands	r5, r3
 8007b30:	4b58      	ldr	r3, [pc, #352]	@ (8007c94 <_strtod_l+0xb04>)
 8007b32:	429d      	cmp	r5, r3
 8007b34:	f040 80b2 	bne.w	8007c9c <_strtod_l+0xb0c>
 8007b38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007b3e:	ec4b ab10 	vmov	d0, sl, fp
 8007b42:	f003 f805 	bl	800ab50 <__ulp>
 8007b46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b4a:	ec51 0b10 	vmov	r0, r1, d0
 8007b4e:	f7f8 fd53 	bl	80005f8 <__aeabi_dmul>
 8007b52:	4652      	mov	r2, sl
 8007b54:	465b      	mov	r3, fp
 8007b56:	f7f8 fb99 	bl	800028c <__adddf3>
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4949      	ldr	r1, [pc, #292]	@ (8007c84 <_strtod_l+0xaf4>)
 8007b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8007c98 <_strtod_l+0xb08>)
 8007b60:	4019      	ands	r1, r3
 8007b62:	4291      	cmp	r1, r2
 8007b64:	4682      	mov	sl, r0
 8007b66:	d942      	bls.n	8007bee <_strtod_l+0xa5e>
 8007b68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b6a:	4b47      	ldr	r3, [pc, #284]	@ (8007c88 <_strtod_l+0xaf8>)
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d103      	bne.n	8007b78 <_strtod_l+0x9e8>
 8007b70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b72:	3301      	adds	r3, #1
 8007b74:	f43f ad2b 	beq.w	80075ce <_strtod_l+0x43e>
 8007b78:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007c88 <_strtod_l+0xaf8>
 8007b7c:	f04f 3aff 	mov.w	sl, #4294967295
 8007b80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b82:	9805      	ldr	r0, [sp, #20]
 8007b84:	f002 fcb0 	bl	800a4e8 <_Bfree>
 8007b88:	9805      	ldr	r0, [sp, #20]
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	f002 fcac 	bl	800a4e8 <_Bfree>
 8007b90:	9805      	ldr	r0, [sp, #20]
 8007b92:	4641      	mov	r1, r8
 8007b94:	f002 fca8 	bl	800a4e8 <_Bfree>
 8007b98:	9805      	ldr	r0, [sp, #20]
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	f002 fca4 	bl	800a4e8 <_Bfree>
 8007ba0:	e618      	b.n	80077d4 <_strtod_l+0x644>
 8007ba2:	f1ba 0f01 	cmp.w	sl, #1
 8007ba6:	d103      	bne.n	8007bb0 <_strtod_l+0xa20>
 8007ba8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f43f ada5 	beq.w	80076fa <_strtod_l+0x56a>
 8007bb0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007c60 <_strtod_l+0xad0>
 8007bb4:	4f35      	ldr	r7, [pc, #212]	@ (8007c8c <_strtod_l+0xafc>)
 8007bb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007bba:	2600      	movs	r6, #0
 8007bbc:	e7b1      	b.n	8007b22 <_strtod_l+0x992>
 8007bbe:	4f34      	ldr	r7, [pc, #208]	@ (8007c90 <_strtod_l+0xb00>)
 8007bc0:	2600      	movs	r6, #0
 8007bc2:	e7aa      	b.n	8007b1a <_strtod_l+0x98a>
 8007bc4:	4b32      	ldr	r3, [pc, #200]	@ (8007c90 <_strtod_l+0xb00>)
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	4639      	mov	r1, r7
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f7f8 fd14 	bl	80005f8 <__aeabi_dmul>
 8007bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	460f      	mov	r7, r1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d09f      	beq.n	8007b1a <_strtod_l+0x98a>
 8007bda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007bde:	e7a0      	b.n	8007b22 <_strtod_l+0x992>
 8007be0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007c68 <_strtod_l+0xad8>
 8007be4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007be8:	ec57 6b17 	vmov	r6, r7, d7
 8007bec:	e799      	b.n	8007b22 <_strtod_l+0x992>
 8007bee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1c1      	bne.n	8007b80 <_strtod_l+0x9f0>
 8007bfc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c00:	0d1b      	lsrs	r3, r3, #20
 8007c02:	051b      	lsls	r3, r3, #20
 8007c04:	429d      	cmp	r5, r3
 8007c06:	d1bb      	bne.n	8007b80 <_strtod_l+0x9f0>
 8007c08:	4630      	mov	r0, r6
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	f7f9 f854 	bl	8000cb8 <__aeabi_d2lz>
 8007c10:	f7f8 fcc4 	bl	800059c <__aeabi_l2d>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	4630      	mov	r0, r6
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f7f8 fb34 	bl	8000288 <__aeabi_dsub>
 8007c20:	460b      	mov	r3, r1
 8007c22:	4602      	mov	r2, r0
 8007c24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007c28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c2e:	ea46 060a 	orr.w	r6, r6, sl
 8007c32:	431e      	orrs	r6, r3
 8007c34:	d06f      	beq.n	8007d16 <_strtod_l+0xb86>
 8007c36:	a30e      	add	r3, pc, #56	@ (adr r3, 8007c70 <_strtod_l+0xae0>)
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f7f8 ff4e 	bl	8000adc <__aeabi_dcmplt>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	f47f accf 	bne.w	80075e4 <_strtod_l+0x454>
 8007c46:	a30c      	add	r3, pc, #48	@ (adr r3, 8007c78 <_strtod_l+0xae8>)
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c50:	f7f8 ff62 	bl	8000b18 <__aeabi_dcmpgt>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d093      	beq.n	8007b80 <_strtod_l+0x9f0>
 8007c58:	e4c4      	b.n	80075e4 <_strtod_l+0x454>
 8007c5a:	bf00      	nop
 8007c5c:	f3af 8000 	nop.w
 8007c60:	00000000 	.word	0x00000000
 8007c64:	bff00000 	.word	0xbff00000
 8007c68:	00000000 	.word	0x00000000
 8007c6c:	3ff00000 	.word	0x3ff00000
 8007c70:	94a03595 	.word	0x94a03595
 8007c74:	3fdfffff 	.word	0x3fdfffff
 8007c78:	35afe535 	.word	0x35afe535
 8007c7c:	3fe00000 	.word	0x3fe00000
 8007c80:	000fffff 	.word	0x000fffff
 8007c84:	7ff00000 	.word	0x7ff00000
 8007c88:	7fefffff 	.word	0x7fefffff
 8007c8c:	3ff00000 	.word	0x3ff00000
 8007c90:	3fe00000 	.word	0x3fe00000
 8007c94:	7fe00000 	.word	0x7fe00000
 8007c98:	7c9fffff 	.word	0x7c9fffff
 8007c9c:	9b08      	ldr	r3, [sp, #32]
 8007c9e:	b323      	cbz	r3, 8007cea <_strtod_l+0xb5a>
 8007ca0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007ca4:	d821      	bhi.n	8007cea <_strtod_l+0xb5a>
 8007ca6:	a328      	add	r3, pc, #160	@ (adr r3, 8007d48 <_strtod_l+0xbb8>)
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	4630      	mov	r0, r6
 8007cae:	4639      	mov	r1, r7
 8007cb0:	f7f8 ff1e 	bl	8000af0 <__aeabi_dcmple>
 8007cb4:	b1a0      	cbz	r0, 8007ce0 <_strtod_l+0xb50>
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f7f8 ff75 	bl	8000ba8 <__aeabi_d2uiz>
 8007cbe:	2801      	cmp	r0, #1
 8007cc0:	bf38      	it	cc
 8007cc2:	2001      	movcc	r0, #1
 8007cc4:	f7f8 fc1e 	bl	8000504 <__aeabi_ui2d>
 8007cc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460f      	mov	r7, r1
 8007cce:	b9fb      	cbnz	r3, 8007d10 <_strtod_l+0xb80>
 8007cd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007cd4:	9014      	str	r0, [sp, #80]	@ 0x50
 8007cd6:	9315      	str	r3, [sp, #84]	@ 0x54
 8007cd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007cdc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ce0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ce2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007ce6:	1b5b      	subs	r3, r3, r5
 8007ce8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007cea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007cee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007cf2:	f002 ff2d 	bl	800ab50 <__ulp>
 8007cf6:	4650      	mov	r0, sl
 8007cf8:	ec53 2b10 	vmov	r2, r3, d0
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	f7f8 fc7b 	bl	80005f8 <__aeabi_dmul>
 8007d02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007d06:	f7f8 fac1 	bl	800028c <__adddf3>
 8007d0a:	4682      	mov	sl, r0
 8007d0c:	468b      	mov	fp, r1
 8007d0e:	e770      	b.n	8007bf2 <_strtod_l+0xa62>
 8007d10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007d14:	e7e0      	b.n	8007cd8 <_strtod_l+0xb48>
 8007d16:	a30e      	add	r3, pc, #56	@ (adr r3, 8007d50 <_strtod_l+0xbc0>)
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f7f8 fede 	bl	8000adc <__aeabi_dcmplt>
 8007d20:	e798      	b.n	8007c54 <_strtod_l+0xac4>
 8007d22:	2300      	movs	r3, #0
 8007d24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007d28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	f7ff ba6d 	b.w	800720a <_strtod_l+0x7a>
 8007d30:	2a65      	cmp	r2, #101	@ 0x65
 8007d32:	f43f ab66 	beq.w	8007402 <_strtod_l+0x272>
 8007d36:	2a45      	cmp	r2, #69	@ 0x45
 8007d38:	f43f ab63 	beq.w	8007402 <_strtod_l+0x272>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	f7ff bb9e 	b.w	800747e <_strtod_l+0x2ee>
 8007d42:	bf00      	nop
 8007d44:	f3af 8000 	nop.w
 8007d48:	ffc00000 	.word	0xffc00000
 8007d4c:	41dfffff 	.word	0x41dfffff
 8007d50:	94a03595 	.word	0x94a03595
 8007d54:	3fcfffff 	.word	0x3fcfffff

08007d58 <_strtod_r>:
 8007d58:	4b01      	ldr	r3, [pc, #4]	@ (8007d60 <_strtod_r+0x8>)
 8007d5a:	f7ff ba19 	b.w	8007190 <_strtod_l>
 8007d5e:	bf00      	nop
 8007d60:	20000018 	.word	0x20000018

08007d64 <strtod>:
 8007d64:	460a      	mov	r2, r1
 8007d66:	4601      	mov	r1, r0
 8007d68:	4802      	ldr	r0, [pc, #8]	@ (8007d74 <strtod+0x10>)
 8007d6a:	4b03      	ldr	r3, [pc, #12]	@ (8007d78 <strtod+0x14>)
 8007d6c:	6800      	ldr	r0, [r0, #0]
 8007d6e:	f7ff ba0f 	b.w	8007190 <_strtod_l>
 8007d72:	bf00      	nop
 8007d74:	20000184 	.word	0x20000184
 8007d78:	20000018 	.word	0x20000018

08007d7c <__cvt>:
 8007d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d80:	ec57 6b10 	vmov	r6, r7, d0
 8007d84:	2f00      	cmp	r7, #0
 8007d86:	460c      	mov	r4, r1
 8007d88:	4619      	mov	r1, r3
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	bfbb      	ittet	lt
 8007d8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007d92:	461f      	movlt	r7, r3
 8007d94:	2300      	movge	r3, #0
 8007d96:	232d      	movlt	r3, #45	@ 0x2d
 8007d98:	700b      	strb	r3, [r1, #0]
 8007d9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007da0:	4691      	mov	r9, r2
 8007da2:	f023 0820 	bic.w	r8, r3, #32
 8007da6:	bfbc      	itt	lt
 8007da8:	4632      	movlt	r2, r6
 8007daa:	4616      	movlt	r6, r2
 8007dac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007db0:	d005      	beq.n	8007dbe <__cvt+0x42>
 8007db2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007db6:	d100      	bne.n	8007dba <__cvt+0x3e>
 8007db8:	3401      	adds	r4, #1
 8007dba:	2102      	movs	r1, #2
 8007dbc:	e000      	b.n	8007dc0 <__cvt+0x44>
 8007dbe:	2103      	movs	r1, #3
 8007dc0:	ab03      	add	r3, sp, #12
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	ab02      	add	r3, sp, #8
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	ec47 6b10 	vmov	d0, r6, r7
 8007dcc:	4653      	mov	r3, sl
 8007dce:	4622      	mov	r2, r4
 8007dd0:	f001 f93a 	bl	8009048 <_dtoa_r>
 8007dd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007dd8:	4605      	mov	r5, r0
 8007dda:	d119      	bne.n	8007e10 <__cvt+0x94>
 8007ddc:	f019 0f01 	tst.w	r9, #1
 8007de0:	d00e      	beq.n	8007e00 <__cvt+0x84>
 8007de2:	eb00 0904 	add.w	r9, r0, r4
 8007de6:	2200      	movs	r2, #0
 8007de8:	2300      	movs	r3, #0
 8007dea:	4630      	mov	r0, r6
 8007dec:	4639      	mov	r1, r7
 8007dee:	f7f8 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007df2:	b108      	cbz	r0, 8007df8 <__cvt+0x7c>
 8007df4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007df8:	2230      	movs	r2, #48	@ 0x30
 8007dfa:	9b03      	ldr	r3, [sp, #12]
 8007dfc:	454b      	cmp	r3, r9
 8007dfe:	d31e      	bcc.n	8007e3e <__cvt+0xc2>
 8007e00:	9b03      	ldr	r3, [sp, #12]
 8007e02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e04:	1b5b      	subs	r3, r3, r5
 8007e06:	4628      	mov	r0, r5
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	b004      	add	sp, #16
 8007e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e14:	eb00 0904 	add.w	r9, r0, r4
 8007e18:	d1e5      	bne.n	8007de6 <__cvt+0x6a>
 8007e1a:	7803      	ldrb	r3, [r0, #0]
 8007e1c:	2b30      	cmp	r3, #48	@ 0x30
 8007e1e:	d10a      	bne.n	8007e36 <__cvt+0xba>
 8007e20:	2200      	movs	r2, #0
 8007e22:	2300      	movs	r3, #0
 8007e24:	4630      	mov	r0, r6
 8007e26:	4639      	mov	r1, r7
 8007e28:	f7f8 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e2c:	b918      	cbnz	r0, 8007e36 <__cvt+0xba>
 8007e2e:	f1c4 0401 	rsb	r4, r4, #1
 8007e32:	f8ca 4000 	str.w	r4, [sl]
 8007e36:	f8da 3000 	ldr.w	r3, [sl]
 8007e3a:	4499      	add	r9, r3
 8007e3c:	e7d3      	b.n	8007de6 <__cvt+0x6a>
 8007e3e:	1c59      	adds	r1, r3, #1
 8007e40:	9103      	str	r1, [sp, #12]
 8007e42:	701a      	strb	r2, [r3, #0]
 8007e44:	e7d9      	b.n	8007dfa <__cvt+0x7e>

08007e46 <__exponent>:
 8007e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e48:	2900      	cmp	r1, #0
 8007e4a:	bfba      	itte	lt
 8007e4c:	4249      	neglt	r1, r1
 8007e4e:	232d      	movlt	r3, #45	@ 0x2d
 8007e50:	232b      	movge	r3, #43	@ 0x2b
 8007e52:	2909      	cmp	r1, #9
 8007e54:	7002      	strb	r2, [r0, #0]
 8007e56:	7043      	strb	r3, [r0, #1]
 8007e58:	dd29      	ble.n	8007eae <__exponent+0x68>
 8007e5a:	f10d 0307 	add.w	r3, sp, #7
 8007e5e:	461d      	mov	r5, r3
 8007e60:	270a      	movs	r7, #10
 8007e62:	461a      	mov	r2, r3
 8007e64:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e68:	fb07 1416 	mls	r4, r7, r6, r1
 8007e6c:	3430      	adds	r4, #48	@ 0x30
 8007e6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e72:	460c      	mov	r4, r1
 8007e74:	2c63      	cmp	r4, #99	@ 0x63
 8007e76:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	dcf1      	bgt.n	8007e62 <__exponent+0x1c>
 8007e7e:	3130      	adds	r1, #48	@ 0x30
 8007e80:	1e94      	subs	r4, r2, #2
 8007e82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e86:	1c41      	adds	r1, r0, #1
 8007e88:	4623      	mov	r3, r4
 8007e8a:	42ab      	cmp	r3, r5
 8007e8c:	d30a      	bcc.n	8007ea4 <__exponent+0x5e>
 8007e8e:	f10d 0309 	add.w	r3, sp, #9
 8007e92:	1a9b      	subs	r3, r3, r2
 8007e94:	42ac      	cmp	r4, r5
 8007e96:	bf88      	it	hi
 8007e98:	2300      	movhi	r3, #0
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	4403      	add	r3, r0
 8007e9e:	1a18      	subs	r0, r3, r0
 8007ea0:	b003      	add	sp, #12
 8007ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ea8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007eac:	e7ed      	b.n	8007e8a <__exponent+0x44>
 8007eae:	2330      	movs	r3, #48	@ 0x30
 8007eb0:	3130      	adds	r1, #48	@ 0x30
 8007eb2:	7083      	strb	r3, [r0, #2]
 8007eb4:	70c1      	strb	r1, [r0, #3]
 8007eb6:	1d03      	adds	r3, r0, #4
 8007eb8:	e7f1      	b.n	8007e9e <__exponent+0x58>
	...

08007ebc <_printf_float>:
 8007ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	b08d      	sub	sp, #52	@ 0x34
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007ec8:	4616      	mov	r6, r2
 8007eca:	461f      	mov	r7, r3
 8007ecc:	4605      	mov	r5, r0
 8007ece:	f000 ff7f 	bl	8008dd0 <_localeconv_r>
 8007ed2:	6803      	ldr	r3, [r0, #0]
 8007ed4:	9304      	str	r3, [sp, #16]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7f8 f9ca 	bl	8000270 <strlen>
 8007edc:	2300      	movs	r3, #0
 8007ede:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee4:	9005      	str	r0, [sp, #20]
 8007ee6:	3307      	adds	r3, #7
 8007ee8:	f023 0307 	bic.w	r3, r3, #7
 8007eec:	f103 0208 	add.w	r2, r3, #8
 8007ef0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ef4:	f8d4 b000 	ldr.w	fp, [r4]
 8007ef8:	f8c8 2000 	str.w	r2, [r8]
 8007efc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f04:	9307      	str	r3, [sp, #28]
 8007f06:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f12:	4b9c      	ldr	r3, [pc, #624]	@ (8008184 <_printf_float+0x2c8>)
 8007f14:	f04f 32ff 	mov.w	r2, #4294967295
 8007f18:	f7f8 fe08 	bl	8000b2c <__aeabi_dcmpun>
 8007f1c:	bb70      	cbnz	r0, 8007f7c <_printf_float+0xc0>
 8007f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f22:	4b98      	ldr	r3, [pc, #608]	@ (8008184 <_printf_float+0x2c8>)
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295
 8007f28:	f7f8 fde2 	bl	8000af0 <__aeabi_dcmple>
 8007f2c:	bb30      	cbnz	r0, 8007f7c <_printf_float+0xc0>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2300      	movs	r3, #0
 8007f32:	4640      	mov	r0, r8
 8007f34:	4649      	mov	r1, r9
 8007f36:	f7f8 fdd1 	bl	8000adc <__aeabi_dcmplt>
 8007f3a:	b110      	cbz	r0, 8007f42 <_printf_float+0x86>
 8007f3c:	232d      	movs	r3, #45	@ 0x2d
 8007f3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f42:	4a91      	ldr	r2, [pc, #580]	@ (8008188 <_printf_float+0x2cc>)
 8007f44:	4b91      	ldr	r3, [pc, #580]	@ (800818c <_printf_float+0x2d0>)
 8007f46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f4a:	bf94      	ite	ls
 8007f4c:	4690      	movls	r8, r2
 8007f4e:	4698      	movhi	r8, r3
 8007f50:	2303      	movs	r3, #3
 8007f52:	6123      	str	r3, [r4, #16]
 8007f54:	f02b 0304 	bic.w	r3, fp, #4
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	f04f 0900 	mov.w	r9, #0
 8007f5e:	9700      	str	r7, [sp, #0]
 8007f60:	4633      	mov	r3, r6
 8007f62:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f64:	4621      	mov	r1, r4
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 f9d2 	bl	8008310 <_printf_common>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f040 808d 	bne.w	800808c <_printf_float+0x1d0>
 8007f72:	f04f 30ff 	mov.w	r0, #4294967295
 8007f76:	b00d      	add	sp, #52	@ 0x34
 8007f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	464b      	mov	r3, r9
 8007f80:	4640      	mov	r0, r8
 8007f82:	4649      	mov	r1, r9
 8007f84:	f7f8 fdd2 	bl	8000b2c <__aeabi_dcmpun>
 8007f88:	b140      	cbz	r0, 8007f9c <_printf_float+0xe0>
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	bfbc      	itt	lt
 8007f90:	232d      	movlt	r3, #45	@ 0x2d
 8007f92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f96:	4a7e      	ldr	r2, [pc, #504]	@ (8008190 <_printf_float+0x2d4>)
 8007f98:	4b7e      	ldr	r3, [pc, #504]	@ (8008194 <_printf_float+0x2d8>)
 8007f9a:	e7d4      	b.n	8007f46 <_printf_float+0x8a>
 8007f9c:	6863      	ldr	r3, [r4, #4]
 8007f9e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007fa2:	9206      	str	r2, [sp, #24]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	d13b      	bne.n	8008020 <_printf_float+0x164>
 8007fa8:	2306      	movs	r3, #6
 8007faa:	6063      	str	r3, [r4, #4]
 8007fac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	6022      	str	r2, [r4, #0]
 8007fb4:	9303      	str	r3, [sp, #12]
 8007fb6:	ab0a      	add	r3, sp, #40	@ 0x28
 8007fb8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007fbc:	ab09      	add	r3, sp, #36	@ 0x24
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	6861      	ldr	r1, [r4, #4]
 8007fc2:	ec49 8b10 	vmov	d0, r8, r9
 8007fc6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f7ff fed6 	bl	8007d7c <__cvt>
 8007fd0:	9b06      	ldr	r3, [sp, #24]
 8007fd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fd4:	2b47      	cmp	r3, #71	@ 0x47
 8007fd6:	4680      	mov	r8, r0
 8007fd8:	d129      	bne.n	800802e <_printf_float+0x172>
 8007fda:	1cc8      	adds	r0, r1, #3
 8007fdc:	db02      	blt.n	8007fe4 <_printf_float+0x128>
 8007fde:	6863      	ldr	r3, [r4, #4]
 8007fe0:	4299      	cmp	r1, r3
 8007fe2:	dd41      	ble.n	8008068 <_printf_float+0x1ac>
 8007fe4:	f1aa 0a02 	sub.w	sl, sl, #2
 8007fe8:	fa5f fa8a 	uxtb.w	sl, sl
 8007fec:	3901      	subs	r1, #1
 8007fee:	4652      	mov	r2, sl
 8007ff0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ff4:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ff6:	f7ff ff26 	bl	8007e46 <__exponent>
 8007ffa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ffc:	1813      	adds	r3, r2, r0
 8007ffe:	2a01      	cmp	r2, #1
 8008000:	4681      	mov	r9, r0
 8008002:	6123      	str	r3, [r4, #16]
 8008004:	dc02      	bgt.n	800800c <_printf_float+0x150>
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	07d2      	lsls	r2, r2, #31
 800800a:	d501      	bpl.n	8008010 <_printf_float+0x154>
 800800c:	3301      	adds	r3, #1
 800800e:	6123      	str	r3, [r4, #16]
 8008010:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008014:	2b00      	cmp	r3, #0
 8008016:	d0a2      	beq.n	8007f5e <_printf_float+0xa2>
 8008018:	232d      	movs	r3, #45	@ 0x2d
 800801a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800801e:	e79e      	b.n	8007f5e <_printf_float+0xa2>
 8008020:	9a06      	ldr	r2, [sp, #24]
 8008022:	2a47      	cmp	r2, #71	@ 0x47
 8008024:	d1c2      	bne.n	8007fac <_printf_float+0xf0>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1c0      	bne.n	8007fac <_printf_float+0xf0>
 800802a:	2301      	movs	r3, #1
 800802c:	e7bd      	b.n	8007faa <_printf_float+0xee>
 800802e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008032:	d9db      	bls.n	8007fec <_printf_float+0x130>
 8008034:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008038:	d118      	bne.n	800806c <_printf_float+0x1b0>
 800803a:	2900      	cmp	r1, #0
 800803c:	6863      	ldr	r3, [r4, #4]
 800803e:	dd0b      	ble.n	8008058 <_printf_float+0x19c>
 8008040:	6121      	str	r1, [r4, #16]
 8008042:	b913      	cbnz	r3, 800804a <_printf_float+0x18e>
 8008044:	6822      	ldr	r2, [r4, #0]
 8008046:	07d0      	lsls	r0, r2, #31
 8008048:	d502      	bpl.n	8008050 <_printf_float+0x194>
 800804a:	3301      	adds	r3, #1
 800804c:	440b      	add	r3, r1
 800804e:	6123      	str	r3, [r4, #16]
 8008050:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008052:	f04f 0900 	mov.w	r9, #0
 8008056:	e7db      	b.n	8008010 <_printf_float+0x154>
 8008058:	b913      	cbnz	r3, 8008060 <_printf_float+0x1a4>
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	07d2      	lsls	r2, r2, #31
 800805e:	d501      	bpl.n	8008064 <_printf_float+0x1a8>
 8008060:	3302      	adds	r3, #2
 8008062:	e7f4      	b.n	800804e <_printf_float+0x192>
 8008064:	2301      	movs	r3, #1
 8008066:	e7f2      	b.n	800804e <_printf_float+0x192>
 8008068:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800806c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800806e:	4299      	cmp	r1, r3
 8008070:	db05      	blt.n	800807e <_printf_float+0x1c2>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	6121      	str	r1, [r4, #16]
 8008076:	07d8      	lsls	r0, r3, #31
 8008078:	d5ea      	bpl.n	8008050 <_printf_float+0x194>
 800807a:	1c4b      	adds	r3, r1, #1
 800807c:	e7e7      	b.n	800804e <_printf_float+0x192>
 800807e:	2900      	cmp	r1, #0
 8008080:	bfd4      	ite	le
 8008082:	f1c1 0202 	rsble	r2, r1, #2
 8008086:	2201      	movgt	r2, #1
 8008088:	4413      	add	r3, r2
 800808a:	e7e0      	b.n	800804e <_printf_float+0x192>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	055a      	lsls	r2, r3, #21
 8008090:	d407      	bmi.n	80080a2 <_printf_float+0x1e6>
 8008092:	6923      	ldr	r3, [r4, #16]
 8008094:	4642      	mov	r2, r8
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	d12b      	bne.n	80080f8 <_printf_float+0x23c>
 80080a0:	e767      	b.n	8007f72 <_printf_float+0xb6>
 80080a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080a6:	f240 80dd 	bls.w	8008264 <_printf_float+0x3a8>
 80080aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080ae:	2200      	movs	r2, #0
 80080b0:	2300      	movs	r3, #0
 80080b2:	f7f8 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d033      	beq.n	8008122 <_printf_float+0x266>
 80080ba:	4a37      	ldr	r2, [pc, #220]	@ (8008198 <_printf_float+0x2dc>)
 80080bc:	2301      	movs	r3, #1
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b8      	blx	r7
 80080c4:	3001      	adds	r0, #1
 80080c6:	f43f af54 	beq.w	8007f72 <_printf_float+0xb6>
 80080ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80080ce:	4543      	cmp	r3, r8
 80080d0:	db02      	blt.n	80080d8 <_printf_float+0x21c>
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	07d8      	lsls	r0, r3, #31
 80080d6:	d50f      	bpl.n	80080f8 <_printf_float+0x23c>
 80080d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080dc:	4631      	mov	r1, r6
 80080de:	4628      	mov	r0, r5
 80080e0:	47b8      	blx	r7
 80080e2:	3001      	adds	r0, #1
 80080e4:	f43f af45 	beq.w	8007f72 <_printf_float+0xb6>
 80080e8:	f04f 0900 	mov.w	r9, #0
 80080ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80080f0:	f104 0a1a 	add.w	sl, r4, #26
 80080f4:	45c8      	cmp	r8, r9
 80080f6:	dc09      	bgt.n	800810c <_printf_float+0x250>
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	079b      	lsls	r3, r3, #30
 80080fc:	f100 8103 	bmi.w	8008306 <_printf_float+0x44a>
 8008100:	68e0      	ldr	r0, [r4, #12]
 8008102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008104:	4298      	cmp	r0, r3
 8008106:	bfb8      	it	lt
 8008108:	4618      	movlt	r0, r3
 800810a:	e734      	b.n	8007f76 <_printf_float+0xba>
 800810c:	2301      	movs	r3, #1
 800810e:	4652      	mov	r2, sl
 8008110:	4631      	mov	r1, r6
 8008112:	4628      	mov	r0, r5
 8008114:	47b8      	blx	r7
 8008116:	3001      	adds	r0, #1
 8008118:	f43f af2b 	beq.w	8007f72 <_printf_float+0xb6>
 800811c:	f109 0901 	add.w	r9, r9, #1
 8008120:	e7e8      	b.n	80080f4 <_printf_float+0x238>
 8008122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008124:	2b00      	cmp	r3, #0
 8008126:	dc39      	bgt.n	800819c <_printf_float+0x2e0>
 8008128:	4a1b      	ldr	r2, [pc, #108]	@ (8008198 <_printf_float+0x2dc>)
 800812a:	2301      	movs	r3, #1
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	f43f af1d 	beq.w	8007f72 <_printf_float+0xb6>
 8008138:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800813c:	ea59 0303 	orrs.w	r3, r9, r3
 8008140:	d102      	bne.n	8008148 <_printf_float+0x28c>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	07d9      	lsls	r1, r3, #31
 8008146:	d5d7      	bpl.n	80080f8 <_printf_float+0x23c>
 8008148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800814c:	4631      	mov	r1, r6
 800814e:	4628      	mov	r0, r5
 8008150:	47b8      	blx	r7
 8008152:	3001      	adds	r0, #1
 8008154:	f43f af0d 	beq.w	8007f72 <_printf_float+0xb6>
 8008158:	f04f 0a00 	mov.w	sl, #0
 800815c:	f104 0b1a 	add.w	fp, r4, #26
 8008160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008162:	425b      	negs	r3, r3
 8008164:	4553      	cmp	r3, sl
 8008166:	dc01      	bgt.n	800816c <_printf_float+0x2b0>
 8008168:	464b      	mov	r3, r9
 800816a:	e793      	b.n	8008094 <_printf_float+0x1d8>
 800816c:	2301      	movs	r3, #1
 800816e:	465a      	mov	r2, fp
 8008170:	4631      	mov	r1, r6
 8008172:	4628      	mov	r0, r5
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	f43f aefb 	beq.w	8007f72 <_printf_float+0xb6>
 800817c:	f10a 0a01 	add.w	sl, sl, #1
 8008180:	e7ee      	b.n	8008160 <_printf_float+0x2a4>
 8008182:	bf00      	nop
 8008184:	7fefffff 	.word	0x7fefffff
 8008188:	0800bd68 	.word	0x0800bd68
 800818c:	0800bd6c 	.word	0x0800bd6c
 8008190:	0800bd70 	.word	0x0800bd70
 8008194:	0800bd74 	.word	0x0800bd74
 8008198:	0800bd78 	.word	0x0800bd78
 800819c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800819e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081a2:	4553      	cmp	r3, sl
 80081a4:	bfa8      	it	ge
 80081a6:	4653      	movge	r3, sl
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	4699      	mov	r9, r3
 80081ac:	dc36      	bgt.n	800821c <_printf_float+0x360>
 80081ae:	f04f 0b00 	mov.w	fp, #0
 80081b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081b6:	f104 021a 	add.w	r2, r4, #26
 80081ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081bc:	9306      	str	r3, [sp, #24]
 80081be:	eba3 0309 	sub.w	r3, r3, r9
 80081c2:	455b      	cmp	r3, fp
 80081c4:	dc31      	bgt.n	800822a <_printf_float+0x36e>
 80081c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c8:	459a      	cmp	sl, r3
 80081ca:	dc3a      	bgt.n	8008242 <_printf_float+0x386>
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	07da      	lsls	r2, r3, #31
 80081d0:	d437      	bmi.n	8008242 <_printf_float+0x386>
 80081d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d4:	ebaa 0903 	sub.w	r9, sl, r3
 80081d8:	9b06      	ldr	r3, [sp, #24]
 80081da:	ebaa 0303 	sub.w	r3, sl, r3
 80081de:	4599      	cmp	r9, r3
 80081e0:	bfa8      	it	ge
 80081e2:	4699      	movge	r9, r3
 80081e4:	f1b9 0f00 	cmp.w	r9, #0
 80081e8:	dc33      	bgt.n	8008252 <_printf_float+0x396>
 80081ea:	f04f 0800 	mov.w	r8, #0
 80081ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081f2:	f104 0b1a 	add.w	fp, r4, #26
 80081f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f8:	ebaa 0303 	sub.w	r3, sl, r3
 80081fc:	eba3 0309 	sub.w	r3, r3, r9
 8008200:	4543      	cmp	r3, r8
 8008202:	f77f af79 	ble.w	80080f8 <_printf_float+0x23c>
 8008206:	2301      	movs	r3, #1
 8008208:	465a      	mov	r2, fp
 800820a:	4631      	mov	r1, r6
 800820c:	4628      	mov	r0, r5
 800820e:	47b8      	blx	r7
 8008210:	3001      	adds	r0, #1
 8008212:	f43f aeae 	beq.w	8007f72 <_printf_float+0xb6>
 8008216:	f108 0801 	add.w	r8, r8, #1
 800821a:	e7ec      	b.n	80081f6 <_printf_float+0x33a>
 800821c:	4642      	mov	r2, r8
 800821e:	4631      	mov	r1, r6
 8008220:	4628      	mov	r0, r5
 8008222:	47b8      	blx	r7
 8008224:	3001      	adds	r0, #1
 8008226:	d1c2      	bne.n	80081ae <_printf_float+0x2f2>
 8008228:	e6a3      	b.n	8007f72 <_printf_float+0xb6>
 800822a:	2301      	movs	r3, #1
 800822c:	4631      	mov	r1, r6
 800822e:	4628      	mov	r0, r5
 8008230:	9206      	str	r2, [sp, #24]
 8008232:	47b8      	blx	r7
 8008234:	3001      	adds	r0, #1
 8008236:	f43f ae9c 	beq.w	8007f72 <_printf_float+0xb6>
 800823a:	9a06      	ldr	r2, [sp, #24]
 800823c:	f10b 0b01 	add.w	fp, fp, #1
 8008240:	e7bb      	b.n	80081ba <_printf_float+0x2fe>
 8008242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008246:	4631      	mov	r1, r6
 8008248:	4628      	mov	r0, r5
 800824a:	47b8      	blx	r7
 800824c:	3001      	adds	r0, #1
 800824e:	d1c0      	bne.n	80081d2 <_printf_float+0x316>
 8008250:	e68f      	b.n	8007f72 <_printf_float+0xb6>
 8008252:	9a06      	ldr	r2, [sp, #24]
 8008254:	464b      	mov	r3, r9
 8008256:	4442      	add	r2, r8
 8008258:	4631      	mov	r1, r6
 800825a:	4628      	mov	r0, r5
 800825c:	47b8      	blx	r7
 800825e:	3001      	adds	r0, #1
 8008260:	d1c3      	bne.n	80081ea <_printf_float+0x32e>
 8008262:	e686      	b.n	8007f72 <_printf_float+0xb6>
 8008264:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008268:	f1ba 0f01 	cmp.w	sl, #1
 800826c:	dc01      	bgt.n	8008272 <_printf_float+0x3b6>
 800826e:	07db      	lsls	r3, r3, #31
 8008270:	d536      	bpl.n	80082e0 <_printf_float+0x424>
 8008272:	2301      	movs	r3, #1
 8008274:	4642      	mov	r2, r8
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	f43f ae78 	beq.w	8007f72 <_printf_float+0xb6>
 8008282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008286:	4631      	mov	r1, r6
 8008288:	4628      	mov	r0, r5
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	f43f ae70 	beq.w	8007f72 <_printf_float+0xb6>
 8008292:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008296:	2200      	movs	r2, #0
 8008298:	2300      	movs	r3, #0
 800829a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800829e:	f7f8 fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 80082a2:	b9c0      	cbnz	r0, 80082d6 <_printf_float+0x41a>
 80082a4:	4653      	mov	r3, sl
 80082a6:	f108 0201 	add.w	r2, r8, #1
 80082aa:	4631      	mov	r1, r6
 80082ac:	4628      	mov	r0, r5
 80082ae:	47b8      	blx	r7
 80082b0:	3001      	adds	r0, #1
 80082b2:	d10c      	bne.n	80082ce <_printf_float+0x412>
 80082b4:	e65d      	b.n	8007f72 <_printf_float+0xb6>
 80082b6:	2301      	movs	r3, #1
 80082b8:	465a      	mov	r2, fp
 80082ba:	4631      	mov	r1, r6
 80082bc:	4628      	mov	r0, r5
 80082be:	47b8      	blx	r7
 80082c0:	3001      	adds	r0, #1
 80082c2:	f43f ae56 	beq.w	8007f72 <_printf_float+0xb6>
 80082c6:	f108 0801 	add.w	r8, r8, #1
 80082ca:	45d0      	cmp	r8, sl
 80082cc:	dbf3      	blt.n	80082b6 <_printf_float+0x3fa>
 80082ce:	464b      	mov	r3, r9
 80082d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80082d4:	e6df      	b.n	8008096 <_printf_float+0x1da>
 80082d6:	f04f 0800 	mov.w	r8, #0
 80082da:	f104 0b1a 	add.w	fp, r4, #26
 80082de:	e7f4      	b.n	80082ca <_printf_float+0x40e>
 80082e0:	2301      	movs	r3, #1
 80082e2:	4642      	mov	r2, r8
 80082e4:	e7e1      	b.n	80082aa <_printf_float+0x3ee>
 80082e6:	2301      	movs	r3, #1
 80082e8:	464a      	mov	r2, r9
 80082ea:	4631      	mov	r1, r6
 80082ec:	4628      	mov	r0, r5
 80082ee:	47b8      	blx	r7
 80082f0:	3001      	adds	r0, #1
 80082f2:	f43f ae3e 	beq.w	8007f72 <_printf_float+0xb6>
 80082f6:	f108 0801 	add.w	r8, r8, #1
 80082fa:	68e3      	ldr	r3, [r4, #12]
 80082fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082fe:	1a5b      	subs	r3, r3, r1
 8008300:	4543      	cmp	r3, r8
 8008302:	dcf0      	bgt.n	80082e6 <_printf_float+0x42a>
 8008304:	e6fc      	b.n	8008100 <_printf_float+0x244>
 8008306:	f04f 0800 	mov.w	r8, #0
 800830a:	f104 0919 	add.w	r9, r4, #25
 800830e:	e7f4      	b.n	80082fa <_printf_float+0x43e>

08008310 <_printf_common>:
 8008310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008314:	4616      	mov	r6, r2
 8008316:	4698      	mov	r8, r3
 8008318:	688a      	ldr	r2, [r1, #8]
 800831a:	690b      	ldr	r3, [r1, #16]
 800831c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008320:	4293      	cmp	r3, r2
 8008322:	bfb8      	it	lt
 8008324:	4613      	movlt	r3, r2
 8008326:	6033      	str	r3, [r6, #0]
 8008328:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800832c:	4607      	mov	r7, r0
 800832e:	460c      	mov	r4, r1
 8008330:	b10a      	cbz	r2, 8008336 <_printf_common+0x26>
 8008332:	3301      	adds	r3, #1
 8008334:	6033      	str	r3, [r6, #0]
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	0699      	lsls	r1, r3, #26
 800833a:	bf42      	ittt	mi
 800833c:	6833      	ldrmi	r3, [r6, #0]
 800833e:	3302      	addmi	r3, #2
 8008340:	6033      	strmi	r3, [r6, #0]
 8008342:	6825      	ldr	r5, [r4, #0]
 8008344:	f015 0506 	ands.w	r5, r5, #6
 8008348:	d106      	bne.n	8008358 <_printf_common+0x48>
 800834a:	f104 0a19 	add.w	sl, r4, #25
 800834e:	68e3      	ldr	r3, [r4, #12]
 8008350:	6832      	ldr	r2, [r6, #0]
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	42ab      	cmp	r3, r5
 8008356:	dc26      	bgt.n	80083a6 <_printf_common+0x96>
 8008358:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	3b00      	subs	r3, #0
 8008360:	bf18      	it	ne
 8008362:	2301      	movne	r3, #1
 8008364:	0692      	lsls	r2, r2, #26
 8008366:	d42b      	bmi.n	80083c0 <_printf_common+0xb0>
 8008368:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800836c:	4641      	mov	r1, r8
 800836e:	4638      	mov	r0, r7
 8008370:	47c8      	blx	r9
 8008372:	3001      	adds	r0, #1
 8008374:	d01e      	beq.n	80083b4 <_printf_common+0xa4>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	6922      	ldr	r2, [r4, #16]
 800837a:	f003 0306 	and.w	r3, r3, #6
 800837e:	2b04      	cmp	r3, #4
 8008380:	bf02      	ittt	eq
 8008382:	68e5      	ldreq	r5, [r4, #12]
 8008384:	6833      	ldreq	r3, [r6, #0]
 8008386:	1aed      	subeq	r5, r5, r3
 8008388:	68a3      	ldr	r3, [r4, #8]
 800838a:	bf0c      	ite	eq
 800838c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008390:	2500      	movne	r5, #0
 8008392:	4293      	cmp	r3, r2
 8008394:	bfc4      	itt	gt
 8008396:	1a9b      	subgt	r3, r3, r2
 8008398:	18ed      	addgt	r5, r5, r3
 800839a:	2600      	movs	r6, #0
 800839c:	341a      	adds	r4, #26
 800839e:	42b5      	cmp	r5, r6
 80083a0:	d11a      	bne.n	80083d8 <_printf_common+0xc8>
 80083a2:	2000      	movs	r0, #0
 80083a4:	e008      	b.n	80083b8 <_printf_common+0xa8>
 80083a6:	2301      	movs	r3, #1
 80083a8:	4652      	mov	r2, sl
 80083aa:	4641      	mov	r1, r8
 80083ac:	4638      	mov	r0, r7
 80083ae:	47c8      	blx	r9
 80083b0:	3001      	adds	r0, #1
 80083b2:	d103      	bne.n	80083bc <_printf_common+0xac>
 80083b4:	f04f 30ff 	mov.w	r0, #4294967295
 80083b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083bc:	3501      	adds	r5, #1
 80083be:	e7c6      	b.n	800834e <_printf_common+0x3e>
 80083c0:	18e1      	adds	r1, r4, r3
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	2030      	movs	r0, #48	@ 0x30
 80083c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083ca:	4422      	add	r2, r4
 80083cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083d4:	3302      	adds	r3, #2
 80083d6:	e7c7      	b.n	8008368 <_printf_common+0x58>
 80083d8:	2301      	movs	r3, #1
 80083da:	4622      	mov	r2, r4
 80083dc:	4641      	mov	r1, r8
 80083de:	4638      	mov	r0, r7
 80083e0:	47c8      	blx	r9
 80083e2:	3001      	adds	r0, #1
 80083e4:	d0e6      	beq.n	80083b4 <_printf_common+0xa4>
 80083e6:	3601      	adds	r6, #1
 80083e8:	e7d9      	b.n	800839e <_printf_common+0x8e>
	...

080083ec <_printf_i>:
 80083ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	7e0f      	ldrb	r7, [r1, #24]
 80083f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083f4:	2f78      	cmp	r7, #120	@ 0x78
 80083f6:	4691      	mov	r9, r2
 80083f8:	4680      	mov	r8, r0
 80083fa:	460c      	mov	r4, r1
 80083fc:	469a      	mov	sl, r3
 80083fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008402:	d807      	bhi.n	8008414 <_printf_i+0x28>
 8008404:	2f62      	cmp	r7, #98	@ 0x62
 8008406:	d80a      	bhi.n	800841e <_printf_i+0x32>
 8008408:	2f00      	cmp	r7, #0
 800840a:	f000 80d2 	beq.w	80085b2 <_printf_i+0x1c6>
 800840e:	2f58      	cmp	r7, #88	@ 0x58
 8008410:	f000 80b9 	beq.w	8008586 <_printf_i+0x19a>
 8008414:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008418:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800841c:	e03a      	b.n	8008494 <_printf_i+0xa8>
 800841e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008422:	2b15      	cmp	r3, #21
 8008424:	d8f6      	bhi.n	8008414 <_printf_i+0x28>
 8008426:	a101      	add	r1, pc, #4	@ (adr r1, 800842c <_printf_i+0x40>)
 8008428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800842c:	08008485 	.word	0x08008485
 8008430:	08008499 	.word	0x08008499
 8008434:	08008415 	.word	0x08008415
 8008438:	08008415 	.word	0x08008415
 800843c:	08008415 	.word	0x08008415
 8008440:	08008415 	.word	0x08008415
 8008444:	08008499 	.word	0x08008499
 8008448:	08008415 	.word	0x08008415
 800844c:	08008415 	.word	0x08008415
 8008450:	08008415 	.word	0x08008415
 8008454:	08008415 	.word	0x08008415
 8008458:	08008599 	.word	0x08008599
 800845c:	080084c3 	.word	0x080084c3
 8008460:	08008553 	.word	0x08008553
 8008464:	08008415 	.word	0x08008415
 8008468:	08008415 	.word	0x08008415
 800846c:	080085bb 	.word	0x080085bb
 8008470:	08008415 	.word	0x08008415
 8008474:	080084c3 	.word	0x080084c3
 8008478:	08008415 	.word	0x08008415
 800847c:	08008415 	.word	0x08008415
 8008480:	0800855b 	.word	0x0800855b
 8008484:	6833      	ldr	r3, [r6, #0]
 8008486:	1d1a      	adds	r2, r3, #4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6032      	str	r2, [r6, #0]
 800848c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008490:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008494:	2301      	movs	r3, #1
 8008496:	e09d      	b.n	80085d4 <_printf_i+0x1e8>
 8008498:	6833      	ldr	r3, [r6, #0]
 800849a:	6820      	ldr	r0, [r4, #0]
 800849c:	1d19      	adds	r1, r3, #4
 800849e:	6031      	str	r1, [r6, #0]
 80084a0:	0606      	lsls	r6, r0, #24
 80084a2:	d501      	bpl.n	80084a8 <_printf_i+0xbc>
 80084a4:	681d      	ldr	r5, [r3, #0]
 80084a6:	e003      	b.n	80084b0 <_printf_i+0xc4>
 80084a8:	0645      	lsls	r5, r0, #25
 80084aa:	d5fb      	bpl.n	80084a4 <_printf_i+0xb8>
 80084ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084b0:	2d00      	cmp	r5, #0
 80084b2:	da03      	bge.n	80084bc <_printf_i+0xd0>
 80084b4:	232d      	movs	r3, #45	@ 0x2d
 80084b6:	426d      	negs	r5, r5
 80084b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084bc:	4859      	ldr	r0, [pc, #356]	@ (8008624 <_printf_i+0x238>)
 80084be:	230a      	movs	r3, #10
 80084c0:	e011      	b.n	80084e6 <_printf_i+0xfa>
 80084c2:	6821      	ldr	r1, [r4, #0]
 80084c4:	6833      	ldr	r3, [r6, #0]
 80084c6:	0608      	lsls	r0, r1, #24
 80084c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80084cc:	d402      	bmi.n	80084d4 <_printf_i+0xe8>
 80084ce:	0649      	lsls	r1, r1, #25
 80084d0:	bf48      	it	mi
 80084d2:	b2ad      	uxthmi	r5, r5
 80084d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80084d6:	4853      	ldr	r0, [pc, #332]	@ (8008624 <_printf_i+0x238>)
 80084d8:	6033      	str	r3, [r6, #0]
 80084da:	bf14      	ite	ne
 80084dc:	230a      	movne	r3, #10
 80084de:	2308      	moveq	r3, #8
 80084e0:	2100      	movs	r1, #0
 80084e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084e6:	6866      	ldr	r6, [r4, #4]
 80084e8:	60a6      	str	r6, [r4, #8]
 80084ea:	2e00      	cmp	r6, #0
 80084ec:	bfa2      	ittt	ge
 80084ee:	6821      	ldrge	r1, [r4, #0]
 80084f0:	f021 0104 	bicge.w	r1, r1, #4
 80084f4:	6021      	strge	r1, [r4, #0]
 80084f6:	b90d      	cbnz	r5, 80084fc <_printf_i+0x110>
 80084f8:	2e00      	cmp	r6, #0
 80084fa:	d04b      	beq.n	8008594 <_printf_i+0x1a8>
 80084fc:	4616      	mov	r6, r2
 80084fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8008502:	fb03 5711 	mls	r7, r3, r1, r5
 8008506:	5dc7      	ldrb	r7, [r0, r7]
 8008508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800850c:	462f      	mov	r7, r5
 800850e:	42bb      	cmp	r3, r7
 8008510:	460d      	mov	r5, r1
 8008512:	d9f4      	bls.n	80084fe <_printf_i+0x112>
 8008514:	2b08      	cmp	r3, #8
 8008516:	d10b      	bne.n	8008530 <_printf_i+0x144>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	07df      	lsls	r7, r3, #31
 800851c:	d508      	bpl.n	8008530 <_printf_i+0x144>
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	6861      	ldr	r1, [r4, #4]
 8008522:	4299      	cmp	r1, r3
 8008524:	bfde      	ittt	le
 8008526:	2330      	movle	r3, #48	@ 0x30
 8008528:	f806 3c01 	strble.w	r3, [r6, #-1]
 800852c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008530:	1b92      	subs	r2, r2, r6
 8008532:	6122      	str	r2, [r4, #16]
 8008534:	f8cd a000 	str.w	sl, [sp]
 8008538:	464b      	mov	r3, r9
 800853a:	aa03      	add	r2, sp, #12
 800853c:	4621      	mov	r1, r4
 800853e:	4640      	mov	r0, r8
 8008540:	f7ff fee6 	bl	8008310 <_printf_common>
 8008544:	3001      	adds	r0, #1
 8008546:	d14a      	bne.n	80085de <_printf_i+0x1f2>
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	b004      	add	sp, #16
 800854e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	f043 0320 	orr.w	r3, r3, #32
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	4833      	ldr	r0, [pc, #204]	@ (8008628 <_printf_i+0x23c>)
 800855c:	2778      	movs	r7, #120	@ 0x78
 800855e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	6831      	ldr	r1, [r6, #0]
 8008566:	061f      	lsls	r7, r3, #24
 8008568:	f851 5b04 	ldr.w	r5, [r1], #4
 800856c:	d402      	bmi.n	8008574 <_printf_i+0x188>
 800856e:	065f      	lsls	r7, r3, #25
 8008570:	bf48      	it	mi
 8008572:	b2ad      	uxthmi	r5, r5
 8008574:	6031      	str	r1, [r6, #0]
 8008576:	07d9      	lsls	r1, r3, #31
 8008578:	bf44      	itt	mi
 800857a:	f043 0320 	orrmi.w	r3, r3, #32
 800857e:	6023      	strmi	r3, [r4, #0]
 8008580:	b11d      	cbz	r5, 800858a <_printf_i+0x19e>
 8008582:	2310      	movs	r3, #16
 8008584:	e7ac      	b.n	80084e0 <_printf_i+0xf4>
 8008586:	4827      	ldr	r0, [pc, #156]	@ (8008624 <_printf_i+0x238>)
 8008588:	e7e9      	b.n	800855e <_printf_i+0x172>
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	f023 0320 	bic.w	r3, r3, #32
 8008590:	6023      	str	r3, [r4, #0]
 8008592:	e7f6      	b.n	8008582 <_printf_i+0x196>
 8008594:	4616      	mov	r6, r2
 8008596:	e7bd      	b.n	8008514 <_printf_i+0x128>
 8008598:	6833      	ldr	r3, [r6, #0]
 800859a:	6825      	ldr	r5, [r4, #0]
 800859c:	6961      	ldr	r1, [r4, #20]
 800859e:	1d18      	adds	r0, r3, #4
 80085a0:	6030      	str	r0, [r6, #0]
 80085a2:	062e      	lsls	r6, r5, #24
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	d501      	bpl.n	80085ac <_printf_i+0x1c0>
 80085a8:	6019      	str	r1, [r3, #0]
 80085aa:	e002      	b.n	80085b2 <_printf_i+0x1c6>
 80085ac:	0668      	lsls	r0, r5, #25
 80085ae:	d5fb      	bpl.n	80085a8 <_printf_i+0x1bc>
 80085b0:	8019      	strh	r1, [r3, #0]
 80085b2:	2300      	movs	r3, #0
 80085b4:	6123      	str	r3, [r4, #16]
 80085b6:	4616      	mov	r6, r2
 80085b8:	e7bc      	b.n	8008534 <_printf_i+0x148>
 80085ba:	6833      	ldr	r3, [r6, #0]
 80085bc:	1d1a      	adds	r2, r3, #4
 80085be:	6032      	str	r2, [r6, #0]
 80085c0:	681e      	ldr	r6, [r3, #0]
 80085c2:	6862      	ldr	r2, [r4, #4]
 80085c4:	2100      	movs	r1, #0
 80085c6:	4630      	mov	r0, r6
 80085c8:	f7f7 fe02 	bl	80001d0 <memchr>
 80085cc:	b108      	cbz	r0, 80085d2 <_printf_i+0x1e6>
 80085ce:	1b80      	subs	r0, r0, r6
 80085d0:	6060      	str	r0, [r4, #4]
 80085d2:	6863      	ldr	r3, [r4, #4]
 80085d4:	6123      	str	r3, [r4, #16]
 80085d6:	2300      	movs	r3, #0
 80085d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085dc:	e7aa      	b.n	8008534 <_printf_i+0x148>
 80085de:	6923      	ldr	r3, [r4, #16]
 80085e0:	4632      	mov	r2, r6
 80085e2:	4649      	mov	r1, r9
 80085e4:	4640      	mov	r0, r8
 80085e6:	47d0      	blx	sl
 80085e8:	3001      	adds	r0, #1
 80085ea:	d0ad      	beq.n	8008548 <_printf_i+0x15c>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	079b      	lsls	r3, r3, #30
 80085f0:	d413      	bmi.n	800861a <_printf_i+0x22e>
 80085f2:	68e0      	ldr	r0, [r4, #12]
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	4298      	cmp	r0, r3
 80085f8:	bfb8      	it	lt
 80085fa:	4618      	movlt	r0, r3
 80085fc:	e7a6      	b.n	800854c <_printf_i+0x160>
 80085fe:	2301      	movs	r3, #1
 8008600:	4632      	mov	r2, r6
 8008602:	4649      	mov	r1, r9
 8008604:	4640      	mov	r0, r8
 8008606:	47d0      	blx	sl
 8008608:	3001      	adds	r0, #1
 800860a:	d09d      	beq.n	8008548 <_printf_i+0x15c>
 800860c:	3501      	adds	r5, #1
 800860e:	68e3      	ldr	r3, [r4, #12]
 8008610:	9903      	ldr	r1, [sp, #12]
 8008612:	1a5b      	subs	r3, r3, r1
 8008614:	42ab      	cmp	r3, r5
 8008616:	dcf2      	bgt.n	80085fe <_printf_i+0x212>
 8008618:	e7eb      	b.n	80085f2 <_printf_i+0x206>
 800861a:	2500      	movs	r5, #0
 800861c:	f104 0619 	add.w	r6, r4, #25
 8008620:	e7f5      	b.n	800860e <_printf_i+0x222>
 8008622:	bf00      	nop
 8008624:	0800bd7a 	.word	0x0800bd7a
 8008628:	0800bd8b 	.word	0x0800bd8b

0800862c <_scanf_float>:
 800862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008630:	b087      	sub	sp, #28
 8008632:	4617      	mov	r7, r2
 8008634:	9303      	str	r3, [sp, #12]
 8008636:	688b      	ldr	r3, [r1, #8]
 8008638:	1e5a      	subs	r2, r3, #1
 800863a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800863e:	bf81      	itttt	hi
 8008640:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008644:	eb03 0b05 	addhi.w	fp, r3, r5
 8008648:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800864c:	608b      	strhi	r3, [r1, #8]
 800864e:	680b      	ldr	r3, [r1, #0]
 8008650:	460a      	mov	r2, r1
 8008652:	f04f 0500 	mov.w	r5, #0
 8008656:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800865a:	f842 3b1c 	str.w	r3, [r2], #28
 800865e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008662:	4680      	mov	r8, r0
 8008664:	460c      	mov	r4, r1
 8008666:	bf98      	it	ls
 8008668:	f04f 0b00 	movls.w	fp, #0
 800866c:	9201      	str	r2, [sp, #4]
 800866e:	4616      	mov	r6, r2
 8008670:	46aa      	mov	sl, r5
 8008672:	46a9      	mov	r9, r5
 8008674:	9502      	str	r5, [sp, #8]
 8008676:	68a2      	ldr	r2, [r4, #8]
 8008678:	b152      	cbz	r2, 8008690 <_scanf_float+0x64>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b4e      	cmp	r3, #78	@ 0x4e
 8008680:	d864      	bhi.n	800874c <_scanf_float+0x120>
 8008682:	2b40      	cmp	r3, #64	@ 0x40
 8008684:	d83c      	bhi.n	8008700 <_scanf_float+0xd4>
 8008686:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800868a:	b2c8      	uxtb	r0, r1
 800868c:	280e      	cmp	r0, #14
 800868e:	d93a      	bls.n	8008706 <_scanf_float+0xda>
 8008690:	f1b9 0f00 	cmp.w	r9, #0
 8008694:	d003      	beq.n	800869e <_scanf_float+0x72>
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086a2:	f1ba 0f01 	cmp.w	sl, #1
 80086a6:	f200 8117 	bhi.w	80088d8 <_scanf_float+0x2ac>
 80086aa:	9b01      	ldr	r3, [sp, #4]
 80086ac:	429e      	cmp	r6, r3
 80086ae:	f200 8108 	bhi.w	80088c2 <_scanf_float+0x296>
 80086b2:	2001      	movs	r0, #1
 80086b4:	b007      	add	sp, #28
 80086b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ba:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80086be:	2a0d      	cmp	r2, #13
 80086c0:	d8e6      	bhi.n	8008690 <_scanf_float+0x64>
 80086c2:	a101      	add	r1, pc, #4	@ (adr r1, 80086c8 <_scanf_float+0x9c>)
 80086c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086c8:	0800880f 	.word	0x0800880f
 80086cc:	08008691 	.word	0x08008691
 80086d0:	08008691 	.word	0x08008691
 80086d4:	08008691 	.word	0x08008691
 80086d8:	0800886f 	.word	0x0800886f
 80086dc:	08008847 	.word	0x08008847
 80086e0:	08008691 	.word	0x08008691
 80086e4:	08008691 	.word	0x08008691
 80086e8:	0800881d 	.word	0x0800881d
 80086ec:	08008691 	.word	0x08008691
 80086f0:	08008691 	.word	0x08008691
 80086f4:	08008691 	.word	0x08008691
 80086f8:	08008691 	.word	0x08008691
 80086fc:	080087d5 	.word	0x080087d5
 8008700:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008704:	e7db      	b.n	80086be <_scanf_float+0x92>
 8008706:	290e      	cmp	r1, #14
 8008708:	d8c2      	bhi.n	8008690 <_scanf_float+0x64>
 800870a:	a001      	add	r0, pc, #4	@ (adr r0, 8008710 <_scanf_float+0xe4>)
 800870c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008710:	080087c5 	.word	0x080087c5
 8008714:	08008691 	.word	0x08008691
 8008718:	080087c5 	.word	0x080087c5
 800871c:	0800885b 	.word	0x0800885b
 8008720:	08008691 	.word	0x08008691
 8008724:	0800876d 	.word	0x0800876d
 8008728:	080087ab 	.word	0x080087ab
 800872c:	080087ab 	.word	0x080087ab
 8008730:	080087ab 	.word	0x080087ab
 8008734:	080087ab 	.word	0x080087ab
 8008738:	080087ab 	.word	0x080087ab
 800873c:	080087ab 	.word	0x080087ab
 8008740:	080087ab 	.word	0x080087ab
 8008744:	080087ab 	.word	0x080087ab
 8008748:	080087ab 	.word	0x080087ab
 800874c:	2b6e      	cmp	r3, #110	@ 0x6e
 800874e:	d809      	bhi.n	8008764 <_scanf_float+0x138>
 8008750:	2b60      	cmp	r3, #96	@ 0x60
 8008752:	d8b2      	bhi.n	80086ba <_scanf_float+0x8e>
 8008754:	2b54      	cmp	r3, #84	@ 0x54
 8008756:	d07b      	beq.n	8008850 <_scanf_float+0x224>
 8008758:	2b59      	cmp	r3, #89	@ 0x59
 800875a:	d199      	bne.n	8008690 <_scanf_float+0x64>
 800875c:	2d07      	cmp	r5, #7
 800875e:	d197      	bne.n	8008690 <_scanf_float+0x64>
 8008760:	2508      	movs	r5, #8
 8008762:	e02c      	b.n	80087be <_scanf_float+0x192>
 8008764:	2b74      	cmp	r3, #116	@ 0x74
 8008766:	d073      	beq.n	8008850 <_scanf_float+0x224>
 8008768:	2b79      	cmp	r3, #121	@ 0x79
 800876a:	e7f6      	b.n	800875a <_scanf_float+0x12e>
 800876c:	6821      	ldr	r1, [r4, #0]
 800876e:	05c8      	lsls	r0, r1, #23
 8008770:	d51b      	bpl.n	80087aa <_scanf_float+0x17e>
 8008772:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008776:	6021      	str	r1, [r4, #0]
 8008778:	f109 0901 	add.w	r9, r9, #1
 800877c:	f1bb 0f00 	cmp.w	fp, #0
 8008780:	d003      	beq.n	800878a <_scanf_float+0x15e>
 8008782:	3201      	adds	r2, #1
 8008784:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008788:	60a2      	str	r2, [r4, #8]
 800878a:	68a3      	ldr	r3, [r4, #8]
 800878c:	3b01      	subs	r3, #1
 800878e:	60a3      	str	r3, [r4, #8]
 8008790:	6923      	ldr	r3, [r4, #16]
 8008792:	3301      	adds	r3, #1
 8008794:	6123      	str	r3, [r4, #16]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3b01      	subs	r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	607b      	str	r3, [r7, #4]
 800879e:	f340 8087 	ble.w	80088b0 <_scanf_float+0x284>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	3301      	adds	r3, #1
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	e765      	b.n	8008676 <_scanf_float+0x4a>
 80087aa:	eb1a 0105 	adds.w	r1, sl, r5
 80087ae:	f47f af6f 	bne.w	8008690 <_scanf_float+0x64>
 80087b2:	6822      	ldr	r2, [r4, #0]
 80087b4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80087b8:	6022      	str	r2, [r4, #0]
 80087ba:	460d      	mov	r5, r1
 80087bc:	468a      	mov	sl, r1
 80087be:	f806 3b01 	strb.w	r3, [r6], #1
 80087c2:	e7e2      	b.n	800878a <_scanf_float+0x15e>
 80087c4:	6822      	ldr	r2, [r4, #0]
 80087c6:	0610      	lsls	r0, r2, #24
 80087c8:	f57f af62 	bpl.w	8008690 <_scanf_float+0x64>
 80087cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80087d0:	6022      	str	r2, [r4, #0]
 80087d2:	e7f4      	b.n	80087be <_scanf_float+0x192>
 80087d4:	f1ba 0f00 	cmp.w	sl, #0
 80087d8:	d10e      	bne.n	80087f8 <_scanf_float+0x1cc>
 80087da:	f1b9 0f00 	cmp.w	r9, #0
 80087de:	d10e      	bne.n	80087fe <_scanf_float+0x1d2>
 80087e0:	6822      	ldr	r2, [r4, #0]
 80087e2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80087e6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80087ea:	d108      	bne.n	80087fe <_scanf_float+0x1d2>
 80087ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087f0:	6022      	str	r2, [r4, #0]
 80087f2:	f04f 0a01 	mov.w	sl, #1
 80087f6:	e7e2      	b.n	80087be <_scanf_float+0x192>
 80087f8:	f1ba 0f02 	cmp.w	sl, #2
 80087fc:	d055      	beq.n	80088aa <_scanf_float+0x27e>
 80087fe:	2d01      	cmp	r5, #1
 8008800:	d002      	beq.n	8008808 <_scanf_float+0x1dc>
 8008802:	2d04      	cmp	r5, #4
 8008804:	f47f af44 	bne.w	8008690 <_scanf_float+0x64>
 8008808:	3501      	adds	r5, #1
 800880a:	b2ed      	uxtb	r5, r5
 800880c:	e7d7      	b.n	80087be <_scanf_float+0x192>
 800880e:	f1ba 0f01 	cmp.w	sl, #1
 8008812:	f47f af3d 	bne.w	8008690 <_scanf_float+0x64>
 8008816:	f04f 0a02 	mov.w	sl, #2
 800881a:	e7d0      	b.n	80087be <_scanf_float+0x192>
 800881c:	b97d      	cbnz	r5, 800883e <_scanf_float+0x212>
 800881e:	f1b9 0f00 	cmp.w	r9, #0
 8008822:	f47f af38 	bne.w	8008696 <_scanf_float+0x6a>
 8008826:	6822      	ldr	r2, [r4, #0]
 8008828:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800882c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008830:	f040 8108 	bne.w	8008a44 <_scanf_float+0x418>
 8008834:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008838:	6022      	str	r2, [r4, #0]
 800883a:	2501      	movs	r5, #1
 800883c:	e7bf      	b.n	80087be <_scanf_float+0x192>
 800883e:	2d03      	cmp	r5, #3
 8008840:	d0e2      	beq.n	8008808 <_scanf_float+0x1dc>
 8008842:	2d05      	cmp	r5, #5
 8008844:	e7de      	b.n	8008804 <_scanf_float+0x1d8>
 8008846:	2d02      	cmp	r5, #2
 8008848:	f47f af22 	bne.w	8008690 <_scanf_float+0x64>
 800884c:	2503      	movs	r5, #3
 800884e:	e7b6      	b.n	80087be <_scanf_float+0x192>
 8008850:	2d06      	cmp	r5, #6
 8008852:	f47f af1d 	bne.w	8008690 <_scanf_float+0x64>
 8008856:	2507      	movs	r5, #7
 8008858:	e7b1      	b.n	80087be <_scanf_float+0x192>
 800885a:	6822      	ldr	r2, [r4, #0]
 800885c:	0591      	lsls	r1, r2, #22
 800885e:	f57f af17 	bpl.w	8008690 <_scanf_float+0x64>
 8008862:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008866:	6022      	str	r2, [r4, #0]
 8008868:	f8cd 9008 	str.w	r9, [sp, #8]
 800886c:	e7a7      	b.n	80087be <_scanf_float+0x192>
 800886e:	6822      	ldr	r2, [r4, #0]
 8008870:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008874:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008878:	d006      	beq.n	8008888 <_scanf_float+0x25c>
 800887a:	0550      	lsls	r0, r2, #21
 800887c:	f57f af08 	bpl.w	8008690 <_scanf_float+0x64>
 8008880:	f1b9 0f00 	cmp.w	r9, #0
 8008884:	f000 80de 	beq.w	8008a44 <_scanf_float+0x418>
 8008888:	0591      	lsls	r1, r2, #22
 800888a:	bf58      	it	pl
 800888c:	9902      	ldrpl	r1, [sp, #8]
 800888e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008892:	bf58      	it	pl
 8008894:	eba9 0101 	subpl.w	r1, r9, r1
 8008898:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800889c:	bf58      	it	pl
 800889e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088a2:	6022      	str	r2, [r4, #0]
 80088a4:	f04f 0900 	mov.w	r9, #0
 80088a8:	e789      	b.n	80087be <_scanf_float+0x192>
 80088aa:	f04f 0a03 	mov.w	sl, #3
 80088ae:	e786      	b.n	80087be <_scanf_float+0x192>
 80088b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80088b4:	4639      	mov	r1, r7
 80088b6:	4640      	mov	r0, r8
 80088b8:	4798      	blx	r3
 80088ba:	2800      	cmp	r0, #0
 80088bc:	f43f aedb 	beq.w	8008676 <_scanf_float+0x4a>
 80088c0:	e6e6      	b.n	8008690 <_scanf_float+0x64>
 80088c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088ca:	463a      	mov	r2, r7
 80088cc:	4640      	mov	r0, r8
 80088ce:	4798      	blx	r3
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	6123      	str	r3, [r4, #16]
 80088d6:	e6e8      	b.n	80086aa <_scanf_float+0x7e>
 80088d8:	1e6b      	subs	r3, r5, #1
 80088da:	2b06      	cmp	r3, #6
 80088dc:	d824      	bhi.n	8008928 <_scanf_float+0x2fc>
 80088de:	2d02      	cmp	r5, #2
 80088e0:	d836      	bhi.n	8008950 <_scanf_float+0x324>
 80088e2:	9b01      	ldr	r3, [sp, #4]
 80088e4:	429e      	cmp	r6, r3
 80088e6:	f67f aee4 	bls.w	80086b2 <_scanf_float+0x86>
 80088ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088f2:	463a      	mov	r2, r7
 80088f4:	4640      	mov	r0, r8
 80088f6:	4798      	blx	r3
 80088f8:	6923      	ldr	r3, [r4, #16]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	6123      	str	r3, [r4, #16]
 80088fe:	e7f0      	b.n	80088e2 <_scanf_float+0x2b6>
 8008900:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008904:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008908:	463a      	mov	r2, r7
 800890a:	4640      	mov	r0, r8
 800890c:	4798      	blx	r3
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	3b01      	subs	r3, #1
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008918:	fa5f fa8a 	uxtb.w	sl, sl
 800891c:	f1ba 0f02 	cmp.w	sl, #2
 8008920:	d1ee      	bne.n	8008900 <_scanf_float+0x2d4>
 8008922:	3d03      	subs	r5, #3
 8008924:	b2ed      	uxtb	r5, r5
 8008926:	1b76      	subs	r6, r6, r5
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	05da      	lsls	r2, r3, #23
 800892c:	d530      	bpl.n	8008990 <_scanf_float+0x364>
 800892e:	055b      	lsls	r3, r3, #21
 8008930:	d511      	bpl.n	8008956 <_scanf_float+0x32a>
 8008932:	9b01      	ldr	r3, [sp, #4]
 8008934:	429e      	cmp	r6, r3
 8008936:	f67f aebc 	bls.w	80086b2 <_scanf_float+0x86>
 800893a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800893e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008942:	463a      	mov	r2, r7
 8008944:	4640      	mov	r0, r8
 8008946:	4798      	blx	r3
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	3b01      	subs	r3, #1
 800894c:	6123      	str	r3, [r4, #16]
 800894e:	e7f0      	b.n	8008932 <_scanf_float+0x306>
 8008950:	46aa      	mov	sl, r5
 8008952:	46b3      	mov	fp, r6
 8008954:	e7de      	b.n	8008914 <_scanf_float+0x2e8>
 8008956:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800895a:	6923      	ldr	r3, [r4, #16]
 800895c:	2965      	cmp	r1, #101	@ 0x65
 800895e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008962:	f106 35ff 	add.w	r5, r6, #4294967295
 8008966:	6123      	str	r3, [r4, #16]
 8008968:	d00c      	beq.n	8008984 <_scanf_float+0x358>
 800896a:	2945      	cmp	r1, #69	@ 0x45
 800896c:	d00a      	beq.n	8008984 <_scanf_float+0x358>
 800896e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008972:	463a      	mov	r2, r7
 8008974:	4640      	mov	r0, r8
 8008976:	4798      	blx	r3
 8008978:	6923      	ldr	r3, [r4, #16]
 800897a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800897e:	3b01      	subs	r3, #1
 8008980:	1eb5      	subs	r5, r6, #2
 8008982:	6123      	str	r3, [r4, #16]
 8008984:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008988:	463a      	mov	r2, r7
 800898a:	4640      	mov	r0, r8
 800898c:	4798      	blx	r3
 800898e:	462e      	mov	r6, r5
 8008990:	6822      	ldr	r2, [r4, #0]
 8008992:	f012 0210 	ands.w	r2, r2, #16
 8008996:	d001      	beq.n	800899c <_scanf_float+0x370>
 8008998:	2000      	movs	r0, #0
 800899a:	e68b      	b.n	80086b4 <_scanf_float+0x88>
 800899c:	7032      	strb	r2, [r6, #0]
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80089a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a8:	d11c      	bne.n	80089e4 <_scanf_float+0x3b8>
 80089aa:	9b02      	ldr	r3, [sp, #8]
 80089ac:	454b      	cmp	r3, r9
 80089ae:	eba3 0209 	sub.w	r2, r3, r9
 80089b2:	d123      	bne.n	80089fc <_scanf_float+0x3d0>
 80089b4:	9901      	ldr	r1, [sp, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	4640      	mov	r0, r8
 80089ba:	f7ff f9cd 	bl	8007d58 <_strtod_r>
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	6821      	ldr	r1, [r4, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f011 0f02 	tst.w	r1, #2
 80089c8:	ec57 6b10 	vmov	r6, r7, d0
 80089cc:	f103 0204 	add.w	r2, r3, #4
 80089d0:	d01f      	beq.n	8008a12 <_scanf_float+0x3e6>
 80089d2:	9903      	ldr	r1, [sp, #12]
 80089d4:	600a      	str	r2, [r1, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	e9c3 6700 	strd	r6, r7, [r3]
 80089dc:	68e3      	ldr	r3, [r4, #12]
 80089de:	3301      	adds	r3, #1
 80089e0:	60e3      	str	r3, [r4, #12]
 80089e2:	e7d9      	b.n	8008998 <_scanf_float+0x36c>
 80089e4:	9b04      	ldr	r3, [sp, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0e4      	beq.n	80089b4 <_scanf_float+0x388>
 80089ea:	9905      	ldr	r1, [sp, #20]
 80089ec:	230a      	movs	r3, #10
 80089ee:	3101      	adds	r1, #1
 80089f0:	4640      	mov	r0, r8
 80089f2:	f002 fa65 	bl	800aec0 <_strtol_r>
 80089f6:	9b04      	ldr	r3, [sp, #16]
 80089f8:	9e05      	ldr	r6, [sp, #20]
 80089fa:	1ac2      	subs	r2, r0, r3
 80089fc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008a00:	429e      	cmp	r6, r3
 8008a02:	bf28      	it	cs
 8008a04:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008a08:	4910      	ldr	r1, [pc, #64]	@ (8008a4c <_scanf_float+0x420>)
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f000 f8e4 	bl	8008bd8 <siprintf>
 8008a10:	e7d0      	b.n	80089b4 <_scanf_float+0x388>
 8008a12:	f011 0f04 	tst.w	r1, #4
 8008a16:	9903      	ldr	r1, [sp, #12]
 8008a18:	600a      	str	r2, [r1, #0]
 8008a1a:	d1dc      	bne.n	80089d6 <_scanf_float+0x3aa>
 8008a1c:	681d      	ldr	r5, [r3, #0]
 8008a1e:	4632      	mov	r2, r6
 8008a20:	463b      	mov	r3, r7
 8008a22:	4630      	mov	r0, r6
 8008a24:	4639      	mov	r1, r7
 8008a26:	f7f8 f881 	bl	8000b2c <__aeabi_dcmpun>
 8008a2a:	b128      	cbz	r0, 8008a38 <_scanf_float+0x40c>
 8008a2c:	4808      	ldr	r0, [pc, #32]	@ (8008a50 <_scanf_float+0x424>)
 8008a2e:	f000 fa5f 	bl	8008ef0 <nanf>
 8008a32:	ed85 0a00 	vstr	s0, [r5]
 8008a36:	e7d1      	b.n	80089dc <_scanf_float+0x3b0>
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f8 f8d4 	bl	8000be8 <__aeabi_d2f>
 8008a40:	6028      	str	r0, [r5, #0]
 8008a42:	e7cb      	b.n	80089dc <_scanf_float+0x3b0>
 8008a44:	f04f 0900 	mov.w	r9, #0
 8008a48:	e629      	b.n	800869e <_scanf_float+0x72>
 8008a4a:	bf00      	nop
 8008a4c:	0800bd9c 	.word	0x0800bd9c
 8008a50:	0800be55 	.word	0x0800be55

08008a54 <std>:
 8008a54:	2300      	movs	r3, #0
 8008a56:	b510      	push	{r4, lr}
 8008a58:	4604      	mov	r4, r0
 8008a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a62:	6083      	str	r3, [r0, #8]
 8008a64:	8181      	strh	r1, [r0, #12]
 8008a66:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a68:	81c2      	strh	r2, [r0, #14]
 8008a6a:	6183      	str	r3, [r0, #24]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	2208      	movs	r2, #8
 8008a70:	305c      	adds	r0, #92	@ 0x5c
 8008a72:	f000 f914 	bl	8008c9e <memset>
 8008a76:	4b0d      	ldr	r3, [pc, #52]	@ (8008aac <std+0x58>)
 8008a78:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab0 <std+0x5c>)
 8008a7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab4 <std+0x60>)
 8008a80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a82:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab8 <std+0x64>)
 8008a84:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a86:	4b0d      	ldr	r3, [pc, #52]	@ (8008abc <std+0x68>)
 8008a88:	6224      	str	r4, [r4, #32]
 8008a8a:	429c      	cmp	r4, r3
 8008a8c:	d006      	beq.n	8008a9c <std+0x48>
 8008a8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a92:	4294      	cmp	r4, r2
 8008a94:	d002      	beq.n	8008a9c <std+0x48>
 8008a96:	33d0      	adds	r3, #208	@ 0xd0
 8008a98:	429c      	cmp	r4, r3
 8008a9a:	d105      	bne.n	8008aa8 <std+0x54>
 8008a9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa4:	f000 ba08 	b.w	8008eb8 <__retarget_lock_init_recursive>
 8008aa8:	bd10      	pop	{r4, pc}
 8008aaa:	bf00      	nop
 8008aac:	08008c19 	.word	0x08008c19
 8008ab0:	08008c3b 	.word	0x08008c3b
 8008ab4:	08008c73 	.word	0x08008c73
 8008ab8:	08008c97 	.word	0x08008c97
 8008abc:	200005f0 	.word	0x200005f0

08008ac0 <stdio_exit_handler>:
 8008ac0:	4a02      	ldr	r2, [pc, #8]	@ (8008acc <stdio_exit_handler+0xc>)
 8008ac2:	4903      	ldr	r1, [pc, #12]	@ (8008ad0 <stdio_exit_handler+0x10>)
 8008ac4:	4803      	ldr	r0, [pc, #12]	@ (8008ad4 <stdio_exit_handler+0x14>)
 8008ac6:	f000 b869 	b.w	8008b9c <_fwalk_sglue>
 8008aca:	bf00      	nop
 8008acc:	2000000c 	.word	0x2000000c
 8008ad0:	0800b295 	.word	0x0800b295
 8008ad4:	20000188 	.word	0x20000188

08008ad8 <cleanup_stdio>:
 8008ad8:	6841      	ldr	r1, [r0, #4]
 8008ada:	4b0c      	ldr	r3, [pc, #48]	@ (8008b0c <cleanup_stdio+0x34>)
 8008adc:	4299      	cmp	r1, r3
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	d001      	beq.n	8008ae8 <cleanup_stdio+0x10>
 8008ae4:	f002 fbd6 	bl	800b294 <_fflush_r>
 8008ae8:	68a1      	ldr	r1, [r4, #8]
 8008aea:	4b09      	ldr	r3, [pc, #36]	@ (8008b10 <cleanup_stdio+0x38>)
 8008aec:	4299      	cmp	r1, r3
 8008aee:	d002      	beq.n	8008af6 <cleanup_stdio+0x1e>
 8008af0:	4620      	mov	r0, r4
 8008af2:	f002 fbcf 	bl	800b294 <_fflush_r>
 8008af6:	68e1      	ldr	r1, [r4, #12]
 8008af8:	4b06      	ldr	r3, [pc, #24]	@ (8008b14 <cleanup_stdio+0x3c>)
 8008afa:	4299      	cmp	r1, r3
 8008afc:	d004      	beq.n	8008b08 <cleanup_stdio+0x30>
 8008afe:	4620      	mov	r0, r4
 8008b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b04:	f002 bbc6 	b.w	800b294 <_fflush_r>
 8008b08:	bd10      	pop	{r4, pc}
 8008b0a:	bf00      	nop
 8008b0c:	200005f0 	.word	0x200005f0
 8008b10:	20000658 	.word	0x20000658
 8008b14:	200006c0 	.word	0x200006c0

08008b18 <global_stdio_init.part.0>:
 8008b18:	b510      	push	{r4, lr}
 8008b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b48 <global_stdio_init.part.0+0x30>)
 8008b1c:	4c0b      	ldr	r4, [pc, #44]	@ (8008b4c <global_stdio_init.part.0+0x34>)
 8008b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b50 <global_stdio_init.part.0+0x38>)
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	4620      	mov	r0, r4
 8008b24:	2200      	movs	r2, #0
 8008b26:	2104      	movs	r1, #4
 8008b28:	f7ff ff94 	bl	8008a54 <std>
 8008b2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b30:	2201      	movs	r2, #1
 8008b32:	2109      	movs	r1, #9
 8008b34:	f7ff ff8e 	bl	8008a54 <std>
 8008b38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b42:	2112      	movs	r1, #18
 8008b44:	f7ff bf86 	b.w	8008a54 <std>
 8008b48:	20000728 	.word	0x20000728
 8008b4c:	200005f0 	.word	0x200005f0
 8008b50:	08008ac1 	.word	0x08008ac1

08008b54 <__sfp_lock_acquire>:
 8008b54:	4801      	ldr	r0, [pc, #4]	@ (8008b5c <__sfp_lock_acquire+0x8>)
 8008b56:	f000 b9b0 	b.w	8008eba <__retarget_lock_acquire_recursive>
 8008b5a:	bf00      	nop
 8008b5c:	20000731 	.word	0x20000731

08008b60 <__sfp_lock_release>:
 8008b60:	4801      	ldr	r0, [pc, #4]	@ (8008b68 <__sfp_lock_release+0x8>)
 8008b62:	f000 b9ab 	b.w	8008ebc <__retarget_lock_release_recursive>
 8008b66:	bf00      	nop
 8008b68:	20000731 	.word	0x20000731

08008b6c <__sinit>:
 8008b6c:	b510      	push	{r4, lr}
 8008b6e:	4604      	mov	r4, r0
 8008b70:	f7ff fff0 	bl	8008b54 <__sfp_lock_acquire>
 8008b74:	6a23      	ldr	r3, [r4, #32]
 8008b76:	b11b      	cbz	r3, 8008b80 <__sinit+0x14>
 8008b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b7c:	f7ff bff0 	b.w	8008b60 <__sfp_lock_release>
 8008b80:	4b04      	ldr	r3, [pc, #16]	@ (8008b94 <__sinit+0x28>)
 8008b82:	6223      	str	r3, [r4, #32]
 8008b84:	4b04      	ldr	r3, [pc, #16]	@ (8008b98 <__sinit+0x2c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1f5      	bne.n	8008b78 <__sinit+0xc>
 8008b8c:	f7ff ffc4 	bl	8008b18 <global_stdio_init.part.0>
 8008b90:	e7f2      	b.n	8008b78 <__sinit+0xc>
 8008b92:	bf00      	nop
 8008b94:	08008ad9 	.word	0x08008ad9
 8008b98:	20000728 	.word	0x20000728

08008b9c <_fwalk_sglue>:
 8008b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba0:	4607      	mov	r7, r0
 8008ba2:	4688      	mov	r8, r1
 8008ba4:	4614      	mov	r4, r2
 8008ba6:	2600      	movs	r6, #0
 8008ba8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bac:	f1b9 0901 	subs.w	r9, r9, #1
 8008bb0:	d505      	bpl.n	8008bbe <_fwalk_sglue+0x22>
 8008bb2:	6824      	ldr	r4, [r4, #0]
 8008bb4:	2c00      	cmp	r4, #0
 8008bb6:	d1f7      	bne.n	8008ba8 <_fwalk_sglue+0xc>
 8008bb8:	4630      	mov	r0, r6
 8008bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bbe:	89ab      	ldrh	r3, [r5, #12]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d907      	bls.n	8008bd4 <_fwalk_sglue+0x38>
 8008bc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	d003      	beq.n	8008bd4 <_fwalk_sglue+0x38>
 8008bcc:	4629      	mov	r1, r5
 8008bce:	4638      	mov	r0, r7
 8008bd0:	47c0      	blx	r8
 8008bd2:	4306      	orrs	r6, r0
 8008bd4:	3568      	adds	r5, #104	@ 0x68
 8008bd6:	e7e9      	b.n	8008bac <_fwalk_sglue+0x10>

08008bd8 <siprintf>:
 8008bd8:	b40e      	push	{r1, r2, r3}
 8008bda:	b500      	push	{lr}
 8008bdc:	b09c      	sub	sp, #112	@ 0x70
 8008bde:	ab1d      	add	r3, sp, #116	@ 0x74
 8008be0:	9002      	str	r0, [sp, #8]
 8008be2:	9006      	str	r0, [sp, #24]
 8008be4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008be8:	4809      	ldr	r0, [pc, #36]	@ (8008c10 <siprintf+0x38>)
 8008bea:	9107      	str	r1, [sp, #28]
 8008bec:	9104      	str	r1, [sp, #16]
 8008bee:	4909      	ldr	r1, [pc, #36]	@ (8008c14 <siprintf+0x3c>)
 8008bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bf4:	9105      	str	r1, [sp, #20]
 8008bf6:	6800      	ldr	r0, [r0, #0]
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	a902      	add	r1, sp, #8
 8008bfc:	f002 f9ca 	bl	800af94 <_svfiprintf_r>
 8008c00:	9b02      	ldr	r3, [sp, #8]
 8008c02:	2200      	movs	r2, #0
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	b01c      	add	sp, #112	@ 0x70
 8008c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c0c:	b003      	add	sp, #12
 8008c0e:	4770      	bx	lr
 8008c10:	20000184 	.word	0x20000184
 8008c14:	ffff0208 	.word	0xffff0208

08008c18 <__sread>:
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c20:	f000 f8fc 	bl	8008e1c <_read_r>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	bfab      	itete	ge
 8008c28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c2c:	181b      	addge	r3, r3, r0
 8008c2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c32:	bfac      	ite	ge
 8008c34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c36:	81a3      	strhlt	r3, [r4, #12]
 8008c38:	bd10      	pop	{r4, pc}

08008c3a <__swrite>:
 8008c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3e:	461f      	mov	r7, r3
 8008c40:	898b      	ldrh	r3, [r1, #12]
 8008c42:	05db      	lsls	r3, r3, #23
 8008c44:	4605      	mov	r5, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	4616      	mov	r6, r2
 8008c4a:	d505      	bpl.n	8008c58 <__swrite+0x1e>
 8008c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c50:	2302      	movs	r3, #2
 8008c52:	2200      	movs	r2, #0
 8008c54:	f000 f8d0 	bl	8008df8 <_lseek_r>
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	4632      	mov	r2, r6
 8008c66:	463b      	mov	r3, r7
 8008c68:	4628      	mov	r0, r5
 8008c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6e:	f000 b8e7 	b.w	8008e40 <_write_r>

08008c72 <__sseek>:
 8008c72:	b510      	push	{r4, lr}
 8008c74:	460c      	mov	r4, r1
 8008c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7a:	f000 f8bd 	bl	8008df8 <_lseek_r>
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	bf15      	itete	ne
 8008c84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008c86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008c8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008c8e:	81a3      	strheq	r3, [r4, #12]
 8008c90:	bf18      	it	ne
 8008c92:	81a3      	strhne	r3, [r4, #12]
 8008c94:	bd10      	pop	{r4, pc}

08008c96 <__sclose>:
 8008c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c9a:	f000 b89d 	b.w	8008dd8 <_close_r>

08008c9e <memset>:
 8008c9e:	4402      	add	r2, r0
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d100      	bne.n	8008ca8 <memset+0xa>
 8008ca6:	4770      	bx	lr
 8008ca8:	f803 1b01 	strb.w	r1, [r3], #1
 8008cac:	e7f9      	b.n	8008ca2 <memset+0x4>

08008cae <strcat>:
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	7814      	ldrb	r4, [r2, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	3201      	adds	r2, #1
 8008cb8:	2c00      	cmp	r4, #0
 8008cba:	d1fa      	bne.n	8008cb2 <strcat+0x4>
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	d1f9      	bne.n	8008cbe <strcat+0x10>
 8008cca:	bd10      	pop	{r4, pc}

08008ccc <strncmp>:
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	b16a      	cbz	r2, 8008cec <strncmp+0x20>
 8008cd0:	3901      	subs	r1, #1
 8008cd2:	1884      	adds	r4, r0, r2
 8008cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d103      	bne.n	8008ce8 <strncmp+0x1c>
 8008ce0:	42a0      	cmp	r0, r4
 8008ce2:	d001      	beq.n	8008ce8 <strncmp+0x1c>
 8008ce4:	2a00      	cmp	r2, #0
 8008ce6:	d1f5      	bne.n	8008cd4 <strncmp+0x8>
 8008ce8:	1ad0      	subs	r0, r2, r3
 8008cea:	bd10      	pop	{r4, pc}
 8008cec:	4610      	mov	r0, r2
 8008cee:	e7fc      	b.n	8008cea <strncmp+0x1e>

08008cf0 <strncpy>:
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	3901      	subs	r1, #1
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	b132      	cbz	r2, 8008d06 <strncpy+0x16>
 8008cf8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008cfc:	f803 4b01 	strb.w	r4, [r3], #1
 8008d00:	3a01      	subs	r2, #1
 8008d02:	2c00      	cmp	r4, #0
 8008d04:	d1f7      	bne.n	8008cf6 <strncpy+0x6>
 8008d06:	441a      	add	r2, r3
 8008d08:	2100      	movs	r1, #0
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d100      	bne.n	8008d10 <strncpy+0x20>
 8008d0e:	bd10      	pop	{r4, pc}
 8008d10:	f803 1b01 	strb.w	r1, [r3], #1
 8008d14:	e7f9      	b.n	8008d0a <strncpy+0x1a>
	...

08008d18 <strtok>:
 8008d18:	4b16      	ldr	r3, [pc, #88]	@ (8008d74 <strtok+0x5c>)
 8008d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1e:	681f      	ldr	r7, [r3, #0]
 8008d20:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008d22:	4605      	mov	r5, r0
 8008d24:	460e      	mov	r6, r1
 8008d26:	b9ec      	cbnz	r4, 8008d64 <strtok+0x4c>
 8008d28:	2050      	movs	r0, #80	@ 0x50
 8008d2a:	f001 fad5 	bl	800a2d8 <malloc>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	6478      	str	r0, [r7, #68]	@ 0x44
 8008d32:	b920      	cbnz	r0, 8008d3e <strtok+0x26>
 8008d34:	4b10      	ldr	r3, [pc, #64]	@ (8008d78 <strtok+0x60>)
 8008d36:	4811      	ldr	r0, [pc, #68]	@ (8008d7c <strtok+0x64>)
 8008d38:	215b      	movs	r1, #91	@ 0x5b
 8008d3a:	f000 f8df 	bl	8008efc <__assert_func>
 8008d3e:	e9c0 4400 	strd	r4, r4, [r0]
 8008d42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008d46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008d4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008d4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008d52:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008d56:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008d5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008d5e:	6184      	str	r4, [r0, #24]
 8008d60:	7704      	strb	r4, [r0, #28]
 8008d62:	6244      	str	r4, [r0, #36]	@ 0x24
 8008d64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d66:	4631      	mov	r1, r6
 8008d68:	4628      	mov	r0, r5
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d70:	f000 b806 	b.w	8008d80 <__strtok_r>
 8008d74:	20000184 	.word	0x20000184
 8008d78:	0800bda1 	.word	0x0800bda1
 8008d7c:	0800bdb8 	.word	0x0800bdb8

08008d80 <__strtok_r>:
 8008d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d82:	4604      	mov	r4, r0
 8008d84:	b908      	cbnz	r0, 8008d8a <__strtok_r+0xa>
 8008d86:	6814      	ldr	r4, [r2, #0]
 8008d88:	b144      	cbz	r4, 8008d9c <__strtok_r+0x1c>
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008d90:	460f      	mov	r7, r1
 8008d92:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008d96:	b91e      	cbnz	r6, 8008da0 <__strtok_r+0x20>
 8008d98:	b965      	cbnz	r5, 8008db4 <__strtok_r+0x34>
 8008d9a:	6015      	str	r5, [r2, #0]
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	e005      	b.n	8008dac <__strtok_r+0x2c>
 8008da0:	42b5      	cmp	r5, r6
 8008da2:	d1f6      	bne.n	8008d92 <__strtok_r+0x12>
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1f0      	bne.n	8008d8a <__strtok_r+0xa>
 8008da8:	6014      	str	r4, [r2, #0]
 8008daa:	7003      	strb	r3, [r0, #0]
 8008dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dae:	461c      	mov	r4, r3
 8008db0:	e00c      	b.n	8008dcc <__strtok_r+0x4c>
 8008db2:	b915      	cbnz	r5, 8008dba <__strtok_r+0x3a>
 8008db4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008db8:	460e      	mov	r6, r1
 8008dba:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008dbe:	42ab      	cmp	r3, r5
 8008dc0:	d1f7      	bne.n	8008db2 <__strtok_r+0x32>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0f3      	beq.n	8008dae <__strtok_r+0x2e>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008dcc:	6014      	str	r4, [r2, #0]
 8008dce:	e7ed      	b.n	8008dac <__strtok_r+0x2c>

08008dd0 <_localeconv_r>:
 8008dd0:	4800      	ldr	r0, [pc, #0]	@ (8008dd4 <_localeconv_r+0x4>)
 8008dd2:	4770      	bx	lr
 8008dd4:	20000108 	.word	0x20000108

08008dd8 <_close_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	4d06      	ldr	r5, [pc, #24]	@ (8008df4 <_close_r+0x1c>)
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4604      	mov	r4, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	602b      	str	r3, [r5, #0]
 8008de4:	f7fa fc0c 	bl	8003600 <_close>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_close_r+0x1a>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_close_r+0x1a>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	2000072c 	.word	0x2000072c

08008df8 <_lseek_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	@ (8008e18 <_lseek_r+0x20>)
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	4611      	mov	r1, r2
 8008e02:	2200      	movs	r2, #0
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f7fa fc21 	bl	800364e <_lseek>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_lseek_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_lseek_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	2000072c 	.word	0x2000072c

08008e1c <_read_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d07      	ldr	r5, [pc, #28]	@ (8008e3c <_read_r+0x20>)
 8008e20:	4604      	mov	r4, r0
 8008e22:	4608      	mov	r0, r1
 8008e24:	4611      	mov	r1, r2
 8008e26:	2200      	movs	r2, #0
 8008e28:	602a      	str	r2, [r5, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7fa fbaf 	bl	800358e <_read>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_read_r+0x1e>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_read_r+0x1e>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	2000072c 	.word	0x2000072c

08008e40 <_write_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d07      	ldr	r5, [pc, #28]	@ (8008e60 <_write_r+0x20>)
 8008e44:	4604      	mov	r4, r0
 8008e46:	4608      	mov	r0, r1
 8008e48:	4611      	mov	r1, r2
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	602a      	str	r2, [r5, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f7fa fbba 	bl	80035c8 <_write>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_write_r+0x1e>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_write_r+0x1e>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	2000072c 	.word	0x2000072c

08008e64 <__errno>:
 8008e64:	4b01      	ldr	r3, [pc, #4]	@ (8008e6c <__errno+0x8>)
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	20000184 	.word	0x20000184

08008e70 <__libc_init_array>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	4d0d      	ldr	r5, [pc, #52]	@ (8008ea8 <__libc_init_array+0x38>)
 8008e74:	4c0d      	ldr	r4, [pc, #52]	@ (8008eac <__libc_init_array+0x3c>)
 8008e76:	1b64      	subs	r4, r4, r5
 8008e78:	10a4      	asrs	r4, r4, #2
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	42a6      	cmp	r6, r4
 8008e7e:	d109      	bne.n	8008e94 <__libc_init_array+0x24>
 8008e80:	4d0b      	ldr	r5, [pc, #44]	@ (8008eb0 <__libc_init_array+0x40>)
 8008e82:	4c0c      	ldr	r4, [pc, #48]	@ (8008eb4 <__libc_init_array+0x44>)
 8008e84:	f002 feca 	bl	800bc1c <_init>
 8008e88:	1b64      	subs	r4, r4, r5
 8008e8a:	10a4      	asrs	r4, r4, #2
 8008e8c:	2600      	movs	r6, #0
 8008e8e:	42a6      	cmp	r6, r4
 8008e90:	d105      	bne.n	8008e9e <__libc_init_array+0x2e>
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e98:	4798      	blx	r3
 8008e9a:	3601      	adds	r6, #1
 8008e9c:	e7ee      	b.n	8008e7c <__libc_init_array+0xc>
 8008e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea2:	4798      	blx	r3
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	e7f2      	b.n	8008e8e <__libc_init_array+0x1e>
 8008ea8:	0800c1b8 	.word	0x0800c1b8
 8008eac:	0800c1b8 	.word	0x0800c1b8
 8008eb0:	0800c1b8 	.word	0x0800c1b8
 8008eb4:	0800c1bc 	.word	0x0800c1bc

08008eb8 <__retarget_lock_init_recursive>:
 8008eb8:	4770      	bx	lr

08008eba <__retarget_lock_acquire_recursive>:
 8008eba:	4770      	bx	lr

08008ebc <__retarget_lock_release_recursive>:
 8008ebc:	4770      	bx	lr

08008ebe <memcpy>:
 8008ebe:	440a      	add	r2, r1
 8008ec0:	4291      	cmp	r1, r2
 8008ec2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ec6:	d100      	bne.n	8008eca <memcpy+0xc>
 8008ec8:	4770      	bx	lr
 8008eca:	b510      	push	{r4, lr}
 8008ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed4:	4291      	cmp	r1, r2
 8008ed6:	d1f9      	bne.n	8008ecc <memcpy+0xe>
 8008ed8:	bd10      	pop	{r4, pc}
 8008eda:	0000      	movs	r0, r0
 8008edc:	0000      	movs	r0, r0
	...

08008ee0 <nan>:
 8008ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008ee8 <nan+0x8>
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	00000000 	.word	0x00000000
 8008eec:	7ff80000 	.word	0x7ff80000

08008ef0 <nanf>:
 8008ef0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008ef8 <nanf+0x8>
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	7fc00000 	.word	0x7fc00000

08008efc <__assert_func>:
 8008efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008efe:	4614      	mov	r4, r2
 8008f00:	461a      	mov	r2, r3
 8008f02:	4b09      	ldr	r3, [pc, #36]	@ (8008f28 <__assert_func+0x2c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4605      	mov	r5, r0
 8008f08:	68d8      	ldr	r0, [r3, #12]
 8008f0a:	b954      	cbnz	r4, 8008f22 <__assert_func+0x26>
 8008f0c:	4b07      	ldr	r3, [pc, #28]	@ (8008f2c <__assert_func+0x30>)
 8008f0e:	461c      	mov	r4, r3
 8008f10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f14:	9100      	str	r1, [sp, #0]
 8008f16:	462b      	mov	r3, r5
 8008f18:	4905      	ldr	r1, [pc, #20]	@ (8008f30 <__assert_func+0x34>)
 8008f1a:	f002 f9e3 	bl	800b2e4 <fiprintf>
 8008f1e:	f002 fa1d 	bl	800b35c <abort>
 8008f22:	4b04      	ldr	r3, [pc, #16]	@ (8008f34 <__assert_func+0x38>)
 8008f24:	e7f4      	b.n	8008f10 <__assert_func+0x14>
 8008f26:	bf00      	nop
 8008f28:	20000184 	.word	0x20000184
 8008f2c:	0800be55 	.word	0x0800be55
 8008f30:	0800be27 	.word	0x0800be27
 8008f34:	0800be1a 	.word	0x0800be1a

08008f38 <quorem>:
 8008f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	6903      	ldr	r3, [r0, #16]
 8008f3e:	690c      	ldr	r4, [r1, #16]
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	4607      	mov	r7, r0
 8008f44:	db7e      	blt.n	8009044 <quorem+0x10c>
 8008f46:	3c01      	subs	r4, #1
 8008f48:	f101 0814 	add.w	r8, r1, #20
 8008f4c:	00a3      	lsls	r3, r4, #2
 8008f4e:	f100 0514 	add.w	r5, r0, #20
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f62:	3301      	adds	r3, #1
 8008f64:	429a      	cmp	r2, r3
 8008f66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f6e:	d32e      	bcc.n	8008fce <quorem+0x96>
 8008f70:	f04f 0a00 	mov.w	sl, #0
 8008f74:	46c4      	mov	ip, r8
 8008f76:	46ae      	mov	lr, r5
 8008f78:	46d3      	mov	fp, sl
 8008f7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f7e:	b298      	uxth	r0, r3
 8008f80:	fb06 a000 	mla	r0, r6, r0, sl
 8008f84:	0c02      	lsrs	r2, r0, #16
 8008f86:	0c1b      	lsrs	r3, r3, #16
 8008f88:	fb06 2303 	mla	r3, r6, r3, r2
 8008f8c:	f8de 2000 	ldr.w	r2, [lr]
 8008f90:	b280      	uxth	r0, r0
 8008f92:	b292      	uxth	r2, r2
 8008f94:	1a12      	subs	r2, r2, r0
 8008f96:	445a      	add	r2, fp
 8008f98:	f8de 0000 	ldr.w	r0, [lr]
 8008f9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008fa6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008faa:	b292      	uxth	r2, r2
 8008fac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008fb0:	45e1      	cmp	r9, ip
 8008fb2:	f84e 2b04 	str.w	r2, [lr], #4
 8008fb6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008fba:	d2de      	bcs.n	8008f7a <quorem+0x42>
 8008fbc:	9b00      	ldr	r3, [sp, #0]
 8008fbe:	58eb      	ldr	r3, [r5, r3]
 8008fc0:	b92b      	cbnz	r3, 8008fce <quorem+0x96>
 8008fc2:	9b01      	ldr	r3, [sp, #4]
 8008fc4:	3b04      	subs	r3, #4
 8008fc6:	429d      	cmp	r5, r3
 8008fc8:	461a      	mov	r2, r3
 8008fca:	d32f      	bcc.n	800902c <quorem+0xf4>
 8008fcc:	613c      	str	r4, [r7, #16]
 8008fce:	4638      	mov	r0, r7
 8008fd0:	f001 fd0e 	bl	800a9f0 <__mcmp>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	db25      	blt.n	8009024 <quorem+0xec>
 8008fd8:	4629      	mov	r1, r5
 8008fda:	2000      	movs	r0, #0
 8008fdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fe0:	f8d1 c000 	ldr.w	ip, [r1]
 8008fe4:	fa1f fe82 	uxth.w	lr, r2
 8008fe8:	fa1f f38c 	uxth.w	r3, ip
 8008fec:	eba3 030e 	sub.w	r3, r3, lr
 8008ff0:	4403      	add	r3, r0
 8008ff2:	0c12      	lsrs	r2, r2, #16
 8008ff4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ff8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009002:	45c1      	cmp	r9, r8
 8009004:	f841 3b04 	str.w	r3, [r1], #4
 8009008:	ea4f 4022 	mov.w	r0, r2, asr #16
 800900c:	d2e6      	bcs.n	8008fdc <quorem+0xa4>
 800900e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009016:	b922      	cbnz	r2, 8009022 <quorem+0xea>
 8009018:	3b04      	subs	r3, #4
 800901a:	429d      	cmp	r5, r3
 800901c:	461a      	mov	r2, r3
 800901e:	d30b      	bcc.n	8009038 <quorem+0x100>
 8009020:	613c      	str	r4, [r7, #16]
 8009022:	3601      	adds	r6, #1
 8009024:	4630      	mov	r0, r6
 8009026:	b003      	add	sp, #12
 8009028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902c:	6812      	ldr	r2, [r2, #0]
 800902e:	3b04      	subs	r3, #4
 8009030:	2a00      	cmp	r2, #0
 8009032:	d1cb      	bne.n	8008fcc <quorem+0x94>
 8009034:	3c01      	subs	r4, #1
 8009036:	e7c6      	b.n	8008fc6 <quorem+0x8e>
 8009038:	6812      	ldr	r2, [r2, #0]
 800903a:	3b04      	subs	r3, #4
 800903c:	2a00      	cmp	r2, #0
 800903e:	d1ef      	bne.n	8009020 <quorem+0xe8>
 8009040:	3c01      	subs	r4, #1
 8009042:	e7ea      	b.n	800901a <quorem+0xe2>
 8009044:	2000      	movs	r0, #0
 8009046:	e7ee      	b.n	8009026 <quorem+0xee>

08009048 <_dtoa_r>:
 8009048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	69c7      	ldr	r7, [r0, #28]
 800904e:	b099      	sub	sp, #100	@ 0x64
 8009050:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009054:	ec55 4b10 	vmov	r4, r5, d0
 8009058:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800905a:	9109      	str	r1, [sp, #36]	@ 0x24
 800905c:	4683      	mov	fp, r0
 800905e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009060:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009062:	b97f      	cbnz	r7, 8009084 <_dtoa_r+0x3c>
 8009064:	2010      	movs	r0, #16
 8009066:	f001 f937 	bl	800a2d8 <malloc>
 800906a:	4602      	mov	r2, r0
 800906c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009070:	b920      	cbnz	r0, 800907c <_dtoa_r+0x34>
 8009072:	4ba7      	ldr	r3, [pc, #668]	@ (8009310 <_dtoa_r+0x2c8>)
 8009074:	21ef      	movs	r1, #239	@ 0xef
 8009076:	48a7      	ldr	r0, [pc, #668]	@ (8009314 <_dtoa_r+0x2cc>)
 8009078:	f7ff ff40 	bl	8008efc <__assert_func>
 800907c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009080:	6007      	str	r7, [r0, #0]
 8009082:	60c7      	str	r7, [r0, #12]
 8009084:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009088:	6819      	ldr	r1, [r3, #0]
 800908a:	b159      	cbz	r1, 80090a4 <_dtoa_r+0x5c>
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	604a      	str	r2, [r1, #4]
 8009090:	2301      	movs	r3, #1
 8009092:	4093      	lsls	r3, r2
 8009094:	608b      	str	r3, [r1, #8]
 8009096:	4658      	mov	r0, fp
 8009098:	f001 fa26 	bl	800a4e8 <_Bfree>
 800909c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	1e2b      	subs	r3, r5, #0
 80090a6:	bfb9      	ittee	lt
 80090a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80090ac:	9303      	strlt	r3, [sp, #12]
 80090ae:	2300      	movge	r3, #0
 80090b0:	6033      	strge	r3, [r6, #0]
 80090b2:	9f03      	ldr	r7, [sp, #12]
 80090b4:	4b98      	ldr	r3, [pc, #608]	@ (8009318 <_dtoa_r+0x2d0>)
 80090b6:	bfbc      	itt	lt
 80090b8:	2201      	movlt	r2, #1
 80090ba:	6032      	strlt	r2, [r6, #0]
 80090bc:	43bb      	bics	r3, r7
 80090be:	d112      	bne.n	80090e6 <_dtoa_r+0x9e>
 80090c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80090c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80090cc:	4323      	orrs	r3, r4
 80090ce:	f000 854d 	beq.w	8009b6c <_dtoa_r+0xb24>
 80090d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800932c <_dtoa_r+0x2e4>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 854f 	beq.w	8009b7c <_dtoa_r+0xb34>
 80090de:	f10a 0303 	add.w	r3, sl, #3
 80090e2:	f000 bd49 	b.w	8009b78 <_dtoa_r+0xb30>
 80090e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090ea:	2200      	movs	r2, #0
 80090ec:	ec51 0b17 	vmov	r0, r1, d7
 80090f0:	2300      	movs	r3, #0
 80090f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80090f6:	f7f7 fce7 	bl	8000ac8 <__aeabi_dcmpeq>
 80090fa:	4680      	mov	r8, r0
 80090fc:	b158      	cbz	r0, 8009116 <_dtoa_r+0xce>
 80090fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009100:	2301      	movs	r3, #1
 8009102:	6013      	str	r3, [r2, #0]
 8009104:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009106:	b113      	cbz	r3, 800910e <_dtoa_r+0xc6>
 8009108:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800910a:	4b84      	ldr	r3, [pc, #528]	@ (800931c <_dtoa_r+0x2d4>)
 800910c:	6013      	str	r3, [r2, #0]
 800910e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009330 <_dtoa_r+0x2e8>
 8009112:	f000 bd33 	b.w	8009b7c <_dtoa_r+0xb34>
 8009116:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800911a:	aa16      	add	r2, sp, #88	@ 0x58
 800911c:	a917      	add	r1, sp, #92	@ 0x5c
 800911e:	4658      	mov	r0, fp
 8009120:	f001 fd86 	bl	800ac30 <__d2b>
 8009124:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009128:	4681      	mov	r9, r0
 800912a:	2e00      	cmp	r6, #0
 800912c:	d077      	beq.n	800921e <_dtoa_r+0x1d6>
 800912e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009130:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800913c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009140:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009144:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009148:	4619      	mov	r1, r3
 800914a:	2200      	movs	r2, #0
 800914c:	4b74      	ldr	r3, [pc, #464]	@ (8009320 <_dtoa_r+0x2d8>)
 800914e:	f7f7 f89b 	bl	8000288 <__aeabi_dsub>
 8009152:	a369      	add	r3, pc, #420	@ (adr r3, 80092f8 <_dtoa_r+0x2b0>)
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f7f7 fa4e 	bl	80005f8 <__aeabi_dmul>
 800915c:	a368      	add	r3, pc, #416	@ (adr r3, 8009300 <_dtoa_r+0x2b8>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f7f7 f893 	bl	800028c <__adddf3>
 8009166:	4604      	mov	r4, r0
 8009168:	4630      	mov	r0, r6
 800916a:	460d      	mov	r5, r1
 800916c:	f7f7 f9da 	bl	8000524 <__aeabi_i2d>
 8009170:	a365      	add	r3, pc, #404	@ (adr r3, 8009308 <_dtoa_r+0x2c0>)
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	f7f7 fa3f 	bl	80005f8 <__aeabi_dmul>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4620      	mov	r0, r4
 8009180:	4629      	mov	r1, r5
 8009182:	f7f7 f883 	bl	800028c <__adddf3>
 8009186:	4604      	mov	r4, r0
 8009188:	460d      	mov	r5, r1
 800918a:	f7f7 fce5 	bl	8000b58 <__aeabi_d2iz>
 800918e:	2200      	movs	r2, #0
 8009190:	4607      	mov	r7, r0
 8009192:	2300      	movs	r3, #0
 8009194:	4620      	mov	r0, r4
 8009196:	4629      	mov	r1, r5
 8009198:	f7f7 fca0 	bl	8000adc <__aeabi_dcmplt>
 800919c:	b140      	cbz	r0, 80091b0 <_dtoa_r+0x168>
 800919e:	4638      	mov	r0, r7
 80091a0:	f7f7 f9c0 	bl	8000524 <__aeabi_i2d>
 80091a4:	4622      	mov	r2, r4
 80091a6:	462b      	mov	r3, r5
 80091a8:	f7f7 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80091ac:	b900      	cbnz	r0, 80091b0 <_dtoa_r+0x168>
 80091ae:	3f01      	subs	r7, #1
 80091b0:	2f16      	cmp	r7, #22
 80091b2:	d851      	bhi.n	8009258 <_dtoa_r+0x210>
 80091b4:	4b5b      	ldr	r3, [pc, #364]	@ (8009324 <_dtoa_r+0x2dc>)
 80091b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091c2:	f7f7 fc8b 	bl	8000adc <__aeabi_dcmplt>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d048      	beq.n	800925c <_dtoa_r+0x214>
 80091ca:	3f01      	subs	r7, #1
 80091cc:	2300      	movs	r3, #0
 80091ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80091d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80091d2:	1b9b      	subs	r3, r3, r6
 80091d4:	1e5a      	subs	r2, r3, #1
 80091d6:	bf44      	itt	mi
 80091d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80091dc:	2300      	movmi	r3, #0
 80091de:	9208      	str	r2, [sp, #32]
 80091e0:	bf54      	ite	pl
 80091e2:	f04f 0800 	movpl.w	r8, #0
 80091e6:	9308      	strmi	r3, [sp, #32]
 80091e8:	2f00      	cmp	r7, #0
 80091ea:	db39      	blt.n	8009260 <_dtoa_r+0x218>
 80091ec:	9b08      	ldr	r3, [sp, #32]
 80091ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80091f0:	443b      	add	r3, r7
 80091f2:	9308      	str	r3, [sp, #32]
 80091f4:	2300      	movs	r3, #0
 80091f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091fa:	2b09      	cmp	r3, #9
 80091fc:	d864      	bhi.n	80092c8 <_dtoa_r+0x280>
 80091fe:	2b05      	cmp	r3, #5
 8009200:	bfc4      	itt	gt
 8009202:	3b04      	subgt	r3, #4
 8009204:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009208:	f1a3 0302 	sub.w	r3, r3, #2
 800920c:	bfcc      	ite	gt
 800920e:	2400      	movgt	r4, #0
 8009210:	2401      	movle	r4, #1
 8009212:	2b03      	cmp	r3, #3
 8009214:	d863      	bhi.n	80092de <_dtoa_r+0x296>
 8009216:	e8df f003 	tbb	[pc, r3]
 800921a:	372a      	.short	0x372a
 800921c:	5535      	.short	0x5535
 800921e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009222:	441e      	add	r6, r3
 8009224:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009228:	2b20      	cmp	r3, #32
 800922a:	bfc1      	itttt	gt
 800922c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009230:	409f      	lslgt	r7, r3
 8009232:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009236:	fa24 f303 	lsrgt.w	r3, r4, r3
 800923a:	bfd6      	itet	le
 800923c:	f1c3 0320 	rsble	r3, r3, #32
 8009240:	ea47 0003 	orrgt.w	r0, r7, r3
 8009244:	fa04 f003 	lslle.w	r0, r4, r3
 8009248:	f7f7 f95c 	bl	8000504 <__aeabi_ui2d>
 800924c:	2201      	movs	r2, #1
 800924e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009252:	3e01      	subs	r6, #1
 8009254:	9214      	str	r2, [sp, #80]	@ 0x50
 8009256:	e777      	b.n	8009148 <_dtoa_r+0x100>
 8009258:	2301      	movs	r3, #1
 800925a:	e7b8      	b.n	80091ce <_dtoa_r+0x186>
 800925c:	9012      	str	r0, [sp, #72]	@ 0x48
 800925e:	e7b7      	b.n	80091d0 <_dtoa_r+0x188>
 8009260:	427b      	negs	r3, r7
 8009262:	930a      	str	r3, [sp, #40]	@ 0x28
 8009264:	2300      	movs	r3, #0
 8009266:	eba8 0807 	sub.w	r8, r8, r7
 800926a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800926c:	e7c4      	b.n	80091f8 <_dtoa_r+0x1b0>
 800926e:	2300      	movs	r3, #0
 8009270:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009274:	2b00      	cmp	r3, #0
 8009276:	dc35      	bgt.n	80092e4 <_dtoa_r+0x29c>
 8009278:	2301      	movs	r3, #1
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	9307      	str	r3, [sp, #28]
 800927e:	461a      	mov	r2, r3
 8009280:	920e      	str	r2, [sp, #56]	@ 0x38
 8009282:	e00b      	b.n	800929c <_dtoa_r+0x254>
 8009284:	2301      	movs	r3, #1
 8009286:	e7f3      	b.n	8009270 <_dtoa_r+0x228>
 8009288:	2300      	movs	r3, #0
 800928a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800928c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800928e:	18fb      	adds	r3, r7, r3
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	3301      	adds	r3, #1
 8009294:	2b01      	cmp	r3, #1
 8009296:	9307      	str	r3, [sp, #28]
 8009298:	bfb8      	it	lt
 800929a:	2301      	movlt	r3, #1
 800929c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80092a0:	2100      	movs	r1, #0
 80092a2:	2204      	movs	r2, #4
 80092a4:	f102 0514 	add.w	r5, r2, #20
 80092a8:	429d      	cmp	r5, r3
 80092aa:	d91f      	bls.n	80092ec <_dtoa_r+0x2a4>
 80092ac:	6041      	str	r1, [r0, #4]
 80092ae:	4658      	mov	r0, fp
 80092b0:	f001 f8da 	bl	800a468 <_Balloc>
 80092b4:	4682      	mov	sl, r0
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d13c      	bne.n	8009334 <_dtoa_r+0x2ec>
 80092ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009328 <_dtoa_r+0x2e0>)
 80092bc:	4602      	mov	r2, r0
 80092be:	f240 11af 	movw	r1, #431	@ 0x1af
 80092c2:	e6d8      	b.n	8009076 <_dtoa_r+0x2e>
 80092c4:	2301      	movs	r3, #1
 80092c6:	e7e0      	b.n	800928a <_dtoa_r+0x242>
 80092c8:	2401      	movs	r4, #1
 80092ca:	2300      	movs	r3, #0
 80092cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80092d0:	f04f 33ff 	mov.w	r3, #4294967295
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	9307      	str	r3, [sp, #28]
 80092d8:	2200      	movs	r2, #0
 80092da:	2312      	movs	r3, #18
 80092dc:	e7d0      	b.n	8009280 <_dtoa_r+0x238>
 80092de:	2301      	movs	r3, #1
 80092e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092e2:	e7f5      	b.n	80092d0 <_dtoa_r+0x288>
 80092e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	9307      	str	r3, [sp, #28]
 80092ea:	e7d7      	b.n	800929c <_dtoa_r+0x254>
 80092ec:	3101      	adds	r1, #1
 80092ee:	0052      	lsls	r2, r2, #1
 80092f0:	e7d8      	b.n	80092a4 <_dtoa_r+0x25c>
 80092f2:	bf00      	nop
 80092f4:	f3af 8000 	nop.w
 80092f8:	636f4361 	.word	0x636f4361
 80092fc:	3fd287a7 	.word	0x3fd287a7
 8009300:	8b60c8b3 	.word	0x8b60c8b3
 8009304:	3fc68a28 	.word	0x3fc68a28
 8009308:	509f79fb 	.word	0x509f79fb
 800930c:	3fd34413 	.word	0x3fd34413
 8009310:	0800bda1 	.word	0x0800bda1
 8009314:	0800be63 	.word	0x0800be63
 8009318:	7ff00000 	.word	0x7ff00000
 800931c:	0800bd79 	.word	0x0800bd79
 8009320:	3ff80000 	.word	0x3ff80000
 8009324:	0800bfc0 	.word	0x0800bfc0
 8009328:	0800bebb 	.word	0x0800bebb
 800932c:	0800be5f 	.word	0x0800be5f
 8009330:	0800bd78 	.word	0x0800bd78
 8009334:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009338:	6018      	str	r0, [r3, #0]
 800933a:	9b07      	ldr	r3, [sp, #28]
 800933c:	2b0e      	cmp	r3, #14
 800933e:	f200 80a4 	bhi.w	800948a <_dtoa_r+0x442>
 8009342:	2c00      	cmp	r4, #0
 8009344:	f000 80a1 	beq.w	800948a <_dtoa_r+0x442>
 8009348:	2f00      	cmp	r7, #0
 800934a:	dd33      	ble.n	80093b4 <_dtoa_r+0x36c>
 800934c:	4bad      	ldr	r3, [pc, #692]	@ (8009604 <_dtoa_r+0x5bc>)
 800934e:	f007 020f 	and.w	r2, r7, #15
 8009352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009356:	ed93 7b00 	vldr	d7, [r3]
 800935a:	05f8      	lsls	r0, r7, #23
 800935c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009360:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009364:	d516      	bpl.n	8009394 <_dtoa_r+0x34c>
 8009366:	4ba8      	ldr	r3, [pc, #672]	@ (8009608 <_dtoa_r+0x5c0>)
 8009368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800936c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009370:	f7f7 fa6c 	bl	800084c <__aeabi_ddiv>
 8009374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009378:	f004 040f 	and.w	r4, r4, #15
 800937c:	2603      	movs	r6, #3
 800937e:	4da2      	ldr	r5, [pc, #648]	@ (8009608 <_dtoa_r+0x5c0>)
 8009380:	b954      	cbnz	r4, 8009398 <_dtoa_r+0x350>
 8009382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800938a:	f7f7 fa5f 	bl	800084c <__aeabi_ddiv>
 800938e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009392:	e028      	b.n	80093e6 <_dtoa_r+0x39e>
 8009394:	2602      	movs	r6, #2
 8009396:	e7f2      	b.n	800937e <_dtoa_r+0x336>
 8009398:	07e1      	lsls	r1, r4, #31
 800939a:	d508      	bpl.n	80093ae <_dtoa_r+0x366>
 800939c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093a4:	f7f7 f928 	bl	80005f8 <__aeabi_dmul>
 80093a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093ac:	3601      	adds	r6, #1
 80093ae:	1064      	asrs	r4, r4, #1
 80093b0:	3508      	adds	r5, #8
 80093b2:	e7e5      	b.n	8009380 <_dtoa_r+0x338>
 80093b4:	f000 80d2 	beq.w	800955c <_dtoa_r+0x514>
 80093b8:	427c      	negs	r4, r7
 80093ba:	4b92      	ldr	r3, [pc, #584]	@ (8009604 <_dtoa_r+0x5bc>)
 80093bc:	4d92      	ldr	r5, [pc, #584]	@ (8009608 <_dtoa_r+0x5c0>)
 80093be:	f004 020f 	and.w	r2, r4, #15
 80093c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093ce:	f7f7 f913 	bl	80005f8 <__aeabi_dmul>
 80093d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093d6:	1124      	asrs	r4, r4, #4
 80093d8:	2300      	movs	r3, #0
 80093da:	2602      	movs	r6, #2
 80093dc:	2c00      	cmp	r4, #0
 80093de:	f040 80b2 	bne.w	8009546 <_dtoa_r+0x4fe>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1d3      	bne.n	800938e <_dtoa_r+0x346>
 80093e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 80b7 	beq.w	8009560 <_dtoa_r+0x518>
 80093f2:	4b86      	ldr	r3, [pc, #536]	@ (800960c <_dtoa_r+0x5c4>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	4620      	mov	r0, r4
 80093f8:	4629      	mov	r1, r5
 80093fa:	f7f7 fb6f 	bl	8000adc <__aeabi_dcmplt>
 80093fe:	2800      	cmp	r0, #0
 8009400:	f000 80ae 	beq.w	8009560 <_dtoa_r+0x518>
 8009404:	9b07      	ldr	r3, [sp, #28]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 80aa 	beq.w	8009560 <_dtoa_r+0x518>
 800940c:	9b00      	ldr	r3, [sp, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	dd37      	ble.n	8009482 <_dtoa_r+0x43a>
 8009412:	1e7b      	subs	r3, r7, #1
 8009414:	9304      	str	r3, [sp, #16]
 8009416:	4620      	mov	r0, r4
 8009418:	4b7d      	ldr	r3, [pc, #500]	@ (8009610 <_dtoa_r+0x5c8>)
 800941a:	2200      	movs	r2, #0
 800941c:	4629      	mov	r1, r5
 800941e:	f7f7 f8eb 	bl	80005f8 <__aeabi_dmul>
 8009422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009426:	9c00      	ldr	r4, [sp, #0]
 8009428:	3601      	adds	r6, #1
 800942a:	4630      	mov	r0, r6
 800942c:	f7f7 f87a 	bl	8000524 <__aeabi_i2d>
 8009430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009434:	f7f7 f8e0 	bl	80005f8 <__aeabi_dmul>
 8009438:	4b76      	ldr	r3, [pc, #472]	@ (8009614 <_dtoa_r+0x5cc>)
 800943a:	2200      	movs	r2, #0
 800943c:	f7f6 ff26 	bl	800028c <__adddf3>
 8009440:	4605      	mov	r5, r0
 8009442:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009446:	2c00      	cmp	r4, #0
 8009448:	f040 808d 	bne.w	8009566 <_dtoa_r+0x51e>
 800944c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009450:	4b71      	ldr	r3, [pc, #452]	@ (8009618 <_dtoa_r+0x5d0>)
 8009452:	2200      	movs	r2, #0
 8009454:	f7f6 ff18 	bl	8000288 <__aeabi_dsub>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009460:	462a      	mov	r2, r5
 8009462:	4633      	mov	r3, r6
 8009464:	f7f7 fb58 	bl	8000b18 <__aeabi_dcmpgt>
 8009468:	2800      	cmp	r0, #0
 800946a:	f040 828b 	bne.w	8009984 <_dtoa_r+0x93c>
 800946e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009472:	462a      	mov	r2, r5
 8009474:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009478:	f7f7 fb30 	bl	8000adc <__aeabi_dcmplt>
 800947c:	2800      	cmp	r0, #0
 800947e:	f040 8128 	bne.w	80096d2 <_dtoa_r+0x68a>
 8009482:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009486:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800948a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800948c:	2b00      	cmp	r3, #0
 800948e:	f2c0 815a 	blt.w	8009746 <_dtoa_r+0x6fe>
 8009492:	2f0e      	cmp	r7, #14
 8009494:	f300 8157 	bgt.w	8009746 <_dtoa_r+0x6fe>
 8009498:	4b5a      	ldr	r3, [pc, #360]	@ (8009604 <_dtoa_r+0x5bc>)
 800949a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800949e:	ed93 7b00 	vldr	d7, [r3]
 80094a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	ed8d 7b00 	vstr	d7, [sp]
 80094aa:	da03      	bge.n	80094b4 <_dtoa_r+0x46c>
 80094ac:	9b07      	ldr	r3, [sp, #28]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f340 8101 	ble.w	80096b6 <_dtoa_r+0x66e>
 80094b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80094b8:	4656      	mov	r6, sl
 80094ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094be:	4620      	mov	r0, r4
 80094c0:	4629      	mov	r1, r5
 80094c2:	f7f7 f9c3 	bl	800084c <__aeabi_ddiv>
 80094c6:	f7f7 fb47 	bl	8000b58 <__aeabi_d2iz>
 80094ca:	4680      	mov	r8, r0
 80094cc:	f7f7 f82a 	bl	8000524 <__aeabi_i2d>
 80094d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094d4:	f7f7 f890 	bl	80005f8 <__aeabi_dmul>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4620      	mov	r0, r4
 80094de:	4629      	mov	r1, r5
 80094e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80094e4:	f7f6 fed0 	bl	8000288 <__aeabi_dsub>
 80094e8:	f806 4b01 	strb.w	r4, [r6], #1
 80094ec:	9d07      	ldr	r5, [sp, #28]
 80094ee:	eba6 040a 	sub.w	r4, r6, sl
 80094f2:	42a5      	cmp	r5, r4
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	f040 8117 	bne.w	800972a <_dtoa_r+0x6e2>
 80094fc:	f7f6 fec6 	bl	800028c <__adddf3>
 8009500:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009504:	4604      	mov	r4, r0
 8009506:	460d      	mov	r5, r1
 8009508:	f7f7 fb06 	bl	8000b18 <__aeabi_dcmpgt>
 800950c:	2800      	cmp	r0, #0
 800950e:	f040 80f9 	bne.w	8009704 <_dtoa_r+0x6bc>
 8009512:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009516:	4620      	mov	r0, r4
 8009518:	4629      	mov	r1, r5
 800951a:	f7f7 fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 800951e:	b118      	cbz	r0, 8009528 <_dtoa_r+0x4e0>
 8009520:	f018 0f01 	tst.w	r8, #1
 8009524:	f040 80ee 	bne.w	8009704 <_dtoa_r+0x6bc>
 8009528:	4649      	mov	r1, r9
 800952a:	4658      	mov	r0, fp
 800952c:	f000 ffdc 	bl	800a4e8 <_Bfree>
 8009530:	2300      	movs	r3, #0
 8009532:	7033      	strb	r3, [r6, #0]
 8009534:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009536:	3701      	adds	r7, #1
 8009538:	601f      	str	r7, [r3, #0]
 800953a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 831d 	beq.w	8009b7c <_dtoa_r+0xb34>
 8009542:	601e      	str	r6, [r3, #0]
 8009544:	e31a      	b.n	8009b7c <_dtoa_r+0xb34>
 8009546:	07e2      	lsls	r2, r4, #31
 8009548:	d505      	bpl.n	8009556 <_dtoa_r+0x50e>
 800954a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800954e:	f7f7 f853 	bl	80005f8 <__aeabi_dmul>
 8009552:	3601      	adds	r6, #1
 8009554:	2301      	movs	r3, #1
 8009556:	1064      	asrs	r4, r4, #1
 8009558:	3508      	adds	r5, #8
 800955a:	e73f      	b.n	80093dc <_dtoa_r+0x394>
 800955c:	2602      	movs	r6, #2
 800955e:	e742      	b.n	80093e6 <_dtoa_r+0x39e>
 8009560:	9c07      	ldr	r4, [sp, #28]
 8009562:	9704      	str	r7, [sp, #16]
 8009564:	e761      	b.n	800942a <_dtoa_r+0x3e2>
 8009566:	4b27      	ldr	r3, [pc, #156]	@ (8009604 <_dtoa_r+0x5bc>)
 8009568:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800956a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800956e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009572:	4454      	add	r4, sl
 8009574:	2900      	cmp	r1, #0
 8009576:	d053      	beq.n	8009620 <_dtoa_r+0x5d8>
 8009578:	4928      	ldr	r1, [pc, #160]	@ (800961c <_dtoa_r+0x5d4>)
 800957a:	2000      	movs	r0, #0
 800957c:	f7f7 f966 	bl	800084c <__aeabi_ddiv>
 8009580:	4633      	mov	r3, r6
 8009582:	462a      	mov	r2, r5
 8009584:	f7f6 fe80 	bl	8000288 <__aeabi_dsub>
 8009588:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800958c:	4656      	mov	r6, sl
 800958e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009592:	f7f7 fae1 	bl	8000b58 <__aeabi_d2iz>
 8009596:	4605      	mov	r5, r0
 8009598:	f7f6 ffc4 	bl	8000524 <__aeabi_i2d>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095a4:	f7f6 fe70 	bl	8000288 <__aeabi_dsub>
 80095a8:	3530      	adds	r5, #48	@ 0x30
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095b2:	f806 5b01 	strb.w	r5, [r6], #1
 80095b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095ba:	f7f7 fa8f 	bl	8000adc <__aeabi_dcmplt>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d171      	bne.n	80096a6 <_dtoa_r+0x65e>
 80095c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095c6:	4911      	ldr	r1, [pc, #68]	@ (800960c <_dtoa_r+0x5c4>)
 80095c8:	2000      	movs	r0, #0
 80095ca:	f7f6 fe5d 	bl	8000288 <__aeabi_dsub>
 80095ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095d2:	f7f7 fa83 	bl	8000adc <__aeabi_dcmplt>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f040 8095 	bne.w	8009706 <_dtoa_r+0x6be>
 80095dc:	42a6      	cmp	r6, r4
 80095de:	f43f af50 	beq.w	8009482 <_dtoa_r+0x43a>
 80095e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80095e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009610 <_dtoa_r+0x5c8>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	f7f7 f805 	bl	80005f8 <__aeabi_dmul>
 80095ee:	4b08      	ldr	r3, [pc, #32]	@ (8009610 <_dtoa_r+0x5c8>)
 80095f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80095f4:	2200      	movs	r2, #0
 80095f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095fa:	f7f6 fffd 	bl	80005f8 <__aeabi_dmul>
 80095fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009602:	e7c4      	b.n	800958e <_dtoa_r+0x546>
 8009604:	0800bfc0 	.word	0x0800bfc0
 8009608:	0800bf98 	.word	0x0800bf98
 800960c:	3ff00000 	.word	0x3ff00000
 8009610:	40240000 	.word	0x40240000
 8009614:	401c0000 	.word	0x401c0000
 8009618:	40140000 	.word	0x40140000
 800961c:	3fe00000 	.word	0x3fe00000
 8009620:	4631      	mov	r1, r6
 8009622:	4628      	mov	r0, r5
 8009624:	f7f6 ffe8 	bl	80005f8 <__aeabi_dmul>
 8009628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800962c:	9415      	str	r4, [sp, #84]	@ 0x54
 800962e:	4656      	mov	r6, sl
 8009630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009634:	f7f7 fa90 	bl	8000b58 <__aeabi_d2iz>
 8009638:	4605      	mov	r5, r0
 800963a:	f7f6 ff73 	bl	8000524 <__aeabi_i2d>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009646:	f7f6 fe1f 	bl	8000288 <__aeabi_dsub>
 800964a:	3530      	adds	r5, #48	@ 0x30
 800964c:	f806 5b01 	strb.w	r5, [r6], #1
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	42a6      	cmp	r6, r4
 8009656:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	d124      	bne.n	80096aa <_dtoa_r+0x662>
 8009660:	4bac      	ldr	r3, [pc, #688]	@ (8009914 <_dtoa_r+0x8cc>)
 8009662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009666:	f7f6 fe11 	bl	800028c <__adddf3>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009672:	f7f7 fa51 	bl	8000b18 <__aeabi_dcmpgt>
 8009676:	2800      	cmp	r0, #0
 8009678:	d145      	bne.n	8009706 <_dtoa_r+0x6be>
 800967a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800967e:	49a5      	ldr	r1, [pc, #660]	@ (8009914 <_dtoa_r+0x8cc>)
 8009680:	2000      	movs	r0, #0
 8009682:	f7f6 fe01 	bl	8000288 <__aeabi_dsub>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800968e:	f7f7 fa25 	bl	8000adc <__aeabi_dcmplt>
 8009692:	2800      	cmp	r0, #0
 8009694:	f43f aef5 	beq.w	8009482 <_dtoa_r+0x43a>
 8009698:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800969a:	1e73      	subs	r3, r6, #1
 800969c:	9315      	str	r3, [sp, #84]	@ 0x54
 800969e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80096a2:	2b30      	cmp	r3, #48	@ 0x30
 80096a4:	d0f8      	beq.n	8009698 <_dtoa_r+0x650>
 80096a6:	9f04      	ldr	r7, [sp, #16]
 80096a8:	e73e      	b.n	8009528 <_dtoa_r+0x4e0>
 80096aa:	4b9b      	ldr	r3, [pc, #620]	@ (8009918 <_dtoa_r+0x8d0>)
 80096ac:	f7f6 ffa4 	bl	80005f8 <__aeabi_dmul>
 80096b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096b4:	e7bc      	b.n	8009630 <_dtoa_r+0x5e8>
 80096b6:	d10c      	bne.n	80096d2 <_dtoa_r+0x68a>
 80096b8:	4b98      	ldr	r3, [pc, #608]	@ (800991c <_dtoa_r+0x8d4>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096c0:	f7f6 ff9a 	bl	80005f8 <__aeabi_dmul>
 80096c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096c8:	f7f7 fa1c 	bl	8000b04 <__aeabi_dcmpge>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	f000 8157 	beq.w	8009980 <_dtoa_r+0x938>
 80096d2:	2400      	movs	r4, #0
 80096d4:	4625      	mov	r5, r4
 80096d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096d8:	43db      	mvns	r3, r3
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	4656      	mov	r6, sl
 80096de:	2700      	movs	r7, #0
 80096e0:	4621      	mov	r1, r4
 80096e2:	4658      	mov	r0, fp
 80096e4:	f000 ff00 	bl	800a4e8 <_Bfree>
 80096e8:	2d00      	cmp	r5, #0
 80096ea:	d0dc      	beq.n	80096a6 <_dtoa_r+0x65e>
 80096ec:	b12f      	cbz	r7, 80096fa <_dtoa_r+0x6b2>
 80096ee:	42af      	cmp	r7, r5
 80096f0:	d003      	beq.n	80096fa <_dtoa_r+0x6b2>
 80096f2:	4639      	mov	r1, r7
 80096f4:	4658      	mov	r0, fp
 80096f6:	f000 fef7 	bl	800a4e8 <_Bfree>
 80096fa:	4629      	mov	r1, r5
 80096fc:	4658      	mov	r0, fp
 80096fe:	f000 fef3 	bl	800a4e8 <_Bfree>
 8009702:	e7d0      	b.n	80096a6 <_dtoa_r+0x65e>
 8009704:	9704      	str	r7, [sp, #16]
 8009706:	4633      	mov	r3, r6
 8009708:	461e      	mov	r6, r3
 800970a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800970e:	2a39      	cmp	r2, #57	@ 0x39
 8009710:	d107      	bne.n	8009722 <_dtoa_r+0x6da>
 8009712:	459a      	cmp	sl, r3
 8009714:	d1f8      	bne.n	8009708 <_dtoa_r+0x6c0>
 8009716:	9a04      	ldr	r2, [sp, #16]
 8009718:	3201      	adds	r2, #1
 800971a:	9204      	str	r2, [sp, #16]
 800971c:	2230      	movs	r2, #48	@ 0x30
 800971e:	f88a 2000 	strb.w	r2, [sl]
 8009722:	781a      	ldrb	r2, [r3, #0]
 8009724:	3201      	adds	r2, #1
 8009726:	701a      	strb	r2, [r3, #0]
 8009728:	e7bd      	b.n	80096a6 <_dtoa_r+0x65e>
 800972a:	4b7b      	ldr	r3, [pc, #492]	@ (8009918 <_dtoa_r+0x8d0>)
 800972c:	2200      	movs	r2, #0
 800972e:	f7f6 ff63 	bl	80005f8 <__aeabi_dmul>
 8009732:	2200      	movs	r2, #0
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	460d      	mov	r5, r1
 800973a:	f7f7 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800973e:	2800      	cmp	r0, #0
 8009740:	f43f aebb 	beq.w	80094ba <_dtoa_r+0x472>
 8009744:	e6f0      	b.n	8009528 <_dtoa_r+0x4e0>
 8009746:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009748:	2a00      	cmp	r2, #0
 800974a:	f000 80db 	beq.w	8009904 <_dtoa_r+0x8bc>
 800974e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009750:	2a01      	cmp	r2, #1
 8009752:	f300 80bf 	bgt.w	80098d4 <_dtoa_r+0x88c>
 8009756:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009758:	2a00      	cmp	r2, #0
 800975a:	f000 80b7 	beq.w	80098cc <_dtoa_r+0x884>
 800975e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009762:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009764:	4646      	mov	r6, r8
 8009766:	9a08      	ldr	r2, [sp, #32]
 8009768:	2101      	movs	r1, #1
 800976a:	441a      	add	r2, r3
 800976c:	4658      	mov	r0, fp
 800976e:	4498      	add	r8, r3
 8009770:	9208      	str	r2, [sp, #32]
 8009772:	f000 ffb7 	bl	800a6e4 <__i2b>
 8009776:	4605      	mov	r5, r0
 8009778:	b15e      	cbz	r6, 8009792 <_dtoa_r+0x74a>
 800977a:	9b08      	ldr	r3, [sp, #32]
 800977c:	2b00      	cmp	r3, #0
 800977e:	dd08      	ble.n	8009792 <_dtoa_r+0x74a>
 8009780:	42b3      	cmp	r3, r6
 8009782:	9a08      	ldr	r2, [sp, #32]
 8009784:	bfa8      	it	ge
 8009786:	4633      	movge	r3, r6
 8009788:	eba8 0803 	sub.w	r8, r8, r3
 800978c:	1af6      	subs	r6, r6, r3
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	9308      	str	r3, [sp, #32]
 8009792:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009794:	b1f3      	cbz	r3, 80097d4 <_dtoa_r+0x78c>
 8009796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 80b7 	beq.w	800990c <_dtoa_r+0x8c4>
 800979e:	b18c      	cbz	r4, 80097c4 <_dtoa_r+0x77c>
 80097a0:	4629      	mov	r1, r5
 80097a2:	4622      	mov	r2, r4
 80097a4:	4658      	mov	r0, fp
 80097a6:	f001 f85d 	bl	800a864 <__pow5mult>
 80097aa:	464a      	mov	r2, r9
 80097ac:	4601      	mov	r1, r0
 80097ae:	4605      	mov	r5, r0
 80097b0:	4658      	mov	r0, fp
 80097b2:	f000 ffad 	bl	800a710 <__multiply>
 80097b6:	4649      	mov	r1, r9
 80097b8:	9004      	str	r0, [sp, #16]
 80097ba:	4658      	mov	r0, fp
 80097bc:	f000 fe94 	bl	800a4e8 <_Bfree>
 80097c0:	9b04      	ldr	r3, [sp, #16]
 80097c2:	4699      	mov	r9, r3
 80097c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097c6:	1b1a      	subs	r2, r3, r4
 80097c8:	d004      	beq.n	80097d4 <_dtoa_r+0x78c>
 80097ca:	4649      	mov	r1, r9
 80097cc:	4658      	mov	r0, fp
 80097ce:	f001 f849 	bl	800a864 <__pow5mult>
 80097d2:	4681      	mov	r9, r0
 80097d4:	2101      	movs	r1, #1
 80097d6:	4658      	mov	r0, fp
 80097d8:	f000 ff84 	bl	800a6e4 <__i2b>
 80097dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097de:	4604      	mov	r4, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 81cf 	beq.w	8009b84 <_dtoa_r+0xb3c>
 80097e6:	461a      	mov	r2, r3
 80097e8:	4601      	mov	r1, r0
 80097ea:	4658      	mov	r0, fp
 80097ec:	f001 f83a 	bl	800a864 <__pow5mult>
 80097f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	4604      	mov	r4, r0
 80097f6:	f300 8095 	bgt.w	8009924 <_dtoa_r+0x8dc>
 80097fa:	9b02      	ldr	r3, [sp, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f040 8087 	bne.w	8009910 <_dtoa_r+0x8c8>
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009808:	2b00      	cmp	r3, #0
 800980a:	f040 8089 	bne.w	8009920 <_dtoa_r+0x8d8>
 800980e:	9b03      	ldr	r3, [sp, #12]
 8009810:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009814:	0d1b      	lsrs	r3, r3, #20
 8009816:	051b      	lsls	r3, r3, #20
 8009818:	b12b      	cbz	r3, 8009826 <_dtoa_r+0x7de>
 800981a:	9b08      	ldr	r3, [sp, #32]
 800981c:	3301      	adds	r3, #1
 800981e:	9308      	str	r3, [sp, #32]
 8009820:	f108 0801 	add.w	r8, r8, #1
 8009824:	2301      	movs	r3, #1
 8009826:	930a      	str	r3, [sp, #40]	@ 0x28
 8009828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 81b0 	beq.w	8009b90 <_dtoa_r+0xb48>
 8009830:	6923      	ldr	r3, [r4, #16]
 8009832:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009836:	6918      	ldr	r0, [r3, #16]
 8009838:	f000 ff08 	bl	800a64c <__hi0bits>
 800983c:	f1c0 0020 	rsb	r0, r0, #32
 8009840:	9b08      	ldr	r3, [sp, #32]
 8009842:	4418      	add	r0, r3
 8009844:	f010 001f 	ands.w	r0, r0, #31
 8009848:	d077      	beq.n	800993a <_dtoa_r+0x8f2>
 800984a:	f1c0 0320 	rsb	r3, r0, #32
 800984e:	2b04      	cmp	r3, #4
 8009850:	dd6b      	ble.n	800992a <_dtoa_r+0x8e2>
 8009852:	9b08      	ldr	r3, [sp, #32]
 8009854:	f1c0 001c 	rsb	r0, r0, #28
 8009858:	4403      	add	r3, r0
 800985a:	4480      	add	r8, r0
 800985c:	4406      	add	r6, r0
 800985e:	9308      	str	r3, [sp, #32]
 8009860:	f1b8 0f00 	cmp.w	r8, #0
 8009864:	dd05      	ble.n	8009872 <_dtoa_r+0x82a>
 8009866:	4649      	mov	r1, r9
 8009868:	4642      	mov	r2, r8
 800986a:	4658      	mov	r0, fp
 800986c:	f001 f854 	bl	800a918 <__lshift>
 8009870:	4681      	mov	r9, r0
 8009872:	9b08      	ldr	r3, [sp, #32]
 8009874:	2b00      	cmp	r3, #0
 8009876:	dd05      	ble.n	8009884 <_dtoa_r+0x83c>
 8009878:	4621      	mov	r1, r4
 800987a:	461a      	mov	r2, r3
 800987c:	4658      	mov	r0, fp
 800987e:	f001 f84b 	bl	800a918 <__lshift>
 8009882:	4604      	mov	r4, r0
 8009884:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009886:	2b00      	cmp	r3, #0
 8009888:	d059      	beq.n	800993e <_dtoa_r+0x8f6>
 800988a:	4621      	mov	r1, r4
 800988c:	4648      	mov	r0, r9
 800988e:	f001 f8af 	bl	800a9f0 <__mcmp>
 8009892:	2800      	cmp	r0, #0
 8009894:	da53      	bge.n	800993e <_dtoa_r+0x8f6>
 8009896:	1e7b      	subs	r3, r7, #1
 8009898:	9304      	str	r3, [sp, #16]
 800989a:	4649      	mov	r1, r9
 800989c:	2300      	movs	r3, #0
 800989e:	220a      	movs	r2, #10
 80098a0:	4658      	mov	r0, fp
 80098a2:	f000 fe43 	bl	800a52c <__multadd>
 80098a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098a8:	4681      	mov	r9, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 8172 	beq.w	8009b94 <_dtoa_r+0xb4c>
 80098b0:	2300      	movs	r3, #0
 80098b2:	4629      	mov	r1, r5
 80098b4:	220a      	movs	r2, #10
 80098b6:	4658      	mov	r0, fp
 80098b8:	f000 fe38 	bl	800a52c <__multadd>
 80098bc:	9b00      	ldr	r3, [sp, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	4605      	mov	r5, r0
 80098c2:	dc67      	bgt.n	8009994 <_dtoa_r+0x94c>
 80098c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	dc41      	bgt.n	800994e <_dtoa_r+0x906>
 80098ca:	e063      	b.n	8009994 <_dtoa_r+0x94c>
 80098cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80098ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80098d2:	e746      	b.n	8009762 <_dtoa_r+0x71a>
 80098d4:	9b07      	ldr	r3, [sp, #28]
 80098d6:	1e5c      	subs	r4, r3, #1
 80098d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098da:	42a3      	cmp	r3, r4
 80098dc:	bfbf      	itttt	lt
 80098de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80098e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80098e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80098e4:	1ae3      	sublt	r3, r4, r3
 80098e6:	bfb4      	ite	lt
 80098e8:	18d2      	addlt	r2, r2, r3
 80098ea:	1b1c      	subge	r4, r3, r4
 80098ec:	9b07      	ldr	r3, [sp, #28]
 80098ee:	bfbc      	itt	lt
 80098f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80098f2:	2400      	movlt	r4, #0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	bfb5      	itete	lt
 80098f8:	eba8 0603 	sublt.w	r6, r8, r3
 80098fc:	9b07      	ldrge	r3, [sp, #28]
 80098fe:	2300      	movlt	r3, #0
 8009900:	4646      	movge	r6, r8
 8009902:	e730      	b.n	8009766 <_dtoa_r+0x71e>
 8009904:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009906:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009908:	4646      	mov	r6, r8
 800990a:	e735      	b.n	8009778 <_dtoa_r+0x730>
 800990c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800990e:	e75c      	b.n	80097ca <_dtoa_r+0x782>
 8009910:	2300      	movs	r3, #0
 8009912:	e788      	b.n	8009826 <_dtoa_r+0x7de>
 8009914:	3fe00000 	.word	0x3fe00000
 8009918:	40240000 	.word	0x40240000
 800991c:	40140000 	.word	0x40140000
 8009920:	9b02      	ldr	r3, [sp, #8]
 8009922:	e780      	b.n	8009826 <_dtoa_r+0x7de>
 8009924:	2300      	movs	r3, #0
 8009926:	930a      	str	r3, [sp, #40]	@ 0x28
 8009928:	e782      	b.n	8009830 <_dtoa_r+0x7e8>
 800992a:	d099      	beq.n	8009860 <_dtoa_r+0x818>
 800992c:	9a08      	ldr	r2, [sp, #32]
 800992e:	331c      	adds	r3, #28
 8009930:	441a      	add	r2, r3
 8009932:	4498      	add	r8, r3
 8009934:	441e      	add	r6, r3
 8009936:	9208      	str	r2, [sp, #32]
 8009938:	e792      	b.n	8009860 <_dtoa_r+0x818>
 800993a:	4603      	mov	r3, r0
 800993c:	e7f6      	b.n	800992c <_dtoa_r+0x8e4>
 800993e:	9b07      	ldr	r3, [sp, #28]
 8009940:	9704      	str	r7, [sp, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	dc20      	bgt.n	8009988 <_dtoa_r+0x940>
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800994a:	2b02      	cmp	r3, #2
 800994c:	dd1e      	ble.n	800998c <_dtoa_r+0x944>
 800994e:	9b00      	ldr	r3, [sp, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	f47f aec0 	bne.w	80096d6 <_dtoa_r+0x68e>
 8009956:	4621      	mov	r1, r4
 8009958:	2205      	movs	r2, #5
 800995a:	4658      	mov	r0, fp
 800995c:	f000 fde6 	bl	800a52c <__multadd>
 8009960:	4601      	mov	r1, r0
 8009962:	4604      	mov	r4, r0
 8009964:	4648      	mov	r0, r9
 8009966:	f001 f843 	bl	800a9f0 <__mcmp>
 800996a:	2800      	cmp	r0, #0
 800996c:	f77f aeb3 	ble.w	80096d6 <_dtoa_r+0x68e>
 8009970:	4656      	mov	r6, sl
 8009972:	2331      	movs	r3, #49	@ 0x31
 8009974:	f806 3b01 	strb.w	r3, [r6], #1
 8009978:	9b04      	ldr	r3, [sp, #16]
 800997a:	3301      	adds	r3, #1
 800997c:	9304      	str	r3, [sp, #16]
 800997e:	e6ae      	b.n	80096de <_dtoa_r+0x696>
 8009980:	9c07      	ldr	r4, [sp, #28]
 8009982:	9704      	str	r7, [sp, #16]
 8009984:	4625      	mov	r5, r4
 8009986:	e7f3      	b.n	8009970 <_dtoa_r+0x928>
 8009988:	9b07      	ldr	r3, [sp, #28]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800998e:	2b00      	cmp	r3, #0
 8009990:	f000 8104 	beq.w	8009b9c <_dtoa_r+0xb54>
 8009994:	2e00      	cmp	r6, #0
 8009996:	dd05      	ble.n	80099a4 <_dtoa_r+0x95c>
 8009998:	4629      	mov	r1, r5
 800999a:	4632      	mov	r2, r6
 800999c:	4658      	mov	r0, fp
 800999e:	f000 ffbb 	bl	800a918 <__lshift>
 80099a2:	4605      	mov	r5, r0
 80099a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d05a      	beq.n	8009a60 <_dtoa_r+0xa18>
 80099aa:	6869      	ldr	r1, [r5, #4]
 80099ac:	4658      	mov	r0, fp
 80099ae:	f000 fd5b 	bl	800a468 <_Balloc>
 80099b2:	4606      	mov	r6, r0
 80099b4:	b928      	cbnz	r0, 80099c2 <_dtoa_r+0x97a>
 80099b6:	4b84      	ldr	r3, [pc, #528]	@ (8009bc8 <_dtoa_r+0xb80>)
 80099b8:	4602      	mov	r2, r0
 80099ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80099be:	f7ff bb5a 	b.w	8009076 <_dtoa_r+0x2e>
 80099c2:	692a      	ldr	r2, [r5, #16]
 80099c4:	3202      	adds	r2, #2
 80099c6:	0092      	lsls	r2, r2, #2
 80099c8:	f105 010c 	add.w	r1, r5, #12
 80099cc:	300c      	adds	r0, #12
 80099ce:	f7ff fa76 	bl	8008ebe <memcpy>
 80099d2:	2201      	movs	r2, #1
 80099d4:	4631      	mov	r1, r6
 80099d6:	4658      	mov	r0, fp
 80099d8:	f000 ff9e 	bl	800a918 <__lshift>
 80099dc:	f10a 0301 	add.w	r3, sl, #1
 80099e0:	9307      	str	r3, [sp, #28]
 80099e2:	9b00      	ldr	r3, [sp, #0]
 80099e4:	4453      	add	r3, sl
 80099e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099e8:	9b02      	ldr	r3, [sp, #8]
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	462f      	mov	r7, r5
 80099f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80099f2:	4605      	mov	r5, r0
 80099f4:	9b07      	ldr	r3, [sp, #28]
 80099f6:	4621      	mov	r1, r4
 80099f8:	3b01      	subs	r3, #1
 80099fa:	4648      	mov	r0, r9
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	f7ff fa9b 	bl	8008f38 <quorem>
 8009a02:	4639      	mov	r1, r7
 8009a04:	9002      	str	r0, [sp, #8]
 8009a06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a0a:	4648      	mov	r0, r9
 8009a0c:	f000 fff0 	bl	800a9f0 <__mcmp>
 8009a10:	462a      	mov	r2, r5
 8009a12:	9008      	str	r0, [sp, #32]
 8009a14:	4621      	mov	r1, r4
 8009a16:	4658      	mov	r0, fp
 8009a18:	f001 f806 	bl	800aa28 <__mdiff>
 8009a1c:	68c2      	ldr	r2, [r0, #12]
 8009a1e:	4606      	mov	r6, r0
 8009a20:	bb02      	cbnz	r2, 8009a64 <_dtoa_r+0xa1c>
 8009a22:	4601      	mov	r1, r0
 8009a24:	4648      	mov	r0, r9
 8009a26:	f000 ffe3 	bl	800a9f0 <__mcmp>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4658      	mov	r0, fp
 8009a30:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a32:	f000 fd59 	bl	800a4e8 <_Bfree>
 8009a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a3a:	9e07      	ldr	r6, [sp, #28]
 8009a3c:	ea43 0102 	orr.w	r1, r3, r2
 8009a40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a42:	4319      	orrs	r1, r3
 8009a44:	d110      	bne.n	8009a68 <_dtoa_r+0xa20>
 8009a46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a4a:	d029      	beq.n	8009aa0 <_dtoa_r+0xa58>
 8009a4c:	9b08      	ldr	r3, [sp, #32]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	dd02      	ble.n	8009a58 <_dtoa_r+0xa10>
 8009a52:	9b02      	ldr	r3, [sp, #8]
 8009a54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009a58:	9b00      	ldr	r3, [sp, #0]
 8009a5a:	f883 8000 	strb.w	r8, [r3]
 8009a5e:	e63f      	b.n	80096e0 <_dtoa_r+0x698>
 8009a60:	4628      	mov	r0, r5
 8009a62:	e7bb      	b.n	80099dc <_dtoa_r+0x994>
 8009a64:	2201      	movs	r2, #1
 8009a66:	e7e1      	b.n	8009a2c <_dtoa_r+0x9e4>
 8009a68:	9b08      	ldr	r3, [sp, #32]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	db04      	blt.n	8009a78 <_dtoa_r+0xa30>
 8009a6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a70:	430b      	orrs	r3, r1
 8009a72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a74:	430b      	orrs	r3, r1
 8009a76:	d120      	bne.n	8009aba <_dtoa_r+0xa72>
 8009a78:	2a00      	cmp	r2, #0
 8009a7a:	dded      	ble.n	8009a58 <_dtoa_r+0xa10>
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	2201      	movs	r2, #1
 8009a80:	4658      	mov	r0, fp
 8009a82:	f000 ff49 	bl	800a918 <__lshift>
 8009a86:	4621      	mov	r1, r4
 8009a88:	4681      	mov	r9, r0
 8009a8a:	f000 ffb1 	bl	800a9f0 <__mcmp>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	dc03      	bgt.n	8009a9a <_dtoa_r+0xa52>
 8009a92:	d1e1      	bne.n	8009a58 <_dtoa_r+0xa10>
 8009a94:	f018 0f01 	tst.w	r8, #1
 8009a98:	d0de      	beq.n	8009a58 <_dtoa_r+0xa10>
 8009a9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a9e:	d1d8      	bne.n	8009a52 <_dtoa_r+0xa0a>
 8009aa0:	9a00      	ldr	r2, [sp, #0]
 8009aa2:	2339      	movs	r3, #57	@ 0x39
 8009aa4:	7013      	strb	r3, [r2, #0]
 8009aa6:	4633      	mov	r3, r6
 8009aa8:	461e      	mov	r6, r3
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ab0:	2a39      	cmp	r2, #57	@ 0x39
 8009ab2:	d052      	beq.n	8009b5a <_dtoa_r+0xb12>
 8009ab4:	3201      	adds	r2, #1
 8009ab6:	701a      	strb	r2, [r3, #0]
 8009ab8:	e612      	b.n	80096e0 <_dtoa_r+0x698>
 8009aba:	2a00      	cmp	r2, #0
 8009abc:	dd07      	ble.n	8009ace <_dtoa_r+0xa86>
 8009abe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ac2:	d0ed      	beq.n	8009aa0 <_dtoa_r+0xa58>
 8009ac4:	9a00      	ldr	r2, [sp, #0]
 8009ac6:	f108 0301 	add.w	r3, r8, #1
 8009aca:	7013      	strb	r3, [r2, #0]
 8009acc:	e608      	b.n	80096e0 <_dtoa_r+0x698>
 8009ace:	9b07      	ldr	r3, [sp, #28]
 8009ad0:	9a07      	ldr	r2, [sp, #28]
 8009ad2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009ad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d028      	beq.n	8009b2e <_dtoa_r+0xae6>
 8009adc:	4649      	mov	r1, r9
 8009ade:	2300      	movs	r3, #0
 8009ae0:	220a      	movs	r2, #10
 8009ae2:	4658      	mov	r0, fp
 8009ae4:	f000 fd22 	bl	800a52c <__multadd>
 8009ae8:	42af      	cmp	r7, r5
 8009aea:	4681      	mov	r9, r0
 8009aec:	f04f 0300 	mov.w	r3, #0
 8009af0:	f04f 020a 	mov.w	r2, #10
 8009af4:	4639      	mov	r1, r7
 8009af6:	4658      	mov	r0, fp
 8009af8:	d107      	bne.n	8009b0a <_dtoa_r+0xac2>
 8009afa:	f000 fd17 	bl	800a52c <__multadd>
 8009afe:	4607      	mov	r7, r0
 8009b00:	4605      	mov	r5, r0
 8009b02:	9b07      	ldr	r3, [sp, #28]
 8009b04:	3301      	adds	r3, #1
 8009b06:	9307      	str	r3, [sp, #28]
 8009b08:	e774      	b.n	80099f4 <_dtoa_r+0x9ac>
 8009b0a:	f000 fd0f 	bl	800a52c <__multadd>
 8009b0e:	4629      	mov	r1, r5
 8009b10:	4607      	mov	r7, r0
 8009b12:	2300      	movs	r3, #0
 8009b14:	220a      	movs	r2, #10
 8009b16:	4658      	mov	r0, fp
 8009b18:	f000 fd08 	bl	800a52c <__multadd>
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	e7f0      	b.n	8009b02 <_dtoa_r+0xaba>
 8009b20:	9b00      	ldr	r3, [sp, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	bfcc      	ite	gt
 8009b26:	461e      	movgt	r6, r3
 8009b28:	2601      	movle	r6, #1
 8009b2a:	4456      	add	r6, sl
 8009b2c:	2700      	movs	r7, #0
 8009b2e:	4649      	mov	r1, r9
 8009b30:	2201      	movs	r2, #1
 8009b32:	4658      	mov	r0, fp
 8009b34:	f000 fef0 	bl	800a918 <__lshift>
 8009b38:	4621      	mov	r1, r4
 8009b3a:	4681      	mov	r9, r0
 8009b3c:	f000 ff58 	bl	800a9f0 <__mcmp>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	dcb0      	bgt.n	8009aa6 <_dtoa_r+0xa5e>
 8009b44:	d102      	bne.n	8009b4c <_dtoa_r+0xb04>
 8009b46:	f018 0f01 	tst.w	r8, #1
 8009b4a:	d1ac      	bne.n	8009aa6 <_dtoa_r+0xa5e>
 8009b4c:	4633      	mov	r3, r6
 8009b4e:	461e      	mov	r6, r3
 8009b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b54:	2a30      	cmp	r2, #48	@ 0x30
 8009b56:	d0fa      	beq.n	8009b4e <_dtoa_r+0xb06>
 8009b58:	e5c2      	b.n	80096e0 <_dtoa_r+0x698>
 8009b5a:	459a      	cmp	sl, r3
 8009b5c:	d1a4      	bne.n	8009aa8 <_dtoa_r+0xa60>
 8009b5e:	9b04      	ldr	r3, [sp, #16]
 8009b60:	3301      	adds	r3, #1
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	2331      	movs	r3, #49	@ 0x31
 8009b66:	f88a 3000 	strb.w	r3, [sl]
 8009b6a:	e5b9      	b.n	80096e0 <_dtoa_r+0x698>
 8009b6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009bcc <_dtoa_r+0xb84>
 8009b72:	b11b      	cbz	r3, 8009b7c <_dtoa_r+0xb34>
 8009b74:	f10a 0308 	add.w	r3, sl, #8
 8009b78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	b019      	add	sp, #100	@ 0x64
 8009b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	f77f ae37 	ble.w	80097fa <_dtoa_r+0x7b2>
 8009b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b90:	2001      	movs	r0, #1
 8009b92:	e655      	b.n	8009840 <_dtoa_r+0x7f8>
 8009b94:	9b00      	ldr	r3, [sp, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f77f aed6 	ble.w	8009948 <_dtoa_r+0x900>
 8009b9c:	4656      	mov	r6, sl
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	4648      	mov	r0, r9
 8009ba2:	f7ff f9c9 	bl	8008f38 <quorem>
 8009ba6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009baa:	f806 8b01 	strb.w	r8, [r6], #1
 8009bae:	9b00      	ldr	r3, [sp, #0]
 8009bb0:	eba6 020a 	sub.w	r2, r6, sl
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	ddb3      	ble.n	8009b20 <_dtoa_r+0xad8>
 8009bb8:	4649      	mov	r1, r9
 8009bba:	2300      	movs	r3, #0
 8009bbc:	220a      	movs	r2, #10
 8009bbe:	4658      	mov	r0, fp
 8009bc0:	f000 fcb4 	bl	800a52c <__multadd>
 8009bc4:	4681      	mov	r9, r0
 8009bc6:	e7ea      	b.n	8009b9e <_dtoa_r+0xb56>
 8009bc8:	0800bebb 	.word	0x0800bebb
 8009bcc:	0800be56 	.word	0x0800be56

08009bd0 <_free_r>:
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	2900      	cmp	r1, #0
 8009bd6:	d041      	beq.n	8009c5c <_free_r+0x8c>
 8009bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bdc:	1f0c      	subs	r4, r1, #4
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bfb8      	it	lt
 8009be2:	18e4      	addlt	r4, r4, r3
 8009be4:	f000 fc34 	bl	800a450 <__malloc_lock>
 8009be8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c60 <_free_r+0x90>)
 8009bea:	6813      	ldr	r3, [r2, #0]
 8009bec:	b933      	cbnz	r3, 8009bfc <_free_r+0x2c>
 8009bee:	6063      	str	r3, [r4, #4]
 8009bf0:	6014      	str	r4, [r2, #0]
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bf8:	f000 bc30 	b.w	800a45c <__malloc_unlock>
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	d908      	bls.n	8009c12 <_free_r+0x42>
 8009c00:	6820      	ldr	r0, [r4, #0]
 8009c02:	1821      	adds	r1, r4, r0
 8009c04:	428b      	cmp	r3, r1
 8009c06:	bf01      	itttt	eq
 8009c08:	6819      	ldreq	r1, [r3, #0]
 8009c0a:	685b      	ldreq	r3, [r3, #4]
 8009c0c:	1809      	addeq	r1, r1, r0
 8009c0e:	6021      	streq	r1, [r4, #0]
 8009c10:	e7ed      	b.n	8009bee <_free_r+0x1e>
 8009c12:	461a      	mov	r2, r3
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	b10b      	cbz	r3, 8009c1c <_free_r+0x4c>
 8009c18:	42a3      	cmp	r3, r4
 8009c1a:	d9fa      	bls.n	8009c12 <_free_r+0x42>
 8009c1c:	6811      	ldr	r1, [r2, #0]
 8009c1e:	1850      	adds	r0, r2, r1
 8009c20:	42a0      	cmp	r0, r4
 8009c22:	d10b      	bne.n	8009c3c <_free_r+0x6c>
 8009c24:	6820      	ldr	r0, [r4, #0]
 8009c26:	4401      	add	r1, r0
 8009c28:	1850      	adds	r0, r2, r1
 8009c2a:	4283      	cmp	r3, r0
 8009c2c:	6011      	str	r1, [r2, #0]
 8009c2e:	d1e0      	bne.n	8009bf2 <_free_r+0x22>
 8009c30:	6818      	ldr	r0, [r3, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	6053      	str	r3, [r2, #4]
 8009c36:	4408      	add	r0, r1
 8009c38:	6010      	str	r0, [r2, #0]
 8009c3a:	e7da      	b.n	8009bf2 <_free_r+0x22>
 8009c3c:	d902      	bls.n	8009c44 <_free_r+0x74>
 8009c3e:	230c      	movs	r3, #12
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	e7d6      	b.n	8009bf2 <_free_r+0x22>
 8009c44:	6820      	ldr	r0, [r4, #0]
 8009c46:	1821      	adds	r1, r4, r0
 8009c48:	428b      	cmp	r3, r1
 8009c4a:	bf04      	itt	eq
 8009c4c:	6819      	ldreq	r1, [r3, #0]
 8009c4e:	685b      	ldreq	r3, [r3, #4]
 8009c50:	6063      	str	r3, [r4, #4]
 8009c52:	bf04      	itt	eq
 8009c54:	1809      	addeq	r1, r1, r0
 8009c56:	6021      	streq	r1, [r4, #0]
 8009c58:	6054      	str	r4, [r2, #4]
 8009c5a:	e7ca      	b.n	8009bf2 <_free_r+0x22>
 8009c5c:	bd38      	pop	{r3, r4, r5, pc}
 8009c5e:	bf00      	nop
 8009c60:	20000738 	.word	0x20000738

08009c64 <rshift>:
 8009c64:	6903      	ldr	r3, [r0, #16]
 8009c66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c72:	f100 0414 	add.w	r4, r0, #20
 8009c76:	dd45      	ble.n	8009d04 <rshift+0xa0>
 8009c78:	f011 011f 	ands.w	r1, r1, #31
 8009c7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c84:	d10c      	bne.n	8009ca0 <rshift+0x3c>
 8009c86:	f100 0710 	add.w	r7, r0, #16
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	42b1      	cmp	r1, r6
 8009c8e:	d334      	bcc.n	8009cfa <rshift+0x96>
 8009c90:	1a9b      	subs	r3, r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	1eea      	subs	r2, r5, #3
 8009c96:	4296      	cmp	r6, r2
 8009c98:	bf38      	it	cc
 8009c9a:	2300      	movcc	r3, #0
 8009c9c:	4423      	add	r3, r4
 8009c9e:	e015      	b.n	8009ccc <rshift+0x68>
 8009ca0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ca4:	f1c1 0820 	rsb	r8, r1, #32
 8009ca8:	40cf      	lsrs	r7, r1
 8009caa:	f105 0e04 	add.w	lr, r5, #4
 8009cae:	46a1      	mov	r9, r4
 8009cb0:	4576      	cmp	r6, lr
 8009cb2:	46f4      	mov	ip, lr
 8009cb4:	d815      	bhi.n	8009ce2 <rshift+0x7e>
 8009cb6:	1a9a      	subs	r2, r3, r2
 8009cb8:	0092      	lsls	r2, r2, #2
 8009cba:	3a04      	subs	r2, #4
 8009cbc:	3501      	adds	r5, #1
 8009cbe:	42ae      	cmp	r6, r5
 8009cc0:	bf38      	it	cc
 8009cc2:	2200      	movcc	r2, #0
 8009cc4:	18a3      	adds	r3, r4, r2
 8009cc6:	50a7      	str	r7, [r4, r2]
 8009cc8:	b107      	cbz	r7, 8009ccc <rshift+0x68>
 8009cca:	3304      	adds	r3, #4
 8009ccc:	1b1a      	subs	r2, r3, r4
 8009cce:	42a3      	cmp	r3, r4
 8009cd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009cd4:	bf08      	it	eq
 8009cd6:	2300      	moveq	r3, #0
 8009cd8:	6102      	str	r2, [r0, #16]
 8009cda:	bf08      	it	eq
 8009cdc:	6143      	streq	r3, [r0, #20]
 8009cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ce2:	f8dc c000 	ldr.w	ip, [ip]
 8009ce6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009cea:	ea4c 0707 	orr.w	r7, ip, r7
 8009cee:	f849 7b04 	str.w	r7, [r9], #4
 8009cf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009cf6:	40cf      	lsrs	r7, r1
 8009cf8:	e7da      	b.n	8009cb0 <rshift+0x4c>
 8009cfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8009cfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d02:	e7c3      	b.n	8009c8c <rshift+0x28>
 8009d04:	4623      	mov	r3, r4
 8009d06:	e7e1      	b.n	8009ccc <rshift+0x68>

08009d08 <__hexdig_fun>:
 8009d08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009d0c:	2b09      	cmp	r3, #9
 8009d0e:	d802      	bhi.n	8009d16 <__hexdig_fun+0xe>
 8009d10:	3820      	subs	r0, #32
 8009d12:	b2c0      	uxtb	r0, r0
 8009d14:	4770      	bx	lr
 8009d16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009d1a:	2b05      	cmp	r3, #5
 8009d1c:	d801      	bhi.n	8009d22 <__hexdig_fun+0x1a>
 8009d1e:	3847      	subs	r0, #71	@ 0x47
 8009d20:	e7f7      	b.n	8009d12 <__hexdig_fun+0xa>
 8009d22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009d26:	2b05      	cmp	r3, #5
 8009d28:	d801      	bhi.n	8009d2e <__hexdig_fun+0x26>
 8009d2a:	3827      	subs	r0, #39	@ 0x27
 8009d2c:	e7f1      	b.n	8009d12 <__hexdig_fun+0xa>
 8009d2e:	2000      	movs	r0, #0
 8009d30:	4770      	bx	lr
	...

08009d34 <__gethex>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	468a      	mov	sl, r1
 8009d3c:	9302      	str	r3, [sp, #8]
 8009d3e:	680b      	ldr	r3, [r1, #0]
 8009d40:	9001      	str	r0, [sp, #4]
 8009d42:	4690      	mov	r8, r2
 8009d44:	1c9c      	adds	r4, r3, #2
 8009d46:	46a1      	mov	r9, r4
 8009d48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009d4c:	2830      	cmp	r0, #48	@ 0x30
 8009d4e:	d0fa      	beq.n	8009d46 <__gethex+0x12>
 8009d50:	eba9 0303 	sub.w	r3, r9, r3
 8009d54:	f1a3 0b02 	sub.w	fp, r3, #2
 8009d58:	f7ff ffd6 	bl	8009d08 <__hexdig_fun>
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d168      	bne.n	8009e34 <__gethex+0x100>
 8009d62:	49a0      	ldr	r1, [pc, #640]	@ (8009fe4 <__gethex+0x2b0>)
 8009d64:	2201      	movs	r2, #1
 8009d66:	4648      	mov	r0, r9
 8009d68:	f7fe ffb0 	bl	8008ccc <strncmp>
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d167      	bne.n	8009e42 <__gethex+0x10e>
 8009d72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009d76:	4626      	mov	r6, r4
 8009d78:	f7ff ffc6 	bl	8009d08 <__hexdig_fun>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d062      	beq.n	8009e46 <__gethex+0x112>
 8009d80:	4623      	mov	r3, r4
 8009d82:	7818      	ldrb	r0, [r3, #0]
 8009d84:	2830      	cmp	r0, #48	@ 0x30
 8009d86:	4699      	mov	r9, r3
 8009d88:	f103 0301 	add.w	r3, r3, #1
 8009d8c:	d0f9      	beq.n	8009d82 <__gethex+0x4e>
 8009d8e:	f7ff ffbb 	bl	8009d08 <__hexdig_fun>
 8009d92:	fab0 f580 	clz	r5, r0
 8009d96:	096d      	lsrs	r5, r5, #5
 8009d98:	f04f 0b01 	mov.w	fp, #1
 8009d9c:	464a      	mov	r2, r9
 8009d9e:	4616      	mov	r6, r2
 8009da0:	3201      	adds	r2, #1
 8009da2:	7830      	ldrb	r0, [r6, #0]
 8009da4:	f7ff ffb0 	bl	8009d08 <__hexdig_fun>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d1f8      	bne.n	8009d9e <__gethex+0x6a>
 8009dac:	498d      	ldr	r1, [pc, #564]	@ (8009fe4 <__gethex+0x2b0>)
 8009dae:	2201      	movs	r2, #1
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7fe ff8b 	bl	8008ccc <strncmp>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d13f      	bne.n	8009e3a <__gethex+0x106>
 8009dba:	b944      	cbnz	r4, 8009dce <__gethex+0x9a>
 8009dbc:	1c74      	adds	r4, r6, #1
 8009dbe:	4622      	mov	r2, r4
 8009dc0:	4616      	mov	r6, r2
 8009dc2:	3201      	adds	r2, #1
 8009dc4:	7830      	ldrb	r0, [r6, #0]
 8009dc6:	f7ff ff9f 	bl	8009d08 <__hexdig_fun>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d1f8      	bne.n	8009dc0 <__gethex+0x8c>
 8009dce:	1ba4      	subs	r4, r4, r6
 8009dd0:	00a7      	lsls	r7, r4, #2
 8009dd2:	7833      	ldrb	r3, [r6, #0]
 8009dd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009dd8:	2b50      	cmp	r3, #80	@ 0x50
 8009dda:	d13e      	bne.n	8009e5a <__gethex+0x126>
 8009ddc:	7873      	ldrb	r3, [r6, #1]
 8009dde:	2b2b      	cmp	r3, #43	@ 0x2b
 8009de0:	d033      	beq.n	8009e4a <__gethex+0x116>
 8009de2:	2b2d      	cmp	r3, #45	@ 0x2d
 8009de4:	d034      	beq.n	8009e50 <__gethex+0x11c>
 8009de6:	1c71      	adds	r1, r6, #1
 8009de8:	2400      	movs	r4, #0
 8009dea:	7808      	ldrb	r0, [r1, #0]
 8009dec:	f7ff ff8c 	bl	8009d08 <__hexdig_fun>
 8009df0:	1e43      	subs	r3, r0, #1
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b18      	cmp	r3, #24
 8009df6:	d830      	bhi.n	8009e5a <__gethex+0x126>
 8009df8:	f1a0 0210 	sub.w	r2, r0, #16
 8009dfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e00:	f7ff ff82 	bl	8009d08 <__hexdig_fun>
 8009e04:	f100 3cff 	add.w	ip, r0, #4294967295
 8009e08:	fa5f fc8c 	uxtb.w	ip, ip
 8009e0c:	f1bc 0f18 	cmp.w	ip, #24
 8009e10:	f04f 030a 	mov.w	r3, #10
 8009e14:	d91e      	bls.n	8009e54 <__gethex+0x120>
 8009e16:	b104      	cbz	r4, 8009e1a <__gethex+0xe6>
 8009e18:	4252      	negs	r2, r2
 8009e1a:	4417      	add	r7, r2
 8009e1c:	f8ca 1000 	str.w	r1, [sl]
 8009e20:	b1ed      	cbz	r5, 8009e5e <__gethex+0x12a>
 8009e22:	f1bb 0f00 	cmp.w	fp, #0
 8009e26:	bf0c      	ite	eq
 8009e28:	2506      	moveq	r5, #6
 8009e2a:	2500      	movne	r5, #0
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	b005      	add	sp, #20
 8009e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e34:	2500      	movs	r5, #0
 8009e36:	462c      	mov	r4, r5
 8009e38:	e7b0      	b.n	8009d9c <__gethex+0x68>
 8009e3a:	2c00      	cmp	r4, #0
 8009e3c:	d1c7      	bne.n	8009dce <__gethex+0x9a>
 8009e3e:	4627      	mov	r7, r4
 8009e40:	e7c7      	b.n	8009dd2 <__gethex+0x9e>
 8009e42:	464e      	mov	r6, r9
 8009e44:	462f      	mov	r7, r5
 8009e46:	2501      	movs	r5, #1
 8009e48:	e7c3      	b.n	8009dd2 <__gethex+0x9e>
 8009e4a:	2400      	movs	r4, #0
 8009e4c:	1cb1      	adds	r1, r6, #2
 8009e4e:	e7cc      	b.n	8009dea <__gethex+0xb6>
 8009e50:	2401      	movs	r4, #1
 8009e52:	e7fb      	b.n	8009e4c <__gethex+0x118>
 8009e54:	fb03 0002 	mla	r0, r3, r2, r0
 8009e58:	e7ce      	b.n	8009df8 <__gethex+0xc4>
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	e7de      	b.n	8009e1c <__gethex+0xe8>
 8009e5e:	eba6 0309 	sub.w	r3, r6, r9
 8009e62:	3b01      	subs	r3, #1
 8009e64:	4629      	mov	r1, r5
 8009e66:	2b07      	cmp	r3, #7
 8009e68:	dc0a      	bgt.n	8009e80 <__gethex+0x14c>
 8009e6a:	9801      	ldr	r0, [sp, #4]
 8009e6c:	f000 fafc 	bl	800a468 <_Balloc>
 8009e70:	4604      	mov	r4, r0
 8009e72:	b940      	cbnz	r0, 8009e86 <__gethex+0x152>
 8009e74:	4b5c      	ldr	r3, [pc, #368]	@ (8009fe8 <__gethex+0x2b4>)
 8009e76:	4602      	mov	r2, r0
 8009e78:	21e4      	movs	r1, #228	@ 0xe4
 8009e7a:	485c      	ldr	r0, [pc, #368]	@ (8009fec <__gethex+0x2b8>)
 8009e7c:	f7ff f83e 	bl	8008efc <__assert_func>
 8009e80:	3101      	adds	r1, #1
 8009e82:	105b      	asrs	r3, r3, #1
 8009e84:	e7ef      	b.n	8009e66 <__gethex+0x132>
 8009e86:	f100 0a14 	add.w	sl, r0, #20
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4655      	mov	r5, sl
 8009e8e:	469b      	mov	fp, r3
 8009e90:	45b1      	cmp	r9, r6
 8009e92:	d337      	bcc.n	8009f04 <__gethex+0x1d0>
 8009e94:	f845 bb04 	str.w	fp, [r5], #4
 8009e98:	eba5 050a 	sub.w	r5, r5, sl
 8009e9c:	10ad      	asrs	r5, r5, #2
 8009e9e:	6125      	str	r5, [r4, #16]
 8009ea0:	4658      	mov	r0, fp
 8009ea2:	f000 fbd3 	bl	800a64c <__hi0bits>
 8009ea6:	016d      	lsls	r5, r5, #5
 8009ea8:	f8d8 6000 	ldr.w	r6, [r8]
 8009eac:	1a2d      	subs	r5, r5, r0
 8009eae:	42b5      	cmp	r5, r6
 8009eb0:	dd54      	ble.n	8009f5c <__gethex+0x228>
 8009eb2:	1bad      	subs	r5, r5, r6
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f000 ff67 	bl	800ad8a <__any_on>
 8009ebc:	4681      	mov	r9, r0
 8009ebe:	b178      	cbz	r0, 8009ee0 <__gethex+0x1ac>
 8009ec0:	1e6b      	subs	r3, r5, #1
 8009ec2:	1159      	asrs	r1, r3, #5
 8009ec4:	f003 021f 	and.w	r2, r3, #31
 8009ec8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009ecc:	f04f 0901 	mov.w	r9, #1
 8009ed0:	fa09 f202 	lsl.w	r2, r9, r2
 8009ed4:	420a      	tst	r2, r1
 8009ed6:	d003      	beq.n	8009ee0 <__gethex+0x1ac>
 8009ed8:	454b      	cmp	r3, r9
 8009eda:	dc36      	bgt.n	8009f4a <__gethex+0x216>
 8009edc:	f04f 0902 	mov.w	r9, #2
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f7ff febe 	bl	8009c64 <rshift>
 8009ee8:	442f      	add	r7, r5
 8009eea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009eee:	42bb      	cmp	r3, r7
 8009ef0:	da42      	bge.n	8009f78 <__gethex+0x244>
 8009ef2:	9801      	ldr	r0, [sp, #4]
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	f000 faf7 	bl	800a4e8 <_Bfree>
 8009efa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009efc:	2300      	movs	r3, #0
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	25a3      	movs	r5, #163	@ 0xa3
 8009f02:	e793      	b.n	8009e2c <__gethex+0xf8>
 8009f04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009f08:	2a2e      	cmp	r2, #46	@ 0x2e
 8009f0a:	d012      	beq.n	8009f32 <__gethex+0x1fe>
 8009f0c:	2b20      	cmp	r3, #32
 8009f0e:	d104      	bne.n	8009f1a <__gethex+0x1e6>
 8009f10:	f845 bb04 	str.w	fp, [r5], #4
 8009f14:	f04f 0b00 	mov.w	fp, #0
 8009f18:	465b      	mov	r3, fp
 8009f1a:	7830      	ldrb	r0, [r6, #0]
 8009f1c:	9303      	str	r3, [sp, #12]
 8009f1e:	f7ff fef3 	bl	8009d08 <__hexdig_fun>
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	f000 000f 	and.w	r0, r0, #15
 8009f28:	4098      	lsls	r0, r3
 8009f2a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f2e:	3304      	adds	r3, #4
 8009f30:	e7ae      	b.n	8009e90 <__gethex+0x15c>
 8009f32:	45b1      	cmp	r9, r6
 8009f34:	d8ea      	bhi.n	8009f0c <__gethex+0x1d8>
 8009f36:	492b      	ldr	r1, [pc, #172]	@ (8009fe4 <__gethex+0x2b0>)
 8009f38:	9303      	str	r3, [sp, #12]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f7fe fec5 	bl	8008ccc <strncmp>
 8009f42:	9b03      	ldr	r3, [sp, #12]
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d1e1      	bne.n	8009f0c <__gethex+0x1d8>
 8009f48:	e7a2      	b.n	8009e90 <__gethex+0x15c>
 8009f4a:	1ea9      	subs	r1, r5, #2
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 ff1c 	bl	800ad8a <__any_on>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d0c2      	beq.n	8009edc <__gethex+0x1a8>
 8009f56:	f04f 0903 	mov.w	r9, #3
 8009f5a:	e7c1      	b.n	8009ee0 <__gethex+0x1ac>
 8009f5c:	da09      	bge.n	8009f72 <__gethex+0x23e>
 8009f5e:	1b75      	subs	r5, r6, r5
 8009f60:	4621      	mov	r1, r4
 8009f62:	9801      	ldr	r0, [sp, #4]
 8009f64:	462a      	mov	r2, r5
 8009f66:	f000 fcd7 	bl	800a918 <__lshift>
 8009f6a:	1b7f      	subs	r7, r7, r5
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	f100 0a14 	add.w	sl, r0, #20
 8009f72:	f04f 0900 	mov.w	r9, #0
 8009f76:	e7b8      	b.n	8009eea <__gethex+0x1b6>
 8009f78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f7c:	42bd      	cmp	r5, r7
 8009f7e:	dd6f      	ble.n	800a060 <__gethex+0x32c>
 8009f80:	1bed      	subs	r5, r5, r7
 8009f82:	42ae      	cmp	r6, r5
 8009f84:	dc34      	bgt.n	8009ff0 <__gethex+0x2bc>
 8009f86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d022      	beq.n	8009fd4 <__gethex+0x2a0>
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d024      	beq.n	8009fdc <__gethex+0x2a8>
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d115      	bne.n	8009fc2 <__gethex+0x28e>
 8009f96:	42ae      	cmp	r6, r5
 8009f98:	d113      	bne.n	8009fc2 <__gethex+0x28e>
 8009f9a:	2e01      	cmp	r6, #1
 8009f9c:	d10b      	bne.n	8009fb6 <__gethex+0x282>
 8009f9e:	9a02      	ldr	r2, [sp, #8]
 8009fa0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	6123      	str	r3, [r4, #16]
 8009faa:	f8ca 3000 	str.w	r3, [sl]
 8009fae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fb0:	2562      	movs	r5, #98	@ 0x62
 8009fb2:	601c      	str	r4, [r3, #0]
 8009fb4:	e73a      	b.n	8009e2c <__gethex+0xf8>
 8009fb6:	1e71      	subs	r1, r6, #1
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f000 fee6 	bl	800ad8a <__any_on>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d1ed      	bne.n	8009f9e <__gethex+0x26a>
 8009fc2:	9801      	ldr	r0, [sp, #4]
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	f000 fa8f 	bl	800a4e8 <_Bfree>
 8009fca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fcc:	2300      	movs	r3, #0
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	2550      	movs	r5, #80	@ 0x50
 8009fd2:	e72b      	b.n	8009e2c <__gethex+0xf8>
 8009fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1f3      	bne.n	8009fc2 <__gethex+0x28e>
 8009fda:	e7e0      	b.n	8009f9e <__gethex+0x26a>
 8009fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1dd      	bne.n	8009f9e <__gethex+0x26a>
 8009fe2:	e7ee      	b.n	8009fc2 <__gethex+0x28e>
 8009fe4:	0800bd10 	.word	0x0800bd10
 8009fe8:	0800bebb 	.word	0x0800bebb
 8009fec:	0800becc 	.word	0x0800becc
 8009ff0:	1e6f      	subs	r7, r5, #1
 8009ff2:	f1b9 0f00 	cmp.w	r9, #0
 8009ff6:	d130      	bne.n	800a05a <__gethex+0x326>
 8009ff8:	b127      	cbz	r7, 800a004 <__gethex+0x2d0>
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f000 fec4 	bl	800ad8a <__any_on>
 800a002:	4681      	mov	r9, r0
 800a004:	117a      	asrs	r2, r7, #5
 800a006:	2301      	movs	r3, #1
 800a008:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a00c:	f007 071f 	and.w	r7, r7, #31
 800a010:	40bb      	lsls	r3, r7
 800a012:	4213      	tst	r3, r2
 800a014:	4629      	mov	r1, r5
 800a016:	4620      	mov	r0, r4
 800a018:	bf18      	it	ne
 800a01a:	f049 0902 	orrne.w	r9, r9, #2
 800a01e:	f7ff fe21 	bl	8009c64 <rshift>
 800a022:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a026:	1b76      	subs	r6, r6, r5
 800a028:	2502      	movs	r5, #2
 800a02a:	f1b9 0f00 	cmp.w	r9, #0
 800a02e:	d047      	beq.n	800a0c0 <__gethex+0x38c>
 800a030:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a034:	2b02      	cmp	r3, #2
 800a036:	d015      	beq.n	800a064 <__gethex+0x330>
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d017      	beq.n	800a06c <__gethex+0x338>
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d109      	bne.n	800a054 <__gethex+0x320>
 800a040:	f019 0f02 	tst.w	r9, #2
 800a044:	d006      	beq.n	800a054 <__gethex+0x320>
 800a046:	f8da 3000 	ldr.w	r3, [sl]
 800a04a:	ea49 0903 	orr.w	r9, r9, r3
 800a04e:	f019 0f01 	tst.w	r9, #1
 800a052:	d10e      	bne.n	800a072 <__gethex+0x33e>
 800a054:	f045 0510 	orr.w	r5, r5, #16
 800a058:	e032      	b.n	800a0c0 <__gethex+0x38c>
 800a05a:	f04f 0901 	mov.w	r9, #1
 800a05e:	e7d1      	b.n	800a004 <__gethex+0x2d0>
 800a060:	2501      	movs	r5, #1
 800a062:	e7e2      	b.n	800a02a <__gethex+0x2f6>
 800a064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a066:	f1c3 0301 	rsb	r3, r3, #1
 800a06a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a06c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0f0      	beq.n	800a054 <__gethex+0x320>
 800a072:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a076:	f104 0314 	add.w	r3, r4, #20
 800a07a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a07e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a082:	f04f 0c00 	mov.w	ip, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f853 2b04 	ldr.w	r2, [r3], #4
 800a08c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a090:	d01b      	beq.n	800a0ca <__gethex+0x396>
 800a092:	3201      	adds	r2, #1
 800a094:	6002      	str	r2, [r0, #0]
 800a096:	2d02      	cmp	r5, #2
 800a098:	f104 0314 	add.w	r3, r4, #20
 800a09c:	d13c      	bne.n	800a118 <__gethex+0x3e4>
 800a09e:	f8d8 2000 	ldr.w	r2, [r8]
 800a0a2:	3a01      	subs	r2, #1
 800a0a4:	42b2      	cmp	r2, r6
 800a0a6:	d109      	bne.n	800a0bc <__gethex+0x388>
 800a0a8:	1171      	asrs	r1, r6, #5
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0b0:	f006 061f 	and.w	r6, r6, #31
 800a0b4:	fa02 f606 	lsl.w	r6, r2, r6
 800a0b8:	421e      	tst	r6, r3
 800a0ba:	d13a      	bne.n	800a132 <__gethex+0x3fe>
 800a0bc:	f045 0520 	orr.w	r5, r5, #32
 800a0c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0c2:	601c      	str	r4, [r3, #0]
 800a0c4:	9b02      	ldr	r3, [sp, #8]
 800a0c6:	601f      	str	r7, [r3, #0]
 800a0c8:	e6b0      	b.n	8009e2c <__gethex+0xf8>
 800a0ca:	4299      	cmp	r1, r3
 800a0cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a0d0:	d8d9      	bhi.n	800a086 <__gethex+0x352>
 800a0d2:	68a3      	ldr	r3, [r4, #8]
 800a0d4:	459b      	cmp	fp, r3
 800a0d6:	db17      	blt.n	800a108 <__gethex+0x3d4>
 800a0d8:	6861      	ldr	r1, [r4, #4]
 800a0da:	9801      	ldr	r0, [sp, #4]
 800a0dc:	3101      	adds	r1, #1
 800a0de:	f000 f9c3 	bl	800a468 <_Balloc>
 800a0e2:	4681      	mov	r9, r0
 800a0e4:	b918      	cbnz	r0, 800a0ee <__gethex+0x3ba>
 800a0e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a150 <__gethex+0x41c>)
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	2184      	movs	r1, #132	@ 0x84
 800a0ec:	e6c5      	b.n	8009e7a <__gethex+0x146>
 800a0ee:	6922      	ldr	r2, [r4, #16]
 800a0f0:	3202      	adds	r2, #2
 800a0f2:	f104 010c 	add.w	r1, r4, #12
 800a0f6:	0092      	lsls	r2, r2, #2
 800a0f8:	300c      	adds	r0, #12
 800a0fa:	f7fe fee0 	bl	8008ebe <memcpy>
 800a0fe:	4621      	mov	r1, r4
 800a100:	9801      	ldr	r0, [sp, #4]
 800a102:	f000 f9f1 	bl	800a4e8 <_Bfree>
 800a106:	464c      	mov	r4, r9
 800a108:	6923      	ldr	r3, [r4, #16]
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a110:	6122      	str	r2, [r4, #16]
 800a112:	2201      	movs	r2, #1
 800a114:	615a      	str	r2, [r3, #20]
 800a116:	e7be      	b.n	800a096 <__gethex+0x362>
 800a118:	6922      	ldr	r2, [r4, #16]
 800a11a:	455a      	cmp	r2, fp
 800a11c:	dd0b      	ble.n	800a136 <__gethex+0x402>
 800a11e:	2101      	movs	r1, #1
 800a120:	4620      	mov	r0, r4
 800a122:	f7ff fd9f 	bl	8009c64 <rshift>
 800a126:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a12a:	3701      	adds	r7, #1
 800a12c:	42bb      	cmp	r3, r7
 800a12e:	f6ff aee0 	blt.w	8009ef2 <__gethex+0x1be>
 800a132:	2501      	movs	r5, #1
 800a134:	e7c2      	b.n	800a0bc <__gethex+0x388>
 800a136:	f016 061f 	ands.w	r6, r6, #31
 800a13a:	d0fa      	beq.n	800a132 <__gethex+0x3fe>
 800a13c:	4453      	add	r3, sl
 800a13e:	f1c6 0620 	rsb	r6, r6, #32
 800a142:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a146:	f000 fa81 	bl	800a64c <__hi0bits>
 800a14a:	42b0      	cmp	r0, r6
 800a14c:	dbe7      	blt.n	800a11e <__gethex+0x3ea>
 800a14e:	e7f0      	b.n	800a132 <__gethex+0x3fe>
 800a150:	0800bebb 	.word	0x0800bebb

0800a154 <L_shift>:
 800a154:	f1c2 0208 	rsb	r2, r2, #8
 800a158:	0092      	lsls	r2, r2, #2
 800a15a:	b570      	push	{r4, r5, r6, lr}
 800a15c:	f1c2 0620 	rsb	r6, r2, #32
 800a160:	6843      	ldr	r3, [r0, #4]
 800a162:	6804      	ldr	r4, [r0, #0]
 800a164:	fa03 f506 	lsl.w	r5, r3, r6
 800a168:	432c      	orrs	r4, r5
 800a16a:	40d3      	lsrs	r3, r2
 800a16c:	6004      	str	r4, [r0, #0]
 800a16e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a172:	4288      	cmp	r0, r1
 800a174:	d3f4      	bcc.n	800a160 <L_shift+0xc>
 800a176:	bd70      	pop	{r4, r5, r6, pc}

0800a178 <__match>:
 800a178:	b530      	push	{r4, r5, lr}
 800a17a:	6803      	ldr	r3, [r0, #0]
 800a17c:	3301      	adds	r3, #1
 800a17e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a182:	b914      	cbnz	r4, 800a18a <__match+0x12>
 800a184:	6003      	str	r3, [r0, #0]
 800a186:	2001      	movs	r0, #1
 800a188:	bd30      	pop	{r4, r5, pc}
 800a18a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a18e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a192:	2d19      	cmp	r5, #25
 800a194:	bf98      	it	ls
 800a196:	3220      	addls	r2, #32
 800a198:	42a2      	cmp	r2, r4
 800a19a:	d0f0      	beq.n	800a17e <__match+0x6>
 800a19c:	2000      	movs	r0, #0
 800a19e:	e7f3      	b.n	800a188 <__match+0x10>

0800a1a0 <__hexnan>:
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	680b      	ldr	r3, [r1, #0]
 800a1a6:	6801      	ldr	r1, [r0, #0]
 800a1a8:	115e      	asrs	r6, r3, #5
 800a1aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1ae:	f013 031f 	ands.w	r3, r3, #31
 800a1b2:	b087      	sub	sp, #28
 800a1b4:	bf18      	it	ne
 800a1b6:	3604      	addne	r6, #4
 800a1b8:	2500      	movs	r5, #0
 800a1ba:	1f37      	subs	r7, r6, #4
 800a1bc:	4682      	mov	sl, r0
 800a1be:	4690      	mov	r8, r2
 800a1c0:	9301      	str	r3, [sp, #4]
 800a1c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a1c6:	46b9      	mov	r9, r7
 800a1c8:	463c      	mov	r4, r7
 800a1ca:	9502      	str	r5, [sp, #8]
 800a1cc:	46ab      	mov	fp, r5
 800a1ce:	784a      	ldrb	r2, [r1, #1]
 800a1d0:	1c4b      	adds	r3, r1, #1
 800a1d2:	9303      	str	r3, [sp, #12]
 800a1d4:	b342      	cbz	r2, 800a228 <__hexnan+0x88>
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	9105      	str	r1, [sp, #20]
 800a1da:	9204      	str	r2, [sp, #16]
 800a1dc:	f7ff fd94 	bl	8009d08 <__hexdig_fun>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d151      	bne.n	800a288 <__hexnan+0xe8>
 800a1e4:	9a04      	ldr	r2, [sp, #16]
 800a1e6:	9905      	ldr	r1, [sp, #20]
 800a1e8:	2a20      	cmp	r2, #32
 800a1ea:	d818      	bhi.n	800a21e <__hexnan+0x7e>
 800a1ec:	9b02      	ldr	r3, [sp, #8]
 800a1ee:	459b      	cmp	fp, r3
 800a1f0:	dd13      	ble.n	800a21a <__hexnan+0x7a>
 800a1f2:	454c      	cmp	r4, r9
 800a1f4:	d206      	bcs.n	800a204 <__hexnan+0x64>
 800a1f6:	2d07      	cmp	r5, #7
 800a1f8:	dc04      	bgt.n	800a204 <__hexnan+0x64>
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7ff ffa8 	bl	800a154 <L_shift>
 800a204:	4544      	cmp	r4, r8
 800a206:	d952      	bls.n	800a2ae <__hexnan+0x10e>
 800a208:	2300      	movs	r3, #0
 800a20a:	f1a4 0904 	sub.w	r9, r4, #4
 800a20e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a212:	f8cd b008 	str.w	fp, [sp, #8]
 800a216:	464c      	mov	r4, r9
 800a218:	461d      	mov	r5, r3
 800a21a:	9903      	ldr	r1, [sp, #12]
 800a21c:	e7d7      	b.n	800a1ce <__hexnan+0x2e>
 800a21e:	2a29      	cmp	r2, #41	@ 0x29
 800a220:	d157      	bne.n	800a2d2 <__hexnan+0x132>
 800a222:	3102      	adds	r1, #2
 800a224:	f8ca 1000 	str.w	r1, [sl]
 800a228:	f1bb 0f00 	cmp.w	fp, #0
 800a22c:	d051      	beq.n	800a2d2 <__hexnan+0x132>
 800a22e:	454c      	cmp	r4, r9
 800a230:	d206      	bcs.n	800a240 <__hexnan+0xa0>
 800a232:	2d07      	cmp	r5, #7
 800a234:	dc04      	bgt.n	800a240 <__hexnan+0xa0>
 800a236:	462a      	mov	r2, r5
 800a238:	4649      	mov	r1, r9
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7ff ff8a 	bl	800a154 <L_shift>
 800a240:	4544      	cmp	r4, r8
 800a242:	d936      	bls.n	800a2b2 <__hexnan+0x112>
 800a244:	f1a8 0204 	sub.w	r2, r8, #4
 800a248:	4623      	mov	r3, r4
 800a24a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a24e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a252:	429f      	cmp	r7, r3
 800a254:	d2f9      	bcs.n	800a24a <__hexnan+0xaa>
 800a256:	1b3b      	subs	r3, r7, r4
 800a258:	f023 0303 	bic.w	r3, r3, #3
 800a25c:	3304      	adds	r3, #4
 800a25e:	3401      	adds	r4, #1
 800a260:	3e03      	subs	r6, #3
 800a262:	42b4      	cmp	r4, r6
 800a264:	bf88      	it	hi
 800a266:	2304      	movhi	r3, #4
 800a268:	4443      	add	r3, r8
 800a26a:	2200      	movs	r2, #0
 800a26c:	f843 2b04 	str.w	r2, [r3], #4
 800a270:	429f      	cmp	r7, r3
 800a272:	d2fb      	bcs.n	800a26c <__hexnan+0xcc>
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	b91b      	cbnz	r3, 800a280 <__hexnan+0xe0>
 800a278:	4547      	cmp	r7, r8
 800a27a:	d128      	bne.n	800a2ce <__hexnan+0x12e>
 800a27c:	2301      	movs	r3, #1
 800a27e:	603b      	str	r3, [r7, #0]
 800a280:	2005      	movs	r0, #5
 800a282:	b007      	add	sp, #28
 800a284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a288:	3501      	adds	r5, #1
 800a28a:	2d08      	cmp	r5, #8
 800a28c:	f10b 0b01 	add.w	fp, fp, #1
 800a290:	dd06      	ble.n	800a2a0 <__hexnan+0x100>
 800a292:	4544      	cmp	r4, r8
 800a294:	d9c1      	bls.n	800a21a <__hexnan+0x7a>
 800a296:	2300      	movs	r3, #0
 800a298:	f844 3c04 	str.w	r3, [r4, #-4]
 800a29c:	2501      	movs	r5, #1
 800a29e:	3c04      	subs	r4, #4
 800a2a0:	6822      	ldr	r2, [r4, #0]
 800a2a2:	f000 000f 	and.w	r0, r0, #15
 800a2a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a2aa:	6020      	str	r0, [r4, #0]
 800a2ac:	e7b5      	b.n	800a21a <__hexnan+0x7a>
 800a2ae:	2508      	movs	r5, #8
 800a2b0:	e7b3      	b.n	800a21a <__hexnan+0x7a>
 800a2b2:	9b01      	ldr	r3, [sp, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d0dd      	beq.n	800a274 <__hexnan+0xd4>
 800a2b8:	f1c3 0320 	rsb	r3, r3, #32
 800a2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c0:	40da      	lsrs	r2, r3
 800a2c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a2cc:	e7d2      	b.n	800a274 <__hexnan+0xd4>
 800a2ce:	3f04      	subs	r7, #4
 800a2d0:	e7d0      	b.n	800a274 <__hexnan+0xd4>
 800a2d2:	2004      	movs	r0, #4
 800a2d4:	e7d5      	b.n	800a282 <__hexnan+0xe2>
	...

0800a2d8 <malloc>:
 800a2d8:	4b02      	ldr	r3, [pc, #8]	@ (800a2e4 <malloc+0xc>)
 800a2da:	4601      	mov	r1, r0
 800a2dc:	6818      	ldr	r0, [r3, #0]
 800a2de:	f000 b825 	b.w	800a32c <_malloc_r>
 800a2e2:	bf00      	nop
 800a2e4:	20000184 	.word	0x20000184

0800a2e8 <sbrk_aligned>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	4e0f      	ldr	r6, [pc, #60]	@ (800a328 <sbrk_aligned+0x40>)
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	6831      	ldr	r1, [r6, #0]
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	b911      	cbnz	r1, 800a2fa <sbrk_aligned+0x12>
 800a2f4:	f001 f822 	bl	800b33c <_sbrk_r>
 800a2f8:	6030      	str	r0, [r6, #0]
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	f001 f81d 	bl	800b33c <_sbrk_r>
 800a302:	1c43      	adds	r3, r0, #1
 800a304:	d103      	bne.n	800a30e <sbrk_aligned+0x26>
 800a306:	f04f 34ff 	mov.w	r4, #4294967295
 800a30a:	4620      	mov	r0, r4
 800a30c:	bd70      	pop	{r4, r5, r6, pc}
 800a30e:	1cc4      	adds	r4, r0, #3
 800a310:	f024 0403 	bic.w	r4, r4, #3
 800a314:	42a0      	cmp	r0, r4
 800a316:	d0f8      	beq.n	800a30a <sbrk_aligned+0x22>
 800a318:	1a21      	subs	r1, r4, r0
 800a31a:	4628      	mov	r0, r5
 800a31c:	f001 f80e 	bl	800b33c <_sbrk_r>
 800a320:	3001      	adds	r0, #1
 800a322:	d1f2      	bne.n	800a30a <sbrk_aligned+0x22>
 800a324:	e7ef      	b.n	800a306 <sbrk_aligned+0x1e>
 800a326:	bf00      	nop
 800a328:	20000734 	.word	0x20000734

0800a32c <_malloc_r>:
 800a32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a330:	1ccd      	adds	r5, r1, #3
 800a332:	f025 0503 	bic.w	r5, r5, #3
 800a336:	3508      	adds	r5, #8
 800a338:	2d0c      	cmp	r5, #12
 800a33a:	bf38      	it	cc
 800a33c:	250c      	movcc	r5, #12
 800a33e:	2d00      	cmp	r5, #0
 800a340:	4606      	mov	r6, r0
 800a342:	db01      	blt.n	800a348 <_malloc_r+0x1c>
 800a344:	42a9      	cmp	r1, r5
 800a346:	d904      	bls.n	800a352 <_malloc_r+0x26>
 800a348:	230c      	movs	r3, #12
 800a34a:	6033      	str	r3, [r6, #0]
 800a34c:	2000      	movs	r0, #0
 800a34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a352:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a428 <_malloc_r+0xfc>
 800a356:	f000 f87b 	bl	800a450 <__malloc_lock>
 800a35a:	f8d8 3000 	ldr.w	r3, [r8]
 800a35e:	461c      	mov	r4, r3
 800a360:	bb44      	cbnz	r4, 800a3b4 <_malloc_r+0x88>
 800a362:	4629      	mov	r1, r5
 800a364:	4630      	mov	r0, r6
 800a366:	f7ff ffbf 	bl	800a2e8 <sbrk_aligned>
 800a36a:	1c43      	adds	r3, r0, #1
 800a36c:	4604      	mov	r4, r0
 800a36e:	d158      	bne.n	800a422 <_malloc_r+0xf6>
 800a370:	f8d8 4000 	ldr.w	r4, [r8]
 800a374:	4627      	mov	r7, r4
 800a376:	2f00      	cmp	r7, #0
 800a378:	d143      	bne.n	800a402 <_malloc_r+0xd6>
 800a37a:	2c00      	cmp	r4, #0
 800a37c:	d04b      	beq.n	800a416 <_malloc_r+0xea>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	4639      	mov	r1, r7
 800a382:	4630      	mov	r0, r6
 800a384:	eb04 0903 	add.w	r9, r4, r3
 800a388:	f000 ffd8 	bl	800b33c <_sbrk_r>
 800a38c:	4581      	cmp	r9, r0
 800a38e:	d142      	bne.n	800a416 <_malloc_r+0xea>
 800a390:	6821      	ldr	r1, [r4, #0]
 800a392:	1a6d      	subs	r5, r5, r1
 800a394:	4629      	mov	r1, r5
 800a396:	4630      	mov	r0, r6
 800a398:	f7ff ffa6 	bl	800a2e8 <sbrk_aligned>
 800a39c:	3001      	adds	r0, #1
 800a39e:	d03a      	beq.n	800a416 <_malloc_r+0xea>
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	442b      	add	r3, r5
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	f8d8 3000 	ldr.w	r3, [r8]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	bb62      	cbnz	r2, 800a408 <_malloc_r+0xdc>
 800a3ae:	f8c8 7000 	str.w	r7, [r8]
 800a3b2:	e00f      	b.n	800a3d4 <_malloc_r+0xa8>
 800a3b4:	6822      	ldr	r2, [r4, #0]
 800a3b6:	1b52      	subs	r2, r2, r5
 800a3b8:	d420      	bmi.n	800a3fc <_malloc_r+0xd0>
 800a3ba:	2a0b      	cmp	r2, #11
 800a3bc:	d917      	bls.n	800a3ee <_malloc_r+0xc2>
 800a3be:	1961      	adds	r1, r4, r5
 800a3c0:	42a3      	cmp	r3, r4
 800a3c2:	6025      	str	r5, [r4, #0]
 800a3c4:	bf18      	it	ne
 800a3c6:	6059      	strne	r1, [r3, #4]
 800a3c8:	6863      	ldr	r3, [r4, #4]
 800a3ca:	bf08      	it	eq
 800a3cc:	f8c8 1000 	streq.w	r1, [r8]
 800a3d0:	5162      	str	r2, [r4, r5]
 800a3d2:	604b      	str	r3, [r1, #4]
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f000 f841 	bl	800a45c <__malloc_unlock>
 800a3da:	f104 000b 	add.w	r0, r4, #11
 800a3de:	1d23      	adds	r3, r4, #4
 800a3e0:	f020 0007 	bic.w	r0, r0, #7
 800a3e4:	1ac2      	subs	r2, r0, r3
 800a3e6:	bf1c      	itt	ne
 800a3e8:	1a1b      	subne	r3, r3, r0
 800a3ea:	50a3      	strne	r3, [r4, r2]
 800a3ec:	e7af      	b.n	800a34e <_malloc_r+0x22>
 800a3ee:	6862      	ldr	r2, [r4, #4]
 800a3f0:	42a3      	cmp	r3, r4
 800a3f2:	bf0c      	ite	eq
 800a3f4:	f8c8 2000 	streq.w	r2, [r8]
 800a3f8:	605a      	strne	r2, [r3, #4]
 800a3fa:	e7eb      	b.n	800a3d4 <_malloc_r+0xa8>
 800a3fc:	4623      	mov	r3, r4
 800a3fe:	6864      	ldr	r4, [r4, #4]
 800a400:	e7ae      	b.n	800a360 <_malloc_r+0x34>
 800a402:	463c      	mov	r4, r7
 800a404:	687f      	ldr	r7, [r7, #4]
 800a406:	e7b6      	b.n	800a376 <_malloc_r+0x4a>
 800a408:	461a      	mov	r2, r3
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	42a3      	cmp	r3, r4
 800a40e:	d1fb      	bne.n	800a408 <_malloc_r+0xdc>
 800a410:	2300      	movs	r3, #0
 800a412:	6053      	str	r3, [r2, #4]
 800a414:	e7de      	b.n	800a3d4 <_malloc_r+0xa8>
 800a416:	230c      	movs	r3, #12
 800a418:	6033      	str	r3, [r6, #0]
 800a41a:	4630      	mov	r0, r6
 800a41c:	f000 f81e 	bl	800a45c <__malloc_unlock>
 800a420:	e794      	b.n	800a34c <_malloc_r+0x20>
 800a422:	6005      	str	r5, [r0, #0]
 800a424:	e7d6      	b.n	800a3d4 <_malloc_r+0xa8>
 800a426:	bf00      	nop
 800a428:	20000738 	.word	0x20000738

0800a42c <__ascii_mbtowc>:
 800a42c:	b082      	sub	sp, #8
 800a42e:	b901      	cbnz	r1, 800a432 <__ascii_mbtowc+0x6>
 800a430:	a901      	add	r1, sp, #4
 800a432:	b142      	cbz	r2, 800a446 <__ascii_mbtowc+0x1a>
 800a434:	b14b      	cbz	r3, 800a44a <__ascii_mbtowc+0x1e>
 800a436:	7813      	ldrb	r3, [r2, #0]
 800a438:	600b      	str	r3, [r1, #0]
 800a43a:	7812      	ldrb	r2, [r2, #0]
 800a43c:	1e10      	subs	r0, r2, #0
 800a43e:	bf18      	it	ne
 800a440:	2001      	movne	r0, #1
 800a442:	b002      	add	sp, #8
 800a444:	4770      	bx	lr
 800a446:	4610      	mov	r0, r2
 800a448:	e7fb      	b.n	800a442 <__ascii_mbtowc+0x16>
 800a44a:	f06f 0001 	mvn.w	r0, #1
 800a44e:	e7f8      	b.n	800a442 <__ascii_mbtowc+0x16>

0800a450 <__malloc_lock>:
 800a450:	4801      	ldr	r0, [pc, #4]	@ (800a458 <__malloc_lock+0x8>)
 800a452:	f7fe bd32 	b.w	8008eba <__retarget_lock_acquire_recursive>
 800a456:	bf00      	nop
 800a458:	20000730 	.word	0x20000730

0800a45c <__malloc_unlock>:
 800a45c:	4801      	ldr	r0, [pc, #4]	@ (800a464 <__malloc_unlock+0x8>)
 800a45e:	f7fe bd2d 	b.w	8008ebc <__retarget_lock_release_recursive>
 800a462:	bf00      	nop
 800a464:	20000730 	.word	0x20000730

0800a468 <_Balloc>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	69c6      	ldr	r6, [r0, #28]
 800a46c:	4604      	mov	r4, r0
 800a46e:	460d      	mov	r5, r1
 800a470:	b976      	cbnz	r6, 800a490 <_Balloc+0x28>
 800a472:	2010      	movs	r0, #16
 800a474:	f7ff ff30 	bl	800a2d8 <malloc>
 800a478:	4602      	mov	r2, r0
 800a47a:	61e0      	str	r0, [r4, #28]
 800a47c:	b920      	cbnz	r0, 800a488 <_Balloc+0x20>
 800a47e:	4b18      	ldr	r3, [pc, #96]	@ (800a4e0 <_Balloc+0x78>)
 800a480:	4818      	ldr	r0, [pc, #96]	@ (800a4e4 <_Balloc+0x7c>)
 800a482:	216b      	movs	r1, #107	@ 0x6b
 800a484:	f7fe fd3a 	bl	8008efc <__assert_func>
 800a488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a48c:	6006      	str	r6, [r0, #0]
 800a48e:	60c6      	str	r6, [r0, #12]
 800a490:	69e6      	ldr	r6, [r4, #28]
 800a492:	68f3      	ldr	r3, [r6, #12]
 800a494:	b183      	cbz	r3, 800a4b8 <_Balloc+0x50>
 800a496:	69e3      	ldr	r3, [r4, #28]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a49e:	b9b8      	cbnz	r0, 800a4d0 <_Balloc+0x68>
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	fa01 f605 	lsl.w	r6, r1, r5
 800a4a6:	1d72      	adds	r2, r6, #5
 800a4a8:	0092      	lsls	r2, r2, #2
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 ff5d 	bl	800b36a <_calloc_r>
 800a4b0:	b160      	cbz	r0, 800a4cc <_Balloc+0x64>
 800a4b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4b6:	e00e      	b.n	800a4d6 <_Balloc+0x6e>
 800a4b8:	2221      	movs	r2, #33	@ 0x21
 800a4ba:	2104      	movs	r1, #4
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f000 ff54 	bl	800b36a <_calloc_r>
 800a4c2:	69e3      	ldr	r3, [r4, #28]
 800a4c4:	60f0      	str	r0, [r6, #12]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1e4      	bne.n	800a496 <_Balloc+0x2e>
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	6802      	ldr	r2, [r0, #0]
 800a4d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4dc:	e7f7      	b.n	800a4ce <_Balloc+0x66>
 800a4de:	bf00      	nop
 800a4e0:	0800bda1 	.word	0x0800bda1
 800a4e4:	0800bf2c 	.word	0x0800bf2c

0800a4e8 <_Bfree>:
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	69c6      	ldr	r6, [r0, #28]
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	b976      	cbnz	r6, 800a510 <_Bfree+0x28>
 800a4f2:	2010      	movs	r0, #16
 800a4f4:	f7ff fef0 	bl	800a2d8 <malloc>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	61e8      	str	r0, [r5, #28]
 800a4fc:	b920      	cbnz	r0, 800a508 <_Bfree+0x20>
 800a4fe:	4b09      	ldr	r3, [pc, #36]	@ (800a524 <_Bfree+0x3c>)
 800a500:	4809      	ldr	r0, [pc, #36]	@ (800a528 <_Bfree+0x40>)
 800a502:	218f      	movs	r1, #143	@ 0x8f
 800a504:	f7fe fcfa 	bl	8008efc <__assert_func>
 800a508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a50c:	6006      	str	r6, [r0, #0]
 800a50e:	60c6      	str	r6, [r0, #12]
 800a510:	b13c      	cbz	r4, 800a522 <_Bfree+0x3a>
 800a512:	69eb      	ldr	r3, [r5, #28]
 800a514:	6862      	ldr	r2, [r4, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a51c:	6021      	str	r1, [r4, #0]
 800a51e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a522:	bd70      	pop	{r4, r5, r6, pc}
 800a524:	0800bda1 	.word	0x0800bda1
 800a528:	0800bf2c 	.word	0x0800bf2c

0800a52c <__multadd>:
 800a52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a530:	690d      	ldr	r5, [r1, #16]
 800a532:	4607      	mov	r7, r0
 800a534:	460c      	mov	r4, r1
 800a536:	461e      	mov	r6, r3
 800a538:	f101 0c14 	add.w	ip, r1, #20
 800a53c:	2000      	movs	r0, #0
 800a53e:	f8dc 3000 	ldr.w	r3, [ip]
 800a542:	b299      	uxth	r1, r3
 800a544:	fb02 6101 	mla	r1, r2, r1, r6
 800a548:	0c1e      	lsrs	r6, r3, #16
 800a54a:	0c0b      	lsrs	r3, r1, #16
 800a54c:	fb02 3306 	mla	r3, r2, r6, r3
 800a550:	b289      	uxth	r1, r1
 800a552:	3001      	adds	r0, #1
 800a554:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a558:	4285      	cmp	r5, r0
 800a55a:	f84c 1b04 	str.w	r1, [ip], #4
 800a55e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a562:	dcec      	bgt.n	800a53e <__multadd+0x12>
 800a564:	b30e      	cbz	r6, 800a5aa <__multadd+0x7e>
 800a566:	68a3      	ldr	r3, [r4, #8]
 800a568:	42ab      	cmp	r3, r5
 800a56a:	dc19      	bgt.n	800a5a0 <__multadd+0x74>
 800a56c:	6861      	ldr	r1, [r4, #4]
 800a56e:	4638      	mov	r0, r7
 800a570:	3101      	adds	r1, #1
 800a572:	f7ff ff79 	bl	800a468 <_Balloc>
 800a576:	4680      	mov	r8, r0
 800a578:	b928      	cbnz	r0, 800a586 <__multadd+0x5a>
 800a57a:	4602      	mov	r2, r0
 800a57c:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b0 <__multadd+0x84>)
 800a57e:	480d      	ldr	r0, [pc, #52]	@ (800a5b4 <__multadd+0x88>)
 800a580:	21ba      	movs	r1, #186	@ 0xba
 800a582:	f7fe fcbb 	bl	8008efc <__assert_func>
 800a586:	6922      	ldr	r2, [r4, #16]
 800a588:	3202      	adds	r2, #2
 800a58a:	f104 010c 	add.w	r1, r4, #12
 800a58e:	0092      	lsls	r2, r2, #2
 800a590:	300c      	adds	r0, #12
 800a592:	f7fe fc94 	bl	8008ebe <memcpy>
 800a596:	4621      	mov	r1, r4
 800a598:	4638      	mov	r0, r7
 800a59a:	f7ff ffa5 	bl	800a4e8 <_Bfree>
 800a59e:	4644      	mov	r4, r8
 800a5a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5a4:	3501      	adds	r5, #1
 800a5a6:	615e      	str	r6, [r3, #20]
 800a5a8:	6125      	str	r5, [r4, #16]
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b0:	0800bebb 	.word	0x0800bebb
 800a5b4:	0800bf2c 	.word	0x0800bf2c

0800a5b8 <__s2b>:
 800a5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5bc:	460c      	mov	r4, r1
 800a5be:	4615      	mov	r5, r2
 800a5c0:	461f      	mov	r7, r3
 800a5c2:	2209      	movs	r2, #9
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	db09      	blt.n	800a5e8 <__s2b+0x30>
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7ff ff47 	bl	800a468 <_Balloc>
 800a5da:	b940      	cbnz	r0, 800a5ee <__s2b+0x36>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	4b19      	ldr	r3, [pc, #100]	@ (800a644 <__s2b+0x8c>)
 800a5e0:	4819      	ldr	r0, [pc, #100]	@ (800a648 <__s2b+0x90>)
 800a5e2:	21d3      	movs	r1, #211	@ 0xd3
 800a5e4:	f7fe fc8a 	bl	8008efc <__assert_func>
 800a5e8:	0052      	lsls	r2, r2, #1
 800a5ea:	3101      	adds	r1, #1
 800a5ec:	e7f0      	b.n	800a5d0 <__s2b+0x18>
 800a5ee:	9b08      	ldr	r3, [sp, #32]
 800a5f0:	6143      	str	r3, [r0, #20]
 800a5f2:	2d09      	cmp	r5, #9
 800a5f4:	f04f 0301 	mov.w	r3, #1
 800a5f8:	6103      	str	r3, [r0, #16]
 800a5fa:	dd16      	ble.n	800a62a <__s2b+0x72>
 800a5fc:	f104 0909 	add.w	r9, r4, #9
 800a600:	46c8      	mov	r8, r9
 800a602:	442c      	add	r4, r5
 800a604:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a608:	4601      	mov	r1, r0
 800a60a:	3b30      	subs	r3, #48	@ 0x30
 800a60c:	220a      	movs	r2, #10
 800a60e:	4630      	mov	r0, r6
 800a610:	f7ff ff8c 	bl	800a52c <__multadd>
 800a614:	45a0      	cmp	r8, r4
 800a616:	d1f5      	bne.n	800a604 <__s2b+0x4c>
 800a618:	f1a5 0408 	sub.w	r4, r5, #8
 800a61c:	444c      	add	r4, r9
 800a61e:	1b2d      	subs	r5, r5, r4
 800a620:	1963      	adds	r3, r4, r5
 800a622:	42bb      	cmp	r3, r7
 800a624:	db04      	blt.n	800a630 <__s2b+0x78>
 800a626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a62a:	340a      	adds	r4, #10
 800a62c:	2509      	movs	r5, #9
 800a62e:	e7f6      	b.n	800a61e <__s2b+0x66>
 800a630:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a634:	4601      	mov	r1, r0
 800a636:	3b30      	subs	r3, #48	@ 0x30
 800a638:	220a      	movs	r2, #10
 800a63a:	4630      	mov	r0, r6
 800a63c:	f7ff ff76 	bl	800a52c <__multadd>
 800a640:	e7ee      	b.n	800a620 <__s2b+0x68>
 800a642:	bf00      	nop
 800a644:	0800bebb 	.word	0x0800bebb
 800a648:	0800bf2c 	.word	0x0800bf2c

0800a64c <__hi0bits>:
 800a64c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a650:	4603      	mov	r3, r0
 800a652:	bf36      	itet	cc
 800a654:	0403      	lslcc	r3, r0, #16
 800a656:	2000      	movcs	r0, #0
 800a658:	2010      	movcc	r0, #16
 800a65a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a65e:	bf3c      	itt	cc
 800a660:	021b      	lslcc	r3, r3, #8
 800a662:	3008      	addcc	r0, #8
 800a664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a668:	bf3c      	itt	cc
 800a66a:	011b      	lslcc	r3, r3, #4
 800a66c:	3004      	addcc	r0, #4
 800a66e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a672:	bf3c      	itt	cc
 800a674:	009b      	lslcc	r3, r3, #2
 800a676:	3002      	addcc	r0, #2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	db05      	blt.n	800a688 <__hi0bits+0x3c>
 800a67c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a680:	f100 0001 	add.w	r0, r0, #1
 800a684:	bf08      	it	eq
 800a686:	2020      	moveq	r0, #32
 800a688:	4770      	bx	lr

0800a68a <__lo0bits>:
 800a68a:	6803      	ldr	r3, [r0, #0]
 800a68c:	4602      	mov	r2, r0
 800a68e:	f013 0007 	ands.w	r0, r3, #7
 800a692:	d00b      	beq.n	800a6ac <__lo0bits+0x22>
 800a694:	07d9      	lsls	r1, r3, #31
 800a696:	d421      	bmi.n	800a6dc <__lo0bits+0x52>
 800a698:	0798      	lsls	r0, r3, #30
 800a69a:	bf49      	itett	mi
 800a69c:	085b      	lsrmi	r3, r3, #1
 800a69e:	089b      	lsrpl	r3, r3, #2
 800a6a0:	2001      	movmi	r0, #1
 800a6a2:	6013      	strmi	r3, [r2, #0]
 800a6a4:	bf5c      	itt	pl
 800a6a6:	6013      	strpl	r3, [r2, #0]
 800a6a8:	2002      	movpl	r0, #2
 800a6aa:	4770      	bx	lr
 800a6ac:	b299      	uxth	r1, r3
 800a6ae:	b909      	cbnz	r1, 800a6b4 <__lo0bits+0x2a>
 800a6b0:	0c1b      	lsrs	r3, r3, #16
 800a6b2:	2010      	movs	r0, #16
 800a6b4:	b2d9      	uxtb	r1, r3
 800a6b6:	b909      	cbnz	r1, 800a6bc <__lo0bits+0x32>
 800a6b8:	3008      	adds	r0, #8
 800a6ba:	0a1b      	lsrs	r3, r3, #8
 800a6bc:	0719      	lsls	r1, r3, #28
 800a6be:	bf04      	itt	eq
 800a6c0:	091b      	lsreq	r3, r3, #4
 800a6c2:	3004      	addeq	r0, #4
 800a6c4:	0799      	lsls	r1, r3, #30
 800a6c6:	bf04      	itt	eq
 800a6c8:	089b      	lsreq	r3, r3, #2
 800a6ca:	3002      	addeq	r0, #2
 800a6cc:	07d9      	lsls	r1, r3, #31
 800a6ce:	d403      	bmi.n	800a6d8 <__lo0bits+0x4e>
 800a6d0:	085b      	lsrs	r3, r3, #1
 800a6d2:	f100 0001 	add.w	r0, r0, #1
 800a6d6:	d003      	beq.n	800a6e0 <__lo0bits+0x56>
 800a6d8:	6013      	str	r3, [r2, #0]
 800a6da:	4770      	bx	lr
 800a6dc:	2000      	movs	r0, #0
 800a6de:	4770      	bx	lr
 800a6e0:	2020      	movs	r0, #32
 800a6e2:	4770      	bx	lr

0800a6e4 <__i2b>:
 800a6e4:	b510      	push	{r4, lr}
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	f7ff febd 	bl	800a468 <_Balloc>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	b928      	cbnz	r0, 800a6fe <__i2b+0x1a>
 800a6f2:	4b05      	ldr	r3, [pc, #20]	@ (800a708 <__i2b+0x24>)
 800a6f4:	4805      	ldr	r0, [pc, #20]	@ (800a70c <__i2b+0x28>)
 800a6f6:	f240 1145 	movw	r1, #325	@ 0x145
 800a6fa:	f7fe fbff 	bl	8008efc <__assert_func>
 800a6fe:	2301      	movs	r3, #1
 800a700:	6144      	str	r4, [r0, #20]
 800a702:	6103      	str	r3, [r0, #16]
 800a704:	bd10      	pop	{r4, pc}
 800a706:	bf00      	nop
 800a708:	0800bebb 	.word	0x0800bebb
 800a70c:	0800bf2c 	.word	0x0800bf2c

0800a710 <__multiply>:
 800a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	4614      	mov	r4, r2
 800a716:	690a      	ldr	r2, [r1, #16]
 800a718:	6923      	ldr	r3, [r4, #16]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	bfa8      	it	ge
 800a71e:	4623      	movge	r3, r4
 800a720:	460f      	mov	r7, r1
 800a722:	bfa4      	itt	ge
 800a724:	460c      	movge	r4, r1
 800a726:	461f      	movge	r7, r3
 800a728:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a72c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a730:	68a3      	ldr	r3, [r4, #8]
 800a732:	6861      	ldr	r1, [r4, #4]
 800a734:	eb0a 0609 	add.w	r6, sl, r9
 800a738:	42b3      	cmp	r3, r6
 800a73a:	b085      	sub	sp, #20
 800a73c:	bfb8      	it	lt
 800a73e:	3101      	addlt	r1, #1
 800a740:	f7ff fe92 	bl	800a468 <_Balloc>
 800a744:	b930      	cbnz	r0, 800a754 <__multiply+0x44>
 800a746:	4602      	mov	r2, r0
 800a748:	4b44      	ldr	r3, [pc, #272]	@ (800a85c <__multiply+0x14c>)
 800a74a:	4845      	ldr	r0, [pc, #276]	@ (800a860 <__multiply+0x150>)
 800a74c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a750:	f7fe fbd4 	bl	8008efc <__assert_func>
 800a754:	f100 0514 	add.w	r5, r0, #20
 800a758:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a75c:	462b      	mov	r3, r5
 800a75e:	2200      	movs	r2, #0
 800a760:	4543      	cmp	r3, r8
 800a762:	d321      	bcc.n	800a7a8 <__multiply+0x98>
 800a764:	f107 0114 	add.w	r1, r7, #20
 800a768:	f104 0214 	add.w	r2, r4, #20
 800a76c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a770:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a774:	9302      	str	r3, [sp, #8]
 800a776:	1b13      	subs	r3, r2, r4
 800a778:	3b15      	subs	r3, #21
 800a77a:	f023 0303 	bic.w	r3, r3, #3
 800a77e:	3304      	adds	r3, #4
 800a780:	f104 0715 	add.w	r7, r4, #21
 800a784:	42ba      	cmp	r2, r7
 800a786:	bf38      	it	cc
 800a788:	2304      	movcc	r3, #4
 800a78a:	9301      	str	r3, [sp, #4]
 800a78c:	9b02      	ldr	r3, [sp, #8]
 800a78e:	9103      	str	r1, [sp, #12]
 800a790:	428b      	cmp	r3, r1
 800a792:	d80c      	bhi.n	800a7ae <__multiply+0x9e>
 800a794:	2e00      	cmp	r6, #0
 800a796:	dd03      	ble.n	800a7a0 <__multiply+0x90>
 800a798:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d05b      	beq.n	800a858 <__multiply+0x148>
 800a7a0:	6106      	str	r6, [r0, #16]
 800a7a2:	b005      	add	sp, #20
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a8:	f843 2b04 	str.w	r2, [r3], #4
 800a7ac:	e7d8      	b.n	800a760 <__multiply+0x50>
 800a7ae:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7b2:	f1ba 0f00 	cmp.w	sl, #0
 800a7b6:	d024      	beq.n	800a802 <__multiply+0xf2>
 800a7b8:	f104 0e14 	add.w	lr, r4, #20
 800a7bc:	46a9      	mov	r9, r5
 800a7be:	f04f 0c00 	mov.w	ip, #0
 800a7c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7c6:	f8d9 3000 	ldr.w	r3, [r9]
 800a7ca:	fa1f fb87 	uxth.w	fp, r7
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a7d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a7d8:	f8d9 7000 	ldr.w	r7, [r9]
 800a7dc:	4463      	add	r3, ip
 800a7de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a7e2:	fb0a c70b 	mla	r7, sl, fp, ip
 800a7e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a7f0:	4572      	cmp	r2, lr
 800a7f2:	f849 3b04 	str.w	r3, [r9], #4
 800a7f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a7fa:	d8e2      	bhi.n	800a7c2 <__multiply+0xb2>
 800a7fc:	9b01      	ldr	r3, [sp, #4]
 800a7fe:	f845 c003 	str.w	ip, [r5, r3]
 800a802:	9b03      	ldr	r3, [sp, #12]
 800a804:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a808:	3104      	adds	r1, #4
 800a80a:	f1b9 0f00 	cmp.w	r9, #0
 800a80e:	d021      	beq.n	800a854 <__multiply+0x144>
 800a810:	682b      	ldr	r3, [r5, #0]
 800a812:	f104 0c14 	add.w	ip, r4, #20
 800a816:	46ae      	mov	lr, r5
 800a818:	f04f 0a00 	mov.w	sl, #0
 800a81c:	f8bc b000 	ldrh.w	fp, [ip]
 800a820:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a824:	fb09 770b 	mla	r7, r9, fp, r7
 800a828:	4457      	add	r7, sl
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a830:	f84e 3b04 	str.w	r3, [lr], #4
 800a834:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a838:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a83c:	f8be 3000 	ldrh.w	r3, [lr]
 800a840:	fb09 330a 	mla	r3, r9, sl, r3
 800a844:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a848:	4562      	cmp	r2, ip
 800a84a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a84e:	d8e5      	bhi.n	800a81c <__multiply+0x10c>
 800a850:	9f01      	ldr	r7, [sp, #4]
 800a852:	51eb      	str	r3, [r5, r7]
 800a854:	3504      	adds	r5, #4
 800a856:	e799      	b.n	800a78c <__multiply+0x7c>
 800a858:	3e01      	subs	r6, #1
 800a85a:	e79b      	b.n	800a794 <__multiply+0x84>
 800a85c:	0800bebb 	.word	0x0800bebb
 800a860:	0800bf2c 	.word	0x0800bf2c

0800a864 <__pow5mult>:
 800a864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a868:	4615      	mov	r5, r2
 800a86a:	f012 0203 	ands.w	r2, r2, #3
 800a86e:	4607      	mov	r7, r0
 800a870:	460e      	mov	r6, r1
 800a872:	d007      	beq.n	800a884 <__pow5mult+0x20>
 800a874:	4c25      	ldr	r4, [pc, #148]	@ (800a90c <__pow5mult+0xa8>)
 800a876:	3a01      	subs	r2, #1
 800a878:	2300      	movs	r3, #0
 800a87a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a87e:	f7ff fe55 	bl	800a52c <__multadd>
 800a882:	4606      	mov	r6, r0
 800a884:	10ad      	asrs	r5, r5, #2
 800a886:	d03d      	beq.n	800a904 <__pow5mult+0xa0>
 800a888:	69fc      	ldr	r4, [r7, #28]
 800a88a:	b97c      	cbnz	r4, 800a8ac <__pow5mult+0x48>
 800a88c:	2010      	movs	r0, #16
 800a88e:	f7ff fd23 	bl	800a2d8 <malloc>
 800a892:	4602      	mov	r2, r0
 800a894:	61f8      	str	r0, [r7, #28]
 800a896:	b928      	cbnz	r0, 800a8a4 <__pow5mult+0x40>
 800a898:	4b1d      	ldr	r3, [pc, #116]	@ (800a910 <__pow5mult+0xac>)
 800a89a:	481e      	ldr	r0, [pc, #120]	@ (800a914 <__pow5mult+0xb0>)
 800a89c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8a0:	f7fe fb2c 	bl	8008efc <__assert_func>
 800a8a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8a8:	6004      	str	r4, [r0, #0]
 800a8aa:	60c4      	str	r4, [r0, #12]
 800a8ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a8b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8b4:	b94c      	cbnz	r4, 800a8ca <__pow5mult+0x66>
 800a8b6:	f240 2171 	movw	r1, #625	@ 0x271
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	f7ff ff12 	bl	800a6e4 <__i2b>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	6003      	str	r3, [r0, #0]
 800a8ca:	f04f 0900 	mov.w	r9, #0
 800a8ce:	07eb      	lsls	r3, r5, #31
 800a8d0:	d50a      	bpl.n	800a8e8 <__pow5mult+0x84>
 800a8d2:	4631      	mov	r1, r6
 800a8d4:	4622      	mov	r2, r4
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	f7ff ff1a 	bl	800a710 <__multiply>
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4680      	mov	r8, r0
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f7ff fe01 	bl	800a4e8 <_Bfree>
 800a8e6:	4646      	mov	r6, r8
 800a8e8:	106d      	asrs	r5, r5, #1
 800a8ea:	d00b      	beq.n	800a904 <__pow5mult+0xa0>
 800a8ec:	6820      	ldr	r0, [r4, #0]
 800a8ee:	b938      	cbnz	r0, 800a900 <__pow5mult+0x9c>
 800a8f0:	4622      	mov	r2, r4
 800a8f2:	4621      	mov	r1, r4
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f7ff ff0b 	bl	800a710 <__multiply>
 800a8fa:	6020      	str	r0, [r4, #0]
 800a8fc:	f8c0 9000 	str.w	r9, [r0]
 800a900:	4604      	mov	r4, r0
 800a902:	e7e4      	b.n	800a8ce <__pow5mult+0x6a>
 800a904:	4630      	mov	r0, r6
 800a906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a90a:	bf00      	nop
 800a90c:	0800bf88 	.word	0x0800bf88
 800a910:	0800bda1 	.word	0x0800bda1
 800a914:	0800bf2c 	.word	0x0800bf2c

0800a918 <__lshift>:
 800a918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a91c:	460c      	mov	r4, r1
 800a91e:	6849      	ldr	r1, [r1, #4]
 800a920:	6923      	ldr	r3, [r4, #16]
 800a922:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a926:	68a3      	ldr	r3, [r4, #8]
 800a928:	4607      	mov	r7, r0
 800a92a:	4691      	mov	r9, r2
 800a92c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a930:	f108 0601 	add.w	r6, r8, #1
 800a934:	42b3      	cmp	r3, r6
 800a936:	db0b      	blt.n	800a950 <__lshift+0x38>
 800a938:	4638      	mov	r0, r7
 800a93a:	f7ff fd95 	bl	800a468 <_Balloc>
 800a93e:	4605      	mov	r5, r0
 800a940:	b948      	cbnz	r0, 800a956 <__lshift+0x3e>
 800a942:	4602      	mov	r2, r0
 800a944:	4b28      	ldr	r3, [pc, #160]	@ (800a9e8 <__lshift+0xd0>)
 800a946:	4829      	ldr	r0, [pc, #164]	@ (800a9ec <__lshift+0xd4>)
 800a948:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a94c:	f7fe fad6 	bl	8008efc <__assert_func>
 800a950:	3101      	adds	r1, #1
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	e7ee      	b.n	800a934 <__lshift+0x1c>
 800a956:	2300      	movs	r3, #0
 800a958:	f100 0114 	add.w	r1, r0, #20
 800a95c:	f100 0210 	add.w	r2, r0, #16
 800a960:	4618      	mov	r0, r3
 800a962:	4553      	cmp	r3, sl
 800a964:	db33      	blt.n	800a9ce <__lshift+0xb6>
 800a966:	6920      	ldr	r0, [r4, #16]
 800a968:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a96c:	f104 0314 	add.w	r3, r4, #20
 800a970:	f019 091f 	ands.w	r9, r9, #31
 800a974:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a978:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a97c:	d02b      	beq.n	800a9d6 <__lshift+0xbe>
 800a97e:	f1c9 0e20 	rsb	lr, r9, #32
 800a982:	468a      	mov	sl, r1
 800a984:	2200      	movs	r2, #0
 800a986:	6818      	ldr	r0, [r3, #0]
 800a988:	fa00 f009 	lsl.w	r0, r0, r9
 800a98c:	4310      	orrs	r0, r2
 800a98e:	f84a 0b04 	str.w	r0, [sl], #4
 800a992:	f853 2b04 	ldr.w	r2, [r3], #4
 800a996:	459c      	cmp	ip, r3
 800a998:	fa22 f20e 	lsr.w	r2, r2, lr
 800a99c:	d8f3      	bhi.n	800a986 <__lshift+0x6e>
 800a99e:	ebac 0304 	sub.w	r3, ip, r4
 800a9a2:	3b15      	subs	r3, #21
 800a9a4:	f023 0303 	bic.w	r3, r3, #3
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	f104 0015 	add.w	r0, r4, #21
 800a9ae:	4584      	cmp	ip, r0
 800a9b0:	bf38      	it	cc
 800a9b2:	2304      	movcc	r3, #4
 800a9b4:	50ca      	str	r2, [r1, r3]
 800a9b6:	b10a      	cbz	r2, 800a9bc <__lshift+0xa4>
 800a9b8:	f108 0602 	add.w	r6, r8, #2
 800a9bc:	3e01      	subs	r6, #1
 800a9be:	4638      	mov	r0, r7
 800a9c0:	612e      	str	r6, [r5, #16]
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	f7ff fd90 	bl	800a4e8 <_Bfree>
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	e7c5      	b.n	800a962 <__lshift+0x4a>
 800a9d6:	3904      	subs	r1, #4
 800a9d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9e0:	459c      	cmp	ip, r3
 800a9e2:	d8f9      	bhi.n	800a9d8 <__lshift+0xc0>
 800a9e4:	e7ea      	b.n	800a9bc <__lshift+0xa4>
 800a9e6:	bf00      	nop
 800a9e8:	0800bebb 	.word	0x0800bebb
 800a9ec:	0800bf2c 	.word	0x0800bf2c

0800a9f0 <__mcmp>:
 800a9f0:	690a      	ldr	r2, [r1, #16]
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	6900      	ldr	r0, [r0, #16]
 800a9f6:	1a80      	subs	r0, r0, r2
 800a9f8:	b530      	push	{r4, r5, lr}
 800a9fa:	d10e      	bne.n	800aa1a <__mcmp+0x2a>
 800a9fc:	3314      	adds	r3, #20
 800a9fe:	3114      	adds	r1, #20
 800aa00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa10:	4295      	cmp	r5, r2
 800aa12:	d003      	beq.n	800aa1c <__mcmp+0x2c>
 800aa14:	d205      	bcs.n	800aa22 <__mcmp+0x32>
 800aa16:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1a:	bd30      	pop	{r4, r5, pc}
 800aa1c:	42a3      	cmp	r3, r4
 800aa1e:	d3f3      	bcc.n	800aa08 <__mcmp+0x18>
 800aa20:	e7fb      	b.n	800aa1a <__mcmp+0x2a>
 800aa22:	2001      	movs	r0, #1
 800aa24:	e7f9      	b.n	800aa1a <__mcmp+0x2a>
	...

0800aa28 <__mdiff>:
 800aa28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	4689      	mov	r9, r1
 800aa2e:	4606      	mov	r6, r0
 800aa30:	4611      	mov	r1, r2
 800aa32:	4648      	mov	r0, r9
 800aa34:	4614      	mov	r4, r2
 800aa36:	f7ff ffdb 	bl	800a9f0 <__mcmp>
 800aa3a:	1e05      	subs	r5, r0, #0
 800aa3c:	d112      	bne.n	800aa64 <__mdiff+0x3c>
 800aa3e:	4629      	mov	r1, r5
 800aa40:	4630      	mov	r0, r6
 800aa42:	f7ff fd11 	bl	800a468 <_Balloc>
 800aa46:	4602      	mov	r2, r0
 800aa48:	b928      	cbnz	r0, 800aa56 <__mdiff+0x2e>
 800aa4a:	4b3f      	ldr	r3, [pc, #252]	@ (800ab48 <__mdiff+0x120>)
 800aa4c:	f240 2137 	movw	r1, #567	@ 0x237
 800aa50:	483e      	ldr	r0, [pc, #248]	@ (800ab4c <__mdiff+0x124>)
 800aa52:	f7fe fa53 	bl	8008efc <__assert_func>
 800aa56:	2301      	movs	r3, #1
 800aa58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	b003      	add	sp, #12
 800aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa64:	bfbc      	itt	lt
 800aa66:	464b      	movlt	r3, r9
 800aa68:	46a1      	movlt	r9, r4
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa70:	bfba      	itte	lt
 800aa72:	461c      	movlt	r4, r3
 800aa74:	2501      	movlt	r5, #1
 800aa76:	2500      	movge	r5, #0
 800aa78:	f7ff fcf6 	bl	800a468 <_Balloc>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	b918      	cbnz	r0, 800aa88 <__mdiff+0x60>
 800aa80:	4b31      	ldr	r3, [pc, #196]	@ (800ab48 <__mdiff+0x120>)
 800aa82:	f240 2145 	movw	r1, #581	@ 0x245
 800aa86:	e7e3      	b.n	800aa50 <__mdiff+0x28>
 800aa88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aa8c:	6926      	ldr	r6, [r4, #16]
 800aa8e:	60c5      	str	r5, [r0, #12]
 800aa90:	f109 0310 	add.w	r3, r9, #16
 800aa94:	f109 0514 	add.w	r5, r9, #20
 800aa98:	f104 0e14 	add.w	lr, r4, #20
 800aa9c:	f100 0b14 	add.w	fp, r0, #20
 800aaa0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aaa4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aaa8:	9301      	str	r3, [sp, #4]
 800aaaa:	46d9      	mov	r9, fp
 800aaac:	f04f 0c00 	mov.w	ip, #0
 800aab0:	9b01      	ldr	r3, [sp, #4]
 800aab2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aab6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aaba:	9301      	str	r3, [sp, #4]
 800aabc:	fa1f f38a 	uxth.w	r3, sl
 800aac0:	4619      	mov	r1, r3
 800aac2:	b283      	uxth	r3, r0
 800aac4:	1acb      	subs	r3, r1, r3
 800aac6:	0c00      	lsrs	r0, r0, #16
 800aac8:	4463      	add	r3, ip
 800aaca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aace:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aad8:	4576      	cmp	r6, lr
 800aada:	f849 3b04 	str.w	r3, [r9], #4
 800aade:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aae2:	d8e5      	bhi.n	800aab0 <__mdiff+0x88>
 800aae4:	1b33      	subs	r3, r6, r4
 800aae6:	3b15      	subs	r3, #21
 800aae8:	f023 0303 	bic.w	r3, r3, #3
 800aaec:	3415      	adds	r4, #21
 800aaee:	3304      	adds	r3, #4
 800aaf0:	42a6      	cmp	r6, r4
 800aaf2:	bf38      	it	cc
 800aaf4:	2304      	movcc	r3, #4
 800aaf6:	441d      	add	r5, r3
 800aaf8:	445b      	add	r3, fp
 800aafa:	461e      	mov	r6, r3
 800aafc:	462c      	mov	r4, r5
 800aafe:	4544      	cmp	r4, r8
 800ab00:	d30e      	bcc.n	800ab20 <__mdiff+0xf8>
 800ab02:	f108 0103 	add.w	r1, r8, #3
 800ab06:	1b49      	subs	r1, r1, r5
 800ab08:	f021 0103 	bic.w	r1, r1, #3
 800ab0c:	3d03      	subs	r5, #3
 800ab0e:	45a8      	cmp	r8, r5
 800ab10:	bf38      	it	cc
 800ab12:	2100      	movcc	r1, #0
 800ab14:	440b      	add	r3, r1
 800ab16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab1a:	b191      	cbz	r1, 800ab42 <__mdiff+0x11a>
 800ab1c:	6117      	str	r7, [r2, #16]
 800ab1e:	e79d      	b.n	800aa5c <__mdiff+0x34>
 800ab20:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab24:	46e6      	mov	lr, ip
 800ab26:	0c08      	lsrs	r0, r1, #16
 800ab28:	fa1c fc81 	uxtah	ip, ip, r1
 800ab2c:	4471      	add	r1, lr
 800ab2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab32:	b289      	uxth	r1, r1
 800ab34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab38:	f846 1b04 	str.w	r1, [r6], #4
 800ab3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab40:	e7dd      	b.n	800aafe <__mdiff+0xd6>
 800ab42:	3f01      	subs	r7, #1
 800ab44:	e7e7      	b.n	800ab16 <__mdiff+0xee>
 800ab46:	bf00      	nop
 800ab48:	0800bebb 	.word	0x0800bebb
 800ab4c:	0800bf2c 	.word	0x0800bf2c

0800ab50 <__ulp>:
 800ab50:	b082      	sub	sp, #8
 800ab52:	ed8d 0b00 	vstr	d0, [sp]
 800ab56:	9a01      	ldr	r2, [sp, #4]
 800ab58:	4b0f      	ldr	r3, [pc, #60]	@ (800ab98 <__ulp+0x48>)
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	dc08      	bgt.n	800ab76 <__ulp+0x26>
 800ab64:	425b      	negs	r3, r3
 800ab66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ab6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab6e:	da04      	bge.n	800ab7a <__ulp+0x2a>
 800ab70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ab74:	4113      	asrs	r3, r2
 800ab76:	2200      	movs	r2, #0
 800ab78:	e008      	b.n	800ab8c <__ulp+0x3c>
 800ab7a:	f1a2 0314 	sub.w	r3, r2, #20
 800ab7e:	2b1e      	cmp	r3, #30
 800ab80:	bfda      	itte	le
 800ab82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ab86:	40da      	lsrle	r2, r3
 800ab88:	2201      	movgt	r2, #1
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	ec41 0b10 	vmov	d0, r0, r1
 800ab94:	b002      	add	sp, #8
 800ab96:	4770      	bx	lr
 800ab98:	7ff00000 	.word	0x7ff00000

0800ab9c <__b2d>:
 800ab9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba0:	6906      	ldr	r6, [r0, #16]
 800aba2:	f100 0814 	add.w	r8, r0, #20
 800aba6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800abaa:	1f37      	subs	r7, r6, #4
 800abac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abb0:	4610      	mov	r0, r2
 800abb2:	f7ff fd4b 	bl	800a64c <__hi0bits>
 800abb6:	f1c0 0320 	rsb	r3, r0, #32
 800abba:	280a      	cmp	r0, #10
 800abbc:	600b      	str	r3, [r1, #0]
 800abbe:	491b      	ldr	r1, [pc, #108]	@ (800ac2c <__b2d+0x90>)
 800abc0:	dc15      	bgt.n	800abee <__b2d+0x52>
 800abc2:	f1c0 0c0b 	rsb	ip, r0, #11
 800abc6:	fa22 f30c 	lsr.w	r3, r2, ip
 800abca:	45b8      	cmp	r8, r7
 800abcc:	ea43 0501 	orr.w	r5, r3, r1
 800abd0:	bf34      	ite	cc
 800abd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800abd6:	2300      	movcs	r3, #0
 800abd8:	3015      	adds	r0, #21
 800abda:	fa02 f000 	lsl.w	r0, r2, r0
 800abde:	fa23 f30c 	lsr.w	r3, r3, ip
 800abe2:	4303      	orrs	r3, r0
 800abe4:	461c      	mov	r4, r3
 800abe6:	ec45 4b10 	vmov	d0, r4, r5
 800abea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abee:	45b8      	cmp	r8, r7
 800abf0:	bf3a      	itte	cc
 800abf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800abf6:	f1a6 0708 	subcc.w	r7, r6, #8
 800abfa:	2300      	movcs	r3, #0
 800abfc:	380b      	subs	r0, #11
 800abfe:	d012      	beq.n	800ac26 <__b2d+0x8a>
 800ac00:	f1c0 0120 	rsb	r1, r0, #32
 800ac04:	fa23 f401 	lsr.w	r4, r3, r1
 800ac08:	4082      	lsls	r2, r0
 800ac0a:	4322      	orrs	r2, r4
 800ac0c:	4547      	cmp	r7, r8
 800ac0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ac12:	bf8c      	ite	hi
 800ac14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac18:	2200      	movls	r2, #0
 800ac1a:	4083      	lsls	r3, r0
 800ac1c:	40ca      	lsrs	r2, r1
 800ac1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ac22:	4313      	orrs	r3, r2
 800ac24:	e7de      	b.n	800abe4 <__b2d+0x48>
 800ac26:	ea42 0501 	orr.w	r5, r2, r1
 800ac2a:	e7db      	b.n	800abe4 <__b2d+0x48>
 800ac2c:	3ff00000 	.word	0x3ff00000

0800ac30 <__d2b>:
 800ac30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac34:	460f      	mov	r7, r1
 800ac36:	2101      	movs	r1, #1
 800ac38:	ec59 8b10 	vmov	r8, r9, d0
 800ac3c:	4616      	mov	r6, r2
 800ac3e:	f7ff fc13 	bl	800a468 <_Balloc>
 800ac42:	4604      	mov	r4, r0
 800ac44:	b930      	cbnz	r0, 800ac54 <__d2b+0x24>
 800ac46:	4602      	mov	r2, r0
 800ac48:	4b23      	ldr	r3, [pc, #140]	@ (800acd8 <__d2b+0xa8>)
 800ac4a:	4824      	ldr	r0, [pc, #144]	@ (800acdc <__d2b+0xac>)
 800ac4c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac50:	f7fe f954 	bl	8008efc <__assert_func>
 800ac54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac5c:	b10d      	cbz	r5, 800ac62 <__d2b+0x32>
 800ac5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac62:	9301      	str	r3, [sp, #4]
 800ac64:	f1b8 0300 	subs.w	r3, r8, #0
 800ac68:	d023      	beq.n	800acb2 <__d2b+0x82>
 800ac6a:	4668      	mov	r0, sp
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	f7ff fd0c 	bl	800a68a <__lo0bits>
 800ac72:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac76:	b1d0      	cbz	r0, 800acae <__d2b+0x7e>
 800ac78:	f1c0 0320 	rsb	r3, r0, #32
 800ac7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac80:	430b      	orrs	r3, r1
 800ac82:	40c2      	lsrs	r2, r0
 800ac84:	6163      	str	r3, [r4, #20]
 800ac86:	9201      	str	r2, [sp, #4]
 800ac88:	9b01      	ldr	r3, [sp, #4]
 800ac8a:	61a3      	str	r3, [r4, #24]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	bf0c      	ite	eq
 800ac90:	2201      	moveq	r2, #1
 800ac92:	2202      	movne	r2, #2
 800ac94:	6122      	str	r2, [r4, #16]
 800ac96:	b1a5      	cbz	r5, 800acc2 <__d2b+0x92>
 800ac98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ac9c:	4405      	add	r5, r0
 800ac9e:	603d      	str	r5, [r7, #0]
 800aca0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aca4:	6030      	str	r0, [r6, #0]
 800aca6:	4620      	mov	r0, r4
 800aca8:	b003      	add	sp, #12
 800acaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acae:	6161      	str	r1, [r4, #20]
 800acb0:	e7ea      	b.n	800ac88 <__d2b+0x58>
 800acb2:	a801      	add	r0, sp, #4
 800acb4:	f7ff fce9 	bl	800a68a <__lo0bits>
 800acb8:	9b01      	ldr	r3, [sp, #4]
 800acba:	6163      	str	r3, [r4, #20]
 800acbc:	3020      	adds	r0, #32
 800acbe:	2201      	movs	r2, #1
 800acc0:	e7e8      	b.n	800ac94 <__d2b+0x64>
 800acc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800acca:	6038      	str	r0, [r7, #0]
 800accc:	6918      	ldr	r0, [r3, #16]
 800acce:	f7ff fcbd 	bl	800a64c <__hi0bits>
 800acd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acd6:	e7e5      	b.n	800aca4 <__d2b+0x74>
 800acd8:	0800bebb 	.word	0x0800bebb
 800acdc:	0800bf2c 	.word	0x0800bf2c

0800ace0 <__ratio>:
 800ace0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace4:	b085      	sub	sp, #20
 800ace6:	e9cd 1000 	strd	r1, r0, [sp]
 800acea:	a902      	add	r1, sp, #8
 800acec:	f7ff ff56 	bl	800ab9c <__b2d>
 800acf0:	9800      	ldr	r0, [sp, #0]
 800acf2:	a903      	add	r1, sp, #12
 800acf4:	ec55 4b10 	vmov	r4, r5, d0
 800acf8:	f7ff ff50 	bl	800ab9c <__b2d>
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	6919      	ldr	r1, [r3, #16]
 800ad00:	9b00      	ldr	r3, [sp, #0]
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	1ac9      	subs	r1, r1, r3
 800ad06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ad0a:	1a9b      	subs	r3, r3, r2
 800ad0c:	ec5b ab10 	vmov	sl, fp, d0
 800ad10:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bfce      	itee	gt
 800ad18:	462a      	movgt	r2, r5
 800ad1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad1e:	465a      	movle	r2, fp
 800ad20:	462f      	mov	r7, r5
 800ad22:	46d9      	mov	r9, fp
 800ad24:	bfcc      	ite	gt
 800ad26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad2a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ad2e:	464b      	mov	r3, r9
 800ad30:	4652      	mov	r2, sl
 800ad32:	4620      	mov	r0, r4
 800ad34:	4639      	mov	r1, r7
 800ad36:	f7f5 fd89 	bl	800084c <__aeabi_ddiv>
 800ad3a:	ec41 0b10 	vmov	d0, r0, r1
 800ad3e:	b005      	add	sp, #20
 800ad40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad44 <__copybits>:
 800ad44:	3901      	subs	r1, #1
 800ad46:	b570      	push	{r4, r5, r6, lr}
 800ad48:	1149      	asrs	r1, r1, #5
 800ad4a:	6914      	ldr	r4, [r2, #16]
 800ad4c:	3101      	adds	r1, #1
 800ad4e:	f102 0314 	add.w	r3, r2, #20
 800ad52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad5a:	1f05      	subs	r5, r0, #4
 800ad5c:	42a3      	cmp	r3, r4
 800ad5e:	d30c      	bcc.n	800ad7a <__copybits+0x36>
 800ad60:	1aa3      	subs	r3, r4, r2
 800ad62:	3b11      	subs	r3, #17
 800ad64:	f023 0303 	bic.w	r3, r3, #3
 800ad68:	3211      	adds	r2, #17
 800ad6a:	42a2      	cmp	r2, r4
 800ad6c:	bf88      	it	hi
 800ad6e:	2300      	movhi	r3, #0
 800ad70:	4418      	add	r0, r3
 800ad72:	2300      	movs	r3, #0
 800ad74:	4288      	cmp	r0, r1
 800ad76:	d305      	bcc.n	800ad84 <__copybits+0x40>
 800ad78:	bd70      	pop	{r4, r5, r6, pc}
 800ad7a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad7e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad82:	e7eb      	b.n	800ad5c <__copybits+0x18>
 800ad84:	f840 3b04 	str.w	r3, [r0], #4
 800ad88:	e7f4      	b.n	800ad74 <__copybits+0x30>

0800ad8a <__any_on>:
 800ad8a:	f100 0214 	add.w	r2, r0, #20
 800ad8e:	6900      	ldr	r0, [r0, #16]
 800ad90:	114b      	asrs	r3, r1, #5
 800ad92:	4298      	cmp	r0, r3
 800ad94:	b510      	push	{r4, lr}
 800ad96:	db11      	blt.n	800adbc <__any_on+0x32>
 800ad98:	dd0a      	ble.n	800adb0 <__any_on+0x26>
 800ad9a:	f011 011f 	ands.w	r1, r1, #31
 800ad9e:	d007      	beq.n	800adb0 <__any_on+0x26>
 800ada0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ada4:	fa24 f001 	lsr.w	r0, r4, r1
 800ada8:	fa00 f101 	lsl.w	r1, r0, r1
 800adac:	428c      	cmp	r4, r1
 800adae:	d10b      	bne.n	800adc8 <__any_on+0x3e>
 800adb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d803      	bhi.n	800adc0 <__any_on+0x36>
 800adb8:	2000      	movs	r0, #0
 800adba:	bd10      	pop	{r4, pc}
 800adbc:	4603      	mov	r3, r0
 800adbe:	e7f7      	b.n	800adb0 <__any_on+0x26>
 800adc0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800adc4:	2900      	cmp	r1, #0
 800adc6:	d0f5      	beq.n	800adb4 <__any_on+0x2a>
 800adc8:	2001      	movs	r0, #1
 800adca:	e7f6      	b.n	800adba <__any_on+0x30>

0800adcc <_strtol_l.constprop.0>:
 800adcc:	2b24      	cmp	r3, #36	@ 0x24
 800adce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add2:	4686      	mov	lr, r0
 800add4:	4690      	mov	r8, r2
 800add6:	d801      	bhi.n	800addc <_strtol_l.constprop.0+0x10>
 800add8:	2b01      	cmp	r3, #1
 800adda:	d106      	bne.n	800adea <_strtol_l.constprop.0+0x1e>
 800addc:	f7fe f842 	bl	8008e64 <__errno>
 800ade0:	2316      	movs	r3, #22
 800ade2:	6003      	str	r3, [r0, #0]
 800ade4:	2000      	movs	r0, #0
 800ade6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adea:	4834      	ldr	r0, [pc, #208]	@ (800aebc <_strtol_l.constprop.0+0xf0>)
 800adec:	460d      	mov	r5, r1
 800adee:	462a      	mov	r2, r5
 800adf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adf4:	5d06      	ldrb	r6, [r0, r4]
 800adf6:	f016 0608 	ands.w	r6, r6, #8
 800adfa:	d1f8      	bne.n	800adee <_strtol_l.constprop.0+0x22>
 800adfc:	2c2d      	cmp	r4, #45	@ 0x2d
 800adfe:	d12d      	bne.n	800ae5c <_strtol_l.constprop.0+0x90>
 800ae00:	782c      	ldrb	r4, [r5, #0]
 800ae02:	2601      	movs	r6, #1
 800ae04:	1c95      	adds	r5, r2, #2
 800ae06:	f033 0210 	bics.w	r2, r3, #16
 800ae0a:	d109      	bne.n	800ae20 <_strtol_l.constprop.0+0x54>
 800ae0c:	2c30      	cmp	r4, #48	@ 0x30
 800ae0e:	d12a      	bne.n	800ae66 <_strtol_l.constprop.0+0x9a>
 800ae10:	782a      	ldrb	r2, [r5, #0]
 800ae12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ae16:	2a58      	cmp	r2, #88	@ 0x58
 800ae18:	d125      	bne.n	800ae66 <_strtol_l.constprop.0+0x9a>
 800ae1a:	786c      	ldrb	r4, [r5, #1]
 800ae1c:	2310      	movs	r3, #16
 800ae1e:	3502      	adds	r5, #2
 800ae20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ae24:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ae28:	2200      	movs	r2, #0
 800ae2a:	fbbc f9f3 	udiv	r9, ip, r3
 800ae2e:	4610      	mov	r0, r2
 800ae30:	fb03 ca19 	mls	sl, r3, r9, ip
 800ae34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ae38:	2f09      	cmp	r7, #9
 800ae3a:	d81b      	bhi.n	800ae74 <_strtol_l.constprop.0+0xa8>
 800ae3c:	463c      	mov	r4, r7
 800ae3e:	42a3      	cmp	r3, r4
 800ae40:	dd27      	ble.n	800ae92 <_strtol_l.constprop.0+0xc6>
 800ae42:	1c57      	adds	r7, r2, #1
 800ae44:	d007      	beq.n	800ae56 <_strtol_l.constprop.0+0x8a>
 800ae46:	4581      	cmp	r9, r0
 800ae48:	d320      	bcc.n	800ae8c <_strtol_l.constprop.0+0xc0>
 800ae4a:	d101      	bne.n	800ae50 <_strtol_l.constprop.0+0x84>
 800ae4c:	45a2      	cmp	sl, r4
 800ae4e:	db1d      	blt.n	800ae8c <_strtol_l.constprop.0+0xc0>
 800ae50:	fb00 4003 	mla	r0, r0, r3, r4
 800ae54:	2201      	movs	r2, #1
 800ae56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae5a:	e7eb      	b.n	800ae34 <_strtol_l.constprop.0+0x68>
 800ae5c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ae5e:	bf04      	itt	eq
 800ae60:	782c      	ldrbeq	r4, [r5, #0]
 800ae62:	1c95      	addeq	r5, r2, #2
 800ae64:	e7cf      	b.n	800ae06 <_strtol_l.constprop.0+0x3a>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1da      	bne.n	800ae20 <_strtol_l.constprop.0+0x54>
 800ae6a:	2c30      	cmp	r4, #48	@ 0x30
 800ae6c:	bf0c      	ite	eq
 800ae6e:	2308      	moveq	r3, #8
 800ae70:	230a      	movne	r3, #10
 800ae72:	e7d5      	b.n	800ae20 <_strtol_l.constprop.0+0x54>
 800ae74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ae78:	2f19      	cmp	r7, #25
 800ae7a:	d801      	bhi.n	800ae80 <_strtol_l.constprop.0+0xb4>
 800ae7c:	3c37      	subs	r4, #55	@ 0x37
 800ae7e:	e7de      	b.n	800ae3e <_strtol_l.constprop.0+0x72>
 800ae80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ae84:	2f19      	cmp	r7, #25
 800ae86:	d804      	bhi.n	800ae92 <_strtol_l.constprop.0+0xc6>
 800ae88:	3c57      	subs	r4, #87	@ 0x57
 800ae8a:	e7d8      	b.n	800ae3e <_strtol_l.constprop.0+0x72>
 800ae8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae90:	e7e1      	b.n	800ae56 <_strtol_l.constprop.0+0x8a>
 800ae92:	1c53      	adds	r3, r2, #1
 800ae94:	d108      	bne.n	800aea8 <_strtol_l.constprop.0+0xdc>
 800ae96:	2322      	movs	r3, #34	@ 0x22
 800ae98:	f8ce 3000 	str.w	r3, [lr]
 800ae9c:	4660      	mov	r0, ip
 800ae9e:	f1b8 0f00 	cmp.w	r8, #0
 800aea2:	d0a0      	beq.n	800ade6 <_strtol_l.constprop.0+0x1a>
 800aea4:	1e69      	subs	r1, r5, #1
 800aea6:	e006      	b.n	800aeb6 <_strtol_l.constprop.0+0xea>
 800aea8:	b106      	cbz	r6, 800aeac <_strtol_l.constprop.0+0xe0>
 800aeaa:	4240      	negs	r0, r0
 800aeac:	f1b8 0f00 	cmp.w	r8, #0
 800aeb0:	d099      	beq.n	800ade6 <_strtol_l.constprop.0+0x1a>
 800aeb2:	2a00      	cmp	r2, #0
 800aeb4:	d1f6      	bne.n	800aea4 <_strtol_l.constprop.0+0xd8>
 800aeb6:	f8c8 1000 	str.w	r1, [r8]
 800aeba:	e794      	b.n	800ade6 <_strtol_l.constprop.0+0x1a>
 800aebc:	0800c089 	.word	0x0800c089

0800aec0 <_strtol_r>:
 800aec0:	f7ff bf84 	b.w	800adcc <_strtol_l.constprop.0>

0800aec4 <__ascii_wctomb>:
 800aec4:	4603      	mov	r3, r0
 800aec6:	4608      	mov	r0, r1
 800aec8:	b141      	cbz	r1, 800aedc <__ascii_wctomb+0x18>
 800aeca:	2aff      	cmp	r2, #255	@ 0xff
 800aecc:	d904      	bls.n	800aed8 <__ascii_wctomb+0x14>
 800aece:	228a      	movs	r2, #138	@ 0x8a
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	f04f 30ff 	mov.w	r0, #4294967295
 800aed6:	4770      	bx	lr
 800aed8:	700a      	strb	r2, [r1, #0]
 800aeda:	2001      	movs	r0, #1
 800aedc:	4770      	bx	lr

0800aede <__ssputs_r>:
 800aede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee2:	688e      	ldr	r6, [r1, #8]
 800aee4:	461f      	mov	r7, r3
 800aee6:	42be      	cmp	r6, r7
 800aee8:	680b      	ldr	r3, [r1, #0]
 800aeea:	4682      	mov	sl, r0
 800aeec:	460c      	mov	r4, r1
 800aeee:	4690      	mov	r8, r2
 800aef0:	d82d      	bhi.n	800af4e <__ssputs_r+0x70>
 800aef2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aef6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aefa:	d026      	beq.n	800af4a <__ssputs_r+0x6c>
 800aefc:	6965      	ldr	r5, [r4, #20]
 800aefe:	6909      	ldr	r1, [r1, #16]
 800af00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af04:	eba3 0901 	sub.w	r9, r3, r1
 800af08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af0c:	1c7b      	adds	r3, r7, #1
 800af0e:	444b      	add	r3, r9
 800af10:	106d      	asrs	r5, r5, #1
 800af12:	429d      	cmp	r5, r3
 800af14:	bf38      	it	cc
 800af16:	461d      	movcc	r5, r3
 800af18:	0553      	lsls	r3, r2, #21
 800af1a:	d527      	bpl.n	800af6c <__ssputs_r+0x8e>
 800af1c:	4629      	mov	r1, r5
 800af1e:	f7ff fa05 	bl	800a32c <_malloc_r>
 800af22:	4606      	mov	r6, r0
 800af24:	b360      	cbz	r0, 800af80 <__ssputs_r+0xa2>
 800af26:	6921      	ldr	r1, [r4, #16]
 800af28:	464a      	mov	r2, r9
 800af2a:	f7fd ffc8 	bl	8008ebe <memcpy>
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af38:	81a3      	strh	r3, [r4, #12]
 800af3a:	6126      	str	r6, [r4, #16]
 800af3c:	6165      	str	r5, [r4, #20]
 800af3e:	444e      	add	r6, r9
 800af40:	eba5 0509 	sub.w	r5, r5, r9
 800af44:	6026      	str	r6, [r4, #0]
 800af46:	60a5      	str	r5, [r4, #8]
 800af48:	463e      	mov	r6, r7
 800af4a:	42be      	cmp	r6, r7
 800af4c:	d900      	bls.n	800af50 <__ssputs_r+0x72>
 800af4e:	463e      	mov	r6, r7
 800af50:	6820      	ldr	r0, [r4, #0]
 800af52:	4632      	mov	r2, r6
 800af54:	4641      	mov	r1, r8
 800af56:	f000 f9d7 	bl	800b308 <memmove>
 800af5a:	68a3      	ldr	r3, [r4, #8]
 800af5c:	1b9b      	subs	r3, r3, r6
 800af5e:	60a3      	str	r3, [r4, #8]
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	4433      	add	r3, r6
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	2000      	movs	r0, #0
 800af68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6c:	462a      	mov	r2, r5
 800af6e:	f000 fa10 	bl	800b392 <_realloc_r>
 800af72:	4606      	mov	r6, r0
 800af74:	2800      	cmp	r0, #0
 800af76:	d1e0      	bne.n	800af3a <__ssputs_r+0x5c>
 800af78:	6921      	ldr	r1, [r4, #16]
 800af7a:	4650      	mov	r0, sl
 800af7c:	f7fe fe28 	bl	8009bd0 <_free_r>
 800af80:	230c      	movs	r3, #12
 800af82:	f8ca 3000 	str.w	r3, [sl]
 800af86:	89a3      	ldrh	r3, [r4, #12]
 800af88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af8c:	81a3      	strh	r3, [r4, #12]
 800af8e:	f04f 30ff 	mov.w	r0, #4294967295
 800af92:	e7e9      	b.n	800af68 <__ssputs_r+0x8a>

0800af94 <_svfiprintf_r>:
 800af94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	4698      	mov	r8, r3
 800af9a:	898b      	ldrh	r3, [r1, #12]
 800af9c:	061b      	lsls	r3, r3, #24
 800af9e:	b09d      	sub	sp, #116	@ 0x74
 800afa0:	4607      	mov	r7, r0
 800afa2:	460d      	mov	r5, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	d510      	bpl.n	800afca <_svfiprintf_r+0x36>
 800afa8:	690b      	ldr	r3, [r1, #16]
 800afaa:	b973      	cbnz	r3, 800afca <_svfiprintf_r+0x36>
 800afac:	2140      	movs	r1, #64	@ 0x40
 800afae:	f7ff f9bd 	bl	800a32c <_malloc_r>
 800afb2:	6028      	str	r0, [r5, #0]
 800afb4:	6128      	str	r0, [r5, #16]
 800afb6:	b930      	cbnz	r0, 800afc6 <_svfiprintf_r+0x32>
 800afb8:	230c      	movs	r3, #12
 800afba:	603b      	str	r3, [r7, #0]
 800afbc:	f04f 30ff 	mov.w	r0, #4294967295
 800afc0:	b01d      	add	sp, #116	@ 0x74
 800afc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc6:	2340      	movs	r3, #64	@ 0x40
 800afc8:	616b      	str	r3, [r5, #20]
 800afca:	2300      	movs	r3, #0
 800afcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800afce:	2320      	movs	r3, #32
 800afd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800afd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800afd8:	2330      	movs	r3, #48	@ 0x30
 800afda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b178 <_svfiprintf_r+0x1e4>
 800afde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afe2:	f04f 0901 	mov.w	r9, #1
 800afe6:	4623      	mov	r3, r4
 800afe8:	469a      	mov	sl, r3
 800afea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afee:	b10a      	cbz	r2, 800aff4 <_svfiprintf_r+0x60>
 800aff0:	2a25      	cmp	r2, #37	@ 0x25
 800aff2:	d1f9      	bne.n	800afe8 <_svfiprintf_r+0x54>
 800aff4:	ebba 0b04 	subs.w	fp, sl, r4
 800aff8:	d00b      	beq.n	800b012 <_svfiprintf_r+0x7e>
 800affa:	465b      	mov	r3, fp
 800affc:	4622      	mov	r2, r4
 800affe:	4629      	mov	r1, r5
 800b000:	4638      	mov	r0, r7
 800b002:	f7ff ff6c 	bl	800aede <__ssputs_r>
 800b006:	3001      	adds	r0, #1
 800b008:	f000 80a7 	beq.w	800b15a <_svfiprintf_r+0x1c6>
 800b00c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b00e:	445a      	add	r2, fp
 800b010:	9209      	str	r2, [sp, #36]	@ 0x24
 800b012:	f89a 3000 	ldrb.w	r3, [sl]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f000 809f 	beq.w	800b15a <_svfiprintf_r+0x1c6>
 800b01c:	2300      	movs	r3, #0
 800b01e:	f04f 32ff 	mov.w	r2, #4294967295
 800b022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b026:	f10a 0a01 	add.w	sl, sl, #1
 800b02a:	9304      	str	r3, [sp, #16]
 800b02c:	9307      	str	r3, [sp, #28]
 800b02e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b032:	931a      	str	r3, [sp, #104]	@ 0x68
 800b034:	4654      	mov	r4, sl
 800b036:	2205      	movs	r2, #5
 800b038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03c:	484e      	ldr	r0, [pc, #312]	@ (800b178 <_svfiprintf_r+0x1e4>)
 800b03e:	f7f5 f8c7 	bl	80001d0 <memchr>
 800b042:	9a04      	ldr	r2, [sp, #16]
 800b044:	b9d8      	cbnz	r0, 800b07e <_svfiprintf_r+0xea>
 800b046:	06d0      	lsls	r0, r2, #27
 800b048:	bf44      	itt	mi
 800b04a:	2320      	movmi	r3, #32
 800b04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b050:	0711      	lsls	r1, r2, #28
 800b052:	bf44      	itt	mi
 800b054:	232b      	movmi	r3, #43	@ 0x2b
 800b056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b05a:	f89a 3000 	ldrb.w	r3, [sl]
 800b05e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b060:	d015      	beq.n	800b08e <_svfiprintf_r+0xfa>
 800b062:	9a07      	ldr	r2, [sp, #28]
 800b064:	4654      	mov	r4, sl
 800b066:	2000      	movs	r0, #0
 800b068:	f04f 0c0a 	mov.w	ip, #10
 800b06c:	4621      	mov	r1, r4
 800b06e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b072:	3b30      	subs	r3, #48	@ 0x30
 800b074:	2b09      	cmp	r3, #9
 800b076:	d94b      	bls.n	800b110 <_svfiprintf_r+0x17c>
 800b078:	b1b0      	cbz	r0, 800b0a8 <_svfiprintf_r+0x114>
 800b07a:	9207      	str	r2, [sp, #28]
 800b07c:	e014      	b.n	800b0a8 <_svfiprintf_r+0x114>
 800b07e:	eba0 0308 	sub.w	r3, r0, r8
 800b082:	fa09 f303 	lsl.w	r3, r9, r3
 800b086:	4313      	orrs	r3, r2
 800b088:	9304      	str	r3, [sp, #16]
 800b08a:	46a2      	mov	sl, r4
 800b08c:	e7d2      	b.n	800b034 <_svfiprintf_r+0xa0>
 800b08e:	9b03      	ldr	r3, [sp, #12]
 800b090:	1d19      	adds	r1, r3, #4
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	9103      	str	r1, [sp, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	bfbb      	ittet	lt
 800b09a:	425b      	neglt	r3, r3
 800b09c:	f042 0202 	orrlt.w	r2, r2, #2
 800b0a0:	9307      	strge	r3, [sp, #28]
 800b0a2:	9307      	strlt	r3, [sp, #28]
 800b0a4:	bfb8      	it	lt
 800b0a6:	9204      	strlt	r2, [sp, #16]
 800b0a8:	7823      	ldrb	r3, [r4, #0]
 800b0aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0ac:	d10a      	bne.n	800b0c4 <_svfiprintf_r+0x130>
 800b0ae:	7863      	ldrb	r3, [r4, #1]
 800b0b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0b2:	d132      	bne.n	800b11a <_svfiprintf_r+0x186>
 800b0b4:	9b03      	ldr	r3, [sp, #12]
 800b0b6:	1d1a      	adds	r2, r3, #4
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	9203      	str	r2, [sp, #12]
 800b0bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0c0:	3402      	adds	r4, #2
 800b0c2:	9305      	str	r3, [sp, #20]
 800b0c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b188 <_svfiprintf_r+0x1f4>
 800b0c8:	7821      	ldrb	r1, [r4, #0]
 800b0ca:	2203      	movs	r2, #3
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	f7f5 f87f 	bl	80001d0 <memchr>
 800b0d2:	b138      	cbz	r0, 800b0e4 <_svfiprintf_r+0x150>
 800b0d4:	9b04      	ldr	r3, [sp, #16]
 800b0d6:	eba0 000a 	sub.w	r0, r0, sl
 800b0da:	2240      	movs	r2, #64	@ 0x40
 800b0dc:	4082      	lsls	r2, r0
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	3401      	adds	r4, #1
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e8:	4824      	ldr	r0, [pc, #144]	@ (800b17c <_svfiprintf_r+0x1e8>)
 800b0ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0ee:	2206      	movs	r2, #6
 800b0f0:	f7f5 f86e 	bl	80001d0 <memchr>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d036      	beq.n	800b166 <_svfiprintf_r+0x1d2>
 800b0f8:	4b21      	ldr	r3, [pc, #132]	@ (800b180 <_svfiprintf_r+0x1ec>)
 800b0fa:	bb1b      	cbnz	r3, 800b144 <_svfiprintf_r+0x1b0>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	3307      	adds	r3, #7
 800b100:	f023 0307 	bic.w	r3, r3, #7
 800b104:	3308      	adds	r3, #8
 800b106:	9303      	str	r3, [sp, #12]
 800b108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10a:	4433      	add	r3, r6
 800b10c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b10e:	e76a      	b.n	800afe6 <_svfiprintf_r+0x52>
 800b110:	fb0c 3202 	mla	r2, ip, r2, r3
 800b114:	460c      	mov	r4, r1
 800b116:	2001      	movs	r0, #1
 800b118:	e7a8      	b.n	800b06c <_svfiprintf_r+0xd8>
 800b11a:	2300      	movs	r3, #0
 800b11c:	3401      	adds	r4, #1
 800b11e:	9305      	str	r3, [sp, #20]
 800b120:	4619      	mov	r1, r3
 800b122:	f04f 0c0a 	mov.w	ip, #10
 800b126:	4620      	mov	r0, r4
 800b128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b12c:	3a30      	subs	r2, #48	@ 0x30
 800b12e:	2a09      	cmp	r2, #9
 800b130:	d903      	bls.n	800b13a <_svfiprintf_r+0x1a6>
 800b132:	2b00      	cmp	r3, #0
 800b134:	d0c6      	beq.n	800b0c4 <_svfiprintf_r+0x130>
 800b136:	9105      	str	r1, [sp, #20]
 800b138:	e7c4      	b.n	800b0c4 <_svfiprintf_r+0x130>
 800b13a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b13e:	4604      	mov	r4, r0
 800b140:	2301      	movs	r3, #1
 800b142:	e7f0      	b.n	800b126 <_svfiprintf_r+0x192>
 800b144:	ab03      	add	r3, sp, #12
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	462a      	mov	r2, r5
 800b14a:	4b0e      	ldr	r3, [pc, #56]	@ (800b184 <_svfiprintf_r+0x1f0>)
 800b14c:	a904      	add	r1, sp, #16
 800b14e:	4638      	mov	r0, r7
 800b150:	f7fc feb4 	bl	8007ebc <_printf_float>
 800b154:	1c42      	adds	r2, r0, #1
 800b156:	4606      	mov	r6, r0
 800b158:	d1d6      	bne.n	800b108 <_svfiprintf_r+0x174>
 800b15a:	89ab      	ldrh	r3, [r5, #12]
 800b15c:	065b      	lsls	r3, r3, #25
 800b15e:	f53f af2d 	bmi.w	800afbc <_svfiprintf_r+0x28>
 800b162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b164:	e72c      	b.n	800afc0 <_svfiprintf_r+0x2c>
 800b166:	ab03      	add	r3, sp, #12
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	462a      	mov	r2, r5
 800b16c:	4b05      	ldr	r3, [pc, #20]	@ (800b184 <_svfiprintf_r+0x1f0>)
 800b16e:	a904      	add	r1, sp, #16
 800b170:	4638      	mov	r0, r7
 800b172:	f7fd f93b 	bl	80083ec <_printf_i>
 800b176:	e7ed      	b.n	800b154 <_svfiprintf_r+0x1c0>
 800b178:	0800c189 	.word	0x0800c189
 800b17c:	0800c193 	.word	0x0800c193
 800b180:	08007ebd 	.word	0x08007ebd
 800b184:	0800aedf 	.word	0x0800aedf
 800b188:	0800c18f 	.word	0x0800c18f

0800b18c <__sflush_r>:
 800b18c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b194:	0716      	lsls	r6, r2, #28
 800b196:	4605      	mov	r5, r0
 800b198:	460c      	mov	r4, r1
 800b19a:	d454      	bmi.n	800b246 <__sflush_r+0xba>
 800b19c:	684b      	ldr	r3, [r1, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	dc02      	bgt.n	800b1a8 <__sflush_r+0x1c>
 800b1a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	dd48      	ble.n	800b23a <__sflush_r+0xae>
 800b1a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1aa:	2e00      	cmp	r6, #0
 800b1ac:	d045      	beq.n	800b23a <__sflush_r+0xae>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b1b4:	682f      	ldr	r7, [r5, #0]
 800b1b6:	6a21      	ldr	r1, [r4, #32]
 800b1b8:	602b      	str	r3, [r5, #0]
 800b1ba:	d030      	beq.n	800b21e <__sflush_r+0x92>
 800b1bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	0759      	lsls	r1, r3, #29
 800b1c2:	d505      	bpl.n	800b1d0 <__sflush_r+0x44>
 800b1c4:	6863      	ldr	r3, [r4, #4]
 800b1c6:	1ad2      	subs	r2, r2, r3
 800b1c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b1ca:	b10b      	cbz	r3, 800b1d0 <__sflush_r+0x44>
 800b1cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b1ce:	1ad2      	subs	r2, r2, r3
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1d4:	6a21      	ldr	r1, [r4, #32]
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	47b0      	blx	r6
 800b1da:	1c43      	adds	r3, r0, #1
 800b1dc:	89a3      	ldrh	r3, [r4, #12]
 800b1de:	d106      	bne.n	800b1ee <__sflush_r+0x62>
 800b1e0:	6829      	ldr	r1, [r5, #0]
 800b1e2:	291d      	cmp	r1, #29
 800b1e4:	d82b      	bhi.n	800b23e <__sflush_r+0xb2>
 800b1e6:	4a2a      	ldr	r2, [pc, #168]	@ (800b290 <__sflush_r+0x104>)
 800b1e8:	410a      	asrs	r2, r1
 800b1ea:	07d6      	lsls	r6, r2, #31
 800b1ec:	d427      	bmi.n	800b23e <__sflush_r+0xb2>
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	6062      	str	r2, [r4, #4]
 800b1f2:	04d9      	lsls	r1, r3, #19
 800b1f4:	6922      	ldr	r2, [r4, #16]
 800b1f6:	6022      	str	r2, [r4, #0]
 800b1f8:	d504      	bpl.n	800b204 <__sflush_r+0x78>
 800b1fa:	1c42      	adds	r2, r0, #1
 800b1fc:	d101      	bne.n	800b202 <__sflush_r+0x76>
 800b1fe:	682b      	ldr	r3, [r5, #0]
 800b200:	b903      	cbnz	r3, 800b204 <__sflush_r+0x78>
 800b202:	6560      	str	r0, [r4, #84]	@ 0x54
 800b204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b206:	602f      	str	r7, [r5, #0]
 800b208:	b1b9      	cbz	r1, 800b23a <__sflush_r+0xae>
 800b20a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b20e:	4299      	cmp	r1, r3
 800b210:	d002      	beq.n	800b218 <__sflush_r+0x8c>
 800b212:	4628      	mov	r0, r5
 800b214:	f7fe fcdc 	bl	8009bd0 <_free_r>
 800b218:	2300      	movs	r3, #0
 800b21a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b21c:	e00d      	b.n	800b23a <__sflush_r+0xae>
 800b21e:	2301      	movs	r3, #1
 800b220:	4628      	mov	r0, r5
 800b222:	47b0      	blx	r6
 800b224:	4602      	mov	r2, r0
 800b226:	1c50      	adds	r0, r2, #1
 800b228:	d1c9      	bne.n	800b1be <__sflush_r+0x32>
 800b22a:	682b      	ldr	r3, [r5, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0c6      	beq.n	800b1be <__sflush_r+0x32>
 800b230:	2b1d      	cmp	r3, #29
 800b232:	d001      	beq.n	800b238 <__sflush_r+0xac>
 800b234:	2b16      	cmp	r3, #22
 800b236:	d11e      	bne.n	800b276 <__sflush_r+0xea>
 800b238:	602f      	str	r7, [r5, #0]
 800b23a:	2000      	movs	r0, #0
 800b23c:	e022      	b.n	800b284 <__sflush_r+0xf8>
 800b23e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b242:	b21b      	sxth	r3, r3
 800b244:	e01b      	b.n	800b27e <__sflush_r+0xf2>
 800b246:	690f      	ldr	r7, [r1, #16]
 800b248:	2f00      	cmp	r7, #0
 800b24a:	d0f6      	beq.n	800b23a <__sflush_r+0xae>
 800b24c:	0793      	lsls	r3, r2, #30
 800b24e:	680e      	ldr	r6, [r1, #0]
 800b250:	bf08      	it	eq
 800b252:	694b      	ldreq	r3, [r1, #20]
 800b254:	600f      	str	r7, [r1, #0]
 800b256:	bf18      	it	ne
 800b258:	2300      	movne	r3, #0
 800b25a:	eba6 0807 	sub.w	r8, r6, r7
 800b25e:	608b      	str	r3, [r1, #8]
 800b260:	f1b8 0f00 	cmp.w	r8, #0
 800b264:	dde9      	ble.n	800b23a <__sflush_r+0xae>
 800b266:	6a21      	ldr	r1, [r4, #32]
 800b268:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b26a:	4643      	mov	r3, r8
 800b26c:	463a      	mov	r2, r7
 800b26e:	4628      	mov	r0, r5
 800b270:	47b0      	blx	r6
 800b272:	2800      	cmp	r0, #0
 800b274:	dc08      	bgt.n	800b288 <__sflush_r+0xfc>
 800b276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b27e:	81a3      	strh	r3, [r4, #12]
 800b280:	f04f 30ff 	mov.w	r0, #4294967295
 800b284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b288:	4407      	add	r7, r0
 800b28a:	eba8 0800 	sub.w	r8, r8, r0
 800b28e:	e7e7      	b.n	800b260 <__sflush_r+0xd4>
 800b290:	dfbffffe 	.word	0xdfbffffe

0800b294 <_fflush_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	690b      	ldr	r3, [r1, #16]
 800b298:	4605      	mov	r5, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	b913      	cbnz	r3, 800b2a4 <_fflush_r+0x10>
 800b29e:	2500      	movs	r5, #0
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	bd38      	pop	{r3, r4, r5, pc}
 800b2a4:	b118      	cbz	r0, 800b2ae <_fflush_r+0x1a>
 800b2a6:	6a03      	ldr	r3, [r0, #32]
 800b2a8:	b90b      	cbnz	r3, 800b2ae <_fflush_r+0x1a>
 800b2aa:	f7fd fc5f 	bl	8008b6c <__sinit>
 800b2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d0f3      	beq.n	800b29e <_fflush_r+0xa>
 800b2b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b2b8:	07d0      	lsls	r0, r2, #31
 800b2ba:	d404      	bmi.n	800b2c6 <_fflush_r+0x32>
 800b2bc:	0599      	lsls	r1, r3, #22
 800b2be:	d402      	bmi.n	800b2c6 <_fflush_r+0x32>
 800b2c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2c2:	f7fd fdfa 	bl	8008eba <__retarget_lock_acquire_recursive>
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	f7ff ff5f 	bl	800b18c <__sflush_r>
 800b2ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2d0:	07da      	lsls	r2, r3, #31
 800b2d2:	4605      	mov	r5, r0
 800b2d4:	d4e4      	bmi.n	800b2a0 <_fflush_r+0xc>
 800b2d6:	89a3      	ldrh	r3, [r4, #12]
 800b2d8:	059b      	lsls	r3, r3, #22
 800b2da:	d4e1      	bmi.n	800b2a0 <_fflush_r+0xc>
 800b2dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2de:	f7fd fded 	bl	8008ebc <__retarget_lock_release_recursive>
 800b2e2:	e7dd      	b.n	800b2a0 <_fflush_r+0xc>

0800b2e4 <fiprintf>:
 800b2e4:	b40e      	push	{r1, r2, r3}
 800b2e6:	b503      	push	{r0, r1, lr}
 800b2e8:	4601      	mov	r1, r0
 800b2ea:	ab03      	add	r3, sp, #12
 800b2ec:	4805      	ldr	r0, [pc, #20]	@ (800b304 <fiprintf+0x20>)
 800b2ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f2:	6800      	ldr	r0, [r0, #0]
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	f000 f8a3 	bl	800b440 <_vfiprintf_r>
 800b2fa:	b002      	add	sp, #8
 800b2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b300:	b003      	add	sp, #12
 800b302:	4770      	bx	lr
 800b304:	20000184 	.word	0x20000184

0800b308 <memmove>:
 800b308:	4288      	cmp	r0, r1
 800b30a:	b510      	push	{r4, lr}
 800b30c:	eb01 0402 	add.w	r4, r1, r2
 800b310:	d902      	bls.n	800b318 <memmove+0x10>
 800b312:	4284      	cmp	r4, r0
 800b314:	4623      	mov	r3, r4
 800b316:	d807      	bhi.n	800b328 <memmove+0x20>
 800b318:	1e43      	subs	r3, r0, #1
 800b31a:	42a1      	cmp	r1, r4
 800b31c:	d008      	beq.n	800b330 <memmove+0x28>
 800b31e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b322:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b326:	e7f8      	b.n	800b31a <memmove+0x12>
 800b328:	4402      	add	r2, r0
 800b32a:	4601      	mov	r1, r0
 800b32c:	428a      	cmp	r2, r1
 800b32e:	d100      	bne.n	800b332 <memmove+0x2a>
 800b330:	bd10      	pop	{r4, pc}
 800b332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b33a:	e7f7      	b.n	800b32c <memmove+0x24>

0800b33c <_sbrk_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4d06      	ldr	r5, [pc, #24]	@ (800b358 <_sbrk_r+0x1c>)
 800b340:	2300      	movs	r3, #0
 800b342:	4604      	mov	r4, r0
 800b344:	4608      	mov	r0, r1
 800b346:	602b      	str	r3, [r5, #0]
 800b348:	f7f8 f98e 	bl	8003668 <_sbrk>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d102      	bne.n	800b356 <_sbrk_r+0x1a>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	b103      	cbz	r3, 800b356 <_sbrk_r+0x1a>
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	bd38      	pop	{r3, r4, r5, pc}
 800b358:	2000072c 	.word	0x2000072c

0800b35c <abort>:
 800b35c:	b508      	push	{r3, lr}
 800b35e:	2006      	movs	r0, #6
 800b360:	f000 fa42 	bl	800b7e8 <raise>
 800b364:	2001      	movs	r0, #1
 800b366:	f7f8 f907 	bl	8003578 <_exit>

0800b36a <_calloc_r>:
 800b36a:	b570      	push	{r4, r5, r6, lr}
 800b36c:	fba1 5402 	umull	r5, r4, r1, r2
 800b370:	b93c      	cbnz	r4, 800b382 <_calloc_r+0x18>
 800b372:	4629      	mov	r1, r5
 800b374:	f7fe ffda 	bl	800a32c <_malloc_r>
 800b378:	4606      	mov	r6, r0
 800b37a:	b928      	cbnz	r0, 800b388 <_calloc_r+0x1e>
 800b37c:	2600      	movs	r6, #0
 800b37e:	4630      	mov	r0, r6
 800b380:	bd70      	pop	{r4, r5, r6, pc}
 800b382:	220c      	movs	r2, #12
 800b384:	6002      	str	r2, [r0, #0]
 800b386:	e7f9      	b.n	800b37c <_calloc_r+0x12>
 800b388:	462a      	mov	r2, r5
 800b38a:	4621      	mov	r1, r4
 800b38c:	f7fd fc87 	bl	8008c9e <memset>
 800b390:	e7f5      	b.n	800b37e <_calloc_r+0x14>

0800b392 <_realloc_r>:
 800b392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b396:	4680      	mov	r8, r0
 800b398:	4615      	mov	r5, r2
 800b39a:	460c      	mov	r4, r1
 800b39c:	b921      	cbnz	r1, 800b3a8 <_realloc_r+0x16>
 800b39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	f7fe bfc2 	b.w	800a32c <_malloc_r>
 800b3a8:	b92a      	cbnz	r2, 800b3b6 <_realloc_r+0x24>
 800b3aa:	f7fe fc11 	bl	8009bd0 <_free_r>
 800b3ae:	2400      	movs	r4, #0
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b6:	f000 fa33 	bl	800b820 <_malloc_usable_size_r>
 800b3ba:	4285      	cmp	r5, r0
 800b3bc:	4606      	mov	r6, r0
 800b3be:	d802      	bhi.n	800b3c6 <_realloc_r+0x34>
 800b3c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b3c4:	d8f4      	bhi.n	800b3b0 <_realloc_r+0x1e>
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	4640      	mov	r0, r8
 800b3ca:	f7fe ffaf 	bl	800a32c <_malloc_r>
 800b3ce:	4607      	mov	r7, r0
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d0ec      	beq.n	800b3ae <_realloc_r+0x1c>
 800b3d4:	42b5      	cmp	r5, r6
 800b3d6:	462a      	mov	r2, r5
 800b3d8:	4621      	mov	r1, r4
 800b3da:	bf28      	it	cs
 800b3dc:	4632      	movcs	r2, r6
 800b3de:	f7fd fd6e 	bl	8008ebe <memcpy>
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	f7fe fbf3 	bl	8009bd0 <_free_r>
 800b3ea:	463c      	mov	r4, r7
 800b3ec:	e7e0      	b.n	800b3b0 <_realloc_r+0x1e>

0800b3ee <__sfputc_r>:
 800b3ee:	6893      	ldr	r3, [r2, #8]
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	b410      	push	{r4}
 800b3f6:	6093      	str	r3, [r2, #8]
 800b3f8:	da08      	bge.n	800b40c <__sfputc_r+0x1e>
 800b3fa:	6994      	ldr	r4, [r2, #24]
 800b3fc:	42a3      	cmp	r3, r4
 800b3fe:	db01      	blt.n	800b404 <__sfputc_r+0x16>
 800b400:	290a      	cmp	r1, #10
 800b402:	d103      	bne.n	800b40c <__sfputc_r+0x1e>
 800b404:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b408:	f000 b932 	b.w	800b670 <__swbuf_r>
 800b40c:	6813      	ldr	r3, [r2, #0]
 800b40e:	1c58      	adds	r0, r3, #1
 800b410:	6010      	str	r0, [r2, #0]
 800b412:	7019      	strb	r1, [r3, #0]
 800b414:	4608      	mov	r0, r1
 800b416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <__sfputs_r>:
 800b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41e:	4606      	mov	r6, r0
 800b420:	460f      	mov	r7, r1
 800b422:	4614      	mov	r4, r2
 800b424:	18d5      	adds	r5, r2, r3
 800b426:	42ac      	cmp	r4, r5
 800b428:	d101      	bne.n	800b42e <__sfputs_r+0x12>
 800b42a:	2000      	movs	r0, #0
 800b42c:	e007      	b.n	800b43e <__sfputs_r+0x22>
 800b42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b432:	463a      	mov	r2, r7
 800b434:	4630      	mov	r0, r6
 800b436:	f7ff ffda 	bl	800b3ee <__sfputc_r>
 800b43a:	1c43      	adds	r3, r0, #1
 800b43c:	d1f3      	bne.n	800b426 <__sfputs_r+0xa>
 800b43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b440 <_vfiprintf_r>:
 800b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	460d      	mov	r5, r1
 800b446:	b09d      	sub	sp, #116	@ 0x74
 800b448:	4614      	mov	r4, r2
 800b44a:	4698      	mov	r8, r3
 800b44c:	4606      	mov	r6, r0
 800b44e:	b118      	cbz	r0, 800b458 <_vfiprintf_r+0x18>
 800b450:	6a03      	ldr	r3, [r0, #32]
 800b452:	b90b      	cbnz	r3, 800b458 <_vfiprintf_r+0x18>
 800b454:	f7fd fb8a 	bl	8008b6c <__sinit>
 800b458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b45a:	07d9      	lsls	r1, r3, #31
 800b45c:	d405      	bmi.n	800b46a <_vfiprintf_r+0x2a>
 800b45e:	89ab      	ldrh	r3, [r5, #12]
 800b460:	059a      	lsls	r2, r3, #22
 800b462:	d402      	bmi.n	800b46a <_vfiprintf_r+0x2a>
 800b464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b466:	f7fd fd28 	bl	8008eba <__retarget_lock_acquire_recursive>
 800b46a:	89ab      	ldrh	r3, [r5, #12]
 800b46c:	071b      	lsls	r3, r3, #28
 800b46e:	d501      	bpl.n	800b474 <_vfiprintf_r+0x34>
 800b470:	692b      	ldr	r3, [r5, #16]
 800b472:	b99b      	cbnz	r3, 800b49c <_vfiprintf_r+0x5c>
 800b474:	4629      	mov	r1, r5
 800b476:	4630      	mov	r0, r6
 800b478:	f000 f938 	bl	800b6ec <__swsetup_r>
 800b47c:	b170      	cbz	r0, 800b49c <_vfiprintf_r+0x5c>
 800b47e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b480:	07dc      	lsls	r4, r3, #31
 800b482:	d504      	bpl.n	800b48e <_vfiprintf_r+0x4e>
 800b484:	f04f 30ff 	mov.w	r0, #4294967295
 800b488:	b01d      	add	sp, #116	@ 0x74
 800b48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48e:	89ab      	ldrh	r3, [r5, #12]
 800b490:	0598      	lsls	r0, r3, #22
 800b492:	d4f7      	bmi.n	800b484 <_vfiprintf_r+0x44>
 800b494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b496:	f7fd fd11 	bl	8008ebc <__retarget_lock_release_recursive>
 800b49a:	e7f3      	b.n	800b484 <_vfiprintf_r+0x44>
 800b49c:	2300      	movs	r3, #0
 800b49e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4a0:	2320      	movs	r3, #32
 800b4a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4aa:	2330      	movs	r3, #48	@ 0x30
 800b4ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b65c <_vfiprintf_r+0x21c>
 800b4b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4b4:	f04f 0901 	mov.w	r9, #1
 800b4b8:	4623      	mov	r3, r4
 800b4ba:	469a      	mov	sl, r3
 800b4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4c0:	b10a      	cbz	r2, 800b4c6 <_vfiprintf_r+0x86>
 800b4c2:	2a25      	cmp	r2, #37	@ 0x25
 800b4c4:	d1f9      	bne.n	800b4ba <_vfiprintf_r+0x7a>
 800b4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b4ca:	d00b      	beq.n	800b4e4 <_vfiprintf_r+0xa4>
 800b4cc:	465b      	mov	r3, fp
 800b4ce:	4622      	mov	r2, r4
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f7ff ffa2 	bl	800b41c <__sfputs_r>
 800b4d8:	3001      	adds	r0, #1
 800b4da:	f000 80a7 	beq.w	800b62c <_vfiprintf_r+0x1ec>
 800b4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4e0:	445a      	add	r2, fp
 800b4e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 809f 	beq.w	800b62c <_vfiprintf_r+0x1ec>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4f8:	f10a 0a01 	add.w	sl, sl, #1
 800b4fc:	9304      	str	r3, [sp, #16]
 800b4fe:	9307      	str	r3, [sp, #28]
 800b500:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b504:	931a      	str	r3, [sp, #104]	@ 0x68
 800b506:	4654      	mov	r4, sl
 800b508:	2205      	movs	r2, #5
 800b50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b50e:	4853      	ldr	r0, [pc, #332]	@ (800b65c <_vfiprintf_r+0x21c>)
 800b510:	f7f4 fe5e 	bl	80001d0 <memchr>
 800b514:	9a04      	ldr	r2, [sp, #16]
 800b516:	b9d8      	cbnz	r0, 800b550 <_vfiprintf_r+0x110>
 800b518:	06d1      	lsls	r1, r2, #27
 800b51a:	bf44      	itt	mi
 800b51c:	2320      	movmi	r3, #32
 800b51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b522:	0713      	lsls	r3, r2, #28
 800b524:	bf44      	itt	mi
 800b526:	232b      	movmi	r3, #43	@ 0x2b
 800b528:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b52c:	f89a 3000 	ldrb.w	r3, [sl]
 800b530:	2b2a      	cmp	r3, #42	@ 0x2a
 800b532:	d015      	beq.n	800b560 <_vfiprintf_r+0x120>
 800b534:	9a07      	ldr	r2, [sp, #28]
 800b536:	4654      	mov	r4, sl
 800b538:	2000      	movs	r0, #0
 800b53a:	f04f 0c0a 	mov.w	ip, #10
 800b53e:	4621      	mov	r1, r4
 800b540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b544:	3b30      	subs	r3, #48	@ 0x30
 800b546:	2b09      	cmp	r3, #9
 800b548:	d94b      	bls.n	800b5e2 <_vfiprintf_r+0x1a2>
 800b54a:	b1b0      	cbz	r0, 800b57a <_vfiprintf_r+0x13a>
 800b54c:	9207      	str	r2, [sp, #28]
 800b54e:	e014      	b.n	800b57a <_vfiprintf_r+0x13a>
 800b550:	eba0 0308 	sub.w	r3, r0, r8
 800b554:	fa09 f303 	lsl.w	r3, r9, r3
 800b558:	4313      	orrs	r3, r2
 800b55a:	9304      	str	r3, [sp, #16]
 800b55c:	46a2      	mov	sl, r4
 800b55e:	e7d2      	b.n	800b506 <_vfiprintf_r+0xc6>
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	1d19      	adds	r1, r3, #4
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	9103      	str	r1, [sp, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	bfbb      	ittet	lt
 800b56c:	425b      	neglt	r3, r3
 800b56e:	f042 0202 	orrlt.w	r2, r2, #2
 800b572:	9307      	strge	r3, [sp, #28]
 800b574:	9307      	strlt	r3, [sp, #28]
 800b576:	bfb8      	it	lt
 800b578:	9204      	strlt	r2, [sp, #16]
 800b57a:	7823      	ldrb	r3, [r4, #0]
 800b57c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b57e:	d10a      	bne.n	800b596 <_vfiprintf_r+0x156>
 800b580:	7863      	ldrb	r3, [r4, #1]
 800b582:	2b2a      	cmp	r3, #42	@ 0x2a
 800b584:	d132      	bne.n	800b5ec <_vfiprintf_r+0x1ac>
 800b586:	9b03      	ldr	r3, [sp, #12]
 800b588:	1d1a      	adds	r2, r3, #4
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	9203      	str	r2, [sp, #12]
 800b58e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b592:	3402      	adds	r4, #2
 800b594:	9305      	str	r3, [sp, #20]
 800b596:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b66c <_vfiprintf_r+0x22c>
 800b59a:	7821      	ldrb	r1, [r4, #0]
 800b59c:	2203      	movs	r2, #3
 800b59e:	4650      	mov	r0, sl
 800b5a0:	f7f4 fe16 	bl	80001d0 <memchr>
 800b5a4:	b138      	cbz	r0, 800b5b6 <_vfiprintf_r+0x176>
 800b5a6:	9b04      	ldr	r3, [sp, #16]
 800b5a8:	eba0 000a 	sub.w	r0, r0, sl
 800b5ac:	2240      	movs	r2, #64	@ 0x40
 800b5ae:	4082      	lsls	r2, r0
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	3401      	adds	r4, #1
 800b5b4:	9304      	str	r3, [sp, #16]
 800b5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ba:	4829      	ldr	r0, [pc, #164]	@ (800b660 <_vfiprintf_r+0x220>)
 800b5bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5c0:	2206      	movs	r2, #6
 800b5c2:	f7f4 fe05 	bl	80001d0 <memchr>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d03f      	beq.n	800b64a <_vfiprintf_r+0x20a>
 800b5ca:	4b26      	ldr	r3, [pc, #152]	@ (800b664 <_vfiprintf_r+0x224>)
 800b5cc:	bb1b      	cbnz	r3, 800b616 <_vfiprintf_r+0x1d6>
 800b5ce:	9b03      	ldr	r3, [sp, #12]
 800b5d0:	3307      	adds	r3, #7
 800b5d2:	f023 0307 	bic.w	r3, r3, #7
 800b5d6:	3308      	adds	r3, #8
 800b5d8:	9303      	str	r3, [sp, #12]
 800b5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5dc:	443b      	add	r3, r7
 800b5de:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5e0:	e76a      	b.n	800b4b8 <_vfiprintf_r+0x78>
 800b5e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	e7a8      	b.n	800b53e <_vfiprintf_r+0xfe>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	3401      	adds	r4, #1
 800b5f0:	9305      	str	r3, [sp, #20]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	f04f 0c0a 	mov.w	ip, #10
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5fe:	3a30      	subs	r2, #48	@ 0x30
 800b600:	2a09      	cmp	r2, #9
 800b602:	d903      	bls.n	800b60c <_vfiprintf_r+0x1cc>
 800b604:	2b00      	cmp	r3, #0
 800b606:	d0c6      	beq.n	800b596 <_vfiprintf_r+0x156>
 800b608:	9105      	str	r1, [sp, #20]
 800b60a:	e7c4      	b.n	800b596 <_vfiprintf_r+0x156>
 800b60c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b610:	4604      	mov	r4, r0
 800b612:	2301      	movs	r3, #1
 800b614:	e7f0      	b.n	800b5f8 <_vfiprintf_r+0x1b8>
 800b616:	ab03      	add	r3, sp, #12
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	462a      	mov	r2, r5
 800b61c:	4b12      	ldr	r3, [pc, #72]	@ (800b668 <_vfiprintf_r+0x228>)
 800b61e:	a904      	add	r1, sp, #16
 800b620:	4630      	mov	r0, r6
 800b622:	f7fc fc4b 	bl	8007ebc <_printf_float>
 800b626:	4607      	mov	r7, r0
 800b628:	1c78      	adds	r0, r7, #1
 800b62a:	d1d6      	bne.n	800b5da <_vfiprintf_r+0x19a>
 800b62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b62e:	07d9      	lsls	r1, r3, #31
 800b630:	d405      	bmi.n	800b63e <_vfiprintf_r+0x1fe>
 800b632:	89ab      	ldrh	r3, [r5, #12]
 800b634:	059a      	lsls	r2, r3, #22
 800b636:	d402      	bmi.n	800b63e <_vfiprintf_r+0x1fe>
 800b638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b63a:	f7fd fc3f 	bl	8008ebc <__retarget_lock_release_recursive>
 800b63e:	89ab      	ldrh	r3, [r5, #12]
 800b640:	065b      	lsls	r3, r3, #25
 800b642:	f53f af1f 	bmi.w	800b484 <_vfiprintf_r+0x44>
 800b646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b648:	e71e      	b.n	800b488 <_vfiprintf_r+0x48>
 800b64a:	ab03      	add	r3, sp, #12
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	462a      	mov	r2, r5
 800b650:	4b05      	ldr	r3, [pc, #20]	@ (800b668 <_vfiprintf_r+0x228>)
 800b652:	a904      	add	r1, sp, #16
 800b654:	4630      	mov	r0, r6
 800b656:	f7fc fec9 	bl	80083ec <_printf_i>
 800b65a:	e7e4      	b.n	800b626 <_vfiprintf_r+0x1e6>
 800b65c:	0800c189 	.word	0x0800c189
 800b660:	0800c193 	.word	0x0800c193
 800b664:	08007ebd 	.word	0x08007ebd
 800b668:	0800b41d 	.word	0x0800b41d
 800b66c:	0800c18f 	.word	0x0800c18f

0800b670 <__swbuf_r>:
 800b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b672:	460e      	mov	r6, r1
 800b674:	4614      	mov	r4, r2
 800b676:	4605      	mov	r5, r0
 800b678:	b118      	cbz	r0, 800b682 <__swbuf_r+0x12>
 800b67a:	6a03      	ldr	r3, [r0, #32]
 800b67c:	b90b      	cbnz	r3, 800b682 <__swbuf_r+0x12>
 800b67e:	f7fd fa75 	bl	8008b6c <__sinit>
 800b682:	69a3      	ldr	r3, [r4, #24]
 800b684:	60a3      	str	r3, [r4, #8]
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	071a      	lsls	r2, r3, #28
 800b68a:	d501      	bpl.n	800b690 <__swbuf_r+0x20>
 800b68c:	6923      	ldr	r3, [r4, #16]
 800b68e:	b943      	cbnz	r3, 800b6a2 <__swbuf_r+0x32>
 800b690:	4621      	mov	r1, r4
 800b692:	4628      	mov	r0, r5
 800b694:	f000 f82a 	bl	800b6ec <__swsetup_r>
 800b698:	b118      	cbz	r0, 800b6a2 <__swbuf_r+0x32>
 800b69a:	f04f 37ff 	mov.w	r7, #4294967295
 800b69e:	4638      	mov	r0, r7
 800b6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	6922      	ldr	r2, [r4, #16]
 800b6a6:	1a98      	subs	r0, r3, r2
 800b6a8:	6963      	ldr	r3, [r4, #20]
 800b6aa:	b2f6      	uxtb	r6, r6
 800b6ac:	4283      	cmp	r3, r0
 800b6ae:	4637      	mov	r7, r6
 800b6b0:	dc05      	bgt.n	800b6be <__swbuf_r+0x4e>
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	f7ff fded 	bl	800b294 <_fflush_r>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d1ed      	bne.n	800b69a <__swbuf_r+0x2a>
 800b6be:	68a3      	ldr	r3, [r4, #8]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	60a3      	str	r3, [r4, #8]
 800b6c4:	6823      	ldr	r3, [r4, #0]
 800b6c6:	1c5a      	adds	r2, r3, #1
 800b6c8:	6022      	str	r2, [r4, #0]
 800b6ca:	701e      	strb	r6, [r3, #0]
 800b6cc:	6962      	ldr	r2, [r4, #20]
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d004      	beq.n	800b6de <__swbuf_r+0x6e>
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	07db      	lsls	r3, r3, #31
 800b6d8:	d5e1      	bpl.n	800b69e <__swbuf_r+0x2e>
 800b6da:	2e0a      	cmp	r6, #10
 800b6dc:	d1df      	bne.n	800b69e <__swbuf_r+0x2e>
 800b6de:	4621      	mov	r1, r4
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f7ff fdd7 	bl	800b294 <_fflush_r>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d0d9      	beq.n	800b69e <__swbuf_r+0x2e>
 800b6ea:	e7d6      	b.n	800b69a <__swbuf_r+0x2a>

0800b6ec <__swsetup_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	4b29      	ldr	r3, [pc, #164]	@ (800b794 <__swsetup_r+0xa8>)
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	6818      	ldr	r0, [r3, #0]
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	b118      	cbz	r0, 800b700 <__swsetup_r+0x14>
 800b6f8:	6a03      	ldr	r3, [r0, #32]
 800b6fa:	b90b      	cbnz	r3, 800b700 <__swsetup_r+0x14>
 800b6fc:	f7fd fa36 	bl	8008b6c <__sinit>
 800b700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b704:	0719      	lsls	r1, r3, #28
 800b706:	d422      	bmi.n	800b74e <__swsetup_r+0x62>
 800b708:	06da      	lsls	r2, r3, #27
 800b70a:	d407      	bmi.n	800b71c <__swsetup_r+0x30>
 800b70c:	2209      	movs	r2, #9
 800b70e:	602a      	str	r2, [r5, #0]
 800b710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b714:	81a3      	strh	r3, [r4, #12]
 800b716:	f04f 30ff 	mov.w	r0, #4294967295
 800b71a:	e033      	b.n	800b784 <__swsetup_r+0x98>
 800b71c:	0758      	lsls	r0, r3, #29
 800b71e:	d512      	bpl.n	800b746 <__swsetup_r+0x5a>
 800b720:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b722:	b141      	cbz	r1, 800b736 <__swsetup_r+0x4a>
 800b724:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b728:	4299      	cmp	r1, r3
 800b72a:	d002      	beq.n	800b732 <__swsetup_r+0x46>
 800b72c:	4628      	mov	r0, r5
 800b72e:	f7fe fa4f 	bl	8009bd0 <_free_r>
 800b732:	2300      	movs	r3, #0
 800b734:	6363      	str	r3, [r4, #52]	@ 0x34
 800b736:	89a3      	ldrh	r3, [r4, #12]
 800b738:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b73c:	81a3      	strh	r3, [r4, #12]
 800b73e:	2300      	movs	r3, #0
 800b740:	6063      	str	r3, [r4, #4]
 800b742:	6923      	ldr	r3, [r4, #16]
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	f043 0308 	orr.w	r3, r3, #8
 800b74c:	81a3      	strh	r3, [r4, #12]
 800b74e:	6923      	ldr	r3, [r4, #16]
 800b750:	b94b      	cbnz	r3, 800b766 <__swsetup_r+0x7a>
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b75c:	d003      	beq.n	800b766 <__swsetup_r+0x7a>
 800b75e:	4621      	mov	r1, r4
 800b760:	4628      	mov	r0, r5
 800b762:	f000 f88b 	bl	800b87c <__smakebuf_r>
 800b766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b76a:	f013 0201 	ands.w	r2, r3, #1
 800b76e:	d00a      	beq.n	800b786 <__swsetup_r+0x9a>
 800b770:	2200      	movs	r2, #0
 800b772:	60a2      	str	r2, [r4, #8]
 800b774:	6962      	ldr	r2, [r4, #20]
 800b776:	4252      	negs	r2, r2
 800b778:	61a2      	str	r2, [r4, #24]
 800b77a:	6922      	ldr	r2, [r4, #16]
 800b77c:	b942      	cbnz	r2, 800b790 <__swsetup_r+0xa4>
 800b77e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b782:	d1c5      	bne.n	800b710 <__swsetup_r+0x24>
 800b784:	bd38      	pop	{r3, r4, r5, pc}
 800b786:	0799      	lsls	r1, r3, #30
 800b788:	bf58      	it	pl
 800b78a:	6962      	ldrpl	r2, [r4, #20]
 800b78c:	60a2      	str	r2, [r4, #8]
 800b78e:	e7f4      	b.n	800b77a <__swsetup_r+0x8e>
 800b790:	2000      	movs	r0, #0
 800b792:	e7f7      	b.n	800b784 <__swsetup_r+0x98>
 800b794:	20000184 	.word	0x20000184

0800b798 <_raise_r>:
 800b798:	291f      	cmp	r1, #31
 800b79a:	b538      	push	{r3, r4, r5, lr}
 800b79c:	4605      	mov	r5, r0
 800b79e:	460c      	mov	r4, r1
 800b7a0:	d904      	bls.n	800b7ac <_raise_r+0x14>
 800b7a2:	2316      	movs	r3, #22
 800b7a4:	6003      	str	r3, [r0, #0]
 800b7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
 800b7ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7ae:	b112      	cbz	r2, 800b7b6 <_raise_r+0x1e>
 800b7b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7b4:	b94b      	cbnz	r3, 800b7ca <_raise_r+0x32>
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	f000 f830 	bl	800b81c <_getpid_r>
 800b7bc:	4622      	mov	r2, r4
 800b7be:	4601      	mov	r1, r0
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7c6:	f000 b817 	b.w	800b7f8 <_kill_r>
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d00a      	beq.n	800b7e4 <_raise_r+0x4c>
 800b7ce:	1c59      	adds	r1, r3, #1
 800b7d0:	d103      	bne.n	800b7da <_raise_r+0x42>
 800b7d2:	2316      	movs	r3, #22
 800b7d4:	6003      	str	r3, [r0, #0]
 800b7d6:	2001      	movs	r0, #1
 800b7d8:	e7e7      	b.n	800b7aa <_raise_r+0x12>
 800b7da:	2100      	movs	r1, #0
 800b7dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	4798      	blx	r3
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	e7e0      	b.n	800b7aa <_raise_r+0x12>

0800b7e8 <raise>:
 800b7e8:	4b02      	ldr	r3, [pc, #8]	@ (800b7f4 <raise+0xc>)
 800b7ea:	4601      	mov	r1, r0
 800b7ec:	6818      	ldr	r0, [r3, #0]
 800b7ee:	f7ff bfd3 	b.w	800b798 <_raise_r>
 800b7f2:	bf00      	nop
 800b7f4:	20000184 	.word	0x20000184

0800b7f8 <_kill_r>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4d07      	ldr	r5, [pc, #28]	@ (800b818 <_kill_r+0x20>)
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	4604      	mov	r4, r0
 800b800:	4608      	mov	r0, r1
 800b802:	4611      	mov	r1, r2
 800b804:	602b      	str	r3, [r5, #0]
 800b806:	f7f7 fea7 	bl	8003558 <_kill>
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	d102      	bne.n	800b814 <_kill_r+0x1c>
 800b80e:	682b      	ldr	r3, [r5, #0]
 800b810:	b103      	cbz	r3, 800b814 <_kill_r+0x1c>
 800b812:	6023      	str	r3, [r4, #0]
 800b814:	bd38      	pop	{r3, r4, r5, pc}
 800b816:	bf00      	nop
 800b818:	2000072c 	.word	0x2000072c

0800b81c <_getpid_r>:
 800b81c:	f7f7 be94 	b.w	8003548 <_getpid>

0800b820 <_malloc_usable_size_r>:
 800b820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b824:	1f18      	subs	r0, r3, #4
 800b826:	2b00      	cmp	r3, #0
 800b828:	bfbc      	itt	lt
 800b82a:	580b      	ldrlt	r3, [r1, r0]
 800b82c:	18c0      	addlt	r0, r0, r3
 800b82e:	4770      	bx	lr

0800b830 <__swhatbuf_r>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	460c      	mov	r4, r1
 800b834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b838:	2900      	cmp	r1, #0
 800b83a:	b096      	sub	sp, #88	@ 0x58
 800b83c:	4615      	mov	r5, r2
 800b83e:	461e      	mov	r6, r3
 800b840:	da0d      	bge.n	800b85e <__swhatbuf_r+0x2e>
 800b842:	89a3      	ldrh	r3, [r4, #12]
 800b844:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b848:	f04f 0100 	mov.w	r1, #0
 800b84c:	bf14      	ite	ne
 800b84e:	2340      	movne	r3, #64	@ 0x40
 800b850:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b854:	2000      	movs	r0, #0
 800b856:	6031      	str	r1, [r6, #0]
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	b016      	add	sp, #88	@ 0x58
 800b85c:	bd70      	pop	{r4, r5, r6, pc}
 800b85e:	466a      	mov	r2, sp
 800b860:	f000 f848 	bl	800b8f4 <_fstat_r>
 800b864:	2800      	cmp	r0, #0
 800b866:	dbec      	blt.n	800b842 <__swhatbuf_r+0x12>
 800b868:	9901      	ldr	r1, [sp, #4]
 800b86a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b86e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b872:	4259      	negs	r1, r3
 800b874:	4159      	adcs	r1, r3
 800b876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b87a:	e7eb      	b.n	800b854 <__swhatbuf_r+0x24>

0800b87c <__smakebuf_r>:
 800b87c:	898b      	ldrh	r3, [r1, #12]
 800b87e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b880:	079d      	lsls	r5, r3, #30
 800b882:	4606      	mov	r6, r0
 800b884:	460c      	mov	r4, r1
 800b886:	d507      	bpl.n	800b898 <__smakebuf_r+0x1c>
 800b888:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	6123      	str	r3, [r4, #16]
 800b890:	2301      	movs	r3, #1
 800b892:	6163      	str	r3, [r4, #20]
 800b894:	b003      	add	sp, #12
 800b896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b898:	ab01      	add	r3, sp, #4
 800b89a:	466a      	mov	r2, sp
 800b89c:	f7ff ffc8 	bl	800b830 <__swhatbuf_r>
 800b8a0:	9f00      	ldr	r7, [sp, #0]
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f7fe fd40 	bl	800a32c <_malloc_r>
 800b8ac:	b948      	cbnz	r0, 800b8c2 <__smakebuf_r+0x46>
 800b8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b2:	059a      	lsls	r2, r3, #22
 800b8b4:	d4ee      	bmi.n	800b894 <__smakebuf_r+0x18>
 800b8b6:	f023 0303 	bic.w	r3, r3, #3
 800b8ba:	f043 0302 	orr.w	r3, r3, #2
 800b8be:	81a3      	strh	r3, [r4, #12]
 800b8c0:	e7e2      	b.n	800b888 <__smakebuf_r+0xc>
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	6020      	str	r0, [r4, #0]
 800b8c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	9b01      	ldr	r3, [sp, #4]
 800b8ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8d2:	b15b      	cbz	r3, 800b8ec <__smakebuf_r+0x70>
 800b8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f000 f81d 	bl	800b918 <_isatty_r>
 800b8de:	b128      	cbz	r0, 800b8ec <__smakebuf_r+0x70>
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	f023 0303 	bic.w	r3, r3, #3
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	431d      	orrs	r5, r3
 800b8f0:	81a5      	strh	r5, [r4, #12]
 800b8f2:	e7cf      	b.n	800b894 <__smakebuf_r+0x18>

0800b8f4 <_fstat_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d07      	ldr	r5, [pc, #28]	@ (800b914 <_fstat_r+0x20>)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	4611      	mov	r1, r2
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	f7f7 fe89 	bl	8003618 <_fstat>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d102      	bne.n	800b910 <_fstat_r+0x1c>
 800b90a:	682b      	ldr	r3, [r5, #0]
 800b90c:	b103      	cbz	r3, 800b910 <_fstat_r+0x1c>
 800b90e:	6023      	str	r3, [r4, #0]
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	2000072c 	.word	0x2000072c

0800b918 <_isatty_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d06      	ldr	r5, [pc, #24]	@ (800b934 <_isatty_r+0x1c>)
 800b91c:	2300      	movs	r3, #0
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	602b      	str	r3, [r5, #0]
 800b924:	f7f7 fe88 	bl	8003638 <_isatty>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_isatty_r+0x1a>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_isatty_r+0x1a>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	2000072c 	.word	0x2000072c

0800b938 <fmod>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	ed2d 8b02 	vpush	{d8}
 800b93e:	ec57 6b10 	vmov	r6, r7, d0
 800b942:	ec55 4b11 	vmov	r4, r5, d1
 800b946:	f000 f85f 	bl	800ba08 <__ieee754_fmod>
 800b94a:	4622      	mov	r2, r4
 800b94c:	462b      	mov	r3, r5
 800b94e:	4630      	mov	r0, r6
 800b950:	4639      	mov	r1, r7
 800b952:	eeb0 8a40 	vmov.f32	s16, s0
 800b956:	eef0 8a60 	vmov.f32	s17, s1
 800b95a:	f7f5 f8e7 	bl	8000b2c <__aeabi_dcmpun>
 800b95e:	b990      	cbnz	r0, 800b986 <fmod+0x4e>
 800b960:	2200      	movs	r2, #0
 800b962:	2300      	movs	r3, #0
 800b964:	4620      	mov	r0, r4
 800b966:	4629      	mov	r1, r5
 800b968:	f7f5 f8ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800b96c:	b158      	cbz	r0, 800b986 <fmod+0x4e>
 800b96e:	f7fd fa79 	bl	8008e64 <__errno>
 800b972:	2321      	movs	r3, #33	@ 0x21
 800b974:	6003      	str	r3, [r0, #0]
 800b976:	2200      	movs	r2, #0
 800b978:	2300      	movs	r3, #0
 800b97a:	4610      	mov	r0, r2
 800b97c:	4619      	mov	r1, r3
 800b97e:	f7f4 ff65 	bl	800084c <__aeabi_ddiv>
 800b982:	ec41 0b18 	vmov	d8, r0, r1
 800b986:	eeb0 0a48 	vmov.f32	s0, s16
 800b98a:	eef0 0a68 	vmov.f32	s1, s17
 800b98e:	ecbd 8b02 	vpop	{d8}
 800b992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b994 <trunc>:
 800b994:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800b998:	ec5c bb10 	vmov	fp, ip, d0
 800b99c:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800b9a0:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800b9a4:	2913      	cmp	r1, #19
 800b9a6:	4664      	mov	r4, ip
 800b9a8:	dc14      	bgt.n	800b9d4 <trunc+0x40>
 800b9aa:	2900      	cmp	r1, #0
 800b9ac:	bfa4      	itt	ge
 800b9ae:	4b15      	ldrge	r3, [pc, #84]	@ (800ba04 <trunc+0x70>)
 800b9b0:	fa43 f101 	asrge.w	r1, r3, r1
 800b9b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800b9b8:	bfad      	iteet	ge
 800b9ba:	4021      	andge	r1, r4
 800b9bc:	2200      	movlt	r2, #0
 800b9be:	4603      	movlt	r3, r0
 800b9c0:	2200      	movge	r2, #0
 800b9c2:	bfa8      	it	ge
 800b9c4:	ea41 0300 	orrge.w	r3, r1, r0
 800b9c8:	4693      	mov	fp, r2
 800b9ca:	469c      	mov	ip, r3
 800b9cc:	ec4c bb10 	vmov	d0, fp, ip
 800b9d0:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800b9d4:	2933      	cmp	r1, #51	@ 0x33
 800b9d6:	dd0b      	ble.n	800b9f0 <trunc+0x5c>
 800b9d8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b9dc:	d1f6      	bne.n	800b9cc <trunc+0x38>
 800b9de:	465a      	mov	r2, fp
 800b9e0:	4663      	mov	r3, ip
 800b9e2:	4658      	mov	r0, fp
 800b9e4:	4621      	mov	r1, r4
 800b9e6:	f7f4 fc51 	bl	800028c <__adddf3>
 800b9ea:	4683      	mov	fp, r0
 800b9ec:	468c      	mov	ip, r1
 800b9ee:	e7ed      	b.n	800b9cc <trunc+0x38>
 800b9f0:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 800b9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f8:	40c3      	lsrs	r3, r0
 800b9fa:	ea2b 0603 	bic.w	r6, fp, r3
 800b9fe:	46b3      	mov	fp, r6
 800ba00:	46a4      	mov	ip, r4
 800ba02:	e7e3      	b.n	800b9cc <trunc+0x38>
 800ba04:	fff00000 	.word	0xfff00000

0800ba08 <__ieee754_fmod>:
 800ba08:	ec53 2b11 	vmov	r2, r3, d1
 800ba0c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800ba10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba14:	ea52 040c 	orrs.w	r4, r2, ip
 800ba18:	ec51 0b10 	vmov	r0, r1, d0
 800ba1c:	461e      	mov	r6, r3
 800ba1e:	4617      	mov	r7, r2
 800ba20:	4696      	mov	lr, r2
 800ba22:	d00c      	beq.n	800ba3e <__ieee754_fmod+0x36>
 800ba24:	4c77      	ldr	r4, [pc, #476]	@ (800bc04 <__ieee754_fmod+0x1fc>)
 800ba26:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800ba2a:	45a0      	cmp	r8, r4
 800ba2c:	4689      	mov	r9, r1
 800ba2e:	d806      	bhi.n	800ba3e <__ieee754_fmod+0x36>
 800ba30:	4254      	negs	r4, r2
 800ba32:	4d75      	ldr	r5, [pc, #468]	@ (800bc08 <__ieee754_fmod+0x200>)
 800ba34:	4314      	orrs	r4, r2
 800ba36:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800ba3a:	42ac      	cmp	r4, r5
 800ba3c:	d909      	bls.n	800ba52 <__ieee754_fmod+0x4a>
 800ba3e:	f7f4 fddb 	bl	80005f8 <__aeabi_dmul>
 800ba42:	4602      	mov	r2, r0
 800ba44:	460b      	mov	r3, r1
 800ba46:	f7f4 ff01 	bl	800084c <__aeabi_ddiv>
 800ba4a:	ec41 0b10 	vmov	d0, r0, r1
 800ba4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba52:	45e0      	cmp	r8, ip
 800ba54:	4682      	mov	sl, r0
 800ba56:	4604      	mov	r4, r0
 800ba58:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800ba5c:	dc09      	bgt.n	800ba72 <__ieee754_fmod+0x6a>
 800ba5e:	dbf4      	blt.n	800ba4a <__ieee754_fmod+0x42>
 800ba60:	4282      	cmp	r2, r0
 800ba62:	d8f2      	bhi.n	800ba4a <__ieee754_fmod+0x42>
 800ba64:	d105      	bne.n	800ba72 <__ieee754_fmod+0x6a>
 800ba66:	4b69      	ldr	r3, [pc, #420]	@ (800bc0c <__ieee754_fmod+0x204>)
 800ba68:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800ba6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba70:	e7eb      	b.n	800ba4a <__ieee754_fmod+0x42>
 800ba72:	4a65      	ldr	r2, [pc, #404]	@ (800bc08 <__ieee754_fmod+0x200>)
 800ba74:	ea19 0f02 	tst.w	r9, r2
 800ba78:	d148      	bne.n	800bb0c <__ieee754_fmod+0x104>
 800ba7a:	f1b8 0f00 	cmp.w	r8, #0
 800ba7e:	d13d      	bne.n	800bafc <__ieee754_fmod+0xf4>
 800ba80:	4963      	ldr	r1, [pc, #396]	@ (800bc10 <__ieee754_fmod+0x208>)
 800ba82:	4653      	mov	r3, sl
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dc36      	bgt.n	800baf6 <__ieee754_fmod+0xee>
 800ba88:	4216      	tst	r6, r2
 800ba8a:	d14f      	bne.n	800bb2c <__ieee754_fmod+0x124>
 800ba8c:	f1bc 0f00 	cmp.w	ip, #0
 800ba90:	d144      	bne.n	800bb1c <__ieee754_fmod+0x114>
 800ba92:	4a5f      	ldr	r2, [pc, #380]	@ (800bc10 <__ieee754_fmod+0x208>)
 800ba94:	463b      	mov	r3, r7
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	dc3d      	bgt.n	800bb16 <__ieee754_fmod+0x10e>
 800ba9a:	485e      	ldr	r0, [pc, #376]	@ (800bc14 <__ieee754_fmod+0x20c>)
 800ba9c:	4281      	cmp	r1, r0
 800ba9e:	db4a      	blt.n	800bb36 <__ieee754_fmod+0x12e>
 800baa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800baa4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800baa8:	485a      	ldr	r0, [pc, #360]	@ (800bc14 <__ieee754_fmod+0x20c>)
 800baaa:	4282      	cmp	r2, r0
 800baac:	db57      	blt.n	800bb5e <__ieee754_fmod+0x156>
 800baae:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800bab2:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800bab6:	1a89      	subs	r1, r1, r2
 800bab8:	1b98      	subs	r0, r3, r6
 800baba:	eba4 070e 	sub.w	r7, r4, lr
 800babe:	2900      	cmp	r1, #0
 800bac0:	d162      	bne.n	800bb88 <__ieee754_fmod+0x180>
 800bac2:	4574      	cmp	r4, lr
 800bac4:	bf38      	it	cc
 800bac6:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800baca:	2800      	cmp	r0, #0
 800bacc:	bfa4      	itt	ge
 800bace:	463c      	movge	r4, r7
 800bad0:	4603      	movge	r3, r0
 800bad2:	ea53 0104 	orrs.w	r1, r3, r4
 800bad6:	d0c6      	beq.n	800ba66 <__ieee754_fmod+0x5e>
 800bad8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800badc:	db69      	blt.n	800bbb2 <__ieee754_fmod+0x1aa>
 800bade:	494d      	ldr	r1, [pc, #308]	@ (800bc14 <__ieee754_fmod+0x20c>)
 800bae0:	428a      	cmp	r2, r1
 800bae2:	db6c      	blt.n	800bbbe <__ieee754_fmod+0x1b6>
 800bae4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bae8:	432b      	orrs	r3, r5
 800baea:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800baee:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800baf2:	4620      	mov	r0, r4
 800baf4:	e7a9      	b.n	800ba4a <__ieee754_fmod+0x42>
 800baf6:	3901      	subs	r1, #1
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	e7c3      	b.n	800ba84 <__ieee754_fmod+0x7c>
 800bafc:	4945      	ldr	r1, [pc, #276]	@ (800bc14 <__ieee754_fmod+0x20c>)
 800bafe:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	ddc0      	ble.n	800ba88 <__ieee754_fmod+0x80>
 800bb06:	3901      	subs	r1, #1
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	e7fa      	b.n	800bb02 <__ieee754_fmod+0xfa>
 800bb0c:	ea4f 5128 	mov.w	r1, r8, asr #20
 800bb10:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800bb14:	e7b8      	b.n	800ba88 <__ieee754_fmod+0x80>
 800bb16:	3a01      	subs	r2, #1
 800bb18:	005b      	lsls	r3, r3, #1
 800bb1a:	e7bc      	b.n	800ba96 <__ieee754_fmod+0x8e>
 800bb1c:	4a3d      	ldr	r2, [pc, #244]	@ (800bc14 <__ieee754_fmod+0x20c>)
 800bb1e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	ddb9      	ble.n	800ba9a <__ieee754_fmod+0x92>
 800bb26:	3a01      	subs	r2, #1
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	e7fa      	b.n	800bb22 <__ieee754_fmod+0x11a>
 800bb2c:	ea4f 522c 	mov.w	r2, ip, asr #20
 800bb30:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bb34:	e7b1      	b.n	800ba9a <__ieee754_fmod+0x92>
 800bb36:	1a40      	subs	r0, r0, r1
 800bb38:	281f      	cmp	r0, #31
 800bb3a:	dc0a      	bgt.n	800bb52 <__ieee754_fmod+0x14a>
 800bb3c:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800bb40:	fa08 f800 	lsl.w	r8, r8, r0
 800bb44:	fa2a f303 	lsr.w	r3, sl, r3
 800bb48:	ea43 0308 	orr.w	r3, r3, r8
 800bb4c:	fa0a f400 	lsl.w	r4, sl, r0
 800bb50:	e7aa      	b.n	800baa8 <__ieee754_fmod+0xa0>
 800bb52:	4b31      	ldr	r3, [pc, #196]	@ (800bc18 <__ieee754_fmod+0x210>)
 800bb54:	1a5b      	subs	r3, r3, r1
 800bb56:	fa0a f303 	lsl.w	r3, sl, r3
 800bb5a:	2400      	movs	r4, #0
 800bb5c:	e7a4      	b.n	800baa8 <__ieee754_fmod+0xa0>
 800bb5e:	1a80      	subs	r0, r0, r2
 800bb60:	281f      	cmp	r0, #31
 800bb62:	dc0a      	bgt.n	800bb7a <__ieee754_fmod+0x172>
 800bb64:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800bb68:	fa0c fc00 	lsl.w	ip, ip, r0
 800bb6c:	fa27 f606 	lsr.w	r6, r7, r6
 800bb70:	ea46 060c 	orr.w	r6, r6, ip
 800bb74:	fa07 fe00 	lsl.w	lr, r7, r0
 800bb78:	e79d      	b.n	800bab6 <__ieee754_fmod+0xae>
 800bb7a:	4e27      	ldr	r6, [pc, #156]	@ (800bc18 <__ieee754_fmod+0x210>)
 800bb7c:	1ab6      	subs	r6, r6, r2
 800bb7e:	fa07 f606 	lsl.w	r6, r7, r6
 800bb82:	f04f 0e00 	mov.w	lr, #0
 800bb86:	e796      	b.n	800bab6 <__ieee754_fmod+0xae>
 800bb88:	4574      	cmp	r4, lr
 800bb8a:	bf38      	it	cc
 800bb8c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800bb90:	2800      	cmp	r0, #0
 800bb92:	da05      	bge.n	800bba0 <__ieee754_fmod+0x198>
 800bb94:	0fe0      	lsrs	r0, r4, #31
 800bb96:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800bb9a:	0064      	lsls	r4, r4, #1
 800bb9c:	3901      	subs	r1, #1
 800bb9e:	e78b      	b.n	800bab8 <__ieee754_fmod+0xb0>
 800bba0:	ea50 0307 	orrs.w	r3, r0, r7
 800bba4:	f43f af5f 	beq.w	800ba66 <__ieee754_fmod+0x5e>
 800bba8:	0ffb      	lsrs	r3, r7, #31
 800bbaa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800bbae:	007c      	lsls	r4, r7, #1
 800bbb0:	e7f4      	b.n	800bb9c <__ieee754_fmod+0x194>
 800bbb2:	0fe1      	lsrs	r1, r4, #31
 800bbb4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800bbb8:	0064      	lsls	r4, r4, #1
 800bbba:	3a01      	subs	r2, #1
 800bbbc:	e78c      	b.n	800bad8 <__ieee754_fmod+0xd0>
 800bbbe:	1a89      	subs	r1, r1, r2
 800bbc0:	2914      	cmp	r1, #20
 800bbc2:	dc0a      	bgt.n	800bbda <__ieee754_fmod+0x1d2>
 800bbc4:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800bbc8:	fa03 f202 	lsl.w	r2, r3, r2
 800bbcc:	40cc      	lsrs	r4, r1
 800bbce:	4322      	orrs	r2, r4
 800bbd0:	410b      	asrs	r3, r1
 800bbd2:	ea43 0105 	orr.w	r1, r3, r5
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	e737      	b.n	800ba4a <__ieee754_fmod+0x42>
 800bbda:	291f      	cmp	r1, #31
 800bbdc:	dc07      	bgt.n	800bbee <__ieee754_fmod+0x1e6>
 800bbde:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800bbe2:	40cc      	lsrs	r4, r1
 800bbe4:	fa03 f202 	lsl.w	r2, r3, r2
 800bbe8:	4322      	orrs	r2, r4
 800bbea:	462b      	mov	r3, r5
 800bbec:	e7f1      	b.n	800bbd2 <__ieee754_fmod+0x1ca>
 800bbee:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800bbf2:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800bbf6:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800bbfa:	32e2      	adds	r2, #226	@ 0xe2
 800bbfc:	fa43 f202 	asr.w	r2, r3, r2
 800bc00:	e7f3      	b.n	800bbea <__ieee754_fmod+0x1e2>
 800bc02:	bf00      	nop
 800bc04:	7fefffff 	.word	0x7fefffff
 800bc08:	7ff00000 	.word	0x7ff00000
 800bc0c:	0800c1a0 	.word	0x0800c1a0
 800bc10:	fffffbed 	.word	0xfffffbed
 800bc14:	fffffc02 	.word	0xfffffc02
 800bc18:	fffffbe2 	.word	0xfffffbe2

0800bc1c <_init>:
 800bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1e:	bf00      	nop
 800bc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc22:	bc08      	pop	{r3}
 800bc24:	469e      	mov	lr, r3
 800bc26:	4770      	bx	lr

0800bc28 <_fini>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	bf00      	nop
 800bc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2e:	bc08      	pop	{r3}
 800bc30:	469e      	mov	lr, r3
 800bc32:	4770      	bx	lr
