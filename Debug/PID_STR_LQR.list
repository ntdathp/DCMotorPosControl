
PID_STR_LQR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b414  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800b5a8  0800b5a8  0000c5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb18  0800bb18  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb18  0800bb18  0000cb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb20  0800bb20  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb20  0800bb20  0000cb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb24  0800bb24  0000cb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bb28  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          00000504  200001d8  200001d8  0000d1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200006dc  200006dc  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea7c  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000247d  00000000  00000000  0001bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  0001e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b01  00000000  00000000  0001ef48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002233e  00000000  00000000  0001fa49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109fc  00000000  00000000  00041d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce222  00000000  00000000  00052783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001209a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005160  00000000  00000000  001209e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00125b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b58c 	.word	0x0800b58c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b58c 	.word	0x0800b58c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <Motor_Control_STR_step>:
static RT_MODEL_Motor_Control_STR_T Motor_Control_STR_M_;
RT_MODEL_Motor_Control_STR_T *const Motor_Control_STR_M = &Motor_Control_STR_M_;

/* Model step function */
void Motor_Control_STR_step(void)
{
 8000fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fec:	b0fa      	sub	sp, #488	@ 0x1e8
 8000fee:	af00      	add	r7, sp, #0
  int32_T tmp_1;

  /* SwitchCase: '<Root>/Switch Case' incorporates:
   *  Inport: '<Root>/Case'
   */
  PHI_1 = trunc(Case);
 8000ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80011e8 <Motor_Control_STR_step+0x200>)
 8000ff2:	ed93 7b00 	vldr	d7, [r3]
 8000ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffa:	eef0 0a67 	vmov.f32	s1, s15
 8000ffe:	f00a f981 	bl	800b304 <trunc>
 8001002:	ed87 0b76 	vstr	d0, [r7, #472]	@ 0x1d8
  if (rtIsNaN(PHI_1) || rtIsInf(PHI_1)) {
 8001006:	ed97 0b76 	vldr	d0, [r7, #472]	@ 0x1d8
 800100a:	f001 f97d 	bl	8002308 <rtIsNaN>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <Motor_Control_STR_step+0x3a>
 8001014:	ed97 0b76 	vldr	d0, [r7, #472]	@ 0x1d8
 8001018:	f001 f952 	bl	80022c0 <rtIsInf>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <Motor_Control_STR_step+0x48>
    PHI_1 = 0.0;
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
 800102e:	e007      	b.n	8001040 <Motor_Control_STR_step+0x58>
  } else {
    PHI_1 = fmod(PHI_1, 4.294967296E+9);
 8001030:	ed9f 1b69 	vldr	d1, [pc, #420]	@ 80011d8 <Motor_Control_STR_step+0x1f0>
 8001034:	ed97 0b76 	vldr	d0, [r7, #472]	@ 0x1d8
 8001038:	f00a f936 	bl	800b2a8 <fmod>
 800103c:	ed87 0b76 	vstr	d0, [r7, #472]	@ 0x1d8
  }

  switch (PHI_1 < 0.0 ? -(int32_T)(uint32_T)-PHI_1 : (int32_T)(uint32_T)PHI_1) {
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 800104c:	f7ff fd46 	bl	8000adc <__aeabi_dcmplt>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00c      	beq.n	8001070 <Motor_Control_STR_step+0x88>
 8001056:	f8d7 41d8 	ldr.w	r4, [r7, #472]	@ 0x1d8
 800105a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800105e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001062:	4620      	mov	r0, r4
 8001064:	4629      	mov	r1, r5
 8001066:	f7ff fd9f 	bl	8000ba8 <__aeabi_d2uiz>
 800106a:	4603      	mov	r3, r0
 800106c:	425b      	negs	r3, r3
 800106e:	e004      	b.n	800107a <Motor_Control_STR_step+0x92>
 8001070:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8001074:	f7ff fd98 	bl	8000ba8 <__aeabi_d2uiz>
 8001078:	4603      	mov	r3, r0
 800107a:	2b03      	cmp	r3, #3
 800107c:	f000 86ed 	beq.w	8001e5a <Motor_Control_STR_step+0xe72>
 8001080:	2b03      	cmp	r3, #3
 8001082:	f300 8748 	bgt.w	8001f16 <Motor_Control_STR_step+0xf2e>
 8001086:	2b01      	cmp	r3, #1
 8001088:	d004      	beq.n	8001094 <Motor_Control_STR_step+0xac>
 800108a:	2b02      	cmp	r3, #2
 800108c:	f000 80c0 	beq.w	8001210 <Motor_Control_STR_step+0x228>
    /* End of Outputs for SubSystem: '<Root>/Switch Case Action Subsystem2' */
    break;
  }

  /* End of SwitchCase: '<Root>/Switch Case' */
}
 8001090:	f000 bf41 	b.w	8001f16 <Motor_Control_STR_step+0xf2e>
    rtb_Sum_o = Setpoint - Sensor;
 8001094:	4b55      	ldr	r3, [pc, #340]	@ (80011ec <Motor_Control_STR_step+0x204>)
 8001096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800109a:	4b55      	ldr	r3, [pc, #340]	@ (80011f0 <Motor_Control_STR_step+0x208>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff f8f2 	bl	8000288 <__aeabi_dsub>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    rtb_NProdOut = (rtb_Sum_o * Kd - Motor_Control_STR_DW.Filter_DSTATE) * 100.0;
 80010ac:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <Motor_Control_STR_step+0x20c>)
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80010b6:	f7ff fa9f 	bl	80005f8 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	4b4d      	ldr	r3, [pc, #308]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 80010c4:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80010c8:	f7ff f8de 	bl	8000288 <__aeabi_dsub>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b48      	ldr	r3, [pc, #288]	@ (80011fc <Motor_Control_STR_step+0x214>)
 80010da:	f7ff fa8d 	bl	80005f8 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
    rtb_Sum = (rtb_Sum_o * Kp + Motor_Control_STR_DW.Integrator_DSTATE) +
 80010e6:	4b46      	ldr	r3, [pc, #280]	@ (8001200 <Motor_Control_STR_step+0x218>)
 80010e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ec:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80010f0:	f7ff fa82 	bl	80005f8 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	4b3e      	ldr	r3, [pc, #248]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 80010fe:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8001102:	f7ff f8c3 	bl	800028c <__adddf3>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 800110e:	f7ff f8bd 	bl	800028c <__adddf3>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
    if (rtb_Sum > 100.0) {
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <Motor_Control_STR_step+0x214>)
 8001120:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8001124:	f7ff fcf8 	bl	8000b18 <__aeabi_dcmpgt>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <Motor_Control_STR_step+0x154>
      pwm1 = 100.0;
 800112e:	4935      	ldr	r1, [pc, #212]	@ (8001204 <Motor_Control_STR_step+0x21c>)
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <Motor_Control_STR_step+0x214>)
 8001136:	e9c1 2300 	strd	r2, r3, [r1]
 800113a:	e015      	b.n	8001168 <Motor_Control_STR_step+0x180>
    } else if (rtb_Sum < -100.0) {
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b31      	ldr	r3, [pc, #196]	@ (8001208 <Motor_Control_STR_step+0x220>)
 8001142:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8001146:	f7ff fcc9 	bl	8000adc <__aeabi_dcmplt>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <Motor_Control_STR_step+0x176>
      pwm1 = -100.0;
 8001150:	492c      	ldr	r1, [pc, #176]	@ (8001204 <Motor_Control_STR_step+0x21c>)
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <Motor_Control_STR_step+0x220>)
 8001158:	e9c1 2300 	strd	r2, r3, [r1]
 800115c:	e004      	b.n	8001168 <Motor_Control_STR_step+0x180>
      pwm1 = rtb_Sum;
 800115e:	4929      	ldr	r1, [pc, #164]	@ (8001204 <Motor_Control_STR_step+0x21c>)
 8001160:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8001164:	e9c1 2300 	strd	r2, r3, [r1]
    Motor_Control_STR_DW.Filter_DSTATE += 0.005 * rtb_NProdOut;
 8001168:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 800116a:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	@ 0xe0
 800116e:	a31c      	add	r3, pc, #112	@ (adr r3, 80011e0 <Motor_Control_STR_step+0x1f8>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8001178:	f7ff fa3e 	bl	80005f8 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	f7ff f882 	bl	800028c <__adddf3>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	491a      	ldr	r1, [pc, #104]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 800118e:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
    Motor_Control_STR_DW.Integrator_DSTATE += rtb_Sum_o * Ki * 0.005;
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 8001194:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	@ 0xe8
 8001198:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <Motor_Control_STR_step+0x224>)
 800119a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119e:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80011a2:	f7ff fa29 	bl	80005f8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80011e0 <Motor_Control_STR_step+0x1f8>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fa20 	bl	80005f8 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff f864 	bl	800028c <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	490b      	ldr	r1, [pc, #44]	@ (80011f8 <Motor_Control_STR_step+0x210>)
 80011ca:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
    break;
 80011ce:	f000 bea2 	b.w	8001f16 <Motor_Control_STR_step+0xf2e>
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	00000000 	.word	0x00000000
 80011dc:	41f00000 	.word	0x41f00000
 80011e0:	47ae147b 	.word	0x47ae147b
 80011e4:	3f747ae1 	.word	0x3f747ae1
 80011e8:	20000200 	.word	0x20000200
 80011ec:	20000208 	.word	0x20000208
 80011f0:	200001f8 	.word	0x200001f8
 80011f4:	20000220 	.word	0x20000220
 80011f8:	20000278 	.word	0x20000278
 80011fc:	40590000 	.word	0x40590000
 8001200:	20000210 	.word	0x20000210
 8001204:	20000250 	.word	0x20000250
 8001208:	c0590000 	.word	0xc0590000
 800120c:	20000218 	.word	0x20000218
    rtb_Sum_o = pwm2;
 8001210:	4b9a      	ldr	r3, [pc, #616]	@ (800147c <Motor_Control_STR_step+0x494>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    rtb_NProdOut = Motor_Control_STR_DW.UnitDelay6_DSTATE;
 800121a:	4b99      	ldr	r3, [pc, #612]	@ (8001480 <Motor_Control_STR_step+0x498>)
 800121c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001220:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
    PHI[0] = -Motor_Control_STR_DW.UnitDelay6_DSTATE;
 8001224:	4b96      	ldr	r3, [pc, #600]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001226:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800122a:	4690      	mov	r8, r2
 800122c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001230:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001234:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001238:	e9c3 8900 	strd	r8, r9, [r3]
    PHI[1] = -Motor_Control_STR_DW.UnitDelay5_DSTATE;
 800123c:	4b90      	ldr	r3, [pc, #576]	@ (8001480 <Motor_Control_STR_step+0x498>)
 800123e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001242:	4692      	mov	sl, r2
 8001244:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001248:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800124c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001250:	e9c3 ab02 	strd	sl, fp, [r3, #8]
    PHI[2] = pwm2;
 8001254:	4b89      	ldr	r3, [pc, #548]	@ (800147c <Motor_Control_STR_step+0x494>)
 8001256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800125a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800125e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001262:	e9c3 0104 	strd	r0, r1, [r3, #16]
    PHI[3] = Motor_Control_STR_DW.UnitDelay2_DSTATE;
 8001266:	4b86      	ldr	r3, [pc, #536]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001268:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800126c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001270:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001274:	e9c3 0106 	strd	r0, r1, [r3, #24]
    rtb_Sum = Sensor - (((-Motor_Control_STR_DW.UnitDelay6_DSTATE *
 8001278:	4b82      	ldr	r3, [pc, #520]	@ (8001484 <Motor_Control_STR_step+0x49c>)
 800127a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800127e:	4b80      	ldr	r3, [pc, #512]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001280:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001284:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001286:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] +
 800128c:	4b7c      	ldr	r3, [pc, #496]	@ (8001480 <Motor_Control_STR_step+0x498>)
 800128e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
    rtb_Sum = Sensor - (((-Motor_Control_STR_DW.UnitDelay6_DSTATE *
 8001292:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001296:	f7ff f9af 	bl	80005f8 <__aeabi_dmul>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4614      	mov	r4, r2
 80012a0:	461d      	mov	r5, r3
                          -Motor_Control_STR_DW.UnitDelay5_DSTATE *
 80012a2:	4b77      	ldr	r3, [pc, #476]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80012a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80012aa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[1]) + pwm2 *
 80012b0:	4b73      	ldr	r3, [pc, #460]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80012b2:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
                          -Motor_Control_STR_DW.UnitDelay5_DSTATE *
 80012b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80012ba:	f7ff f99d 	bl	80005f8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] +
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7fe ffe1 	bl	800028c <__adddf3>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	461d      	mov	r5, r3
                         Motor_Control_STR_DW.UnitDelay_DSTATE_j[2]) +
 80012d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80012d4:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
                          Motor_Control_STR_DW.UnitDelay_DSTATE_j[1]) + pwm2 *
 80012d8:	4b68      	ldr	r3, [pc, #416]	@ (800147c <Motor_Control_STR_step+0x494>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff f98b 	bl	80005f8 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4620      	mov	r0, r4
 80012e8:	4629      	mov	r1, r5
 80012ea:	f7fe ffcf 	bl	800028c <__adddf3>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4614      	mov	r4, r2
 80012f4:	461d      	mov	r5, r3
                        Motor_Control_STR_DW.UnitDelay2_DSTATE *
 80012f6:	4b62      	ldr	r3, [pc, #392]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80012f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                        Motor_Control_STR_DW.UnitDelay_DSTATE_j[3]);
 80012fc:	4b60      	ldr	r3, [pc, #384]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80012fe:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
                        Motor_Control_STR_DW.UnitDelay2_DSTATE *
 8001302:	f7ff f979 	bl	80005f8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
                         Motor_Control_STR_DW.UnitDelay_DSTATE_j[2]) +
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7fe ffbd 	bl	800028c <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
    rtb_Sum = Sensor - (((-Motor_Control_STR_DW.UnitDelay6_DSTATE *
 8001316:	4640      	mov	r0, r8
 8001318:	4649      	mov	r1, r9
 800131a:	f7fe ffb5 	bl	8000288 <__aeabi_dsub>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
    PHI_0 = 0.0;
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    for (i = 0; i < 4; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001338:	e084      	b.n	8001444 <Motor_Control_STR_step+0x45c>
      PHI_tmp = i << 2;
 800133a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
      PHI_0 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 8001344:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001348:	3301      	adds	r3, #1
 800134a:	4a4d      	ldr	r2, [pc, #308]	@ (8001480 <Motor_Control_STR_step+0x498>)
 800134c:	3304      	adds	r3, #4
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 8001356:	4b4a      	ldr	r3, [pc, #296]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001358:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800135c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800135e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001362:	62fb      	str	r3, [r7, #44]	@ 0x2c
      PHI_0 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 8001364:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001368:	f7ff f946 	bl	80005f8 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4614      	mov	r4, r2
 8001372:	461d      	mov	r5, r3
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 8001374:	4a42      	ldr	r2, [pc, #264]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001376:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800137a:	3304      	adds	r3, #4
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4413      	add	r3, r2
 8001380:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 8001384:	4b3e      	ldr	r3, [pc, #248]	@ (8001480 <Motor_Control_STR_step+0x498>)
 8001386:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800138a:	623a      	str	r2, [r7, #32]
 800138c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 8001392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001396:	f7ff f92f 	bl	80005f8 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 800139e:	4620      	mov	r0, r4
 80013a0:	4629      	mov	r1, r5
 80013a2:	f7fe ff73 	bl	800028c <__adddf3>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4614      	mov	r4, r2
 80013ac:	461d      	mov	r5, r3
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 80013ae:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013b2:	3302      	adds	r3, #2
 80013b4:	4a32      	ldr	r2, [pc, #200]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80013b6:	3304      	adds	r3, #4
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4413      	add	r3, r2
 80013bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c0:	4b2e      	ldr	r3, [pc, #184]	@ (800147c <Motor_Control_STR_step+0x494>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f917 	bl	80005f8 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7fe ff5b 	bl	800028c <__adddf3>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4614      	mov	r4, r2
 80013dc:	461d      	mov	r5, r3
                Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 80013de:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013e2:	3303      	adds	r3, #3
 80013e4:	4a26      	ldr	r2, [pc, #152]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80013e6:	3304      	adds	r3, #4
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	e9d3 0100 	ldrd	r0, r1, [r3]
                Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <Motor_Control_STR_step+0x498>)
 80013f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 80013f6:	f7ff f8ff 	bl	80005f8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	f7fe ff43 	bl	800028c <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
                Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 800140e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001412:	f5a3 72c4 	sub.w	r2, r3, #392	@ 0x188
 8001416:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4413      	add	r3, r2
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f8e9 	bl	80005f8 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
      PHI_0 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 800142a:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 800142e:	f7fe ff2d 	bl	800028c <__adddf3>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    for (i = 0; i < 4; i++) {
 800143a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800143e:	3301      	adds	r3, #1
 8001440:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001444:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001448:	2b03      	cmp	r3, #3
 800144a:	f77f af76 	ble.w	800133a <Motor_Control_STR_step+0x352>
    PHI_1 = 0.0;
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    a = 1.0 / lamda;
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <Motor_Control_STR_step+0x4a0>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f04f 0000 	mov.w	r0, #0
 8001464:	4909      	ldr	r1, [pc, #36]	@ (800148c <Motor_Control_STR_step+0x4a4>)
 8001466:	f7ff f9f1 	bl	800084c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
    for (i = 0; i < 4; i++) {
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001478:	e12c      	b.n	80016d4 <Motor_Control_STR_step+0x6ec>
 800147a:	bf00      	nop
 800147c:	20000248 	.word	0x20000248
 8001480:	20000278 	.word	0x20000278
 8001484:	200001f8 	.word	0x200001f8
 8001488:	20000238 	.word	0x20000238
 800148c:	3ff00000 	.word	0x3ff00000
      b_gamma = ((Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 4] *
 8001490:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001494:	3304      	adds	r3, #4
 8001496:	4abc      	ldr	r2, [pc, #752]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001498:	3304      	adds	r3, #4
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 80014a2:	4bb9      	ldr	r3, [pc, #740]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80014a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014a8:	61ba      	str	r2, [r7, #24]
 80014aa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014ae:	61fb      	str	r3, [r7, #28]
      b_gamma = ((Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 4] *
 80014b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014b4:	f7ff f8a0 	bl	80005f8 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4614      	mov	r4, r2
 80014be:	461d      	mov	r5, r3
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[i] *
 80014c0:	4ab1      	ldr	r2, [pc, #708]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80014c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80014c6:	3304      	adds	r3, #4
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 80014d0:	4bad      	ldr	r3, [pc, #692]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80014d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014d6:	613a      	str	r2, [r7, #16]
 80014d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014dc:	617b      	str	r3, [r7, #20]
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[i] *
 80014de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014e2:	f7ff f889 	bl	80005f8 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 80014ea:	4620      	mov	r0, r4
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7fe fecd 	bl	800028c <__adddf3>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4614      	mov	r4, r2
 80014f8:	461d      	mov	r5, r3
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 8] * pwm2) +
 80014fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80014fe:	3308      	adds	r3, #8
 8001500:	4aa1      	ldr	r2, [pc, #644]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001502:	3304      	adds	r3, #4
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150c:	4b9f      	ldr	r3, [pc, #636]	@ (800178c <Motor_Control_STR_step+0x7a4>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f871 	bl	80005f8 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe feb5 	bl	800028c <__adddf3>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4614      	mov	r4, r2
 8001528:	461d      	mov	r5, r3
        Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 12] *
 800152a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800152e:	330c      	adds	r3, #12
 8001530:	4a95      	ldr	r2, [pc, #596]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001532:	3304      	adds	r3, #4
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	e9d3 0100 	ldrd	r0, r1, [r3]
        Motor_Control_STR_DW.UnitDelay2_DSTATE;
 800153c:	4b92      	ldr	r3, [pc, #584]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 800153e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 12] *
 8001542:	f7ff f859 	bl	80005f8 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
      b_gamma = ((Motor_Control_STR_DW.UnitDelay1_DSTATE[i + 4] *
 800154a:	4620      	mov	r0, r4
 800154c:	4629      	mov	r1, r5
 800154e:	f7fe fe9d 	bl	800028c <__adddf3>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      Theta_tmp[i] = b_gamma;
 800155a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800155e:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 8001562:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	18d1      	adds	r1, r2, r3
 800156a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800156e:	e9c1 2300 	strd	r2, r3, [r1]
      PHI_tmp = i << 2;
 8001572:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
      PHI_1 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 800157c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001580:	3301      	adds	r3, #1
 8001582:	4a81      	ldr	r2, [pc, #516]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001584:	3304      	adds	r3, #4
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 800158e:	4b7e      	ldr	r3, [pc, #504]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001590:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800159a:	60fb      	str	r3, [r7, #12]
      PHI_1 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 800159c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015a0:	f7ff f82a 	bl	80005f8 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4614      	mov	r4, r2
 80015aa:	461d      	mov	r5, r3
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 80015ac:	4a76      	ldr	r2, [pc, #472]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80015ae:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80015b2:	3304      	adds	r3, #4
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	e9d3 0100 	ldrd	r0, r1, [r3]
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 80015bc:	4b72      	ldr	r3, [pc, #456]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80015be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015c2:	603a      	str	r2, [r7, #0]
 80015c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015c8:	607b      	str	r3, [r7, #4]
                  Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp] *
 80015ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ce:	f7ff f813 	bl	80005f8 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay5_DSTATE +
 80015d6:	4620      	mov	r0, r4
 80015d8:	4629      	mov	r1, r5
 80015da:	f7fe fe57 	bl	800028c <__adddf3>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4614      	mov	r4, r2
 80015e4:	461d      	mov	r5, r3
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 80015e6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80015ea:	3302      	adds	r3, #2
 80015ec:	4a66      	ldr	r2, [pc, #408]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80015ee:	3304      	adds	r3, #4
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f8:	4b64      	ldr	r3, [pc, #400]	@ (800178c <Motor_Control_STR_step+0x7a4>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe fffb 	bl	80005f8 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
                  -Motor_Control_STR_DW.UnitDelay6_DSTATE) +
 8001606:	4620      	mov	r0, r4
 8001608:	4629      	mov	r1, r5
 800160a:	f7fe fe3f 	bl	800028c <__adddf3>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4614      	mov	r4, r2
 8001614:	461d      	mov	r5, r3
                Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 8001616:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800161a:	3303      	adds	r3, #3
 800161c:	4a5a      	ldr	r2, [pc, #360]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 800161e:	3304      	adds	r3, #4
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	e9d3 0100 	ldrd	r0, r1, [r3]
                Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 8001628:	4b57      	ldr	r3, [pc, #348]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 800162a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 3] *
 800162e:	f7fe ffe3 	bl	80005f8 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
                 Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 2] * pwm2) +
 8001636:	4620      	mov	r0, r4
 8001638:	4629      	mov	r1, r5
 800163a:	f7fe fe27 	bl	800028c <__adddf3>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
                Motor_Control_STR_DW.UnitDelay2_DSTATE) * PHI[i];
 8001646:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800164a:	f5a3 72c4 	sub.w	r2, r3, #392	@ 0x188
 800164e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe ffcd 	bl	80005f8 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
      PHI_1 += (((Motor_Control_STR_DW.UnitDelay1_DSTATE[PHI_tmp + 1] *
 8001662:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8001666:	f7fe fe11 	bl	800028c <__adddf3>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
      Motor_Control_STR_B.Theta[i] = b_gamma / (lamda + PHI_0) * rtb_Sum +
 8001672:	4b47      	ldr	r3, [pc, #284]	@ (8001790 <Motor_Control_STR_step+0x7a8>)
 8001674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001678:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 800167c:	f7fe fe06 	bl	800028c <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8001688:	f7ff f8e0 	bl	800084c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8001698:	f7fe ffae 	bl	80005f8 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
        Motor_Control_STR_DW.UnitDelay_DSTATE_j[i];
 80016a4:	4a38      	ldr	r2, [pc, #224]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80016a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016aa:	3314      	adds	r3, #20
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
      Motor_Control_STR_B.Theta[i] = b_gamma / (lamda + PHI_0) * rtb_Sum +
 80016b4:	f7fe fdea 	bl	800028c <__adddf3>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4835      	ldr	r0, [pc, #212]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 80016be:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 80016c2:	00c9      	lsls	r1, r1, #3
 80016c4:	4401      	add	r1, r0
 80016c6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 4; i++) {
 80016ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016ce:	3301      	adds	r3, #1
 80016d0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80016d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016d8:	2b03      	cmp	r3, #3
 80016da:	f77f aed9 	ble.w	8001490 <Motor_Control_STR_step+0x4a8>
    rtb_Sum = Setpoint - Sensor;
 80016de:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <Motor_Control_STR_step+0x7b0>)
 80016e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e4:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <Motor_Control_STR_step+0x7b4>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fdcd 	bl	8000288 <__aeabi_dsub>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
    rtb_UnitDelay_j = Motor_Control_STR_DW.UnitDelay_DSTATE_c;
 80016f6:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 80016f8:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80016fc:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
    rtb_UnitDelay3_b = Motor_Control_STR_DW.UnitDelay3_DSTATE_i;
 8001700:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <Motor_Control_STR_step+0x7a0>)
 8001702:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 8001706:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    q2 = Motor_Control_STR_B.Theta[2] + Motor_Control_STR_B.Theta[3];
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 800170c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 8001712:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001716:	f7fe fdb9 	bl	800028c <__adddf3>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    q2 = (((Motor_Control_STR_B.Theta[2] * 0.96117383180138871 -
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 8001724:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001728:	a313      	add	r3, pc, #76	@ (adr r3, 8001778 <Motor_Control_STR_step+0x790>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe ff63 	bl	80005f8 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4614      	mov	r4, r2
 8001738:	461d      	mov	r5, r3
            Motor_Control_STR_B.Theta[3] * -1.960781661356499) -
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 800173c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001740:	a30f      	add	r3, pc, #60	@ (adr r3, 8001780 <Motor_Control_STR_step+0x798>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe ff57 	bl	80005f8 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
    q2 = (((Motor_Control_STR_B.Theta[2] * 0.96117383180138871 -
 800174e:	4620      	mov	r0, r4
 8001750:	4629      	mov	r1, r5
 8001752:	f7fe fd9b 	bl	800028c <__adddf3>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
           Motor_Control_STR_B.Theta[3]) * Motor_Control_STR_B.Theta[3] +
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 8001760:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
            Motor_Control_STR_B.Theta[3] * -1.960781661356499) -
 8001764:	f7fe fd90 	bl	8000288 <__aeabi_dsub>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
           Motor_Control_STR_B.Theta[3]) * Motor_Control_STR_B.Theta[3] +
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <Motor_Control_STR_step+0x7ac>)
 8001772:	e015      	b.n	80017a0 <Motor_Control_STR_step+0x7b8>
 8001774:	f3af 8000 	nop.w
 8001778:	9fab747c 	.word	0x9fab747c
 800177c:	3feec1ef 	.word	0x3feec1ef
 8001780:	9761f69f 	.word	0x9761f69f
 8001784:	3fff5f5c 	.word	0x3fff5f5c
 8001788:	20000278 	.word	0x20000278
 800178c:	20000248 	.word	0x20000248
 8001790:	20000238 	.word	0x20000238
 8001794:	20000258 	.word	0x20000258
 8001798:	20000208 	.word	0x20000208
 800179c:	200001f8 	.word	0x200001f8
 80017a0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017a4:	f7fe ff28 	bl	80005f8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4614      	mov	r4, r2
 80017ae:	461d      	mov	r5, r3
          (Motor_Control_STR_B.Theta[0] * Motor_Control_STR_B.Theta[3] -
 80017b0:	4bb7      	ldr	r3, [pc, #732]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80017b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b6:	4bb6      	ldr	r3, [pc, #728]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80017b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017bc:	f7fe ff1c 	bl	80005f8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4690      	mov	r8, r2
 80017c6:	4699      	mov	r9, r3
           Motor_Control_STR_B.Theta[1] * Motor_Control_STR_B.Theta[2]) * q2) *
 80017c8:	4bb1      	ldr	r3, [pc, #708]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80017ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017ce:	4bb0      	ldr	r3, [pc, #704]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80017d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80017d4:	f7fe ff10 	bl	80005f8 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
          (Motor_Control_STR_B.Theta[0] * Motor_Control_STR_B.Theta[3] -
 80017dc:	4640      	mov	r0, r8
 80017de:	4649      	mov	r1, r9
 80017e0:	f7fe fd52 	bl	8000288 <__aeabi_dsub>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
           Motor_Control_STR_B.Theta[1] * Motor_Control_STR_B.Theta[2]) * q2) *
 80017ec:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80017f0:	f7fe ff02 	bl	80005f8 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
           Motor_Control_STR_B.Theta[3]) * Motor_Control_STR_B.Theta[3] +
 80017f8:	4620      	mov	r0, r4
 80017fa:	4629      	mov	r1, r5
 80017fc:	f7fe fd46 	bl	800028c <__adddf3>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
      Motor_Control_STR_B.Theta[1] / (((Motor_Control_STR_B.Theta[0] *
 8001808:	4ba1      	ldr	r3, [pc, #644]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800180a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
           Motor_Control_STR_B.Theta[1] * Motor_Control_STR_B.Theta[2]) * q2) *
 800180e:	f7fe fef3 	bl	80005f8 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4614      	mov	r4, r2
 8001818:	461d      	mov	r5, r3
      Motor_Control_STR_B.Theta[1] / (((Motor_Control_STR_B.Theta[0] *
 800181a:	4b9d      	ldr	r3, [pc, #628]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800181c:	e9d3 0100 	ldrd	r0, r1, [r3]
      Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[3] -
 8001820:	4b9b      	ldr	r3, [pc, #620]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001822:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
      Motor_Control_STR_B.Theta[1] / (((Motor_Control_STR_B.Theta[0] *
 8001826:	f7fe fee7 	bl	80005f8 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
      Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[3] -
 8001832:	4b97      	ldr	r3, [pc, #604]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001834:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001838:	f7fe fede 	bl	80005f8 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4690      	mov	r8, r2
 8001842:	4699      	mov	r9, r3
      Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[2] *
 8001844:	4b92      	ldr	r3, [pc, #584]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001846:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800184a:	4b91      	ldr	r3, [pc, #580]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800184c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001850:	f7fe fed2 	bl	80005f8 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
      Motor_Control_STR_B.Theta[1]) - Motor_Control_STR_B.Theta[3] *
 800185c:	4b8c      	ldr	r3, [pc, #560]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800185e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
      Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[2] *
 8001862:	f7fe fec9 	bl	80005f8 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
      Motor_Control_STR_B.Theta[2] * Motor_Control_STR_B.Theta[3] -
 800186a:	4640      	mov	r0, r8
 800186c:	4649      	mov	r1, r9
 800186e:	f7fe fd0b 	bl	8000288 <__aeabi_dsub>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4690      	mov	r8, r2
 8001878:	4699      	mov	r9, r3
      Motor_Control_STR_B.Theta[1]) - Motor_Control_STR_B.Theta[3] *
 800187a:	4b85      	ldr	r3, [pc, #532]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800187c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
      Motor_Control_STR_B.Theta[3]) * q2);
 8001880:	4b83      	ldr	r3, [pc, #524]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001882:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
      Motor_Control_STR_B.Theta[1]) - Motor_Control_STR_B.Theta[3] *
 8001886:	f7fe feb7 	bl	80005f8 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4640      	mov	r0, r8
 8001890:	4649      	mov	r1, r9
 8001892:	f7fe fcf9 	bl	8000288 <__aeabi_dsub>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
      Motor_Control_STR_B.Theta[3]) * q2);
 800189e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80018a2:	f7fe fea9 	bl	80005f8 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
    q2 = (((Motor_Control_STR_B.Theta[2] * 0.96117383180138871 -
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe ffcd 	bl	800084c <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    b_gamma = q2 * Motor_Control_STR_B.Theta[3] / Motor_Control_STR_B.Theta[1];
 80018ba:	4b75      	ldr	r3, [pc, #468]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80018bc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018c0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80018c4:	f7fe fe98 	bl	80005f8 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80018d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d6:	f7fe ffb9 	bl	800084c <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    q2 = ((((Motor_Control_STR_B.Theta[1] / Motor_Control_STR_B.Theta[3] -
 80018e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80018e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018e8:	4b69      	ldr	r3, [pc, #420]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80018ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018ee:	f7fe ffad 	bl	800084c <__aeabi_ddiv>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	461d      	mov	r5, r3
             ((Motor_Control_STR_B.Theta[2] / Motor_Control_STR_B.Theta[3] -
 80018fa:	4b65      	ldr	r3, [pc, #404]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80018fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001900:	4b63      	ldr	r3, [pc, #396]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001902:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001906:	f7fe ffa1 	bl	800084c <__aeabi_ddiv>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4690      	mov	r8, r2
 8001910:	4699      	mov	r9, r3
               Motor_Control_STR_B.Theta[0] / Motor_Control_STR_B.Theta[1]) +
 8001912:	4b5f      	ldr	r3, [pc, #380]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001914:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001918:	4b5d      	ldr	r3, [pc, #372]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 800191a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800191e:	f7fe ff95 	bl	800084c <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
             ((Motor_Control_STR_B.Theta[2] / Motor_Control_STR_B.Theta[3] -
 8001926:	4640      	mov	r0, r8
 8001928:	4649      	mov	r1, r9
 800192a:	f7fe fcad 	bl	8000288 <__aeabi_dsub>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
               Motor_Control_STR_B.Theta[0] / Motor_Control_STR_B.Theta[1]) +
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4b56      	ldr	r3, [pc, #344]	@ (8001a94 <Motor_Control_STR_step+0xaac>)
 800193c:	f7fe fca6 	bl	800028c <__adddf3>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
              1.0) * q2) * Motor_Control_STR_DW.UnitDelay_DSTATE_c +
 8001948:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 800194c:	f7fe fe54 	bl	80005f8 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
    q2 = ((((Motor_Control_STR_B.Theta[1] / Motor_Control_STR_B.Theta[3] -
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fc96 	bl	8000288 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
              1.0) * q2) * Motor_Control_STR_DW.UnitDelay_DSTATE_c +
 8001964:	4b4c      	ldr	r3, [pc, #304]	@ (8001a98 <Motor_Control_STR_step+0xab0>)
 8001966:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 800196a:	f7fe fe45 	bl	80005f8 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4614      	mov	r4, r2
 8001974:	461d      	mov	r5, r3
            ((-0.960781661356499 - Motor_Control_STR_B.Theta[0]) - b_gamma) /
 8001976:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	a142      	add	r1, pc, #264	@ (adr r1, 8001a88 <Motor_Control_STR_step+0xaa0>)
 800197e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001982:	f7fe fc81 	bl	8000288 <__aeabi_dsub>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001992:	f7fe fc79 	bl	8000288 <__aeabi_dsub>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
            Motor_Control_STR_B.Theta[2] * rtb_Sum) + q2 *
 800199e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a90 <Motor_Control_STR_step+0xaa8>)
 80019a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
            ((-0.960781661356499 - Motor_Control_STR_B.Theta[0]) - b_gamma) /
 80019a4:	f7fe ff52 	bl	800084c <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
            Motor_Control_STR_B.Theta[2] * rtb_Sum) + q2 *
 80019b0:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 80019b4:	f7fe fe20 	bl	80005f8 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
              1.0) * q2) * Motor_Control_STR_DW.UnitDelay_DSTATE_c +
 80019bc:	4620      	mov	r0, r4
 80019be:	4629      	mov	r1, r5
 80019c0:	f7fe fc64 	bl	800028c <__adddf3>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
           Motor_Control_STR_DW.UnitDelay2_DSTATE_a) + (1.0 - b_gamma) *
 80019cc:	4b32      	ldr	r3, [pc, #200]	@ (8001a98 <Motor_Control_STR_step+0xab0>)
 80019ce:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
            Motor_Control_STR_B.Theta[2] * rtb_Sum) + q2 *
 80019d2:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80019d6:	f7fe fe0f 	bl	80005f8 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4620      	mov	r0, r4
 80019e0:	4629      	mov	r1, r5
 80019e2:	f7fe fc53 	bl	800028c <__adddf3>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4614      	mov	r4, r2
 80019ec:	461d      	mov	r5, r3
           Motor_Control_STR_DW.UnitDelay2_DSTATE_a) + (1.0 - b_gamma) *
 80019ee:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80019f2:	f04f 0000 	mov.w	r0, #0
 80019f6:	4927      	ldr	r1, [pc, #156]	@ (8001a94 <Motor_Control_STR_step+0xaac>)
 80019f8:	f7fe fc46 	bl	8000288 <__aeabi_dsub>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
          Motor_Control_STR_DW.UnitDelay3_DSTATE_i) + b_gamma *
 8001a04:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <Motor_Control_STR_step+0xab0>)
 8001a06:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
           Motor_Control_STR_DW.UnitDelay2_DSTATE_a) + (1.0 - b_gamma) *
 8001a0a:	f7fe fdf5 	bl	80005f8 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4620      	mov	r0, r4
 8001a14:	4629      	mov	r1, r5
 8001a16:	f7fe fc39 	bl	800028c <__adddf3>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4614      	mov	r4, r2
 8001a20:	461d      	mov	r5, r3
      Motor_Control_STR_DW.UnitDelay1_DSTATE_j;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <Motor_Control_STR_step+0xab0>)
 8001a24:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
          Motor_Control_STR_DW.UnitDelay3_DSTATE_i) + b_gamma *
 8001a28:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001a2c:	f7fe fde4 	bl	80005f8 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
    q2 = ((((Motor_Control_STR_B.Theta[1] / Motor_Control_STR_B.Theta[3] -
 8001a34:	4620      	mov	r0, r4
 8001a36:	4629      	mov	r1, r5
 8001a38:	f7fe fc28 	bl	800028c <__adddf3>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    if (q2 > 100.0) {
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <Motor_Control_STR_step+0xab4>)
 8001a4a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8001a4e:	f7ff f863 	bl	8000b18 <__aeabi_dcmpgt>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <Motor_Control_STR_step+0xa7e>
      pwm2 = 100.0;
 8001a58:	4911      	ldr	r1, [pc, #68]	@ (8001aa0 <Motor_Control_STR_step+0xab8>)
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <Motor_Control_STR_step+0xab4>)
 8001a60:	e9c1 2300 	strd	r2, r3, [r1]
 8001a64:	e025      	b.n	8001ab2 <Motor_Control_STR_step+0xaca>
    } else if (q2 < -100.0) {
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <Motor_Control_STR_step+0xabc>)
 8001a6c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8001a70:	f7ff f834 	bl	8000adc <__aeabi_dcmplt>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d016      	beq.n	8001aa8 <Motor_Control_STR_step+0xac0>
      pwm2 = -100.0;
 8001a7a:	4909      	ldr	r1, [pc, #36]	@ (8001aa0 <Motor_Control_STR_step+0xab8>)
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <Motor_Control_STR_step+0xabc>)
 8001a82:	e9c1 2300 	strd	r2, r3, [r1]
 8001a86:	e014      	b.n	8001ab2 <Motor_Control_STR_step+0xaca>
 8001a88:	2ec3ed3e 	.word	0x2ec3ed3e
 8001a8c:	bfeebeb9 	.word	0xbfeebeb9
 8001a90:	20000258 	.word	0x20000258
 8001a94:	3ff00000 	.word	0x3ff00000
 8001a98:	20000278 	.word	0x20000278
 8001a9c:	40590000 	.word	0x40590000
 8001aa0:	20000248 	.word	0x20000248
 8001aa4:	c0590000 	.word	0xc0590000
      pwm2 = q2;
 8001aa8:	4975      	ldr	r1, [pc, #468]	@ (8001c80 <Motor_Control_STR_step+0xc98>)
 8001aaa:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001aae:	e9c1 2300 	strd	r2, r3, [r1]
    Motor_Control_STR_DW.UnitDelay2_DSTATE = rtb_Sum_o;
 8001ab2:	4974      	ldr	r1, [pc, #464]	@ (8001c84 <Motor_Control_STR_step+0xc9c>)
 8001ab4:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8001ab8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Motor_Control_STR_DW.UnitDelay6_DSTATE = Sensor;
 8001abc:	4b72      	ldr	r3, [pc, #456]	@ (8001c88 <Motor_Control_STR_step+0xca0>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	4970      	ldr	r1, [pc, #448]	@ (8001c84 <Motor_Control_STR_step+0xc9c>)
 8001ac4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    Motor_Control_STR_DW.UnitDelay5_DSTATE = rtb_NProdOut;
 8001ac8:	496e      	ldr	r1, [pc, #440]	@ (8001c84 <Motor_Control_STR_step+0xc9c>)
 8001aca:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8001ace:	e9c1 2306 	strd	r2, r3, [r1, #24]
    b_gamma = Theta_tmp[0];
 8001ad2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001ad6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    rtb_Sum_o = Theta_tmp[1];
 8001ae2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001ae6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001aea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aee:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    rtb_NProdOut = Theta_tmp[2];
 8001af2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001af6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001afa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001afe:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
    Theta_tmp_1 = Theta_tmp[3];
 8001b02:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001b06:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b0a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b0e:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
    for (i = 0; i < 4; i++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001b18:	e064      	b.n	8001be4 <Motor_Control_STR_step+0xbfc>
      PHI_0 = PHI[i];
 8001b1a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001b1e:	f5a3 72c4 	sub.w	r2, r3, #392	@ 0x188
 8001b22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
      PHI_tmp = i << 2;
 8001b32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
      Theta_tmp_0[PHI_tmp] = b_gamma * PHI_0;
 8001b3c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001b40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8001b44:	f7fe fd58 	bl	80005f8 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	f8d7 11d4 	ldr.w	r1, [r7, #468]	@ 0x1d4
 8001b50:	00c9      	lsls	r1, r1, #3
 8001b52:	f501 71d4 	add.w	r1, r1, #424	@ 0x1a8
 8001b56:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001b5a:	4401      	add	r1, r0
 8001b5c:	39e8      	subs	r1, #232	@ 0xe8
 8001b5e:	e9c1 2300 	strd	r2, r3, [r1]
      Theta_tmp_0[PHI_tmp + 1] = rtb_Sum_o * PHI_0;
 8001b62:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001b66:	1c5c      	adds	r4, r3, #1
 8001b68:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001b6c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 8001b70:	f7fe fd42 	bl	80005f8 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	00e1      	lsls	r1, r4, #3
 8001b7a:	f501 71d4 	add.w	r1, r1, #424	@ 0x1a8
 8001b7e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001b82:	4401      	add	r1, r0
 8001b84:	39e8      	subs	r1, #232	@ 0xe8
 8001b86:	e9c1 2300 	strd	r2, r3, [r1]
      Theta_tmp_0[PHI_tmp + 2] = rtb_NProdOut * PHI_0;
 8001b8a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001b8e:	1c9c      	adds	r4, r3, #2
 8001b90:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001b94:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8001b98:	f7fe fd2e 	bl	80005f8 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	00e1      	lsls	r1, r4, #3
 8001ba2:	f501 71d4 	add.w	r1, r1, #424	@ 0x1a8
 8001ba6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001baa:	4401      	add	r1, r0
 8001bac:	39e8      	subs	r1, #232	@ 0xe8
 8001bae:	e9c1 2300 	strd	r2, r3, [r1]
      Theta_tmp_0[PHI_tmp + 3] = Theta_tmp_1 * PHI_0;
 8001bb2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001bb6:	1cdc      	adds	r4, r3, #3
 8001bb8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001bbc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8001bc0:	f7fe fd1a 	bl	80005f8 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	00e1      	lsls	r1, r4, #3
 8001bca:	f501 71d4 	add.w	r1, r1, #424	@ 0x1a8
 8001bce:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001bd2:	4401      	add	r1, r0
 8001bd4:	39e8      	subs	r1, #232	@ 0xe8
 8001bd6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 4; i++) {
 8001bda:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001bde:	3301      	adds	r3, #1
 8001be0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001be4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	dd96      	ble.n	8001b1a <Motor_Control_STR_step+0xb32>
    PHI_1 += lamda;
 8001bec:	4b27      	ldr	r3, [pc, #156]	@ (8001c8c <Motor_Control_STR_step+0xca4>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8001bf6:	f7fe fb49 	bl	800028c <__adddf3>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    for (i = 0; i < 4; i++) {
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001c08:	e0d0      	b.n	8001dac <Motor_Control_STR_step+0xdc4>
      b_gamma = Theta_tmp_0[i + 4];
 8001c0a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c0e:	3304      	adds	r3, #4
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001c16:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3be8      	subs	r3, #232	@ 0xe8
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      rtb_Sum_o = Theta_tmp_0[i];
 8001c26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001c30:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c34:	4413      	add	r3, r2
 8001c36:	3be8      	subs	r3, #232	@ 0xe8
 8001c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3c:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
      rtb_NProdOut = Theta_tmp_0[i + 8];
 8001c40:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c44:	3308      	adds	r3, #8
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001c4c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c50:	4413      	add	r3, r2
 8001c52:	3be8      	subs	r3, #232	@ 0xe8
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
      Theta_tmp_1 = Theta_tmp_0[i + 12];
 8001c5c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c60:	330c      	adds	r3, #12
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001c68:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3be8      	subs	r3, #232	@ 0xe8
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      for (PHI_tmp = 0; PHI_tmp < 4; PHI_tmp++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8001c7e:	e08b      	b.n	8001d98 <Motor_Control_STR_step+0xdb0>
 8001c80:	20000248 	.word	0x20000248
 8001c84:	20000278 	.word	0x20000278
 8001c88:	200001f8 	.word	0x200001f8
 8001c8c:	20000238 	.word	0x20000238
        tmp_0 = PHI_tmp << 2;
 8001c90:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
        tmp_1 = tmp_0 + i;
 8001c9a:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8001c9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        tmp[tmp_1] = Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_1] -
 8001ca8:	4a9e      	ldr	r2, [pc, #632]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001caa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001cae:	3304      	adds	r3, #4
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	e9d3 4500 	ldrd	r4, r5, [r3]
          (((Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 1] * b_gamma +
 8001cb8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	4a99      	ldr	r2, [pc, #612]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cca:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001cce:	f7fe fc93 	bl	80005f8 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4690      	mov	r8, r2
 8001cd8:	4699      	mov	r9, r3
             Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0] * rtb_Sum_o) +
 8001cda:	4a92      	ldr	r2, [pc, #584]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001cdc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cea:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8001cee:	f7fe fc83 	bl	80005f8 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
          (((Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 1] * b_gamma +
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	f7fe fac7 	bl	800028c <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4690      	mov	r8, r2
 8001d04:	4699      	mov	r9, r3
            Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 2] * rtb_NProdOut) +
 8001d06:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	4a85      	ldr	r2, [pc, #532]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001d0e:	3304      	adds	r3, #4
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d18:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8001d1c:	f7fe fc6c 	bl	80005f8 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
             Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0] * rtb_Sum_o) +
 8001d24:	4640      	mov	r0, r8
 8001d26:	4649      	mov	r1, r9
 8001d28:	f7fe fab0 	bl	800028c <__adddf3>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4690      	mov	r8, r2
 8001d32:	4699      	mov	r9, r3
           Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 3] * Theta_tmp_1) /
 8001d34:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001d38:	3303      	adds	r3, #3
 8001d3a:	4a7a      	ldr	r2, [pc, #488]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4413      	add	r3, r2
 8001d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d46:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001d4a:	f7fe fc55 	bl	80005f8 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
            Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 2] * rtb_NProdOut) +
 8001d52:	4640      	mov	r0, r8
 8001d54:	4649      	mov	r1, r9
 8001d56:	f7fe fa99 	bl	800028c <__adddf3>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
           Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_0 + 3] * Theta_tmp_1) /
 8001d62:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8001d66:	f7fe fd71 	bl	800084c <__aeabi_ddiv>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
        tmp[tmp_1] = Motor_Control_STR_DW.UnitDelay1_DSTATE[tmp_1] -
 8001d6e:	4620      	mov	r0, r4
 8001d70:	4629      	mov	r1, r5
 8001d72:	f7fe fa89 	bl	8000288 <__aeabi_dsub>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	f507 71f4 	add.w	r1, r7, #488	@ 0x1e8
 8001d7e:	f5a1 70b4 	sub.w	r0, r1, #360	@ 0x168
 8001d82:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 8001d86:	00c9      	lsls	r1, r1, #3
 8001d88:	4401      	add	r1, r0
 8001d8a:	e9c1 2300 	strd	r2, r3, [r1]
      for (PHI_tmp = 0; PHI_tmp < 4; PHI_tmp++) {
 8001d8e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001d92:	3301      	adds	r3, #1
 8001d94:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8001d98:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	f77f af77 	ble.w	8001c90 <Motor_Control_STR_step+0xca8>
    for (i = 0; i < 4; i++) {
 8001da2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001da6:	3301      	adds	r3, #1
 8001da8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001dac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	f77f af2a 	ble.w	8001c0a <Motor_Control_STR_step+0xc22>
    for (i = 0; i < 16; i++) {
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001dbc:	e01c      	b.n	8001df8 <Motor_Control_STR_step+0xe10>
      Motor_Control_STR_DW.UnitDelay1_DSTATE[i] = a * tmp[i];
 8001dbe:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001dc2:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8001dc6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dd2:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8001dd6:	f7fe fc0f 	bl	80005f8 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4851      	ldr	r0, [pc, #324]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001de0:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8001de4:	3104      	adds	r1, #4
 8001de6:	00c9      	lsls	r1, r1, #3
 8001de8:	4401      	add	r1, r0
 8001dea:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 16; i++) {
 8001dee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001df2:	3301      	adds	r3, #1
 8001df4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001df8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	ddde      	ble.n	8001dbe <Motor_Control_STR_step+0xdd6>
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] = Motor_Control_STR_B.Theta[0];
 8001e00:	4b49      	ldr	r3, [pc, #292]	@ (8001f28 <Motor_Control_STR_step+0xf40>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	4947      	ldr	r1, [pc, #284]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e08:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[1] = Motor_Control_STR_B.Theta[1];
 8001e0c:	4b46      	ldr	r3, [pc, #280]	@ (8001f28 <Motor_Control_STR_step+0xf40>)
 8001e0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e12:	4944      	ldr	r1, [pc, #272]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e14:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[2] = Motor_Control_STR_B.Theta[2];
 8001e18:	4b43      	ldr	r3, [pc, #268]	@ (8001f28 <Motor_Control_STR_step+0xf40>)
 8001e1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e1e:	4941      	ldr	r1, [pc, #260]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e20:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    Motor_Control_STR_DW.UnitDelay_DSTATE_j[3] = Motor_Control_STR_B.Theta[3];
 8001e24:	4b40      	ldr	r3, [pc, #256]	@ (8001f28 <Motor_Control_STR_step+0xf40>)
 8001e26:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e2a:	493e      	ldr	r1, [pc, #248]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e2c:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
    Motor_Control_STR_DW.UnitDelay_DSTATE_c = rtb_Sum;
 8001e30:	493c      	ldr	r1, [pc, #240]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e32:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8001e36:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
    Motor_Control_STR_DW.UnitDelay2_DSTATE_a = rtb_UnitDelay_j;
 8001e3a:	493a      	ldr	r1, [pc, #232]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e3c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8001e40:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
    Motor_Control_STR_DW.UnitDelay3_DSTATE_i = q2;
 8001e44:	4937      	ldr	r1, [pc, #220]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e46:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001e4a:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    Motor_Control_STR_DW.UnitDelay1_DSTATE_j = rtb_UnitDelay3_b;
 8001e4e:	4935      	ldr	r1, [pc, #212]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e50:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8001e54:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    break;
 8001e58:	e05d      	b.n	8001f16 <Motor_Control_STR_step+0xf2e>
    rtb_Sum = (Setpoint - Sensor) * K1 + (Sensor -
 8001e5a:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <Motor_Control_STR_step+0xf44>)
 8001e5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e60:	4b33      	ldr	r3, [pc, #204]	@ (8001f30 <Motor_Control_STR_step+0xf48>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	f7fe fa0f 	bl	8000288 <__aeabi_dsub>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	4b30      	ldr	r3, [pc, #192]	@ (8001f34 <Motor_Control_STR_step+0xf4c>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbbe 	bl	80005f8 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <Motor_Control_STR_step+0xf48>)
 8001e86:	e9d3 0100 	ldrd	r0, r1, [r3]
      Motor_Control_STR_DW.UnitDelay_DSTATE) * K2;
 8001e8a:	4b26      	ldr	r3, [pc, #152]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Sum = (Setpoint - Sensor) * K1 + (Sensor -
 8001e90:	f7fe f9fa 	bl	8000288 <__aeabi_dsub>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
      Motor_Control_STR_DW.UnitDelay_DSTATE) * K2;
 8001e9c:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <Motor_Control_STR_step+0xf50>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fba9 	bl	80005f8 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
    rtb_Sum = (Setpoint - Sensor) * K1 + (Sensor -
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe f9ed 	bl	800028c <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
    if (rtb_Sum > 100.0) {
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <Motor_Control_STR_step+0xf54>)
 8001ec0:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8001ec4:	f7fe fe28 	bl	8000b18 <__aeabi_dcmpgt>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d006      	beq.n	8001edc <Motor_Control_STR_step+0xef4>
      pwm3 = 100.0;
 8001ece:	491c      	ldr	r1, [pc, #112]	@ (8001f40 <Motor_Control_STR_step+0xf58>)
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <Motor_Control_STR_step+0xf54>)
 8001ed6:	e9c1 2300 	strd	r2, r3, [r1]
 8001eda:	e015      	b.n	8001f08 <Motor_Control_STR_step+0xf20>
    } else if (rtb_Sum < -100.0) {
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <Motor_Control_STR_step+0xf5c>)
 8001ee2:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8001ee6:	f7fe fdf9 	bl	8000adc <__aeabi_dcmplt>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <Motor_Control_STR_step+0xf16>
      pwm3 = -100.0;
 8001ef0:	4913      	ldr	r1, [pc, #76]	@ (8001f40 <Motor_Control_STR_step+0xf58>)
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <Motor_Control_STR_step+0xf5c>)
 8001ef8:	e9c1 2300 	strd	r2, r3, [r1]
 8001efc:	e004      	b.n	8001f08 <Motor_Control_STR_step+0xf20>
      pwm3 = rtb_Sum;
 8001efe:	4910      	ldr	r1, [pc, #64]	@ (8001f40 <Motor_Control_STR_step+0xf58>)
 8001f00:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8001f04:	e9c1 2300 	strd	r2, r3, [r1]
    Motor_Control_STR_DW.UnitDelay_DSTATE = Sensor;
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <Motor_Control_STR_step+0xf48>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	4905      	ldr	r1, [pc, #20]	@ (8001f24 <Motor_Control_STR_step+0xf3c>)
 8001f10:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8001f14:	bf00      	nop
}
 8001f16:	bf00      	nop
 8001f18:	f507 77f4 	add.w	r7, r7, #488	@ 0x1e8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f22:	bf00      	nop
 8001f24:	20000278 	.word	0x20000278
 8001f28:	20000258 	.word	0x20000258
 8001f2c:	20000208 	.word	0x20000208
 8001f30:	200001f8 	.word	0x200001f8
 8001f34:	20000228 	.word	0x20000228
 8001f38:	20000230 	.word	0x20000230
 8001f3c:	40590000 	.word	0x40590000
 8001f40:	20000240 	.word	0x20000240
 8001f44:	c0590000 	.word	0xc0590000

08001f48 <Motor_Control_STR_initialize>:

/* Model initialize function */
void Motor_Control_STR_initialize(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8001f4c:	2008      	movs	r0, #8
 8001f4e:	f000 f973 	bl	8002238 <rt_InitInfAndNaN>

  /* initialize error status */
  rtmSetErrorStatus(Motor_Control_STR_M, (NULL));
 8001f52:	4b43      	ldr	r3, [pc, #268]	@ (8002060 <Motor_Control_STR_initialize+0x118>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

  /* block I/O */
  (void) memset(((void *) &Motor_Control_STR_B), 0,
 8001f58:	2220      	movs	r2, #32
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4841      	ldr	r0, [pc, #260]	@ (8002064 <Motor_Control_STR_initialize+0x11c>)
 8001f5e:	f006 fb56 	bl	800860e <memset>
                sizeof(B_Motor_Control_STR_T));

  /* exported global signals */
  pwm3 = 0.0;
 8001f62:	4941      	ldr	r1, [pc, #260]	@ (8002068 <Motor_Control_STR_initialize+0x120>)
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9c1 2300 	strd	r2, r3, [r1]
  pwm2 = 0.0;
 8001f70:	493e      	ldr	r1, [pc, #248]	@ (800206c <Motor_Control_STR_initialize+0x124>)
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	e9c1 2300 	strd	r2, r3, [r1]
  pwm1 = 0.0;
 8001f7e:	493c      	ldr	r1, [pc, #240]	@ (8002070 <Motor_Control_STR_initialize+0x128>)
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9c1 2300 	strd	r2, r3, [r1]

  /* states (dwork) */
  (void) memset((void *)&Motor_Control_STR_DW, 0,
 8001f8c:	22f0      	movs	r2, #240	@ 0xf0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4838      	ldr	r0, [pc, #224]	@ (8002074 <Motor_Control_STR_initialize+0x12c>)
 8001f92:	f006 fb3c 	bl	800860e <memset>
                sizeof(DW_Motor_Control_STR_T));

  /* external inputs */
  Sensor = 0.0;
 8001f96:	4938      	ldr	r1, [pc, #224]	@ (8002078 <Motor_Control_STR_initialize+0x130>)
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	e9c1 2300 	strd	r2, r3, [r1]
  Case = 0.0;
 8001fa4:	4935      	ldr	r1, [pc, #212]	@ (800207c <Motor_Control_STR_initialize+0x134>)
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	e9c1 2300 	strd	r2, r3, [r1]
  Setpoint = 0.0;
 8001fb2:	4933      	ldr	r1, [pc, #204]	@ (8002080 <Motor_Control_STR_initialize+0x138>)
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9c1 2300 	strd	r2, r3, [r1]
  Kp = 0.0;
 8001fc0:	4930      	ldr	r1, [pc, #192]	@ (8002084 <Motor_Control_STR_initialize+0x13c>)
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	e9c1 2300 	strd	r2, r3, [r1]
  Ki = 0.0;
 8001fce:	492e      	ldr	r1, [pc, #184]	@ (8002088 <Motor_Control_STR_initialize+0x140>)
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9c1 2300 	strd	r2, r3, [r1]
  Kd = 0.0;
 8001fdc:	492b      	ldr	r1, [pc, #172]	@ (800208c <Motor_Control_STR_initialize+0x144>)
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	e9c1 2300 	strd	r2, r3, [r1]
  K1 = 0.0;
 8001fea:	4929      	ldr	r1, [pc, #164]	@ (8002090 <Motor_Control_STR_initialize+0x148>)
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9c1 2300 	strd	r2, r3, [r1]
  K2 = 0.0;
 8001ff8:	4926      	ldr	r1, [pc, #152]	@ (8002094 <Motor_Control_STR_initialize+0x14c>)
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	e9c1 2300 	strd	r2, r3, [r1]
  lamda = 0.0;
 8002006:	4924      	ldr	r1, [pc, #144]	@ (8002098 <Motor_Control_STR_initialize+0x150>)
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9c1 2300 	strd	r2, r3, [r1]

  /* SystemInitialize for IfAction SubSystem: '<Root>/Switch Case Action Subsystem' */
  /* InitializeConditions for UnitDelay: '<S5>/Unit Delay1' */
  memcpy(&Motor_Control_STR_DW.UnitDelay1_DSTATE[0],
 8002014:	2280      	movs	r2, #128	@ 0x80
 8002016:	4921      	ldr	r1, [pc, #132]	@ (800209c <Motor_Control_STR_initialize+0x154>)
 8002018:	4821      	ldr	r0, [pc, #132]	@ (80020a0 <Motor_Control_STR_initialize+0x158>)
 800201a:	f006 fc08 	bl	800882e <memcpy>
         &Motor_Control_STR_ConstP.UnitDelay1_InitialCondition[0], sizeof(real_T)
         << 4U);

  /* InitializeConditions for UnitDelay: '<S5>/Unit Delay' */
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[0] = -1.0;
 800201e:	4915      	ldr	r1, [pc, #84]	@ (8002074 <Motor_Control_STR_initialize+0x12c>)
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <Motor_Control_STR_initialize+0x15c>)
 8002026:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[1] = 0.1;
 800202a:	4912      	ldr	r1, [pc, #72]	@ (8002074 <Motor_Control_STR_initialize+0x12c>)
 800202c:	a30a      	add	r3, pc, #40	@ (adr r3, 8002058 <Motor_Control_STR_initialize+0x110>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[2] = 0.1;
 8002036:	490f      	ldr	r1, [pc, #60]	@ (8002074 <Motor_Control_STR_initialize+0x12c>)
 8002038:	a307      	add	r3, pc, #28	@ (adr r3, 8002058 <Motor_Control_STR_initialize+0x110>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
  Motor_Control_STR_DW.UnitDelay_DSTATE_j[3] = 1.0;
 8002042:	490c      	ldr	r1, [pc, #48]	@ (8002074 <Motor_Control_STR_initialize+0x12c>)
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b17      	ldr	r3, [pc, #92]	@ (80020a8 <Motor_Control_STR_initialize+0x160>)
 800204a:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8

  /* End of SystemInitialize for SubSystem: '<Root>/Switch Case Action Subsystem' */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	f3af 8000 	nop.w
 8002058:	9999999a 	.word	0x9999999a
 800205c:	3fb99999 	.word	0x3fb99999
 8002060:	20000368 	.word	0x20000368
 8002064:	20000258 	.word	0x20000258
 8002068:	20000240 	.word	0x20000240
 800206c:	20000248 	.word	0x20000248
 8002070:	20000250 	.word	0x20000250
 8002074:	20000278 	.word	0x20000278
 8002078:	200001f8 	.word	0x200001f8
 800207c:	20000200 	.word	0x20000200
 8002080:	20000208 	.word	0x20000208
 8002084:	20000210 	.word	0x20000210
 8002088:	20000218 	.word	0x20000218
 800208c:	20000220 	.word	0x20000220
 8002090:	20000228 	.word	0x20000228
 8002094:	20000230 	.word	0x20000230
 8002098:	20000238 	.word	0x20000238
 800209c:	0800b5e0 	.word	0x0800b5e0
 80020a0:	20000298 	.word	0x20000298
 80020a4:	bff00000 	.word	0xbff00000
 80020a8:	3ff00000 	.word	0x3ff00000

080020ac <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80020b2:	2340      	movs	r3, #64	@ 0x40
 80020b4:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d10b      	bne.n	80020e0 <rtGetInf+0x34>
    inf = rtGetInfF();
 80020c8:	f000 f820 	bl	800210c <rtGetInfF>
 80020cc:	ee10 3a10 	vmov	r3, s0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa39 	bl	8000548 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80020de:	e007      	b.n	80020f0 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <rtGetInf+0x5c>)
 80020e2:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 80020e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 80020f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80020f8:	eeb0 0a47 	vmov.f32	s0, s14
 80020fc:	eef0 0a67 	vmov.f32	s1, s15
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	7ff00000 	.word	0x7ff00000

0800210c <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8002112:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8002116:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	ee07 3a90 	vmov	s15, r3
}
 800211e:	eeb0 0a67 	vmov.f32	s0, s15
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002132:	2340      	movs	r3, #64	@ 0x40
 8002134:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b20      	cmp	r3, #32
 8002146:	d10b      	bne.n	8002160 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 8002148:	f000 f820 	bl	800218c <rtGetMinusInfF>
 800214c:	ee10 3a10 	vmov	r3, s0
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f9f9 	bl	8000548 <__aeabi_f2d>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800215e:	e007      	b.n	8002170 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <rtGetMinusInf+0x5c>)
 8002162:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8002164:	2300      	movs	r3, #0
 8002166:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 8002168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800216c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 8002170:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002174:	ec43 2b17 	vmov	d7, r2, r3
}
 8002178:	eeb0 0a47 	vmov.f32	s0, s14
 800217c:	eef0 0a67 	vmov.f32	s1, s15
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	fff00000 	.word	0xfff00000

0800218c <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <rtGetMinusInfF+0x20>)
 8002194:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	ee07 3a90 	vmov	s15, r3
}
 800219c:	eeb0 0a67 	vmov.f32	s0, s15
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	ff800000 	.word	0xff800000

080021b0 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80021b6:	2340      	movs	r3, #64	@ 0x40
 80021b8:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d10b      	bne.n	80021e4 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 80021cc:	f000 f820 	bl	8002210 <rtGetNaNF>
 80021d0:	ee10 3a10 	vmov	r3, s0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f9b7 	bl	8000548 <__aeabi_f2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80021e2:	e007      	b.n	80021f4 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 80021e4:	4b09      	ldr	r3, [pc, #36]	@ (800220c <rtGetNaN+0x5c>)
 80021e6:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 80021ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 80021f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021f8:	ec43 2b17 	vmov	d7, r2, r3
}
 80021fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002200:	eef0 0a67 	vmov.f32	s1, s15
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	fff80000 	.word	0xfff80000

08002210 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <rtGetNaNF+0x24>)
 800221e:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	ee07 3a90 	vmov	s15, r3
}
 8002226:	eeb0 0a67 	vmov.f32	s0, s15
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	ffc00000 	.word	0xffc00000

08002238 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8002240:	f7ff ffb6 	bl	80021b0 <rtGetNaN>
 8002244:	eeb0 7a40 	vmov.f32	s14, s0
 8002248:	eef0 7a60 	vmov.f32	s15, s1
 800224c:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <rt_InitInfAndNaN+0x70>)
 800224e:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 8002252:	f7ff ffdd 	bl	8002210 <rtGetNaNF>
 8002256:	eef0 7a40 	vmov.f32	s15, s0
 800225a:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <rt_InitInfAndNaN+0x74>)
 800225c:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 8002260:	f7ff ff24 	bl	80020ac <rtGetInf>
 8002264:	eeb0 7a40 	vmov.f32	s14, s0
 8002268:	eef0 7a60 	vmov.f32	s15, s1
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <rt_InitInfAndNaN+0x78>)
 800226e:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 8002272:	f7ff ff4b 	bl	800210c <rtGetInfF>
 8002276:	eef0 7a40 	vmov.f32	s15, s0
 800227a:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <rt_InitInfAndNaN+0x7c>)
 800227c:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 8002280:	f7ff ff54 	bl	800212c <rtGetMinusInf>
 8002284:	eeb0 7a40 	vmov.f32	s14, s0
 8002288:	eef0 7a60 	vmov.f32	s15, s1
 800228c:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <rt_InitInfAndNaN+0x80>)
 800228e:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 8002292:	f7ff ff7b 	bl	800218c <rtGetMinusInfF>
 8002296:	eef0 7a40 	vmov.f32	s15, s0
 800229a:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <rt_InitInfAndNaN+0x84>)
 800229c:	edc3 7a00 	vstr	s15, [r3]
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000380 	.word	0x20000380
 80022ac:	20000390 	.word	0x20000390
 80022b0:	20000370 	.word	0x20000370
 80022b4:	20000388 	.word	0x20000388
 80022b8:	20000378 	.word	0x20000378
 80022bc:	2000038c 	.word	0x2000038c

080022c0 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 80022ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <rtIsInf+0x40>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022d4:	f7fe fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <rtIsInf+0x32>
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <rtIsInf+0x44>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022e8:	f7fe fbee 	bl	8000ac8 <__aeabi_dcmpeq>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <rtIsInf+0x36>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <rtIsInf+0x38>
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000370 	.word	0x20000370
 8002304:	20000378 	.word	0x20000378

08002308 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002316:	2340      	movs	r3, #64	@ 0x40
 8002318:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b20      	cmp	r3, #32
 800231e:	d10b      	bne.n	8002338 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 8002320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002324:	f7fe fc60 	bl	8000be8 <__aeabi_d2f>
 8002328:	4603      	mov	r3, r0
 800232a:	ee00 3a10 	vmov	s0, r3
 800232e:	f000 f821 	bl	8002374 <rtIsNaNF>
 8002332:	4603      	mov	r3, r0
 8002334:	75fb      	strb	r3, [r7, #23]
 8002336:	e015      	b.n	8002364 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 8002338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800233c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <rtIsNaN+0x68>)
 8002344:	4013      	ands	r3, r2
 8002346:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <rtIsNaN+0x68>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d109      	bne.n	8002360 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 8002356:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <rtIsNaN+0x5a>
 8002360:	2300      	movs	r3, #0
 8002362:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002364:	7dfb      	ldrb	r3, [r7, #23]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	7ff00000 	.word	0x7ff00000

08002374 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 43ff 	and.w	r3, r3, #2139095040	@ 0x7f800000
 8002388:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800238c:	d106      	bne.n	800239c <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <rtIsNaNF+0x28>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <rtIsNaNF+0x2a>
 800239c:	2300      	movs	r3, #0
 800239e:	b2db      	uxtb	r3, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <rt_OneStep>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void rt_OneStep(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  static boolean_T OverrunFlag = false;

  /* Disable interrupts here */

  /* Check for overrun */
  if (OverrunFlag) {
 80023b0:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <rt_OneStep+0x28>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <rt_OneStep+0x16>
    rtmSetErrorStatus(Motor_Control_STR_M, "Overrun");
 80023b8:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <rt_OneStep+0x2c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <rt_OneStep+0x30>)
 80023be:	601a      	str	r2, [r3, #0]
    return;
 80023c0:	e007      	b.n	80023d2 <rt_OneStep+0x26>
  }

  OverrunFlag = true;
 80023c2:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <rt_OneStep+0x28>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
  /* Save FPU context here (if necessary) */
  /* Re-enable timer or interrupt here */
  /* Set model inputs here */

  /* Step the model */
  Motor_Control_STR_step();
 80023c8:	f7fe fe0e 	bl	8000fe8 <Motor_Control_STR_step>

  /* Get model outputs here */

  /* Indicate task complete */
  OverrunFlag = false;
 80023cc:	4b01      	ldr	r3, [pc, #4]	@ (80023d4 <rt_OneStep+0x28>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]

  /* Disable interrupts here */
  /* Restore FPU context here (if necessary) */
  /* Enable interrupts here */
}
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000586 	.word	0x20000586
 80023d8:	0800b5d8 	.word	0x0800b5d8
 80023dc:	0800b5a8 	.word	0x0800b5a8

080023e0 <float_to_string>:

void float_to_string(float number, char *buffer) {
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	@ 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80023ea:	6038      	str	r0, [r7, #0]
    int int_part = (int)number;
 80023ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f4:	ee17 3a90 	vmov	r3, s15
 80023f8:	61fb      	str	r3, [r7, #28]
    int decimal_part = (int)((number - int_part) * 100);
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002404:	ed97 7a01 	vldr	s14, [r7, #4]
 8002408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800254c <float_to_string+0x16c>
 8002410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002418:	ee17 3a90 	vmov	r3, s15
 800241c:	61bb      	str	r3, [r7, #24]
    if (decimal_part < 0) decimal_part = -decimal_part;
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	da02      	bge.n	800242a <float_to_string+0x4a>
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	425b      	negs	r3, r3
 8002428:	61bb      	str	r3, [r7, #24]

    int index = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]

    if (number < 0) {
 800242e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243a:	d50a      	bpl.n	8002452 <float_to_string+0x72>
        buffer[index++] = '-';
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	617a      	str	r2, [r7, #20]
 8002442:	461a      	mov	r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4413      	add	r3, r2
 8002448:	222d      	movs	r2, #45	@ 0x2d
 800244a:	701a      	strb	r2, [r3, #0]
        int_part = -int_part;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	425b      	negs	r3, r3
 8002450:	61fb      	str	r3, [r7, #28]
    }

    int temp = int_part;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	613b      	str	r3, [r7, #16]
    int len = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
    while (temp > 0) {
 800245a:	e00a      	b.n	8002472 <float_to_string+0x92>
        temp /= 10;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4a3c      	ldr	r2, [pc, #240]	@ (8002550 <float_to_string+0x170>)
 8002460:	fb82 1203 	smull	r1, r2, r2, r3
 8002464:	1092      	asrs	r2, r2, #2
 8002466:	17db      	asrs	r3, r3, #31
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	613b      	str	r3, [r7, #16]
        len++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3301      	adds	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
    while (temp > 0) {
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	dcf1      	bgt.n	800245c <float_to_string+0x7c>
    }

    for (int i = len - 1; i >= 0; i--) {
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3b01      	subs	r3, #1
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	e020      	b.n	80024c2 <float_to_string+0xe2>
        buffer[index + i] = (int_part % 10) + '0';
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	4b33      	ldr	r3, [pc, #204]	@ (8002550 <float_to_string+0x170>)
 8002484:	fb83 1302 	smull	r1, r3, r3, r2
 8002488:	1099      	asrs	r1, r3, #2
 800248a:	17d3      	asrs	r3, r2, #31
 800248c:	1ac9      	subs	r1, r1, r3
 800248e:	460b      	mov	r3, r1
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	1ad1      	subs	r1, r2, r3
 8002498:	b2ca      	uxtb	r2, r1
 800249a:	6979      	ldr	r1, [r7, #20]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	440b      	add	r3, r1
 80024a0:	4619      	mov	r1, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	440b      	add	r3, r1
 80024a6:	3230      	adds	r2, #48	@ 0x30
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]
        int_part /= 10;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <float_to_string+0x170>)
 80024b0:	fb82 1203 	smull	r1, r2, r2, r3
 80024b4:	1092      	asrs	r2, r2, #2
 80024b6:	17db      	asrs	r3, r3, #31
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	61fb      	str	r3, [r7, #28]
    for (int i = len - 1; i >= 0; i--) {
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3b01      	subs	r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	dadb      	bge.n	8002480 <float_to_string+0xa0>
    }
    index += len > 0 ? len : 1;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	bfb8      	it	lt
 80024ce:	2301      	movlt	r3, #1
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4413      	add	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
    buffer[index++] = '.';
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	617a      	str	r2, [r7, #20]
 80024dc:	461a      	mov	r2, r3
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	222e      	movs	r2, #46	@ 0x2e
 80024e4:	701a      	strb	r2, [r3, #0]

    buffer[index++] = (decimal_part / 10) + '0';
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4a19      	ldr	r2, [pc, #100]	@ (8002550 <float_to_string+0x170>)
 80024ea:	fb82 1203 	smull	r1, r2, r2, r3
 80024ee:	1092      	asrs	r2, r2, #2
 80024f0:	17db      	asrs	r3, r3, #31
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	1c59      	adds	r1, r3, #1
 80024fa:	6179      	str	r1, [r7, #20]
 80024fc:	4619      	mov	r1, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	440b      	add	r3, r1
 8002502:	3230      	adds	r2, #48	@ 0x30
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]
    buffer[index++] = (decimal_part % 10) + '0';
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <float_to_string+0x170>)
 800250c:	fb83 1302 	smull	r1, r3, r3, r2
 8002510:	1099      	asrs	r1, r3, #2
 8002512:	17d3      	asrs	r3, r2, #31
 8002514:	1ac9      	subs	r1, r1, r3
 8002516:	460b      	mov	r3, r1
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	1ad1      	subs	r1, r2, r3
 8002520:	b2ca      	uxtb	r2, r1
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	1c59      	adds	r1, r3, #1
 8002526:	6179      	str	r1, [r7, #20]
 8002528:	4619      	mov	r1, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	440b      	add	r3, r1
 800252e:	3230      	adds	r2, #48	@ 0x30
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
    buffer[index] = '\0';
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
}
 800253e:	bf00      	nop
 8002540:	3724      	adds	r7, #36	@ 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	42c80000 	.word	0x42c80000
 8002550:	66666667 	.word	0x66666667

08002554 <process_buffers>:

void process_buffers(float dposition, float sp, char *cposition, char *csp, char *result) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	ed87 0a05 	vstr	s0, [r7, #20]
 800255e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
    if (dposition != 0) {
 8002568:	edd7 7a05 	vldr	s15, [r7, #20]
 800256c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d005      	beq.n	8002582 <process_buffers+0x2e>
        float_to_string(dposition, cposition);
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	ed97 0a05 	vldr	s0, [r7, #20]
 800257c:	f7ff ff30 	bl	80023e0 <float_to_string>
 8002580:	e005      	b.n	800258e <process_buffers+0x3a>
    } else {
        strcpy(cposition, "0");
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4924      	ldr	r1, [pc, #144]	@ (8002618 <process_buffers+0xc4>)
 8002586:	461a      	mov	r2, r3
 8002588:	460b      	mov	r3, r1
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	8013      	strh	r3, [r2, #0]
    }

    if (sp != 0) {
 800258e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002592:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	d005      	beq.n	80025a8 <process_buffers+0x54>
        float_to_string(sp, csp);
 800259c:	68b8      	ldr	r0, [r7, #8]
 800259e:	ed97 0a04 	vldr	s0, [r7, #16]
 80025a2:	f7ff ff1d 	bl	80023e0 <float_to_string>
 80025a6:	e005      	b.n	80025b4 <process_buffers+0x60>
    } else {
        strcpy(csp, "0");
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	491b      	ldr	r1, [pc, #108]	@ (8002618 <process_buffers+0xc4>)
 80025ac:	461a      	mov	r2, r3
 80025ae:	460b      	mov	r3, r1
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	8013      	strh	r3, [r2, #0]
    }

    result[0] = '\0';
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
    strcat(result, "Y, ");
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fd fe58 	bl	8000270 <strlen>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a14      	ldr	r2, [pc, #80]	@ (800261c <process_buffers+0xc8>)
 80025ca:	6810      	ldr	r0, [r2, #0]
 80025cc:	6018      	str	r0, [r3, #0]
    strcat(result, cposition);
 80025ce:	68f9      	ldr	r1, [r7, #12]
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f006 f824 	bl	800861e <strcat>
    strcat(result, ", ");
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fd fe4a 	bl	8000270 <strlen>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002620 <process_buffers+0xcc>)
 80025e6:	8811      	ldrh	r1, [r2, #0]
 80025e8:	7892      	ldrb	r2, [r2, #2]
 80025ea:	8019      	strh	r1, [r3, #0]
 80025ec:	709a      	strb	r2, [r3, #2]
    strcat(result, csp);
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f006 f814 	bl	800861e <strcat>
    strcat(result, "\r\n");
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fd fe3a 	bl	8000270 <strlen>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	4a07      	ldr	r2, [pc, #28]	@ (8002624 <process_buffers+0xd0>)
 8002606:	8811      	ldrh	r1, [r2, #0]
 8002608:	7892      	ldrb	r2, [r2, #2]
 800260a:	8019      	strh	r1, [r3, #0]
 800260c:	709a      	strb	r2, [r3, #2]
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	0800b5b0 	.word	0x0800b5b0
 800261c:	0800b5b4 	.word	0x0800b5b4
 8002620:	0800b5b8 	.word	0x0800b5b8
 8002624:	0800b5bc 	.word	0x0800b5bc

08002628 <StrCompare>:

bool StrCompare(char *pBuff, uint8_t *pSample, uint8_t nSize)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	4613      	mov	r3, r2
 8002634:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < nSize; i++)
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e00e      	b.n	800265a <StrCompare+0x32>
    {
        if(pBuff[i] != pSample[i])
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	781a      	ldrb	r2, [r3, #0]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	440b      	add	r3, r1
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <StrCompare+0x2c>
        {
            return false;
 8002650:	2300      	movs	r3, #0
 8002652:	e007      	b.n	8002664 <StrCompare+0x3c>
    for (int i = 0; i < nSize; i++)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3301      	adds	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	429a      	cmp	r2, r3
 8002660:	dbec      	blt.n	800263c <StrCompare+0x14>
        }
    }
    return true;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <process_uart_string>:

void process_uart_string(char *uart_string, UART_Data *data) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
    char *token;

    memset(data, 0, sizeof(UART_Data));
 800267a:	2214      	movs	r2, #20
 800267c:	2100      	movs	r1, #0
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	f005 ffc5 	bl	800860e <memset>

    token = strtok(uart_string, " ");
 8002684:	4984      	ldr	r1, [pc, #528]	@ (8002898 <process_uart_string+0x228>)
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f005 fffe 	bl	8008688 <strtok>
 800268c:	60b8      	str	r0, [r7, #8]
    if (token) {
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <process_uart_string+0x36>
        strncpy(data->type, token, 3);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2203      	movs	r2, #3
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	4618      	mov	r0, r3
 800269c:	f005 ffe0 	bl	8008660 <strncpy>
        data->type[3] = '\0';
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	70da      	strb	r2, [r3, #3]
    }

    token = strtok(NULL, " ");
 80026a6:	497c      	ldr	r1, [pc, #496]	@ (8002898 <process_uart_string+0x228>)
 80026a8:	2000      	movs	r0, #0
 80026aa:	f005 ffed 	bl	8008688 <strtok>
 80026ae:	60b8      	str	r0, [r7, #8]
    if (token) data->sp = atof(token);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <process_uart_string+0x5e>
 80026b6:	68b8      	ldr	r0, [r7, #8]
 80026b8:	f004 fa00 	bl	8006abc <atof>
 80026bc:	ec53 2b10 	vmov	r2, r3, d0
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fe fa90 	bl	8000be8 <__aeabi_d2f>
 80026c8:	4602      	mov	r2, r0
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	605a      	str	r2, [r3, #4]

    if (StrCompare(data->type, (uint8_t *)"PID", 3)) {
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2203      	movs	r2, #3
 80026d2:	4972      	ldr	r1, [pc, #456]	@ (800289c <process_uart_string+0x22c>)
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ffa7 	bl	8002628 <StrCompare>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d043      	beq.n	8002768 <process_uart_string+0xf8>
        Case = 1.0;
 80026e0:	496f      	ldr	r1, [pc, #444]	@ (80028a0 <process_uart_string+0x230>)
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	4b6f      	ldr	r3, [pc, #444]	@ (80028a4 <process_uart_string+0x234>)
 80026e8:	e9c1 2300 	strd	r2, r3, [r1]
        token = strtok(NULL, " ");
 80026ec:	496a      	ldr	r1, [pc, #424]	@ (8002898 <process_uart_string+0x228>)
 80026ee:	2000      	movs	r0, #0
 80026f0:	f005 ffca 	bl	8008688 <strtok>
 80026f4:	60b8      	str	r0, [r7, #8]
        if (token) data->value1 = atof(token);
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <process_uart_string+0xa4>
 80026fc:	68b8      	ldr	r0, [r7, #8]
 80026fe:	f004 f9dd 	bl	8006abc <atof>
 8002702:	ec53 2b10 	vmov	r2, r3, d0
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f7fe fa6d 	bl	8000be8 <__aeabi_d2f>
 800270e:	4602      	mov	r2, r0
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	609a      	str	r2, [r3, #8]

        token = strtok(NULL, " ");
 8002714:	4960      	ldr	r1, [pc, #384]	@ (8002898 <process_uart_string+0x228>)
 8002716:	2000      	movs	r0, #0
 8002718:	f005 ffb6 	bl	8008688 <strtok>
 800271c:	60b8      	str	r0, [r7, #8]
        if (token) data->value2 = atof(token);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <process_uart_string+0xcc>
 8002724:	68b8      	ldr	r0, [r7, #8]
 8002726:	f004 f9c9 	bl	8006abc <atof>
 800272a:	ec53 2b10 	vmov	r2, r3, d0
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe fa59 	bl	8000be8 <__aeabi_d2f>
 8002736:	4602      	mov	r2, r0
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	60da      	str	r2, [r3, #12]

        token = strtok(NULL, " ");
 800273c:	4956      	ldr	r1, [pc, #344]	@ (8002898 <process_uart_string+0x228>)
 800273e:	2000      	movs	r0, #0
 8002740:	f005 ffa2 	bl	8008688 <strtok>
 8002744:	60b8      	str	r0, [r7, #8]
        if (token) data->value3 = atof(token);
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a0 	beq.w	800288e <process_uart_string+0x21e>
 800274e:	68b8      	ldr	r0, [r7, #8]
 8002750:	f004 f9b4 	bl	8006abc <atof>
 8002754:	ec53 2b10 	vmov	r2, r3, d0
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe fa44 	bl	8000be8 <__aeabi_d2f>
 8002760:	4602      	mov	r2, r0
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	611a      	str	r2, [r3, #16]
           Case = 0;
           dposition = 0;
           icounter = 0;
           MOTOR_CONTROL_REGISTER = 0;
       }
}
 8002766:	e092      	b.n	800288e <process_uart_string+0x21e>
    else if (StrCompare(data->type, (uint8_t *)"STR", 3)) {
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2203      	movs	r2, #3
 800276c:	494e      	ldr	r1, [pc, #312]	@ (80028a8 <process_uart_string+0x238>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff5a 	bl	8002628 <StrCompare>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <process_uart_string+0x11a>
        Case = 2.0;
 800277a:	4949      	ldr	r1, [pc, #292]	@ (80028a0 <process_uart_string+0x230>)
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002784:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002788:	e081      	b.n	800288e <process_uart_string+0x21e>
    else if (StrCompare(data->type, (uint8_t *)"LQR", 3)) {
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2203      	movs	r2, #3
 800278e:	4947      	ldr	r1, [pc, #284]	@ (80028ac <process_uart_string+0x23c>)
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff49 	bl	8002628 <StrCompare>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02e      	beq.n	80027fa <process_uart_string+0x18a>
        Case = 3.0;
 800279c:	4940      	ldr	r1, [pc, #256]	@ (80028a0 <process_uart_string+0x230>)
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	4b43      	ldr	r3, [pc, #268]	@ (80028b0 <process_uart_string+0x240>)
 80027a4:	e9c1 2300 	strd	r2, r3, [r1]
        token = strtok(NULL, " ");
 80027a8:	493b      	ldr	r1, [pc, #236]	@ (8002898 <process_uart_string+0x228>)
 80027aa:	2000      	movs	r0, #0
 80027ac:	f005 ff6c 	bl	8008688 <strtok>
 80027b0:	60b8      	str	r0, [r7, #8]
        if (token) data->value1 = atof(token);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00b      	beq.n	80027d0 <process_uart_string+0x160>
 80027b8:	68b8      	ldr	r0, [r7, #8]
 80027ba:	f004 f97f 	bl	8006abc <atof>
 80027be:	ec53 2b10 	vmov	r2, r3, d0
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f7fe fa0f 	bl	8000be8 <__aeabi_d2f>
 80027ca:	4602      	mov	r2, r0
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	609a      	str	r2, [r3, #8]
        token = strtok(NULL, " ");
 80027d0:	4931      	ldr	r1, [pc, #196]	@ (8002898 <process_uart_string+0x228>)
 80027d2:	2000      	movs	r0, #0
 80027d4:	f005 ff58 	bl	8008688 <strtok>
 80027d8:	60b8      	str	r0, [r7, #8]
        if (token) data->value2 = atof(token);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d056      	beq.n	800288e <process_uart_string+0x21e>
 80027e0:	68b8      	ldr	r0, [r7, #8]
 80027e2:	f004 f96b 	bl	8006abc <atof>
 80027e6:	ec53 2b10 	vmov	r2, r3, d0
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7fe f9fb 	bl	8000be8 <__aeabi_d2f>
 80027f2:	4602      	mov	r2, r0
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	60da      	str	r2, [r3, #12]
}
 80027f8:	e049      	b.n	800288e <process_uart_string+0x21e>
    else if (StrCompare(data->type, (uint8_t *)"C", 1)) {
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2201      	movs	r2, #1
 80027fe:	492d      	ldr	r1, [pc, #180]	@ (80028b4 <process_uart_string+0x244>)
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff11 	bl	8002628 <StrCompare>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d025      	beq.n	8002858 <process_uart_string+0x1e8>
        int count = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
        process_buffers(0.0, 0.0, cposition, csp, txbuf);
 8002810:	4a29      	ldr	r2, [pc, #164]	@ (80028b8 <process_uart_string+0x248>)
 8002812:	492a      	ldr	r1, [pc, #168]	@ (80028bc <process_uart_string+0x24c>)
 8002814:	482a      	ldr	r0, [pc, #168]	@ (80028c0 <process_uart_string+0x250>)
 8002816:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 80028c4 <process_uart_string+0x254>
 800281a:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80028c4 <process_uart_string+0x254>
 800281e:	f7ff fe99 	bl	8002554 <process_buffers>
        while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002822:	e002      	b.n	800282a <process_uart_string+0x1ba>
            count++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3301      	adds	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
        while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 800282a:	4a23      	ldr	r2, [pc, #140]	@ (80028b8 <process_uart_string+0x248>)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <process_uart_string+0x1d2>
 8002836:	4a20      	ldr	r2, [pc, #128]	@ (80028b8 <process_uart_string+0x248>)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b0a      	cmp	r3, #10
 8002840:	d1f0      	bne.n	8002824 <process_uart_string+0x1b4>
        HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count + 1), HAL_MAX_DELAY);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	b29b      	uxth	r3, r3
 8002846:	3301      	adds	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	491a      	ldr	r1, [pc, #104]	@ (80028b8 <process_uart_string+0x248>)
 8002850:	481d      	ldr	r0, [pc, #116]	@ (80028c8 <process_uart_string+0x258>)
 8002852:	f003 f92d 	bl	8005ab0 <HAL_UART_Transmit>
}
 8002856:	e01a      	b.n	800288e <process_uart_string+0x21e>
    else if (StrCompare(data->type, (uint8_t *)"STO", 3)) {
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2203      	movs	r2, #3
 800285c:	491b      	ldr	r1, [pc, #108]	@ (80028cc <process_uart_string+0x25c>)
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fee2 	bl	8002628 <StrCompare>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d011      	beq.n	800288e <process_uart_string+0x21e>
           Case = 0;
 800286a:	490d      	ldr	r1, [pc, #52]	@ (80028a0 <process_uart_string+0x230>)
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	e9c1 2300 	strd	r2, r3, [r1]
           dposition = 0;
 8002878:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <process_uart_string+0x260>)
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
           icounter = 0;
 8002880:	4b14      	ldr	r3, [pc, #80]	@ (80028d4 <process_uart_string+0x264>)
 8002882:	2200      	movs	r2, #0
 8002884:	801a      	strh	r2, [r3, #0]
           MOTOR_CONTROL_REGISTER = 0;
 8002886:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <process_uart_string+0x268>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2200      	movs	r2, #0
 800288c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	0800b5c0 	.word	0x0800b5c0
 800289c:	0800b5c4 	.word	0x0800b5c4
 80028a0:	20000200 	.word	0x20000200
 80028a4:	3ff00000 	.word	0x3ff00000
 80028a8:	0800b5c8 	.word	0x0800b5c8
 80028ac:	0800b5cc 	.word	0x0800b5cc
 80028b0:	40080000 	.word	0x40080000
 80028b4:	0800b5d0 	.word	0x0800b5d0
 80028b8:	20000554 	.word	0x20000554
 80028bc:	20000548 	.word	0x20000548
 80028c0:	2000053c 	.word	0x2000053c
 80028c4:	00000000 	.word	0x00000000
 80028c8:	2000046c 	.word	0x2000046c
 80028cc:	0800b5d4 	.word	0x0800b5d4
 80028d0:	20000534 	.word	0x20000534
 80028d4:	20000530 	.word	0x20000530
 80028d8:	200003dc 	.word	0x200003dc

080028dc <motor_set_duty>:


void motor_set_duty(int32_t iduty)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    if (iduty >= 0)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	db10      	blt.n	800290c <motor_set_duty+0x30>
    {
    	MOTOR_CONTROL_REGISTER = iduty;
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <motor_set_duty+0x60>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	635a      	str	r2, [r3, #52]	@ 0x34
    	HAL_GPIO_WritePin(DIR_Port, FOWARD_Pin, 1);
 80028f2:	2201      	movs	r2, #1
 80028f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028f8:	4811      	ldr	r0, [pc, #68]	@ (8002940 <motor_set_duty+0x64>)
 80028fa:	f001 fa7d 	bl	8003df8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(DIR_Port, BACKWARD_Pin, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002904:	480e      	ldr	r0, [pc, #56]	@ (8002940 <motor_set_duty+0x64>)
 8002906:	f001 fa77 	bl	8003df8 <HAL_GPIO_WritePin>
    {
    	MOTOR_CONTROL_REGISTER = abs(iduty);
    	HAL_GPIO_WritePin(DIR_Port, FOWARD_Pin, 0);
    	HAL_GPIO_WritePin(DIR_Port, BACKWARD_Pin, 1);
    }
}
 800290a:	e013      	b.n	8002934 <motor_set_duty+0x58>
    	MOTOR_CONTROL_REGISTER = abs(iduty);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002912:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <motor_set_duty+0x60>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	635a      	str	r2, [r3, #52]	@ 0x34
    	HAL_GPIO_WritePin(DIR_Port, FOWARD_Pin, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002922:	4807      	ldr	r0, [pc, #28]	@ (8002940 <motor_set_duty+0x64>)
 8002924:	f001 fa68 	bl	8003df8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(DIR_Port, BACKWARD_Pin, 1);
 8002928:	2201      	movs	r2, #1
 800292a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800292e:	4804      	ldr	r0, [pc, #16]	@ (8002940 <motor_set_duty+0x64>)
 8002930:	f001 fa62 	bl	8003df8 <HAL_GPIO_WritePin>
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200003dc 	.word	0x200003dc
 8002940:	40020400 	.word	0x40020400

08002944 <motor_read_encoder>:

void motor_read_encoder(float *dpos, TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]

    icounter = (int16_t)htim->Instance->CNT;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	b21a      	sxth	r2, r3
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <motor_read_encoder+0x58>)
 8002958:	801a      	strh	r2, [r3, #0]
    *dpos += ((float)icounter / (float)PPR) * NUMBER_OF_DEGREES_ON_A_CIRCLE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	ed93 7a00 	vldr	s14, [r3]
 8002960:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <motor_read_encoder+0x58>)
 8002962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800296e:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 80029a0 <motor_read_encoder+0x5c>
 8002972:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002976:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80029a4 <motor_read_encoder+0x60>
 800297a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800297e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	edc3 7a00 	vstr	s15, [r3]
    htim->Instance->CNT = 0;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2200      	movs	r2, #0
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	20000530 	.word	0x20000530
 80029a0:	4639a000 	.word	0x4639a000
 80029a4:	43b40000 	.word	0x43b40000

080029a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029ac:	f000 fe72 	bl	8003694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029b0:	f000 f83a 	bl	8002a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b4:	f000 f9ca 	bl	8002d4c <MX_GPIO_Init>
  MX_UART4_Init();
 80029b8:	f000 f99e 	bl	8002cf8 <MX_UART4_Init>
  MX_TIM1_Init();
 80029bc:	f000 f89e 	bl	8002afc <MX_TIM1_Init>
  MX_TIM3_Init();
 80029c0:	f000 f8f4 	bl	8002bac <MX_TIM3_Init>
  MX_TIM4_Init();
 80029c4:	f000 f94a 	bl	8002c5c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&INTERUPT_TIMER);
 80029c8:	4811      	ldr	r0, [pc, #68]	@ (8002a10 <main+0x68>)
 80029ca:	f001 ff17 	bl	80047fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&ECODER_TIMER, TIM_CHANNEL_1);
 80029ce:	2100      	movs	r1, #0
 80029d0:	4810      	ldr	r0, [pc, #64]	@ (8002a14 <main+0x6c>)
 80029d2:	f002 f941 	bl	8004c58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&ECODER_TIMER, TIM_CHANNEL_2);
 80029d6:	2104      	movs	r1, #4
 80029d8:	480e      	ldr	r0, [pc, #56]	@ (8002a14 <main+0x6c>)
 80029da:	f002 f93d 	bl	8004c58 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&PWM_TIMER, TIM_CHANNEL_1);
 80029de:	2100      	movs	r1, #0
 80029e0:	480d      	ldr	r0, [pc, #52]	@ (8002a18 <main+0x70>)
 80029e2:	f001 ffcb 	bl	800497c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&UART_COM, &urx, 1);
 80029e6:	2201      	movs	r2, #1
 80029e8:	490c      	ldr	r1, [pc, #48]	@ (8002a1c <main+0x74>)
 80029ea:	480d      	ldr	r0, [pc, #52]	@ (8002a20 <main+0x78>)
 80029ec:	f003 f8eb 	bl	8005bc6 <HAL_UART_Receive_IT>
  Motor_Control_STR_initialize();
 80029f0:	f7ff faaa 	bl	8001f48 <Motor_Control_STR_initialize>

  lamda = 0.999;
 80029f4:	490b      	ldr	r1, [pc, #44]	@ (8002a24 <main+0x7c>)
 80029f6:	a304      	add	r3, pc, #16	@ (adr r3, 8002a08 <main+0x60>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <main+0x58>
 8002a04:	f3af 8000 	nop.w
 8002a08:	d916872b 	.word	0xd916872b
 8002a0c:	3feff7ce 	.word	0x3feff7ce
 8002a10:	20000424 	.word	0x20000424
 8002a14:	20000394 	.word	0x20000394
 8002a18:	200003dc 	.word	0x200003dc
 8002a1c:	200004c9 	.word	0x200004c9
 8002a20:	2000046c 	.word	0x2000046c
 8002a24:	20000238 	.word	0x20000238

08002a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b094      	sub	sp, #80	@ 0x50
 8002a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a2e:	f107 0320 	add.w	r3, r7, #32
 8002a32:	2230      	movs	r2, #48	@ 0x30
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f005 fde9 	bl	800860e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	4b28      	ldr	r3, [pc, #160]	@ (8002af4 <SystemClock_Config+0xcc>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	4a27      	ldr	r2, [pc, #156]	@ (8002af4 <SystemClock_Config+0xcc>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a5c:	4b25      	ldr	r3, [pc, #148]	@ (8002af4 <SystemClock_Config+0xcc>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	4b22      	ldr	r3, [pc, #136]	@ (8002af8 <SystemClock_Config+0xd0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a21      	ldr	r2, [pc, #132]	@ (8002af8 <SystemClock_Config+0xd0>)
 8002a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b1f      	ldr	r3, [pc, #124]	@ (8002af8 <SystemClock_Config+0xd0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a84:	2302      	movs	r3, #2
 8002a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a90:	2302      	movs	r3, #2
 8002a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a94:	2300      	movs	r3, #0
 8002a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002a9c:	2354      	movs	r3, #84	@ 0x54
 8002a9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa8:	f107 0320 	add.w	r3, r7, #32
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 f9bd 	bl	8003e2c <HAL_RCC_OscConfig>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ab8:	f000 fb5c 	bl	8003174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002abc:	230f      	movs	r3, #15
 8002abe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002acc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ad2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	2102      	movs	r1, #2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 fc1e 	bl	800431c <HAL_RCC_ClockConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ae6:	f000 fb45 	bl	8003174 <Error_Handler>
  }
}
 8002aea:	bf00      	nop
 8002aec:	3750      	adds	r7, #80	@ 0x50
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40007000 	.word	0x40007000

08002afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	@ 0x30
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2224      	movs	r2, #36	@ 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f005 fd7f 	bl	800860e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b18:	4b22      	ldr	r3, [pc, #136]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b1a:	4a23      	ldr	r2, [pc, #140]	@ (8002ba8 <MX_TIM1_Init+0xac>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b44:	2303      	movs	r3, #3
 8002b46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480d      	ldr	r0, [pc, #52]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b70:	f001 ffcc 	bl	8004b0c <HAL_TIM_Encoder_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002b7a:	f000 fafb 	bl	8003174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4806      	ldr	r0, [pc, #24]	@ (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b8c:	f002 feb0 	bl	80058f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002b96:	f000 faed 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	3730      	adds	r7, #48	@ 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000394 	.word	0x20000394
 8002ba8:	40010000 	.word	0x40010000

08002bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	@ 0x28
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb2:	f107 0320 	add.w	r3, r7, #32
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	611a      	str	r2, [r3, #16]
 8002bca:	615a      	str	r2, [r3, #20]
 8002bcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bce:	4b21      	ldr	r3, [pc, #132]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002bd0:	4a21      	ldr	r2, [pc, #132]	@ (8002c58 <MX_TIM3_Init+0xac>)
 8002bd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 54;
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002bd6:	2236      	movs	r2, #54	@ 0x36
 8002bd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bda:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002be0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002be2:	2264      	movs	r2, #100	@ 0x64
 8002be4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bf2:	4818      	ldr	r0, [pc, #96]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002bf4:	f001 fe72 	bl	80048dc <HAL_TIM_PWM_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002bfe:	f000 fab9 	bl	8003174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c0a:	f107 0320 	add.w	r3, r7, #32
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4810      	ldr	r0, [pc, #64]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002c12:	f002 fe6d 	bl	80058f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002c1c:	f000 faaa 	bl	8003174 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c20:	2360      	movs	r3, #96	@ 0x60
 8002c22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	2200      	movs	r2, #0
 8002c34:	4619      	mov	r1, r3
 8002c36:	4807      	ldr	r0, [pc, #28]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002c38:	f002 f98c 	bl	8004f54 <HAL_TIM_PWM_ConfigChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002c42:	f000 fa97 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c46:	4803      	ldr	r0, [pc, #12]	@ (8002c54 <MX_TIM3_Init+0xa8>)
 8002c48:	f000 fb54 	bl	80032f4 <HAL_TIM_MspPostInit>

}
 8002c4c:	bf00      	nop
 8002c4e:	3728      	adds	r7, #40	@ 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	200003dc 	.word	0x200003dc
 8002c58:	40000400 	.word	0x40000400

08002c5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c70:	463b      	mov	r3, r7
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c78:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf4 <MX_TIM4_Init+0x98>)
 8002c7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c80:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002c84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 8002c8c:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c8e:	2231      	movs	r2, #49	@ 0x31
 8002c90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c92:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c98:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c9e:	4814      	ldr	r0, [pc, #80]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002ca0:	f001 fd5c 	bl	800475c <HAL_TIM_Base_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002caa:	f000 fa63 	bl	8003174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002cb4:	f107 0308 	add.w	r3, r7, #8
 8002cb8:	4619      	mov	r1, r3
 8002cba:	480d      	ldr	r0, [pc, #52]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002cbc:	f002 fa0c 	bl	80050d8 <HAL_TIM_ConfigClockSource>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002cc6:	f000 fa55 	bl	8003174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4806      	ldr	r0, [pc, #24]	@ (8002cf0 <MX_TIM4_Init+0x94>)
 8002cd8:	f002 fe0a 	bl	80058f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002ce2:	f000 fa47 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000424 	.word	0x20000424
 8002cf4:	40000800 	.word	0x40000800

08002cf8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	@ (8002d48 <MX_UART4_Init+0x50>)
 8002d00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002d02:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d10:	4b0c      	ldr	r3, [pc, #48]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d1c:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d1e:	220c      	movs	r2, #12
 8002d20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d22:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d28:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d2e:	4805      	ldr	r0, [pc, #20]	@ (8002d44 <MX_UART4_Init+0x4c>)
 8002d30:	f002 fe6e 	bl	8005a10 <HAL_UART_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002d3a:	f000 fa1b 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000046c 	.word	0x2000046c
 8002d48:	40004c00 	.word	0x40004c00

08002d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	@ 0x28
 8002d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
 8002d60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	4a26      	ldr	r2, [pc, #152]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d72:	4b24      	ldr	r3, [pc, #144]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4b20      	ldr	r3, [pc, #128]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	4a1f      	ldr	r2, [pc, #124]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	4b19      	ldr	r3, [pc, #100]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a18      	ldr	r2, [pc, #96]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002da4:	f043 0310 	orr.w	r3, r3, #16
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	4b16      	ldr	r3, [pc, #88]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	4b12      	ldr	r3, [pc, #72]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	4a11      	ldr	r2, [pc, #68]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <MX_GPIO_Init+0xb8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002dd8:	480b      	ldr	r0, [pc, #44]	@ (8002e08 <MX_GPIO_Init+0xbc>)
 8002dda:	f001 f80d 	bl	8003df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002dde:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	4619      	mov	r1, r3
 8002df6:	4804      	ldr	r0, [pc, #16]	@ (8002e08 <MX_GPIO_Init+0xbc>)
 8002df8:	f000 fe62 	bl	8003ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dfc:	bf00      	nop
 8002dfe:	3728      	adds	r7, #40	@ 0x28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020400 	.word	0x40020400

08002e0c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Timer In
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if (htim->Instance == INTERUPT_TIMER_INSTANCE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4ba0      	ldr	r3, [pc, #640]	@ (800309c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	f040 8139 	bne.w	8003094 <HAL_TIM_PeriodElapsedCallback+0x288>
  {
	  int count = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]


	 // Read encoder
	  motor_read_encoder(&dposition, &ECODER_TIMER);
 8002e26:	499e      	ldr	r1, [pc, #632]	@ (80030a0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002e28:	489e      	ldr	r0, [pc, #632]	@ (80030a4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002e2a:	f7ff fd8b 	bl	8002944 <motor_read_encoder>
	 // switch case
	  switch ((int)Case) {
 8002e2e:	4b9e      	ldr	r3, [pc, #632]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f7fd fe8e 	bl	8000b58 <__aeabi_d2iz>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	f000 80c4 	beq.w	8002fcc <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	f300 8124 	bgt.w	8003092 <HAL_TIM_PeriodElapsedCallback+0x286>
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d002      	beq.n	8002e54 <HAL_TIM_PeriodElapsedCallback+0x48>
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d06d      	beq.n	8002f2e <HAL_TIM_PeriodElapsedCallback+0x122>
	        	  	        count++;
	        	  	    }
	        	  HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
	              break;
	          default:
	              break;
 8002e52:	e11e      	b.n	8003092 <HAL_TIM_PeriodElapsedCallback+0x286>
	        	  Setpoint = t_data.sp;
 8002e54:	4b95      	ldr	r3, [pc, #596]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb75 	bl	8000548 <__aeabi_f2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4993      	ldr	r1, [pc, #588]	@ (80030b0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002e64:	e9c1 2300 	strd	r2, r3, [r1]
	        	  Sensor = dposition;
 8002e68:	4b8e      	ldr	r3, [pc, #568]	@ (80030a4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd fb6b 	bl	8000548 <__aeabi_f2d>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	498f      	ldr	r1, [pc, #572]	@ (80030b4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002e78:	e9c1 2300 	strd	r2, r3, [r1]
	              Kp = t_data.value1;
 8002e7c:	4b8b      	ldr	r3, [pc, #556]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fb61 	bl	8000548 <__aeabi_f2d>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	498b      	ldr	r1, [pc, #556]	@ (80030b8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002e8c:	e9c1 2300 	strd	r2, r3, [r1]
	              Ki = t_data.value2;
 8002e90:	4b86      	ldr	r3, [pc, #536]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd fb57 	bl	8000548 <__aeabi_f2d>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4987      	ldr	r1, [pc, #540]	@ (80030bc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002ea0:	e9c1 2300 	strd	r2, r3, [r1]
	              Kd = t_data.value3;
 8002ea4:	4b81      	ldr	r3, [pc, #516]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fb4d 	bl	8000548 <__aeabi_f2d>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4983      	ldr	r1, [pc, #524]	@ (80030c0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002eb4:	e9c1 2300 	strd	r2, r3, [r1]
	              rt_OneStep();
 8002eb8:	f7ff fa78 	bl	80023ac <rt_OneStep>
	              iu = (int)pwm1;
 8002ebc:	4b81      	ldr	r3, [pc, #516]	@ (80030c4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f7fd fe47 	bl	8000b58 <__aeabi_d2iz>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4a7e      	ldr	r2, [pc, #504]	@ (80030c8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002ece:	6013      	str	r3, [r2, #0]
	              motor_set_duty(iu);
 8002ed0:	4b7d      	ldr	r3, [pc, #500]	@ (80030c8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fd01 	bl	80028dc <motor_set_duty>
	        	  process_buffers(dposition, t_data.sp, cposition, csp, txbuf);
 8002eda:	4b72      	ldr	r3, [pc, #456]	@ (80030a4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	4b72      	ldr	r3, [pc, #456]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002ee2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ee6:	4a79      	ldr	r2, [pc, #484]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002ee8:	4979      	ldr	r1, [pc, #484]	@ (80030d0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002eea:	487a      	ldr	r0, [pc, #488]	@ (80030d4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002eec:	eef0 0a47 	vmov.f32	s1, s14
 8002ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef4:	f7ff fb2e 	bl	8002554 <process_buffers>
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002ef8:	e002      	b.n	8002f00 <HAL_TIM_PeriodElapsedCallback+0xf4>
	        	  	        count++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3301      	adds	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002f00:	4a72      	ldr	r2, [pc, #456]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4413      	add	r3, r2
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8002f0c:	4a6f      	ldr	r2, [pc, #444]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4413      	add	r3, r2
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b0a      	cmp	r3, #10
 8002f16:	d1f0      	bne.n	8002efa <HAL_TIM_PeriodElapsedCallback+0xee>
	        	  HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
 8002f24:	4969      	ldr	r1, [pc, #420]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002f26:	486c      	ldr	r0, [pc, #432]	@ (80030d8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002f28:	f002 fdc2 	bl	8005ab0 <HAL_UART_Transmit>
	              break;
 8002f2c:	e0b2      	b.n	8003094 <HAL_TIM_PeriodElapsedCallback+0x288>
	        	  Setpoint = t_data.sp;
 8002f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fb08 	bl	8000548 <__aeabi_f2d>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	495c      	ldr	r1, [pc, #368]	@ (80030b0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002f3e:	e9c1 2300 	strd	r2, r3, [r1]
	        	  Sensor = dposition;
 8002f42:	4b58      	ldr	r3, [pc, #352]	@ (80030a4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fafe 	bl	8000548 <__aeabi_f2d>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4958      	ldr	r1, [pc, #352]	@ (80030b4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002f52:	e9c1 2300 	strd	r2, r3, [r1]
	        	  rt_OneStep();
 8002f56:	f7ff fa29 	bl	80023ac <rt_OneStep>
	        	  iu = (int)pwm2;
 8002f5a:	4b60      	ldr	r3, [pc, #384]	@ (80030dc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7fd fdf8 	bl	8000b58 <__aeabi_d2iz>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4a57      	ldr	r2, [pc, #348]	@ (80030c8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002f6c:	6013      	str	r3, [r2, #0]
	        	  motor_set_duty(iu);
 8002f6e:	4b56      	ldr	r3, [pc, #344]	@ (80030c8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fcb2 	bl	80028dc <motor_set_duty>
	        	  process_buffers(dposition, t_data.sp, cposition, csp, txbuf);
 8002f78:	4b4a      	ldr	r3, [pc, #296]	@ (80030a4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002f80:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f84:	4a51      	ldr	r2, [pc, #324]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002f86:	4952      	ldr	r1, [pc, #328]	@ (80030d0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002f88:	4852      	ldr	r0, [pc, #328]	@ (80030d4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002f8a:	eef0 0a47 	vmov.f32	s1, s14
 8002f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f92:	f7ff fadf 	bl	8002554 <process_buffers>
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002f96:	e002      	b.n	8002f9e <HAL_TIM_PeriodElapsedCallback+0x192>
	        	  	        count++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8002f9e:	4a4b      	ldr	r2, [pc, #300]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8002faa:	4a48      	ldr	r2, [pc, #288]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b0a      	cmp	r3, #10
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_TIM_PeriodElapsedCallback+0x18c>
	        	  HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc2:	4942      	ldr	r1, [pc, #264]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002fc4:	4844      	ldr	r0, [pc, #272]	@ (80030d8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002fc6:	f002 fd73 	bl	8005ab0 <HAL_UART_Transmit>
	              break;
 8002fca:	e063      	b.n	8003094 <HAL_TIM_PeriodElapsedCallback+0x288>
	        	  Setpoint = t_data.sp;
 8002fcc:	4b37      	ldr	r3, [pc, #220]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fab9 	bl	8000548 <__aeabi_f2d>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4935      	ldr	r1, [pc, #212]	@ (80030b0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002fdc:	e9c1 2300 	strd	r2, r3, [r1]
	        	  Sensor = dposition;
 8002fe0:	4b30      	ldr	r3, [pc, #192]	@ (80030a4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd faaf 	bl	8000548 <__aeabi_f2d>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4931      	ldr	r1, [pc, #196]	@ (80030b4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002ff0:	e9c1 2300 	strd	r2, r3, [r1]
	              K1 = t_data.value1;
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd faa5 	bl	8000548 <__aeabi_f2d>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4937      	ldr	r1, [pc, #220]	@ (80030e0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8003004:	e9c1 2300 	strd	r2, r3, [r1]
	              K2 = t_data.value2;
 8003008:	4b28      	ldr	r3, [pc, #160]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fa9b 	bl	8000548 <__aeabi_f2d>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4933      	ldr	r1, [pc, #204]	@ (80030e4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003018:	e9c1 2300 	strd	r2, r3, [r1]
	        	  rt_OneStep();
 800301c:	f7ff f9c6 	bl	80023ac <rt_OneStep>
	        	  iu = (int)pwm3;
 8003020:	4b31      	ldr	r3, [pc, #196]	@ (80030e8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	f7fd fd95 	bl	8000b58 <__aeabi_d2iz>
 800302e:	4603      	mov	r3, r0
 8003030:	4a25      	ldr	r2, [pc, #148]	@ (80030c8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003032:	6013      	str	r3, [r2, #0]
	        	  motor_set_duty(iu);
 8003034:	4b24      	ldr	r3, [pc, #144]	@ (80030c8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fc4f 	bl	80028dc <motor_set_duty>
	        	  process_buffers(dposition, t_data.sp, cposition, csp, txbuf);
 800303e:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003046:	ed93 7a01 	vldr	s14, [r3, #4]
 800304a:	4a20      	ldr	r2, [pc, #128]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800304c:	4920      	ldr	r1, [pc, #128]	@ (80030d0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800304e:	4821      	ldr	r0, [pc, #132]	@ (80030d4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003050:	eef0 0a47 	vmov.f32	s1, s14
 8003054:	eeb0 0a67 	vmov.f32	s0, s15
 8003058:	f7ff fa7c 	bl	8002554 <process_buffers>
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 800305c:	e002      	b.n	8003064 <HAL_TIM_PeriodElapsedCallback+0x258>
	        	  	        count++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3301      	adds	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
	        	  while (txbuf[count] != '\0' && txbuf[count] != '\n') {
 8003064:	4a19      	ldr	r2, [pc, #100]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_TIM_PeriodElapsedCallback+0x270>
 8003070:	4a16      	ldr	r2, [pc, #88]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b0a      	cmp	r3, #10
 800307a:	d1f0      	bne.n	800305e <HAL_TIM_PeriodElapsedCallback+0x252>
	        	  HAL_UART_Transmit(&UART_COM, (uint8_t*)txbuf, (count+1), HAL_MAX_DELAY);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	b29b      	uxth	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	f04f 33ff 	mov.w	r3, #4294967295
 8003088:	4910      	ldr	r1, [pc, #64]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800308a:	4813      	ldr	r0, [pc, #76]	@ (80030d8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800308c:	f002 fd10 	bl	8005ab0 <HAL_UART_Transmit>
	              break;
 8003090:	e000      	b.n	8003094 <HAL_TIM_PeriodElapsedCallback+0x288>
	              break;
 8003092:	bf00      	nop
	      }

  }
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000424 	.word	0x20000424
 80030a0:	20000394 	.word	0x20000394
 80030a4:	20000534 	.word	0x20000534
 80030a8:	20000200 	.word	0x20000200
 80030ac:	200004b4 	.word	0x200004b4
 80030b0:	20000208 	.word	0x20000208
 80030b4:	200001f8 	.word	0x200001f8
 80030b8:	20000210 	.word	0x20000210
 80030bc:	20000218 	.word	0x20000218
 80030c0:	20000220 	.word	0x20000220
 80030c4:	20000250 	.word	0x20000250
 80030c8:	20000538 	.word	0x20000538
 80030cc:	20000554 	.word	0x20000554
 80030d0:	20000548 	.word	0x20000548
 80030d4:	2000053c 	.word	0x2000053c
 80030d8:	2000046c 	.word	0x2000046c
 80030dc:	20000248 	.word	0x20000248
 80030e0:	20000228 	.word	0x20000228
 80030e4:	20000230 	.word	0x20000230
 80030e8:	20000240 	.word	0x20000240

080030ec <HAL_UART_RxCpltCallback>:

// UART Interupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART_COM_INSTANCE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <HAL_UART_RxCpltCallback+0x74>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d125      	bne.n	800314c <HAL_UART_RxCpltCallback+0x60>
	{
		if (urx != '\n')
 8003100:	4b18      	ldr	r3, [pc, #96]	@ (8003164 <HAL_UART_RxCpltCallback+0x78>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b0a      	cmp	r3, #10
 8003106:	d00d      	beq.n	8003124 <HAL_UART_RxCpltCallback+0x38>
		{
			urx_buff[urx_index] = urx;
 8003108:	4b17      	ldr	r3, [pc, #92]	@ (8003168 <HAL_UART_RxCpltCallback+0x7c>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <HAL_UART_RxCpltCallback+0x78>)
 8003110:	7819      	ldrb	r1, [r3, #0]
 8003112:	4b16      	ldr	r3, [pc, #88]	@ (800316c <HAL_UART_RxCpltCallback+0x80>)
 8003114:	5499      	strb	r1, [r3, r2]
			urx_index++;
 8003116:	4b14      	ldr	r3, [pc, #80]	@ (8003168 <HAL_UART_RxCpltCallback+0x7c>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b12      	ldr	r3, [pc, #72]	@ (8003168 <HAL_UART_RxCpltCallback+0x7c>)
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e013      	b.n	800314c <HAL_UART_RxCpltCallback+0x60>
		}
		else
		{
			urx_buff[urx_index] = urx;
 8003124:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <HAL_UART_RxCpltCallback+0x7c>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <HAL_UART_RxCpltCallback+0x78>)
 800312c:	7819      	ldrb	r1, [r3, #0]
 800312e:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <HAL_UART_RxCpltCallback+0x80>)
 8003130:	5499      	strb	r1, [r3, r2]
			urx_index++;
 8003132:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <HAL_UART_RxCpltCallback+0x7c>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	b2da      	uxtb	r2, r3
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_UART_RxCpltCallback+0x7c>)
 800313c:	701a      	strb	r2, [r3, #0]
			process_uart_string((char *)urx_buff, &t_data);
 800313e:	490c      	ldr	r1, [pc, #48]	@ (8003170 <HAL_UART_RxCpltCallback+0x84>)
 8003140:	480a      	ldr	r0, [pc, #40]	@ (800316c <HAL_UART_RxCpltCallback+0x80>)
 8003142:	f7ff fa95 	bl	8002670 <process_uart_string>
			urx_index = 0;
 8003146:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <HAL_UART_RxCpltCallback+0x7c>)
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&UART_COM, &urx, 1);
 800314c:	2201      	movs	r2, #1
 800314e:	4905      	ldr	r1, [pc, #20]	@ (8003164 <HAL_UART_RxCpltCallback+0x78>)
 8003150:	4803      	ldr	r0, [pc, #12]	@ (8003160 <HAL_UART_RxCpltCallback+0x74>)
 8003152:	f002 fd38 	bl	8005bc6 <HAL_UART_Receive_IT>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	2000046c 	.word	0x2000046c
 8003164:	200004c9 	.word	0x200004c9
 8003168:	200004c8 	.word	0x200004c8
 800316c:	200004cc 	.word	0x200004cc
 8003170:	200004b4 	.word	0x200004b4

08003174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003178:	b672      	cpsid	i
}
 800317a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <Error_Handler+0x8>

08003180 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <HAL_MspInit+0x4c>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	4a0f      	ldr	r2, [pc, #60]	@ (80031cc <HAL_MspInit+0x4c>)
 8003190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003194:	6453      	str	r3, [r2, #68]	@ 0x44
 8003196:	4b0d      	ldr	r3, [pc, #52]	@ (80031cc <HAL_MspInit+0x4c>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	4b09      	ldr	r3, [pc, #36]	@ (80031cc <HAL_MspInit+0x4c>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	4a08      	ldr	r2, [pc, #32]	@ (80031cc <HAL_MspInit+0x4c>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b2:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <HAL_MspInit+0x4c>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800

080031d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	@ 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a19      	ldr	r2, [pc, #100]	@ (8003254 <HAL_TIM_Encoder_MspInit+0x84>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d12c      	bne.n	800324c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	4b18      	ldr	r3, [pc, #96]	@ (8003258 <HAL_TIM_Encoder_MspInit+0x88>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	4a17      	ldr	r2, [pc, #92]	@ (8003258 <HAL_TIM_Encoder_MspInit+0x88>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6453      	str	r3, [r2, #68]	@ 0x44
 8003202:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <HAL_TIM_Encoder_MspInit+0x88>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <HAL_TIM_Encoder_MspInit+0x88>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	4a10      	ldr	r2, [pc, #64]	@ (8003258 <HAL_TIM_Encoder_MspInit+0x88>)
 8003218:	f043 0310 	orr.w	r3, r3, #16
 800321c:	6313      	str	r3, [r2, #48]	@ 0x30
 800321e:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <HAL_TIM_Encoder_MspInit+0x88>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800322a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800322e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	2300      	movs	r3, #0
 800323a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800323c:	2301      	movs	r3, #1
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	4619      	mov	r1, r3
 8003246:	4805      	ldr	r0, [pc, #20]	@ (800325c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003248:	f000 fc3a 	bl	8003ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800324c:	bf00      	nop
 800324e:	3728      	adds	r7, #40	@ 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40010000 	.word	0x40010000
 8003258:	40023800 	.word	0x40023800
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0b      	ldr	r2, [pc, #44]	@ (800329c <HAL_TIM_PWM_MspInit+0x3c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d10d      	bne.n	800328e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <HAL_TIM_PWM_MspInit+0x40>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	4a09      	ldr	r2, [pc, #36]	@ (80032a0 <HAL_TIM_PWM_MspInit+0x40>)
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	6413      	str	r3, [r2, #64]	@ 0x40
 8003282:	4b07      	ldr	r3, [pc, #28]	@ (80032a0 <HAL_TIM_PWM_MspInit+0x40>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40000400 	.word	0x40000400
 80032a0:	40023800 	.word	0x40023800

080032a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0e      	ldr	r2, [pc, #56]	@ (80032ec <HAL_TIM_Base_MspInit+0x48>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d115      	bne.n	80032e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	4b0d      	ldr	r3, [pc, #52]	@ (80032f0 <HAL_TIM_Base_MspInit+0x4c>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	4a0c      	ldr	r2, [pc, #48]	@ (80032f0 <HAL_TIM_Base_MspInit+0x4c>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c6:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <HAL_TIM_Base_MspInit+0x4c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2101      	movs	r1, #1
 80032d6:	201e      	movs	r0, #30
 80032d8:	f000 fb29 	bl	800392e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032dc:	201e      	movs	r0, #30
 80032de:	f000 fb42 	bl	8003966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80032e2:	bf00      	nop
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40023800 	.word	0x40023800

080032f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 030c 	add.w	r3, r7, #12
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a12      	ldr	r2, [pc, #72]	@ (800335c <HAL_TIM_MspPostInit+0x68>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d11d      	bne.n	8003352 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	4b11      	ldr	r3, [pc, #68]	@ (8003360 <HAL_TIM_MspPostInit+0x6c>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	4a10      	ldr	r2, [pc, #64]	@ (8003360 <HAL_TIM_MspPostInit+0x6c>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6313      	str	r3, [r2, #48]	@ 0x30
 8003326:	4b0e      	ldr	r3, [pc, #56]	@ (8003360 <HAL_TIM_MspPostInit+0x6c>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003332:	2340      	movs	r3, #64	@ 0x40
 8003334:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003342:	2302      	movs	r3, #2
 8003344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003346:	f107 030c 	add.w	r3, r7, #12
 800334a:	4619      	mov	r1, r3
 800334c:	4805      	ldr	r0, [pc, #20]	@ (8003364 <HAL_TIM_MspPostInit+0x70>)
 800334e:	f000 fbb7 	bl	8003ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003352:	bf00      	nop
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40000400 	.word	0x40000400
 8003360:	40023800 	.word	0x40023800
 8003364:	40020000 	.word	0x40020000

08003368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	@ 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1d      	ldr	r2, [pc, #116]	@ (80033fc <HAL_UART_MspInit+0x94>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d133      	bne.n	80033f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	4b1c      	ldr	r3, [pc, #112]	@ (8003400 <HAL_UART_MspInit+0x98>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	4a1b      	ldr	r2, [pc, #108]	@ (8003400 <HAL_UART_MspInit+0x98>)
 8003394:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003398:	6413      	str	r3, [r2, #64]	@ 0x40
 800339a:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <HAL_UART_MspInit+0x98>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <HAL_UART_MspInit+0x98>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	4a14      	ldr	r2, [pc, #80]	@ (8003400 <HAL_UART_MspInit+0x98>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <HAL_UART_MspInit+0x98>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033c2:	2303      	movs	r3, #3
 80033c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c6:	2302      	movs	r3, #2
 80033c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ce:	2303      	movs	r3, #3
 80033d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80033d2:	2308      	movs	r3, #8
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d6:	f107 0314 	add.w	r3, r7, #20
 80033da:	4619      	mov	r1, r3
 80033dc:	4809      	ldr	r0, [pc, #36]	@ (8003404 <HAL_UART_MspInit+0x9c>)
 80033de:	f000 fb6f 	bl	8003ac0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80033e2:	2200      	movs	r2, #0
 80033e4:	2100      	movs	r1, #0
 80033e6:	2034      	movs	r0, #52	@ 0x34
 80033e8:	f000 faa1 	bl	800392e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033ec:	2034      	movs	r0, #52	@ 0x34
 80033ee:	f000 faba 	bl	8003966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80033f2:	bf00      	nop
 80033f4:	3728      	adds	r7, #40	@ 0x28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40004c00 	.word	0x40004c00
 8003400:	40023800 	.word	0x40023800
 8003404:	40020000 	.word	0x40020000

08003408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <NMI_Handler+0x4>

08003410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <HardFault_Handler+0x4>

08003418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <MemManage_Handler+0x4>

08003420 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <BusFault_Handler+0x4>

08003428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <UsageFault_Handler+0x4>

08003430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800345e:	f000 f96b 	bl	8003738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800346c:	4802      	ldr	r0, [pc, #8]	@ (8003478 <TIM4_IRQHandler+0x10>)
 800346e:	f001 fc81 	bl	8004d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000424 	.word	0x20000424

0800347c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003480:	4802      	ldr	r0, [pc, #8]	@ (800348c <UART4_IRQHandler+0x10>)
 8003482:	f002 fbc5 	bl	8005c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	2000046c 	.word	0x2000046c

08003490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return 1;
 8003494:	2301      	movs	r3, #1
}
 8003496:	4618      	mov	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <_kill>:

int _kill(int pid, int sig)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034aa:	f005 f993 	bl	80087d4 <__errno>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2216      	movs	r2, #22
 80034b2:	601a      	str	r2, [r3, #0]
  return -1;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_exit>:

void _exit (int status)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034c8:	f04f 31ff 	mov.w	r1, #4294967295
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ffe7 	bl	80034a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034d2:	bf00      	nop
 80034d4:	e7fd      	b.n	80034d2 <_exit+0x12>

080034d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e00a      	b.n	80034fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034e8:	f3af 8000 	nop.w
 80034ec:	4601      	mov	r1, r0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	60ba      	str	r2, [r7, #8]
 80034f4:	b2ca      	uxtb	r2, r1
 80034f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	3301      	adds	r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	429a      	cmp	r2, r3
 8003504:	dbf0      	blt.n	80034e8 <_read+0x12>
  }

  return len;
 8003506:	687b      	ldr	r3, [r7, #4]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	e009      	b.n	8003536 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	60ba      	str	r2, [r7, #8]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	3301      	adds	r3, #1
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	dbf1      	blt.n	8003522 <_write+0x12>
  }
  return len;
 800353e:	687b      	ldr	r3, [r7, #4]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <_close>:

int _close(int file)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003570:	605a      	str	r2, [r3, #4]
  return 0;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <_isatty>:

int _isatty(int file)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003588:	2301      	movs	r3, #1
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035b8:	4a14      	ldr	r2, [pc, #80]	@ (800360c <_sbrk+0x5c>)
 80035ba:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <_sbrk+0x60>)
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035c4:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <_sbrk+0x64>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035cc:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <_sbrk+0x64>)
 80035ce:	4a12      	ldr	r2, [pc, #72]	@ (8003618 <_sbrk+0x68>)
 80035d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035d2:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <_sbrk+0x64>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d207      	bcs.n	80035f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035e0:	f005 f8f8 	bl	80087d4 <__errno>
 80035e4:	4603      	mov	r3, r0
 80035e6:	220c      	movs	r2, #12
 80035e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	e009      	b.n	8003604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035f0:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <_sbrk+0x64>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035f6:	4b07      	ldr	r3, [pc, #28]	@ (8003614 <_sbrk+0x64>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	4a05      	ldr	r2, [pc, #20]	@ (8003614 <_sbrk+0x64>)
 8003600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20020000 	.word	0x20020000
 8003610:	00000400 	.word	0x00000400
 8003614:	20000588 	.word	0x20000588
 8003618:	200006e0 	.word	0x200006e0

0800361c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <SystemInit+0x20>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	4a05      	ldr	r2, [pc, #20]	@ (800363c <SystemInit+0x20>)
 8003628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800362c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003678 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003644:	f7ff ffea 	bl	800361c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003648:	480c      	ldr	r0, [pc, #48]	@ (800367c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800364a:	490d      	ldr	r1, [pc, #52]	@ (8003680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800364c:	4a0d      	ldr	r2, [pc, #52]	@ (8003684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800364e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003650:	e002      	b.n	8003658 <LoopCopyDataInit>

08003652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003656:	3304      	adds	r3, #4

08003658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800365a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800365c:	d3f9      	bcc.n	8003652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800365e:	4a0a      	ldr	r2, [pc, #40]	@ (8003688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003660:	4c0a      	ldr	r4, [pc, #40]	@ (800368c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003664:	e001      	b.n	800366a <LoopFillZerobss>

08003666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003668:	3204      	adds	r2, #4

0800366a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800366a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800366c:	d3fb      	bcc.n	8003666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800366e:	f005 f8b7 	bl	80087e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003672:	f7ff f999 	bl	80029a8 <main>
  bx  lr    
 8003676:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800367c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003680:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003684:	0800bb28 	.word	0x0800bb28
  ldr r2, =_sbss
 8003688:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800368c:	200006dc 	.word	0x200006dc

08003690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003690:	e7fe      	b.n	8003690 <ADC_IRQHandler>
	...

08003694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003698:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_Init+0x40>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0d      	ldr	r2, [pc, #52]	@ (80036d4 <HAL_Init+0x40>)
 800369e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_Init+0x40>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <HAL_Init+0x40>)
 80036aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b0:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <HAL_Init+0x40>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a07      	ldr	r2, [pc, #28]	@ (80036d4 <HAL_Init+0x40>)
 80036b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036bc:	2003      	movs	r0, #3
 80036be:	f000 f92b 	bl	8003918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036c2:	200f      	movs	r0, #15
 80036c4:	f000 f808 	bl	80036d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036c8:	f7ff fd5a 	bl	8003180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023c00 	.word	0x40023c00

080036d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e0:	4b12      	ldr	r3, [pc, #72]	@ (800372c <HAL_InitTick+0x54>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b12      	ldr	r3, [pc, #72]	@ (8003730 <HAL_InitTick+0x58>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f943 	bl	8003982 <HAL_SYSTICK_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00e      	b.n	8003724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b0f      	cmp	r3, #15
 800370a:	d80a      	bhi.n	8003722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800370c:	2200      	movs	r2, #0
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	f000 f90b 	bl	800392e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003718:	4a06      	ldr	r2, [pc, #24]	@ (8003734 <HAL_InitTick+0x5c>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000000 	.word	0x20000000
 8003730:	20000008 	.word	0x20000008
 8003734:	20000004 	.word	0x20000004

08003738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <HAL_IncTick+0x20>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b06      	ldr	r3, [pc, #24]	@ (800375c <HAL_IncTick+0x24>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a04      	ldr	r2, [pc, #16]	@ (800375c <HAL_IncTick+0x24>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000008 	.word	0x20000008
 800375c:	2000058c 	.word	0x2000058c

08003760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return uwTick;
 8003764:	4b03      	ldr	r3, [pc, #12]	@ (8003774 <HAL_GetTick+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	2000058c 	.word	0x2000058c

08003778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003788:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003794:	4013      	ands	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037aa:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	60d3      	str	r3, [r2, #12]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c4:	4b04      	ldr	r3, [pc, #16]	@ (80037d8 <__NVIC_GetPriorityGrouping+0x18>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	f003 0307 	and.w	r3, r3, #7
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	db0b      	blt.n	8003806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	f003 021f 	and.w	r2, r3, #31
 80037f4:	4907      	ldr	r1, [pc, #28]	@ (8003814 <__NVIC_EnableIRQ+0x38>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2001      	movs	r0, #1
 80037fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	e000e100 	.word	0xe000e100

08003818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	6039      	str	r1, [r7, #0]
 8003822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003828:	2b00      	cmp	r3, #0
 800382a:	db0a      	blt.n	8003842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	490c      	ldr	r1, [pc, #48]	@ (8003864 <__NVIC_SetPriority+0x4c>)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	440b      	add	r3, r1
 800383c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003840:	e00a      	b.n	8003858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4908      	ldr	r1, [pc, #32]	@ (8003868 <__NVIC_SetPriority+0x50>)
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	3b04      	subs	r3, #4
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	440b      	add	r3, r1
 8003856:	761a      	strb	r2, [r3, #24]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000e100 	.word	0xe000e100
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800386c:	b480      	push	{r7}
 800386e:	b089      	sub	sp, #36	@ 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f1c3 0307 	rsb	r3, r3, #7
 8003886:	2b04      	cmp	r3, #4
 8003888:	bf28      	it	cs
 800388a:	2304      	movcs	r3, #4
 800388c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3304      	adds	r3, #4
 8003892:	2b06      	cmp	r3, #6
 8003894:	d902      	bls.n	800389c <NVIC_EncodePriority+0x30>
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3b03      	subs	r3, #3
 800389a:	e000      	b.n	800389e <NVIC_EncodePriority+0x32>
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	401a      	ands	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b4:	f04f 31ff 	mov.w	r1, #4294967295
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	43d9      	mvns	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c4:	4313      	orrs	r3, r2
         );
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3724      	adds	r7, #36	@ 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038e4:	d301      	bcc.n	80038ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038e6:	2301      	movs	r3, #1
 80038e8:	e00f      	b.n	800390a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003914 <SysTick_Config+0x40>)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038f2:	210f      	movs	r1, #15
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	f7ff ff8e 	bl	8003818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038fc:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <SysTick_Config+0x40>)
 80038fe:	2200      	movs	r2, #0
 8003900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003902:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <SysTick_Config+0x40>)
 8003904:	2207      	movs	r2, #7
 8003906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	e000e010 	.word	0xe000e010

08003918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff29 	bl	8003778 <__NVIC_SetPriorityGrouping>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	4603      	mov	r3, r0
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003940:	f7ff ff3e 	bl	80037c0 <__NVIC_GetPriorityGrouping>
 8003944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	6978      	ldr	r0, [r7, #20]
 800394c:	f7ff ff8e 	bl	800386c <NVIC_EncodePriority>
 8003950:	4602      	mov	r2, r0
 8003952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003956:	4611      	mov	r1, r2
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff5d 	bl	8003818 <__NVIC_SetPriority>
}
 800395e:	bf00      	nop
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	4603      	mov	r3, r0
 800396e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff31 	bl	80037dc <__NVIC_EnableIRQ>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff ffa2 	bl	80038d4 <SysTick_Config>
 8003990:	4603      	mov	r3, r0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039a8:	f7ff feda 	bl	8003760 <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d008      	beq.n	80039cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2280      	movs	r2, #128	@ 0x80
 80039be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e052      	b.n	8003a72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0216 	bic.w	r2, r2, #22
 80039da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d103      	bne.n	80039fc <HAL_DMA_Abort+0x62>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0208 	bic.w	r2, r2, #8
 8003a0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a1c:	e013      	b.n	8003a46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a1e:	f7ff fe9f 	bl	8003760 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d90c      	bls.n	8003a46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2203      	movs	r2, #3
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e015      	b.n	8003a72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e4      	bne.n	8003a1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a58:	223f      	movs	r2, #63	@ 0x3f
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d004      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2280      	movs	r2, #128	@ 0x80
 8003a92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e00c      	b.n	8003ab2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2205      	movs	r2, #5
 8003a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	@ 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	e16b      	b.n	8003db4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003adc:	2201      	movs	r2, #1
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	f040 815a 	bne.w	8003dae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d005      	beq.n	8003b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d130      	bne.n	8003b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b48:	2201      	movs	r2, #1
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 0201 	and.w	r2, r3, #1
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d017      	beq.n	8003bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d123      	bne.n	8003c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	08da      	lsrs	r2, r3, #3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3208      	adds	r2, #8
 8003bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	220f      	movs	r2, #15
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	08da      	lsrs	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3208      	adds	r2, #8
 8003bfe:	69b9      	ldr	r1, [r7, #24]
 8003c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	2203      	movs	r2, #3
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0203 	and.w	r2, r3, #3
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80b4 	beq.w	8003dae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	4b60      	ldr	r3, [pc, #384]	@ (8003dcc <HAL_GPIO_Init+0x30c>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	4a5f      	ldr	r2, [pc, #380]	@ (8003dcc <HAL_GPIO_Init+0x30c>)
 8003c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c56:	4b5d      	ldr	r3, [pc, #372]	@ (8003dcc <HAL_GPIO_Init+0x30c>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c62:	4a5b      	ldr	r2, [pc, #364]	@ (8003dd0 <HAL_GPIO_Init+0x310>)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	089b      	lsrs	r3, r3, #2
 8003c68:	3302      	adds	r3, #2
 8003c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	220f      	movs	r2, #15
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4013      	ands	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a52      	ldr	r2, [pc, #328]	@ (8003dd4 <HAL_GPIO_Init+0x314>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d02b      	beq.n	8003ce6 <HAL_GPIO_Init+0x226>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a51      	ldr	r2, [pc, #324]	@ (8003dd8 <HAL_GPIO_Init+0x318>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d025      	beq.n	8003ce2 <HAL_GPIO_Init+0x222>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a50      	ldr	r2, [pc, #320]	@ (8003ddc <HAL_GPIO_Init+0x31c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01f      	beq.n	8003cde <HAL_GPIO_Init+0x21e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8003de0 <HAL_GPIO_Init+0x320>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d019      	beq.n	8003cda <HAL_GPIO_Init+0x21a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4e      	ldr	r2, [pc, #312]	@ (8003de4 <HAL_GPIO_Init+0x324>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_GPIO_Init+0x216>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4d      	ldr	r2, [pc, #308]	@ (8003de8 <HAL_GPIO_Init+0x328>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00d      	beq.n	8003cd2 <HAL_GPIO_Init+0x212>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8003dec <HAL_GPIO_Init+0x32c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d007      	beq.n	8003cce <HAL_GPIO_Init+0x20e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8003df0 <HAL_GPIO_Init+0x330>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_GPIO_Init+0x20a>
 8003cc6:	2307      	movs	r3, #7
 8003cc8:	e00e      	b.n	8003ce8 <HAL_GPIO_Init+0x228>
 8003cca:	2308      	movs	r3, #8
 8003ccc:	e00c      	b.n	8003ce8 <HAL_GPIO_Init+0x228>
 8003cce:	2306      	movs	r3, #6
 8003cd0:	e00a      	b.n	8003ce8 <HAL_GPIO_Init+0x228>
 8003cd2:	2305      	movs	r3, #5
 8003cd4:	e008      	b.n	8003ce8 <HAL_GPIO_Init+0x228>
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	e006      	b.n	8003ce8 <HAL_GPIO_Init+0x228>
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e004      	b.n	8003ce8 <HAL_GPIO_Init+0x228>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e002      	b.n	8003ce8 <HAL_GPIO_Init+0x228>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <HAL_GPIO_Init+0x228>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	f002 0203 	and.w	r2, r2, #3
 8003cee:	0092      	lsls	r2, r2, #2
 8003cf0:	4093      	lsls	r3, r2
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cf8:	4935      	ldr	r1, [pc, #212]	@ (8003dd0 <HAL_GPIO_Init+0x310>)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	3302      	adds	r3, #2
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d06:	4b3b      	ldr	r3, [pc, #236]	@ (8003df4 <HAL_GPIO_Init+0x334>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d2a:	4a32      	ldr	r2, [pc, #200]	@ (8003df4 <HAL_GPIO_Init+0x334>)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d30:	4b30      	ldr	r3, [pc, #192]	@ (8003df4 <HAL_GPIO_Init+0x334>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d54:	4a27      	ldr	r2, [pc, #156]	@ (8003df4 <HAL_GPIO_Init+0x334>)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d5a:	4b26      	ldr	r3, [pc, #152]	@ (8003df4 <HAL_GPIO_Init+0x334>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003df4 <HAL_GPIO_Init+0x334>)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d84:	4b1b      	ldr	r3, [pc, #108]	@ (8003df4 <HAL_GPIO_Init+0x334>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003da8:	4a12      	ldr	r2, [pc, #72]	@ (8003df4 <HAL_GPIO_Init+0x334>)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3301      	adds	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b0f      	cmp	r3, #15
 8003db8:	f67f ae90 	bls.w	8003adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	3724      	adds	r7, #36	@ 0x24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40013800 	.word	0x40013800
 8003dd4:	40020000 	.word	0x40020000
 8003dd8:	40020400 	.word	0x40020400
 8003ddc:	40020800 	.word	0x40020800
 8003de0:	40020c00 	.word	0x40020c00
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40021400 	.word	0x40021400
 8003dec:	40021800 	.word	0x40021800
 8003df0:	40021c00 	.word	0x40021c00
 8003df4:	40013c00 	.word	0x40013c00

08003df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	807b      	strh	r3, [r7, #2]
 8003e04:	4613      	mov	r3, r2
 8003e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e08:	787b      	ldrb	r3, [r7, #1]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e14:	e003      	b.n	8003e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e16:	887b      	ldrh	r3, [r7, #2]
 8003e18:	041a      	lsls	r2, r3, #16
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	619a      	str	r2, [r3, #24]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e267      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d075      	beq.n	8003f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e4a:	4b88      	ldr	r3, [pc, #544]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d00c      	beq.n	8003e70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e56:	4b85      	ldr	r3, [pc, #532]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d112      	bne.n	8003e88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e62:	4b82      	ldr	r3, [pc, #520]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e6e:	d10b      	bne.n	8003e88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e70:	4b7e      	ldr	r3, [pc, #504]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d05b      	beq.n	8003f34 <HAL_RCC_OscConfig+0x108>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d157      	bne.n	8003f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e242      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e90:	d106      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x74>
 8003e92:	4b76      	ldr	r3, [pc, #472]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a75      	ldr	r2, [pc, #468]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e01d      	b.n	8003edc <HAL_RCC_OscConfig+0xb0>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x98>
 8003eaa:	4b70      	ldr	r3, [pc, #448]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a6f      	ldr	r2, [pc, #444]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a6c      	ldr	r2, [pc, #432]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e00b      	b.n	8003edc <HAL_RCC_OscConfig+0xb0>
 8003ec4:	4b69      	ldr	r3, [pc, #420]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a68      	ldr	r2, [pc, #416]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	4b66      	ldr	r3, [pc, #408]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a65      	ldr	r2, [pc, #404]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d013      	beq.n	8003f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7ff fc3c 	bl	8003760 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eec:	f7ff fc38 	bl	8003760 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	@ 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e207      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efe:	4b5b      	ldr	r3, [pc, #364]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCC_OscConfig+0xc0>
 8003f0a:	e014      	b.n	8003f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7ff fc28 	bl	8003760 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f14:	f7ff fc24 	bl	8003760 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	@ 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1f3      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f26:	4b51      	ldr	r3, [pc, #324]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0xe8>
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d063      	beq.n	800400a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f42:	4b4a      	ldr	r3, [pc, #296]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4e:	4b47      	ldr	r3, [pc, #284]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d11c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5a:	4b44      	ldr	r3, [pc, #272]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d116      	bne.n	8003f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f66:	4b41      	ldr	r3, [pc, #260]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_RCC_OscConfig+0x152>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e1c7      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4937      	ldr	r1, [pc, #220]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f92:	e03a      	b.n	800400a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f9c:	4b34      	ldr	r3, [pc, #208]	@ (8004070 <HAL_RCC_OscConfig+0x244>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7ff fbdd 	bl	8003760 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003faa:	f7ff fbd9 	bl	8003760 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e1a8      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc8:	4b28      	ldr	r3, [pc, #160]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4925      	ldr	r1, [pc, #148]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	600b      	str	r3, [r1, #0]
 8003fdc:	e015      	b.n	800400a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fde:	4b24      	ldr	r3, [pc, #144]	@ (8004070 <HAL_RCC_OscConfig+0x244>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7ff fbbc 	bl	8003760 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fec:	f7ff fbb8 	bl	8003760 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e187      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d036      	beq.n	8004084 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d016      	beq.n	800404c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800401e:	4b15      	ldr	r3, [pc, #84]	@ (8004074 <HAL_RCC_OscConfig+0x248>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7ff fb9c 	bl	8003760 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402c:	f7ff fb98 	bl	8003760 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e167      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403e:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_RCC_OscConfig+0x240>)
 8004040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x200>
 800404a:	e01b      	b.n	8004084 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800404c:	4b09      	ldr	r3, [pc, #36]	@ (8004074 <HAL_RCC_OscConfig+0x248>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004052:	f7ff fb85 	bl	8003760 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004058:	e00e      	b.n	8004078 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800405a:	f7ff fb81 	bl	8003760 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d907      	bls.n	8004078 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e150      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 800406c:	40023800 	.word	0x40023800
 8004070:	42470000 	.word	0x42470000
 8004074:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004078:	4b88      	ldr	r3, [pc, #544]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 800407a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ea      	bne.n	800405a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8097 	beq.w	80041c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004092:	2300      	movs	r3, #0
 8004094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004096:	4b81      	ldr	r3, [pc, #516]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10f      	bne.n	80040c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	4b7d      	ldr	r3, [pc, #500]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	4a7c      	ldr	r2, [pc, #496]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 80040ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040b2:	4b7a      	ldr	r3, [pc, #488]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040be:	2301      	movs	r3, #1
 80040c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c2:	4b77      	ldr	r3, [pc, #476]	@ (80042a0 <HAL_RCC_OscConfig+0x474>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d118      	bne.n	8004100 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ce:	4b74      	ldr	r3, [pc, #464]	@ (80042a0 <HAL_RCC_OscConfig+0x474>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a73      	ldr	r2, [pc, #460]	@ (80042a0 <HAL_RCC_OscConfig+0x474>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040da:	f7ff fb41 	bl	8003760 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e2:	f7ff fb3d 	bl	8003760 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e10c      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	4b6a      	ldr	r3, [pc, #424]	@ (80042a0 <HAL_RCC_OscConfig+0x474>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d106      	bne.n	8004116 <HAL_RCC_OscConfig+0x2ea>
 8004108:	4b64      	ldr	r3, [pc, #400]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410c:	4a63      	ldr	r2, [pc, #396]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6713      	str	r3, [r2, #112]	@ 0x70
 8004114:	e01c      	b.n	8004150 <HAL_RCC_OscConfig+0x324>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b05      	cmp	r3, #5
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x30c>
 800411e:	4b5f      	ldr	r3, [pc, #380]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004122:	4a5e      	ldr	r2, [pc, #376]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 8004124:	f043 0304 	orr.w	r3, r3, #4
 8004128:	6713      	str	r3, [r2, #112]	@ 0x70
 800412a:	4b5c      	ldr	r3, [pc, #368]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412e:	4a5b      	ldr	r2, [pc, #364]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	6713      	str	r3, [r2, #112]	@ 0x70
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0x324>
 8004138:	4b58      	ldr	r3, [pc, #352]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413c:	4a57      	ldr	r2, [pc, #348]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6713      	str	r3, [r2, #112]	@ 0x70
 8004144:	4b55      	ldr	r3, [pc, #340]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004148:	4a54      	ldr	r2, [pc, #336]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 800414a:	f023 0304 	bic.w	r3, r3, #4
 800414e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7ff fb02 	bl	8003760 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7ff fafe 	bl	8003760 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e0cb      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004176:	4b49      	ldr	r3, [pc, #292]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0ee      	beq.n	8004160 <HAL_RCC_OscConfig+0x334>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004184:	f7ff faec 	bl	8003760 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418c:	f7ff fae8 	bl	8003760 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e0b5      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a2:	4b3e      	ldr	r3, [pc, #248]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ee      	bne.n	800418c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b4:	4b39      	ldr	r3, [pc, #228]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	4a38      	ldr	r2, [pc, #224]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 80041ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80a1 	beq.w	800430c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ca:	4b34      	ldr	r3, [pc, #208]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d05c      	beq.n	8004290 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d141      	bne.n	8004262 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041de:	4b31      	ldr	r3, [pc, #196]	@ (80042a4 <HAL_RCC_OscConfig+0x478>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7ff fabc 	bl	8003760 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ec:	f7ff fab8 	bl	8003760 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e087      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fe:	4b27      	ldr	r3, [pc, #156]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	019b      	lsls	r3, r3, #6
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	3b01      	subs	r3, #1
 8004224:	041b      	lsls	r3, r3, #16
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	061b      	lsls	r3, r3, #24
 800422e:	491b      	ldr	r1, [pc, #108]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004234:	4b1b      	ldr	r3, [pc, #108]	@ (80042a4 <HAL_RCC_OscConfig+0x478>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423a:	f7ff fa91 	bl	8003760 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004242:	f7ff fa8d 	bl	8003760 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e05c      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004254:	4b11      	ldr	r3, [pc, #68]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x416>
 8004260:	e054      	b.n	800430c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004262:	4b10      	ldr	r3, [pc, #64]	@ (80042a4 <HAL_RCC_OscConfig+0x478>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004268:	f7ff fa7a 	bl	8003760 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7ff fa76 	bl	8003760 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e045      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	4b06      	ldr	r3, [pc, #24]	@ (800429c <HAL_RCC_OscConfig+0x470>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x444>
 800428e:	e03d      	b.n	800430c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e038      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 800429c:	40023800 	.word	0x40023800
 80042a0:	40007000 	.word	0x40007000
 80042a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <HAL_RCC_OscConfig+0x4ec>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d028      	beq.n	8004308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d121      	bne.n	8004308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d11a      	bne.n	8004308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042d8:	4013      	ands	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d111      	bne.n	8004308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	3b01      	subs	r3, #1
 80042f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004302:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800

0800431c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0cc      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004330:	4b68      	ldr	r3, [pc, #416]	@ (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d90c      	bls.n	8004358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433e:	4b65      	ldr	r3, [pc, #404]	@ (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b63      	ldr	r3, [pc, #396]	@ (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d001      	beq.n	8004358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0b8      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d020      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004370:	4b59      	ldr	r3, [pc, #356]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a58      	ldr	r2, [pc, #352]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800437a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004388:	4b53      	ldr	r3, [pc, #332]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a52      	ldr	r2, [pc, #328]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004394:	4b50      	ldr	r3, [pc, #320]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	494d      	ldr	r1, [pc, #308]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d044      	beq.n	800443c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	4b47      	ldr	r3, [pc, #284]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d119      	bne.n	80043fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e07f      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d003      	beq.n	80043da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043da:	4b3f      	ldr	r3, [pc, #252]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d109      	bne.n	80043fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e06f      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ea:	4b3b      	ldr	r3, [pc, #236]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e067      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043fa:	4b37      	ldr	r3, [pc, #220]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f023 0203 	bic.w	r2, r3, #3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4934      	ldr	r1, [pc, #208]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	4313      	orrs	r3, r2
 800440a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800440c:	f7ff f9a8 	bl	8003760 <HAL_GetTick>
 8004410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004412:	e00a      	b.n	800442a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004414:	f7ff f9a4 	bl	8003760 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e04f      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442a:	4b2b      	ldr	r3, [pc, #172]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 020c 	and.w	r2, r3, #12
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	429a      	cmp	r2, r3
 800443a:	d1eb      	bne.n	8004414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800443c:	4b25      	ldr	r3, [pc, #148]	@ (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d20c      	bcs.n	8004464 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b22      	ldr	r3, [pc, #136]	@ (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004452:	4b20      	ldr	r3, [pc, #128]	@ (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e032      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004470:	4b19      	ldr	r3, [pc, #100]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4916      	ldr	r1, [pc, #88]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800448e:	4b12      	ldr	r3, [pc, #72]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	490e      	ldr	r1, [pc, #56]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044a2:	f000 f821 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 80044a6:	4602      	mov	r2, r0
 80044a8:	4b0b      	ldr	r3, [pc, #44]	@ (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	490a      	ldr	r1, [pc, #40]	@ (80044dc <HAL_RCC_ClockConfig+0x1c0>)
 80044b4:	5ccb      	ldrb	r3, [r1, r3]
 80044b6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ba:	4a09      	ldr	r2, [pc, #36]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044be:	4b09      	ldr	r3, [pc, #36]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff f908 	bl	80036d8 <HAL_InitTick>

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40023c00 	.word	0x40023c00
 80044d8:	40023800 	.word	0x40023800
 80044dc:	0800b660 	.word	0x0800b660
 80044e0:	20000000 	.word	0x20000000
 80044e4:	20000004 	.word	0x20000004

080044e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ec:	b094      	sub	sp, #80	@ 0x50
 80044ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004500:	4b79      	ldr	r3, [pc, #484]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 030c 	and.w	r3, r3, #12
 8004508:	2b08      	cmp	r3, #8
 800450a:	d00d      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x40>
 800450c:	2b08      	cmp	r3, #8
 800450e:	f200 80e1 	bhi.w	80046d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_RCC_GetSysClockFreq+0x34>
 8004516:	2b04      	cmp	r3, #4
 8004518:	d003      	beq.n	8004522 <HAL_RCC_GetSysClockFreq+0x3a>
 800451a:	e0db      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800451c:	4b73      	ldr	r3, [pc, #460]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x204>)
 800451e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004520:	e0db      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004522:	4b73      	ldr	r3, [pc, #460]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004524:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004526:	e0d8      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004528:	4b6f      	ldr	r3, [pc, #444]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004530:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004532:	4b6d      	ldr	r3, [pc, #436]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d063      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453e:	4b6a      	ldr	r3, [pc, #424]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	2200      	movs	r2, #0
 8004546:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004548:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800454a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004550:	633b      	str	r3, [r7, #48]	@ 0x30
 8004552:	2300      	movs	r3, #0
 8004554:	637b      	str	r3, [r7, #52]	@ 0x34
 8004556:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800455a:	4622      	mov	r2, r4
 800455c:	462b      	mov	r3, r5
 800455e:	f04f 0000 	mov.w	r0, #0
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	0159      	lsls	r1, r3, #5
 8004568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800456c:	0150      	lsls	r0, r2, #5
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4621      	mov	r1, r4
 8004574:	1a51      	subs	r1, r2, r1
 8004576:	6139      	str	r1, [r7, #16]
 8004578:	4629      	mov	r1, r5
 800457a:	eb63 0301 	sbc.w	r3, r3, r1
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800458c:	4659      	mov	r1, fp
 800458e:	018b      	lsls	r3, r1, #6
 8004590:	4651      	mov	r1, sl
 8004592:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004596:	4651      	mov	r1, sl
 8004598:	018a      	lsls	r2, r1, #6
 800459a:	4651      	mov	r1, sl
 800459c:	ebb2 0801 	subs.w	r8, r2, r1
 80045a0:	4659      	mov	r1, fp
 80045a2:	eb63 0901 	sbc.w	r9, r3, r1
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ba:	4690      	mov	r8, r2
 80045bc:	4699      	mov	r9, r3
 80045be:	4623      	mov	r3, r4
 80045c0:	eb18 0303 	adds.w	r3, r8, r3
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	462b      	mov	r3, r5
 80045c8:	eb49 0303 	adc.w	r3, r9, r3
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045da:	4629      	mov	r1, r5
 80045dc:	024b      	lsls	r3, r1, #9
 80045de:	4621      	mov	r1, r4
 80045e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045e4:	4621      	mov	r1, r4
 80045e6:	024a      	lsls	r2, r1, #9
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ee:	2200      	movs	r2, #0
 80045f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045f8:	f7fc fb46 	bl	8000c88 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4613      	mov	r3, r2
 8004602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004604:	e058      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004606:	4b38      	ldr	r3, [pc, #224]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	099b      	lsrs	r3, r3, #6
 800460c:	2200      	movs	r2, #0
 800460e:	4618      	mov	r0, r3
 8004610:	4611      	mov	r1, r2
 8004612:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
 800461c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	f04f 0000 	mov.w	r0, #0
 8004628:	f04f 0100 	mov.w	r1, #0
 800462c:	0159      	lsls	r1, r3, #5
 800462e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004632:	0150      	lsls	r0, r2, #5
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4641      	mov	r1, r8
 800463a:	ebb2 0a01 	subs.w	sl, r2, r1
 800463e:	4649      	mov	r1, r9
 8004640:	eb63 0b01 	sbc.w	fp, r3, r1
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004650:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004654:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004658:	ebb2 040a 	subs.w	r4, r2, sl
 800465c:	eb63 050b 	sbc.w	r5, r3, fp
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	00eb      	lsls	r3, r5, #3
 800466a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800466e:	00e2      	lsls	r2, r4, #3
 8004670:	4614      	mov	r4, r2
 8004672:	461d      	mov	r5, r3
 8004674:	4643      	mov	r3, r8
 8004676:	18e3      	adds	r3, r4, r3
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	464b      	mov	r3, r9
 800467c:	eb45 0303 	adc.w	r3, r5, r3
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800468e:	4629      	mov	r1, r5
 8004690:	028b      	lsls	r3, r1, #10
 8004692:	4621      	mov	r1, r4
 8004694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004698:	4621      	mov	r1, r4
 800469a:	028a      	lsls	r2, r1, #10
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a2:	2200      	movs	r2, #0
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	61fa      	str	r2, [r7, #28]
 80046a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ac:	f7fc faec 	bl	8000c88 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4613      	mov	r3, r2
 80046b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046b8:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	3301      	adds	r3, #1
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046d2:	e002      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046d4:	4b05      	ldr	r3, [pc, #20]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x204>)
 80046d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3750      	adds	r7, #80	@ 0x50
 80046e0:	46bd      	mov	sp, r7
 80046e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800
 80046ec:	00f42400 	.word	0x00f42400
 80046f0:	007a1200 	.word	0x007a1200

080046f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f8:	4b03      	ldr	r3, [pc, #12]	@ (8004708 <HAL_RCC_GetHCLKFreq+0x14>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000000 	.word	0x20000000

0800470c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004710:	f7ff fff0 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b05      	ldr	r3, [pc, #20]	@ (800472c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0a9b      	lsrs	r3, r3, #10
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4903      	ldr	r1, [pc, #12]	@ (8004730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40023800 	.word	0x40023800
 8004730:	0800b670 	.word	0x0800b670

08004734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004738:	f7ff ffdc 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 800473c:	4602      	mov	r2, r0
 800473e:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	0b5b      	lsrs	r3, r3, #13
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	4903      	ldr	r1, [pc, #12]	@ (8004758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800474a:	5ccb      	ldrb	r3, [r1, r3]
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40023800 	.word	0x40023800
 8004758:	0800b670 	.word	0x0800b670

0800475c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e041      	b.n	80047f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fe fd8e 	bl	80032a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f000 fd8c 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d001      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e04e      	b.n	80048b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a23      	ldr	r2, [pc, #140]	@ (80048c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d022      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800483e:	d01d      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1f      	ldr	r2, [pc, #124]	@ (80048c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d018      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1e      	ldr	r2, [pc, #120]	@ (80048c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d013      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1c      	ldr	r2, [pc, #112]	@ (80048cc <HAL_TIM_Base_Start_IT+0xd0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00e      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1b      	ldr	r2, [pc, #108]	@ (80048d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d009      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a19      	ldr	r2, [pc, #100]	@ (80048d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a18      	ldr	r2, [pc, #96]	@ (80048d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d111      	bne.n	80048a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b06      	cmp	r3, #6
 800488c:	d010      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489e:	e007      	b.n	80048b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40010400 	.word	0x40010400
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40001800 	.word	0x40001800

080048dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e041      	b.n	8004972 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fe fcac 	bl	8003260 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 fccc 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_TIM_PWM_Start+0x24>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e022      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d109      	bne.n	80049ba <HAL_TIM_PWM_Start+0x3e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e015      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d109      	bne.n	80049d4 <HAL_TIM_PWM_Start+0x58>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e008      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e07c      	b.n	8004ae8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Start+0x82>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049fc:	e013      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start+0x92>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a0c:	e00b      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_PWM_Start+0xa2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a1c:	e003      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 ff38 	bl	80058a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a2d      	ldr	r2, [pc, #180]	@ (8004af0 <HAL_TIM_PWM_Start+0x174>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <HAL_TIM_PWM_Start+0xcc>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2c      	ldr	r2, [pc, #176]	@ (8004af4 <HAL_TIM_PWM_Start+0x178>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <HAL_TIM_PWM_Start+0xd0>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <HAL_TIM_PWM_Start+0xd2>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a22      	ldr	r2, [pc, #136]	@ (8004af0 <HAL_TIM_PWM_Start+0x174>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d022      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a74:	d01d      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004af8 <HAL_TIM_PWM_Start+0x17c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d018      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1d      	ldr	r2, [pc, #116]	@ (8004afc <HAL_TIM_PWM_Start+0x180>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b00 <HAL_TIM_PWM_Start+0x184>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00e      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a16      	ldr	r2, [pc, #88]	@ (8004af4 <HAL_TIM_PWM_Start+0x178>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <HAL_TIM_PWM_Start+0x188>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d004      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x136>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a16      	ldr	r2, [pc, #88]	@ (8004b08 <HAL_TIM_PWM_Start+0x18c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d111      	bne.n	8004ad6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b06      	cmp	r3, #6
 8004ac2:	d010      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad4:	e007      	b.n	8004ae6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0201 	orr.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40010400 	.word	0x40010400
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40001800 	.word	0x40001800

08004b0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e097      	b.n	8004c50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fe fb4b 	bl	80031d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b50:	f023 0307 	bic.w	r3, r3, #7
 8004b54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f000 fba9 	bl	80052b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b8e:	f023 0303 	bic.w	r3, r3, #3
 8004b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004bac:	f023 030c 	bic.w	r3, r3, #12
 8004bb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	011a      	lsls	r2, r3, #4
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	031b      	lsls	r3, r3, #12
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004bea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d110      	bne.n	8004caa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d102      	bne.n	8004c94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c8e:	7b7b      	ldrb	r3, [r7, #13]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d001      	beq.n	8004c98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e069      	b.n	8004d6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ca8:	e031      	b.n	8004d0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d110      	bne.n	8004cd2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb0:	7bbb      	ldrb	r3, [r7, #14]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d102      	bne.n	8004cbc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cb6:	7b3b      	ldrb	r3, [r7, #12]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d001      	beq.n	8004cc0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e055      	b.n	8004d6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cd0:	e01d      	b.n	8004d0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d108      	bne.n	8004cea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd8:	7bbb      	ldrb	r3, [r7, #14]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d105      	bne.n	8004cea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cde:	7b7b      	ldrb	r3, [r7, #13]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d102      	bne.n	8004cea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ce4:	7b3b      	ldrb	r3, [r7, #12]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d001      	beq.n	8004cee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e03e      	b.n	8004d6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_TIM_Encoder_Start+0xc4>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d008      	beq.n	8004d2c <HAL_TIM_Encoder_Start+0xd4>
 8004d1a:	e00f      	b.n	8004d3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2201      	movs	r2, #1
 8004d22:	2100      	movs	r1, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fdbd 	bl	80058a4 <TIM_CCxChannelCmd>
      break;
 8004d2a:	e016      	b.n	8004d5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2201      	movs	r2, #1
 8004d32:	2104      	movs	r1, #4
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fdb5 	bl	80058a4 <TIM_CCxChannelCmd>
      break;
 8004d3a:	e00e      	b.n	8004d5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2201      	movs	r2, #1
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fdad 	bl	80058a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	2104      	movs	r1, #4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fda6 	bl	80058a4 <TIM_CCxChannelCmd>
      break;
 8004d58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0201 	orr.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d020      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01b      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0202 	mvn.w	r2, #2
 8004da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa5b 	bl	800527a <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa4d 	bl	8005266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fa5e 	bl	800528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d020      	beq.n	8004e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01b      	beq.n	8004e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0204 	mvn.w	r2, #4
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa35 	bl	800527a <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fa27 	bl	8005266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fa38 	bl	800528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d020      	beq.n	8004e70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01b      	beq.n	8004e70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0208 	mvn.w	r2, #8
 8004e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2204      	movs	r2, #4
 8004e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fa0f 	bl	800527a <HAL_TIM_IC_CaptureCallback>
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fa01 	bl	8005266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fa12 	bl	800528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d020      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01b      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0210 	mvn.w	r2, #16
 8004e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2208      	movs	r2, #8
 8004e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9e9 	bl	800527a <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f9db 	bl	8005266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f9ec 	bl	800528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00c      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0201 	mvn.w	r2, #1
 8004ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fd ff96 	bl	8002e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00c      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fd7c 	bl	80059fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9bd 	bl	80052a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00c      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0220 	mvn.w	r2, #32
 8004f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fd4e 	bl	80059e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e0ae      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	f200 809f 	bhi.w	80050c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f82:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	080050c1 	.word	0x080050c1
 8004f90:	080050c1 	.word	0x080050c1
 8004f94:	080050c1 	.word	0x080050c1
 8004f98:	08004ffd 	.word	0x08004ffd
 8004f9c:	080050c1 	.word	0x080050c1
 8004fa0:	080050c1 	.word	0x080050c1
 8004fa4:	080050c1 	.word	0x080050c1
 8004fa8:	0800503f 	.word	0x0800503f
 8004fac:	080050c1 	.word	0x080050c1
 8004fb0:	080050c1 	.word	0x080050c1
 8004fb4:	080050c1 	.word	0x080050c1
 8004fb8:	0800507f 	.word	0x0800507f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fa24 	bl	8005410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0208 	orr.w	r2, r2, #8
 8004fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0204 	bic.w	r2, r2, #4
 8004fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6999      	ldr	r1, [r3, #24]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	619a      	str	r2, [r3, #24]
      break;
 8004ffa:	e064      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fa74 	bl	80054f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6999      	ldr	r1, [r3, #24]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	021a      	lsls	r2, r3, #8
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	619a      	str	r2, [r3, #24]
      break;
 800503c:	e043      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fac9 	bl	80055dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0208 	orr.w	r2, r2, #8
 8005058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0204 	bic.w	r2, r2, #4
 8005068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69d9      	ldr	r1, [r3, #28]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	61da      	str	r2, [r3, #28]
      break;
 800507c:	e023      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fb1d 	bl	80056c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69d9      	ldr	r1, [r3, #28]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	021a      	lsls	r2, r3, #8
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	61da      	str	r2, [r3, #28]
      break;
 80050be:	e002      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	75fb      	strb	r3, [r7, #23]
      break;
 80050c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_TIM_ConfigClockSource+0x1c>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e0b4      	b.n	800525e <HAL_TIM_ConfigClockSource+0x186>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800511a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800512c:	d03e      	beq.n	80051ac <HAL_TIM_ConfigClockSource+0xd4>
 800512e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005132:	f200 8087 	bhi.w	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800513a:	f000 8086 	beq.w	800524a <HAL_TIM_ConfigClockSource+0x172>
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005142:	d87f      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 8005144:	2b70      	cmp	r3, #112	@ 0x70
 8005146:	d01a      	beq.n	800517e <HAL_TIM_ConfigClockSource+0xa6>
 8005148:	2b70      	cmp	r3, #112	@ 0x70
 800514a:	d87b      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b60      	cmp	r3, #96	@ 0x60
 800514e:	d050      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005150:	2b60      	cmp	r3, #96	@ 0x60
 8005152:	d877      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b50      	cmp	r3, #80	@ 0x50
 8005156:	d03c      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005158:	2b50      	cmp	r3, #80	@ 0x50
 800515a:	d873      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b40      	cmp	r3, #64	@ 0x40
 800515e:	d058      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x13a>
 8005160:	2b40      	cmp	r3, #64	@ 0x40
 8005162:	d86f      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b30      	cmp	r3, #48	@ 0x30
 8005166:	d064      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x15a>
 8005168:	2b30      	cmp	r3, #48	@ 0x30
 800516a:	d86b      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b20      	cmp	r3, #32
 800516e:	d060      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x15a>
 8005170:	2b20      	cmp	r3, #32
 8005172:	d867      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d05c      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x15a>
 8005178:	2b10      	cmp	r3, #16
 800517a:	d05a      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x15a>
 800517c:	e062      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800518e:	f000 fb69 	bl	8005864 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	609a      	str	r2, [r3, #8]
      break;
 80051aa:	e04f      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051bc:	f000 fb52 	bl	8005864 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051ce:	609a      	str	r2, [r3, #8]
      break;
 80051d0:	e03c      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051de:	461a      	mov	r2, r3
 80051e0:	f000 fac6 	bl	8005770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2150      	movs	r1, #80	@ 0x50
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fb1f 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 80051f0:	e02c      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051fe:	461a      	mov	r2, r3
 8005200:	f000 fae5 	bl	80057ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2160      	movs	r1, #96	@ 0x60
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fb0f 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 8005210:	e01c      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800521e:	461a      	mov	r2, r3
 8005220:	f000 faa6 	bl	8005770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2140      	movs	r1, #64	@ 0x40
 800522a:	4618      	mov	r0, r3
 800522c:	f000 faff 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 8005230:	e00c      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f000 faf6 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 8005242:	e003      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
      break;
 8005248:	e000      	b.n	800524c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800524a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a46      	ldr	r2, [pc, #280]	@ (80053e4 <TIM_Base_SetConfig+0x12c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d6:	d00f      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a43      	ldr	r2, [pc, #268]	@ (80053e8 <TIM_Base_SetConfig+0x130>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00b      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a42      	ldr	r2, [pc, #264]	@ (80053ec <TIM_Base_SetConfig+0x134>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a41      	ldr	r2, [pc, #260]	@ (80053f0 <TIM_Base_SetConfig+0x138>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a40      	ldr	r2, [pc, #256]	@ (80053f4 <TIM_Base_SetConfig+0x13c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d108      	bne.n	800530a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a35      	ldr	r2, [pc, #212]	@ (80053e4 <TIM_Base_SetConfig+0x12c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d02b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005318:	d027      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a32      	ldr	r2, [pc, #200]	@ (80053e8 <TIM_Base_SetConfig+0x130>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d023      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a31      	ldr	r2, [pc, #196]	@ (80053ec <TIM_Base_SetConfig+0x134>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01f      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a30      	ldr	r2, [pc, #192]	@ (80053f0 <TIM_Base_SetConfig+0x138>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a2f      	ldr	r2, [pc, #188]	@ (80053f4 <TIM_Base_SetConfig+0x13c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d017      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a2e      	ldr	r2, [pc, #184]	@ (80053f8 <TIM_Base_SetConfig+0x140>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a2d      	ldr	r2, [pc, #180]	@ (80053fc <TIM_Base_SetConfig+0x144>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00f      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a2c      	ldr	r2, [pc, #176]	@ (8005400 <TIM_Base_SetConfig+0x148>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a2b      	ldr	r2, [pc, #172]	@ (8005404 <TIM_Base_SetConfig+0x14c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <TIM_Base_SetConfig+0x150>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a29      	ldr	r2, [pc, #164]	@ (800540c <TIM_Base_SetConfig+0x154>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d108      	bne.n	800537c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a10      	ldr	r2, [pc, #64]	@ (80053e4 <TIM_Base_SetConfig+0x12c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0xf8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a12      	ldr	r2, [pc, #72]	@ (80053f4 <TIM_Base_SetConfig+0x13c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d103      	bne.n	80053b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d105      	bne.n	80053d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f023 0201 	bic.w	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	611a      	str	r2, [r3, #16]
  }
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40000c00 	.word	0x40000c00
 80053f4:	40010400 	.word	0x40010400
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40014400 	.word	0x40014400
 8005400:	40014800 	.word	0x40014800
 8005404:	40001800 	.word	0x40001800
 8005408:	40001c00 	.word	0x40001c00
 800540c:	40002000 	.word	0x40002000

08005410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f023 0201 	bic.w	r2, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0303 	bic.w	r3, r3, #3
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f023 0302 	bic.w	r3, r3, #2
 8005458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a20      	ldr	r2, [pc, #128]	@ (80054e8 <TIM_OC1_SetConfig+0xd8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_OC1_SetConfig+0x64>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a1f      	ldr	r2, [pc, #124]	@ (80054ec <TIM_OC1_SetConfig+0xdc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10c      	bne.n	800548e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0308 	bic.w	r3, r3, #8
 800547a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f023 0304 	bic.w	r3, r3, #4
 800548c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a15      	ldr	r2, [pc, #84]	@ (80054e8 <TIM_OC1_SetConfig+0xd8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_OC1_SetConfig+0x8e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a14      	ldr	r2, [pc, #80]	@ (80054ec <TIM_OC1_SetConfig+0xdc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d111      	bne.n	80054c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40010000 	.word	0x40010000
 80054ec:	40010400 	.word	0x40010400

080054f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f023 0210 	bic.w	r2, r3, #16
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800551e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0320 	bic.w	r3, r3, #32
 800553a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a22      	ldr	r2, [pc, #136]	@ (80055d4 <TIM_OC2_SetConfig+0xe4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_OC2_SetConfig+0x68>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a21      	ldr	r2, [pc, #132]	@ (80055d8 <TIM_OC2_SetConfig+0xe8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d10d      	bne.n	8005574 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800555e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005572:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a17      	ldr	r2, [pc, #92]	@ (80055d4 <TIM_OC2_SetConfig+0xe4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_OC2_SetConfig+0x94>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a16      	ldr	r2, [pc, #88]	@ (80055d8 <TIM_OC2_SetConfig+0xe8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d113      	bne.n	80055ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800558a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40010400 	.word	0x40010400

080055dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a21      	ldr	r2, [pc, #132]	@ (80056bc <TIM_OC3_SetConfig+0xe0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <TIM_OC3_SetConfig+0x66>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a20      	ldr	r2, [pc, #128]	@ (80056c0 <TIM_OC3_SetConfig+0xe4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d10d      	bne.n	800565e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800565c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a16      	ldr	r2, [pc, #88]	@ (80056bc <TIM_OC3_SetConfig+0xe0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <TIM_OC3_SetConfig+0x92>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a15      	ldr	r2, [pc, #84]	@ (80056c0 <TIM_OC3_SetConfig+0xe4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d113      	bne.n	8005696 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800567c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	40010000 	.word	0x40010000
 80056c0:	40010400 	.word	0x40010400

080056c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800570e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	031b      	lsls	r3, r3, #12
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a12      	ldr	r2, [pc, #72]	@ (8005768 <TIM_OC4_SetConfig+0xa4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_OC4_SetConfig+0x68>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a11      	ldr	r2, [pc, #68]	@ (800576c <TIM_OC4_SetConfig+0xa8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d109      	bne.n	8005740 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	019b      	lsls	r3, r3, #6
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	621a      	str	r2, [r3, #32]
}
 800575a:	bf00      	nop
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000
 800576c:	40010400 	.word	0x40010400

08005770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0201 	bic.w	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800579a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f023 030a 	bic.w	r3, r3, #10
 80057ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b087      	sub	sp, #28
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f023 0210 	bic.w	r2, r3, #16
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	031b      	lsls	r3, r3, #12
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800580a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	f043 0307 	orr.w	r3, r3, #7
 8005850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	609a      	str	r2, [r3, #8]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800587e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	021a      	lsls	r2, r3, #8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	431a      	orrs	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4313      	orrs	r3, r2
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	609a      	str	r2, [r3, #8]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	2201      	movs	r2, #1
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1a      	ldr	r2, [r3, #32]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	43db      	mvns	r3, r3
 80058c6:	401a      	ands	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a1a      	ldr	r2, [r3, #32]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	fa01 f303 	lsl.w	r3, r1, r3
 80058dc:	431a      	orrs	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	621a      	str	r2, [r3, #32]
}
 80058e2:	bf00      	nop
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
	...

080058f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005904:	2302      	movs	r3, #2
 8005906:	e05a      	b.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a21      	ldr	r2, [pc, #132]	@ (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d022      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005954:	d01d      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1d      	ldr	r2, [pc, #116]	@ (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d018      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1b      	ldr	r2, [pc, #108]	@ (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1a      	ldr	r2, [pc, #104]	@ (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00e      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a18      	ldr	r2, [pc, #96]	@ (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d009      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a17      	ldr	r2, [pc, #92]	@ (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a15      	ldr	r2, [pc, #84]	@ (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d10c      	bne.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	40000c00 	.word	0x40000c00
 80059dc:	40010400 	.word	0x40010400
 80059e0:	40014000 	.word	0x40014000
 80059e4:	40001800 	.word	0x40001800

080059e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e042      	b.n	8005aa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fd fc96 	bl	8003368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2224      	movs	r2, #36	@ 0x24
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fdbd 	bl	80065d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	@ 0x28
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d175      	bne.n	8005bbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_UART_Transmit+0x2c>
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e06e      	b.n	8005bbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2221      	movs	r2, #33	@ 0x21
 8005aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aee:	f7fd fe37 	bl	8003760 <HAL_GetTick>
 8005af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	88fa      	ldrh	r2, [r7, #6]
 8005afe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b08:	d108      	bne.n	8005b1c <HAL_UART_Transmit+0x6c>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d104      	bne.n	8005b1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	e003      	b.n	8005b24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b24:	e02e      	b.n	8005b84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2180      	movs	r1, #128	@ 0x80
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 fb1f 	bl	8006174 <UART_WaitOnFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e03a      	b.n	8005bbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	3302      	adds	r3, #2
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e007      	b.n	8005b76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	781a      	ldrb	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	3301      	adds	r3, #1
 8005b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1cb      	bne.n	8005b26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2200      	movs	r2, #0
 8005b96:	2140      	movs	r1, #64	@ 0x40
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 faeb 	bl	8006174 <UART_WaitOnFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e006      	b.n	8005bbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e000      	b.n	8005bbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005bbc:	2302      	movs	r3, #2
  }
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d112      	bne.n	8005c06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_UART_Receive_IT+0x26>
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e00b      	b.n	8005c08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fb12 	bl	8006226 <UART_Start_Receive_IT>
 8005c02:	4603      	mov	r3, r0
 8005c04:	e000      	b.n	8005c08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005c06:	2302      	movs	r3, #2
  }
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b0ba      	sub	sp, #232	@ 0xe8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10f      	bne.n	8005c76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <HAL_UART_IRQHandler+0x66>
 8005c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fbf2 	bl	8006458 <UART_Receive_IT>
      return;
 8005c74:	e25b      	b.n	800612e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 80de 	beq.w	8005e3c <HAL_UART_IRQHandler+0x22c>
 8005c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80d1 	beq.w	8005e3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00b      	beq.n	8005cbe <HAL_UART_IRQHandler+0xae>
 8005ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb6:	f043 0201 	orr.w	r2, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00b      	beq.n	8005ce2 <HAL_UART_IRQHandler+0xd2>
 8005cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cda:	f043 0202 	orr.w	r2, r3, #2
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00b      	beq.n	8005d06 <HAL_UART_IRQHandler+0xf6>
 8005cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfe:	f043 0204 	orr.w	r2, r3, #4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d011      	beq.n	8005d36 <HAL_UART_IRQHandler+0x126>
 8005d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d105      	bne.n	8005d2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2e:	f043 0208 	orr.w	r2, r3, #8
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 81f2 	beq.w	8006124 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d008      	beq.n	8005d5e <HAL_UART_IRQHandler+0x14e>
 8005d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d50:	f003 0320 	and.w	r3, r3, #32
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fb7d 	bl	8006458 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d68:	2b40      	cmp	r3, #64	@ 0x40
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2301      	moveq	r3, #1
 8005d6e:	2300      	movne	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d103      	bne.n	8005d8a <HAL_UART_IRQHandler+0x17a>
 8005d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d04f      	beq.n	8005e2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fa85 	bl	800629a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9a:	2b40      	cmp	r3, #64	@ 0x40
 8005d9c:	d141      	bne.n	8005e22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3314      	adds	r3, #20
 8005da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3314      	adds	r3, #20
 8005dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005dca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1d9      	bne.n	8005d9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d013      	beq.n	8005e1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ff0 <HAL_UART_IRQHandler+0x3e0>)
 8005df8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fd fe3b 	bl	8003a7a <HAL_DMA_Abort_IT>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d016      	beq.n	8005e38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e14:	4610      	mov	r0, r2
 8005e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e18:	e00e      	b.n	8005e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f994 	bl	8006148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e20:	e00a      	b.n	8005e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f990 	bl	8006148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e28:	e006      	b.n	8005e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f98c 	bl	8006148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005e36:	e175      	b.n	8006124 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	bf00      	nop
    return;
 8005e3a:	e173      	b.n	8006124 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	f040 814f 	bne.w	80060e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 8148 	beq.w	80060e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8141 	beq.w	80060e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e62:	2300      	movs	r3, #0
 8005e64:	60bb      	str	r3, [r7, #8]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e82:	2b40      	cmp	r3, #64	@ 0x40
 8005e84:	f040 80b6 	bne.w	8005ff4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8145 	beq.w	8006128 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	f080 813e 	bcs.w	8006128 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005eb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ebe:	f000 8088 	beq.w	8005fd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	330c      	adds	r3, #12
 8005ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005eee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005efa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1d9      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3314      	adds	r3, #20
 8005f14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3314      	adds	r3, #20
 8005f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e1      	bne.n	8005f0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3314      	adds	r3, #20
 8005f50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3314      	adds	r3, #20
 8005f6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e3      	bne.n	8005f4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fa2:	f023 0310 	bic.w	r3, r3, #16
 8005fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005fb4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005fb6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e3      	bne.n	8005f90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fd fce4 	bl	800399a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f8b7 	bl	800615c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fee:	e09b      	b.n	8006128 <HAL_UART_IRQHandler+0x518>
 8005ff0:	08006361 	.word	0x08006361
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 808e 	beq.w	800612c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8089 	beq.w	800612c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	330c      	adds	r3, #12
 8006020:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800602a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006030:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	330c      	adds	r3, #12
 800603a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800603e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006040:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800604c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e3      	bne.n	800601a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3314      	adds	r3, #20
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	623b      	str	r3, [r7, #32]
   return(result);
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3314      	adds	r3, #20
 8006072:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006076:	633a      	str	r2, [r7, #48]	@ 0x30
 8006078:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800607c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e3      	bne.n	8006052 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330c      	adds	r3, #12
 800609e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0310 	bic.w	r3, r3, #16
 80060ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80060bc:	61fa      	str	r2, [r7, #28]
 80060be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	69b9      	ldr	r1, [r7, #24]
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	617b      	str	r3, [r7, #20]
   return(result);
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e3      	bne.n	8006098 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f83d 	bl	800615c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060e2:	e023      	b.n	800612c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d009      	beq.n	8006104 <HAL_UART_IRQHandler+0x4f4>
 80060f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f943 	bl	8006388 <UART_Transmit_IT>
    return;
 8006102:	e014      	b.n	800612e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00e      	beq.n	800612e <HAL_UART_IRQHandler+0x51e>
 8006110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d008      	beq.n	800612e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f983 	bl	8006428 <UART_EndTransmit_IT>
    return;
 8006122:	e004      	b.n	800612e <HAL_UART_IRQHandler+0x51e>
    return;
 8006124:	bf00      	nop
 8006126:	e002      	b.n	800612e <HAL_UART_IRQHandler+0x51e>
      return;
 8006128:	bf00      	nop
 800612a:	e000      	b.n	800612e <HAL_UART_IRQHandler+0x51e>
      return;
 800612c:	bf00      	nop
  }
}
 800612e:	37e8      	adds	r7, #232	@ 0xe8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006184:	e03b      	b.n	80061fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618c:	d037      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618e:	f7fd fae7 	bl	8003760 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	6a3a      	ldr	r2, [r7, #32]
 800619a:	429a      	cmp	r2, r3
 800619c:	d302      	bcc.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e03a      	b.n	800621e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f003 0304 	and.w	r3, r3, #4
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d023      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b80      	cmp	r3, #128	@ 0x80
 80061ba:	d020      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b40      	cmp	r3, #64	@ 0x40
 80061c0:	d01d      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d116      	bne.n	80061fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f857 	bl	800629a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2208      	movs	r2, #8
 80061f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e00f      	b.n	800621e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4013      	ands	r3, r2
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	429a      	cmp	r2, r3
 800620c:	bf0c      	ite	eq
 800620e:	2301      	moveq	r3, #1
 8006210:	2300      	movne	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	461a      	mov	r2, r3
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	429a      	cmp	r2, r3
 800621a:	d0b4      	beq.n	8006186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	4613      	mov	r3, r2
 8006232:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	88fa      	ldrh	r2, [r7, #6]
 800623e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2222      	movs	r2, #34	@ 0x22
 8006250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800626a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695a      	ldr	r2, [r3, #20]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0220 	orr.w	r2, r2, #32
 800628a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800629a:	b480      	push	{r7}
 800629c:	b095      	sub	sp, #84	@ 0x54
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	330c      	adds	r3, #12
 80062a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	330c      	adds	r3, #12
 80062c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80062c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e5      	bne.n	80062a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3314      	adds	r3, #20
 80062dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3314      	adds	r3, #20
 80062f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e5      	bne.n	80062d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630e:	2b01      	cmp	r3, #1
 8006310:	d119      	bne.n	8006346 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	330c      	adds	r3, #12
 8006318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	60bb      	str	r3, [r7, #8]
   return(result);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f023 0310 	bic.w	r3, r3, #16
 8006328:	647b      	str	r3, [r7, #68]	@ 0x44
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	330c      	adds	r3, #12
 8006330:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006332:	61ba      	str	r2, [r7, #24]
 8006334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	6979      	ldr	r1, [r7, #20]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	613b      	str	r3, [r7, #16]
   return(result);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e5      	bne.n	8006312 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006354:	bf00      	nop
 8006356:	3754      	adds	r7, #84	@ 0x54
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7ff fee4 	bl	8006148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b21      	cmp	r3, #33	@ 0x21
 800639a:	d13e      	bne.n	800641a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063a4:	d114      	bne.n	80063d0 <UART_Transmit_IT+0x48>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d110      	bne.n	80063d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	1c9a      	adds	r2, r3, #2
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	621a      	str	r2, [r3, #32]
 80063ce:	e008      	b.n	80063e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	1c59      	adds	r1, r3, #1
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6211      	str	r1, [r2, #32]
 80063da:	781a      	ldrb	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	4619      	mov	r1, r3
 80063f0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10f      	bne.n	8006416 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006404:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006414:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	e000      	b.n	800641c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800641a:	2302      	movs	r3, #2
  }
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800643e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff fe73 	bl	8006134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08c      	sub	sp, #48	@ 0x30
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b22      	cmp	r3, #34	@ 0x22
 800646a:	f040 80ae 	bne.w	80065ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006476:	d117      	bne.n	80064a8 <UART_Receive_IT+0x50>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d113      	bne.n	80064a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006480:	2300      	movs	r3, #0
 8006482:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006488:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006496:	b29a      	uxth	r2, r3
 8006498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	1c9a      	adds	r2, r3, #2
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80064a6:	e026      	b.n	80064f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ba:	d007      	beq.n	80064cc <UART_Receive_IT+0x74>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <UART_Receive_IT+0x82>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d106      	bne.n	80064da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e008      	b.n	80064ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29b      	uxth	r3, r3
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	4619      	mov	r1, r3
 8006504:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006506:	2b00      	cmp	r3, #0
 8006508:	d15d      	bne.n	80065c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0220 	bic.w	r2, r2, #32
 8006518:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006528:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695a      	ldr	r2, [r3, #20]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0201 	bic.w	r2, r2, #1
 8006538:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654c:	2b01      	cmp	r3, #1
 800654e:	d135      	bne.n	80065bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	613b      	str	r3, [r7, #16]
   return(result);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f023 0310 	bic.w	r3, r3, #16
 800656c:	627b      	str	r3, [r7, #36]	@ 0x24
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006576:	623a      	str	r2, [r7, #32]
 8006578:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	69f9      	ldr	r1, [r7, #28]
 800657c:	6a3a      	ldr	r2, [r7, #32]
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	61bb      	str	r3, [r7, #24]
   return(result);
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e5      	bne.n	8006556 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b10      	cmp	r3, #16
 8006596:	d10a      	bne.n	80065ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff fdd1 	bl	800615c <HAL_UARTEx_RxEventCallback>
 80065ba:	e002      	b.n	80065c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7fc fd95 	bl	80030ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e002      	b.n	80065cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	e000      	b.n	80065cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80065ca:	2302      	movs	r3, #2
  }
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3730      	adds	r7, #48	@ 0x30
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d8:	b0c0      	sub	sp, #256	@ 0x100
 80065da:	af00      	add	r7, sp, #0
 80065dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f0:	68d9      	ldr	r1, [r3, #12]
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	ea40 0301 	orr.w	r3, r0, r1
 80065fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	431a      	orrs	r2, r3
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	431a      	orrs	r2, r3
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	4313      	orrs	r3, r2
 800661c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800662c:	f021 010c 	bic.w	r1, r1, #12
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800663a:	430b      	orrs	r3, r1
 800663c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800664a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800664e:	6999      	ldr	r1, [r3, #24]
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	ea40 0301 	orr.w	r3, r0, r1
 800665a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b8f      	ldr	r3, [pc, #572]	@ (80068a0 <UART_SetConfig+0x2cc>)
 8006664:	429a      	cmp	r2, r3
 8006666:	d005      	beq.n	8006674 <UART_SetConfig+0xa0>
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4b8d      	ldr	r3, [pc, #564]	@ (80068a4 <UART_SetConfig+0x2d0>)
 8006670:	429a      	cmp	r2, r3
 8006672:	d104      	bne.n	800667e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006674:	f7fe f85e 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 8006678:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800667c:	e003      	b.n	8006686 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800667e:	f7fe f845 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 8006682:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006690:	f040 810c 	bne.w	80068ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006698:	2200      	movs	r2, #0
 800669a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800669e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80066a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80066a6:	4622      	mov	r2, r4
 80066a8:	462b      	mov	r3, r5
 80066aa:	1891      	adds	r1, r2, r2
 80066ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066ae:	415b      	adcs	r3, r3
 80066b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066b6:	4621      	mov	r1, r4
 80066b8:	eb12 0801 	adds.w	r8, r2, r1
 80066bc:	4629      	mov	r1, r5
 80066be:	eb43 0901 	adc.w	r9, r3, r1
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	f04f 0300 	mov.w	r3, #0
 80066ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066d6:	4690      	mov	r8, r2
 80066d8:	4699      	mov	r9, r3
 80066da:	4623      	mov	r3, r4
 80066dc:	eb18 0303 	adds.w	r3, r8, r3
 80066e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066e4:	462b      	mov	r3, r5
 80066e6:	eb49 0303 	adc.w	r3, r9, r3
 80066ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80066fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006702:	460b      	mov	r3, r1
 8006704:	18db      	adds	r3, r3, r3
 8006706:	653b      	str	r3, [r7, #80]	@ 0x50
 8006708:	4613      	mov	r3, r2
 800670a:	eb42 0303 	adc.w	r3, r2, r3
 800670e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006710:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006714:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006718:	f7fa fab6 	bl	8000c88 <__aeabi_uldivmod>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4b61      	ldr	r3, [pc, #388]	@ (80068a8 <UART_SetConfig+0x2d4>)
 8006722:	fba3 2302 	umull	r2, r3, r3, r2
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	011c      	lsls	r4, r3, #4
 800672a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800672e:	2200      	movs	r2, #0
 8006730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006734:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006738:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800673c:	4642      	mov	r2, r8
 800673e:	464b      	mov	r3, r9
 8006740:	1891      	adds	r1, r2, r2
 8006742:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006744:	415b      	adcs	r3, r3
 8006746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800674c:	4641      	mov	r1, r8
 800674e:	eb12 0a01 	adds.w	sl, r2, r1
 8006752:	4649      	mov	r1, r9
 8006754:	eb43 0b01 	adc.w	fp, r3, r1
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006764:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800676c:	4692      	mov	sl, r2
 800676e:	469b      	mov	fp, r3
 8006770:	4643      	mov	r3, r8
 8006772:	eb1a 0303 	adds.w	r3, sl, r3
 8006776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800677a:	464b      	mov	r3, r9
 800677c:	eb4b 0303 	adc.w	r3, fp, r3
 8006780:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006790:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006794:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006798:	460b      	mov	r3, r1
 800679a:	18db      	adds	r3, r3, r3
 800679c:	643b      	str	r3, [r7, #64]	@ 0x40
 800679e:	4613      	mov	r3, r2
 80067a0:	eb42 0303 	adc.w	r3, r2, r3
 80067a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80067a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80067aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067ae:	f7fa fa6b 	bl	8000c88 <__aeabi_uldivmod>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4611      	mov	r1, r2
 80067b8:	4b3b      	ldr	r3, [pc, #236]	@ (80068a8 <UART_SetConfig+0x2d4>)
 80067ba:	fba3 2301 	umull	r2, r3, r3, r1
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	2264      	movs	r2, #100	@ 0x64
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	1acb      	subs	r3, r1, r3
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80067ce:	4b36      	ldr	r3, [pc, #216]	@ (80068a8 <UART_SetConfig+0x2d4>)
 80067d0:	fba3 2302 	umull	r2, r3, r3, r2
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80067dc:	441c      	add	r4, r3
 80067de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80067ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	1891      	adds	r1, r2, r2
 80067f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80067f8:	415b      	adcs	r3, r3
 80067fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006800:	4641      	mov	r1, r8
 8006802:	1851      	adds	r1, r2, r1
 8006804:	6339      	str	r1, [r7, #48]	@ 0x30
 8006806:	4649      	mov	r1, r9
 8006808:	414b      	adcs	r3, r1
 800680a:	637b      	str	r3, [r7, #52]	@ 0x34
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006818:	4659      	mov	r1, fp
 800681a:	00cb      	lsls	r3, r1, #3
 800681c:	4651      	mov	r1, sl
 800681e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006822:	4651      	mov	r1, sl
 8006824:	00ca      	lsls	r2, r1, #3
 8006826:	4610      	mov	r0, r2
 8006828:	4619      	mov	r1, r3
 800682a:	4603      	mov	r3, r0
 800682c:	4642      	mov	r2, r8
 800682e:	189b      	adds	r3, r3, r2
 8006830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006834:	464b      	mov	r3, r9
 8006836:	460a      	mov	r2, r1
 8006838:	eb42 0303 	adc.w	r3, r2, r3
 800683c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800684c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006854:	460b      	mov	r3, r1
 8006856:	18db      	adds	r3, r3, r3
 8006858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800685a:	4613      	mov	r3, r2
 800685c:	eb42 0303 	adc.w	r3, r2, r3
 8006860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006866:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800686a:	f7fa fa0d 	bl	8000c88 <__aeabi_uldivmod>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4b0d      	ldr	r3, [pc, #52]	@ (80068a8 <UART_SetConfig+0x2d4>)
 8006874:	fba3 1302 	umull	r1, r3, r3, r2
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	2164      	movs	r1, #100	@ 0x64
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	3332      	adds	r3, #50	@ 0x32
 8006886:	4a08      	ldr	r2, [pc, #32]	@ (80068a8 <UART_SetConfig+0x2d4>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	f003 0207 	and.w	r2, r3, #7
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4422      	add	r2, r4
 800689a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800689c:	e106      	b.n	8006aac <UART_SetConfig+0x4d8>
 800689e:	bf00      	nop
 80068a0:	40011000 	.word	0x40011000
 80068a4:	40011400 	.word	0x40011400
 80068a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068b0:	2200      	movs	r2, #0
 80068b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80068be:	4642      	mov	r2, r8
 80068c0:	464b      	mov	r3, r9
 80068c2:	1891      	adds	r1, r2, r2
 80068c4:	6239      	str	r1, [r7, #32]
 80068c6:	415b      	adcs	r3, r3
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068ce:	4641      	mov	r1, r8
 80068d0:	1854      	adds	r4, r2, r1
 80068d2:	4649      	mov	r1, r9
 80068d4:	eb43 0501 	adc.w	r5, r3, r1
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	00eb      	lsls	r3, r5, #3
 80068e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068e6:	00e2      	lsls	r2, r4, #3
 80068e8:	4614      	mov	r4, r2
 80068ea:	461d      	mov	r5, r3
 80068ec:	4643      	mov	r3, r8
 80068ee:	18e3      	adds	r3, r4, r3
 80068f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068f4:	464b      	mov	r3, r9
 80068f6:	eb45 0303 	adc.w	r3, r5, r3
 80068fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800690a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800691a:	4629      	mov	r1, r5
 800691c:	008b      	lsls	r3, r1, #2
 800691e:	4621      	mov	r1, r4
 8006920:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006924:	4621      	mov	r1, r4
 8006926:	008a      	lsls	r2, r1, #2
 8006928:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800692c:	f7fa f9ac 	bl	8000c88 <__aeabi_uldivmod>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4b60      	ldr	r3, [pc, #384]	@ (8006ab8 <UART_SetConfig+0x4e4>)
 8006936:	fba3 2302 	umull	r2, r3, r3, r2
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	011c      	lsls	r4, r3, #4
 800693e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006942:	2200      	movs	r2, #0
 8006944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006948:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800694c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006950:	4642      	mov	r2, r8
 8006952:	464b      	mov	r3, r9
 8006954:	1891      	adds	r1, r2, r2
 8006956:	61b9      	str	r1, [r7, #24]
 8006958:	415b      	adcs	r3, r3
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006960:	4641      	mov	r1, r8
 8006962:	1851      	adds	r1, r2, r1
 8006964:	6139      	str	r1, [r7, #16]
 8006966:	4649      	mov	r1, r9
 8006968:	414b      	adcs	r3, r1
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006978:	4659      	mov	r1, fp
 800697a:	00cb      	lsls	r3, r1, #3
 800697c:	4651      	mov	r1, sl
 800697e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006982:	4651      	mov	r1, sl
 8006984:	00ca      	lsls	r2, r1, #3
 8006986:	4610      	mov	r0, r2
 8006988:	4619      	mov	r1, r3
 800698a:	4603      	mov	r3, r0
 800698c:	4642      	mov	r2, r8
 800698e:	189b      	adds	r3, r3, r2
 8006990:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006994:	464b      	mov	r3, r9
 8006996:	460a      	mov	r2, r1
 8006998:	eb42 0303 	adc.w	r3, r2, r3
 800699c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	f04f 0300 	mov.w	r3, #0
 80069b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069b8:	4649      	mov	r1, r9
 80069ba:	008b      	lsls	r3, r1, #2
 80069bc:	4641      	mov	r1, r8
 80069be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069c2:	4641      	mov	r1, r8
 80069c4:	008a      	lsls	r2, r1, #2
 80069c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80069ca:	f7fa f95d 	bl	8000c88 <__aeabi_uldivmod>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	4b38      	ldr	r3, [pc, #224]	@ (8006ab8 <UART_SetConfig+0x4e4>)
 80069d6:	fba3 2301 	umull	r2, r3, r3, r1
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	2264      	movs	r2, #100	@ 0x64
 80069de:	fb02 f303 	mul.w	r3, r2, r3
 80069e2:	1acb      	subs	r3, r1, r3
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	3332      	adds	r3, #50	@ 0x32
 80069e8:	4a33      	ldr	r2, [pc, #204]	@ (8006ab8 <UART_SetConfig+0x4e4>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069f4:	441c      	add	r4, r3
 80069f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069fa:	2200      	movs	r2, #0
 80069fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80069fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a04:	4642      	mov	r2, r8
 8006a06:	464b      	mov	r3, r9
 8006a08:	1891      	adds	r1, r2, r2
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	415b      	adcs	r3, r3
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a14:	4641      	mov	r1, r8
 8006a16:	1851      	adds	r1, r2, r1
 8006a18:	6039      	str	r1, [r7, #0]
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	414b      	adcs	r3, r1
 8006a1e:	607b      	str	r3, [r7, #4]
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	00cb      	lsls	r3, r1, #3
 8006a30:	4651      	mov	r1, sl
 8006a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a36:	4651      	mov	r1, sl
 8006a38:	00ca      	lsls	r2, r1, #3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4642      	mov	r2, r8
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a46:	464b      	mov	r3, r9
 8006a48:	460a      	mov	r2, r1
 8006a4a:	eb42 0303 	adc.w	r3, r2, r3
 8006a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a68:	4649      	mov	r1, r9
 8006a6a:	008b      	lsls	r3, r1, #2
 8006a6c:	4641      	mov	r1, r8
 8006a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a72:	4641      	mov	r1, r8
 8006a74:	008a      	lsls	r2, r1, #2
 8006a76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a7a:	f7fa f905 	bl	8000c88 <__aeabi_uldivmod>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab8 <UART_SetConfig+0x4e4>)
 8006a84:	fba3 1302 	umull	r1, r3, r3, r2
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	2164      	movs	r1, #100	@ 0x64
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	3332      	adds	r3, #50	@ 0x32
 8006a96:	4a08      	ldr	r2, [pc, #32]	@ (8006ab8 <UART_SetConfig+0x4e4>)
 8006a98:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	f003 020f 	and.w	r2, r3, #15
 8006aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4422      	add	r2, r4
 8006aaa:	609a      	str	r2, [r3, #8]
}
 8006aac:	bf00      	nop
 8006aae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ab8:	51eb851f 	.word	0x51eb851f

08006abc <atof>:
 8006abc:	2100      	movs	r1, #0
 8006abe:	f000 be09 	b.w	80076d4 <strtod>

08006ac2 <sulp>:
 8006ac2:	b570      	push	{r4, r5, r6, lr}
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	ec45 4b10 	vmov	d0, r4, r5
 8006acc:	4616      	mov	r6, r2
 8006ace:	f003 fcf7 	bl	800a4c0 <__ulp>
 8006ad2:	ec51 0b10 	vmov	r0, r1, d0
 8006ad6:	b17e      	cbz	r6, 8006af8 <sulp+0x36>
 8006ad8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006adc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dd09      	ble.n	8006af8 <sulp+0x36>
 8006ae4:	051b      	lsls	r3, r3, #20
 8006ae6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006aea:	2400      	movs	r4, #0
 8006aec:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006af0:	4622      	mov	r2, r4
 8006af2:	462b      	mov	r3, r5
 8006af4:	f7f9 fd80 	bl	80005f8 <__aeabi_dmul>
 8006af8:	ec41 0b10 	vmov	d0, r0, r1
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b00 <_strtod_l>:
 8006b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	b09f      	sub	sp, #124	@ 0x7c
 8006b06:	460c      	mov	r4, r1
 8006b08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006b0e:	9005      	str	r0, [sp, #20]
 8006b10:	f04f 0a00 	mov.w	sl, #0
 8006b14:	f04f 0b00 	mov.w	fp, #0
 8006b18:	460a      	mov	r2, r1
 8006b1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b1c:	7811      	ldrb	r1, [r2, #0]
 8006b1e:	292b      	cmp	r1, #43	@ 0x2b
 8006b20:	d04a      	beq.n	8006bb8 <_strtod_l+0xb8>
 8006b22:	d838      	bhi.n	8006b96 <_strtod_l+0x96>
 8006b24:	290d      	cmp	r1, #13
 8006b26:	d832      	bhi.n	8006b8e <_strtod_l+0x8e>
 8006b28:	2908      	cmp	r1, #8
 8006b2a:	d832      	bhi.n	8006b92 <_strtod_l+0x92>
 8006b2c:	2900      	cmp	r1, #0
 8006b2e:	d03b      	beq.n	8006ba8 <_strtod_l+0xa8>
 8006b30:	2200      	movs	r2, #0
 8006b32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006b34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006b36:	782a      	ldrb	r2, [r5, #0]
 8006b38:	2a30      	cmp	r2, #48	@ 0x30
 8006b3a:	f040 80b3 	bne.w	8006ca4 <_strtod_l+0x1a4>
 8006b3e:	786a      	ldrb	r2, [r5, #1]
 8006b40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b44:	2a58      	cmp	r2, #88	@ 0x58
 8006b46:	d16e      	bne.n	8006c26 <_strtod_l+0x126>
 8006b48:	9302      	str	r3, [sp, #8]
 8006b4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b4c:	9301      	str	r3, [sp, #4]
 8006b4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	4a8e      	ldr	r2, [pc, #568]	@ (8006d8c <_strtod_l+0x28c>)
 8006b54:	9805      	ldr	r0, [sp, #20]
 8006b56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006b58:	a919      	add	r1, sp, #100	@ 0x64
 8006b5a:	f002 fda3 	bl	80096a4 <__gethex>
 8006b5e:	f010 060f 	ands.w	r6, r0, #15
 8006b62:	4604      	mov	r4, r0
 8006b64:	d005      	beq.n	8006b72 <_strtod_l+0x72>
 8006b66:	2e06      	cmp	r6, #6
 8006b68:	d128      	bne.n	8006bbc <_strtod_l+0xbc>
 8006b6a:	3501      	adds	r5, #1
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006b70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f040 858e 	bne.w	8007696 <_strtod_l+0xb96>
 8006b7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b7c:	b1cb      	cbz	r3, 8006bb2 <_strtod_l+0xb2>
 8006b7e:	4652      	mov	r2, sl
 8006b80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006b84:	ec43 2b10 	vmov	d0, r2, r3
 8006b88:	b01f      	add	sp, #124	@ 0x7c
 8006b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8e:	2920      	cmp	r1, #32
 8006b90:	d1ce      	bne.n	8006b30 <_strtod_l+0x30>
 8006b92:	3201      	adds	r2, #1
 8006b94:	e7c1      	b.n	8006b1a <_strtod_l+0x1a>
 8006b96:	292d      	cmp	r1, #45	@ 0x2d
 8006b98:	d1ca      	bne.n	8006b30 <_strtod_l+0x30>
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006b9e:	1c51      	adds	r1, r2, #1
 8006ba0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006ba2:	7852      	ldrb	r2, [r2, #1]
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	d1c5      	bne.n	8006b34 <_strtod_l+0x34>
 8006ba8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006baa:	9419      	str	r4, [sp, #100]	@ 0x64
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f040 8570 	bne.w	8007692 <_strtod_l+0xb92>
 8006bb2:	4652      	mov	r2, sl
 8006bb4:	465b      	mov	r3, fp
 8006bb6:	e7e5      	b.n	8006b84 <_strtod_l+0x84>
 8006bb8:	2100      	movs	r1, #0
 8006bba:	e7ef      	b.n	8006b9c <_strtod_l+0x9c>
 8006bbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006bbe:	b13a      	cbz	r2, 8006bd0 <_strtod_l+0xd0>
 8006bc0:	2135      	movs	r1, #53	@ 0x35
 8006bc2:	a81c      	add	r0, sp, #112	@ 0x70
 8006bc4:	f003 fd76 	bl	800a6b4 <__copybits>
 8006bc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bca:	9805      	ldr	r0, [sp, #20]
 8006bcc:	f003 f944 	bl	8009e58 <_Bfree>
 8006bd0:	3e01      	subs	r6, #1
 8006bd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006bd4:	2e04      	cmp	r6, #4
 8006bd6:	d806      	bhi.n	8006be6 <_strtod_l+0xe6>
 8006bd8:	e8df f006 	tbb	[pc, r6]
 8006bdc:	201d0314 	.word	0x201d0314
 8006be0:	14          	.byte	0x14
 8006be1:	00          	.byte	0x00
 8006be2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006be6:	05e1      	lsls	r1, r4, #23
 8006be8:	bf48      	it	mi
 8006bea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006bee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bf2:	0d1b      	lsrs	r3, r3, #20
 8006bf4:	051b      	lsls	r3, r3, #20
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1bb      	bne.n	8006b72 <_strtod_l+0x72>
 8006bfa:	f001 fdeb 	bl	80087d4 <__errno>
 8006bfe:	2322      	movs	r3, #34	@ 0x22
 8006c00:	6003      	str	r3, [r0, #0]
 8006c02:	e7b6      	b.n	8006b72 <_strtod_l+0x72>
 8006c04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006c08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006c0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c14:	e7e7      	b.n	8006be6 <_strtod_l+0xe6>
 8006c16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006d94 <_strtod_l+0x294>
 8006c1a:	e7e4      	b.n	8006be6 <_strtod_l+0xe6>
 8006c1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006c20:	f04f 3aff 	mov.w	sl, #4294967295
 8006c24:	e7df      	b.n	8006be6 <_strtod_l+0xe6>
 8006c26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	2b30      	cmp	r3, #48	@ 0x30
 8006c30:	d0f9      	beq.n	8006c26 <_strtod_l+0x126>
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d09d      	beq.n	8006b72 <_strtod_l+0x72>
 8006c36:	2301      	movs	r3, #1
 8006c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9308      	str	r3, [sp, #32]
 8006c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c44:	461f      	mov	r7, r3
 8006c46:	220a      	movs	r2, #10
 8006c48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006c4a:	7805      	ldrb	r5, [r0, #0]
 8006c4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006c50:	b2d9      	uxtb	r1, r3
 8006c52:	2909      	cmp	r1, #9
 8006c54:	d928      	bls.n	8006ca8 <_strtod_l+0x1a8>
 8006c56:	494e      	ldr	r1, [pc, #312]	@ (8006d90 <_strtod_l+0x290>)
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f001 fcef 	bl	800863c <strncmp>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d032      	beq.n	8006cc8 <_strtod_l+0x1c8>
 8006c62:	2000      	movs	r0, #0
 8006c64:	462a      	mov	r2, r5
 8006c66:	4681      	mov	r9, r0
 8006c68:	463d      	mov	r5, r7
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2a65      	cmp	r2, #101	@ 0x65
 8006c6e:	d001      	beq.n	8006c74 <_strtod_l+0x174>
 8006c70:	2a45      	cmp	r2, #69	@ 0x45
 8006c72:	d114      	bne.n	8006c9e <_strtod_l+0x19e>
 8006c74:	b91d      	cbnz	r5, 8006c7e <_strtod_l+0x17e>
 8006c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c78:	4302      	orrs	r2, r0
 8006c7a:	d095      	beq.n	8006ba8 <_strtod_l+0xa8>
 8006c7c:	2500      	movs	r5, #0
 8006c7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006c80:	1c62      	adds	r2, r4, #1
 8006c82:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c84:	7862      	ldrb	r2, [r4, #1]
 8006c86:	2a2b      	cmp	r2, #43	@ 0x2b
 8006c88:	d077      	beq.n	8006d7a <_strtod_l+0x27a>
 8006c8a:	2a2d      	cmp	r2, #45	@ 0x2d
 8006c8c:	d07b      	beq.n	8006d86 <_strtod_l+0x286>
 8006c8e:	f04f 0c00 	mov.w	ip, #0
 8006c92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006c96:	2909      	cmp	r1, #9
 8006c98:	f240 8082 	bls.w	8006da0 <_strtod_l+0x2a0>
 8006c9c:	9419      	str	r4, [sp, #100]	@ 0x64
 8006c9e:	f04f 0800 	mov.w	r8, #0
 8006ca2:	e0a2      	b.n	8006dea <_strtod_l+0x2ea>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e7c7      	b.n	8006c38 <_strtod_l+0x138>
 8006ca8:	2f08      	cmp	r7, #8
 8006caa:	bfd5      	itete	le
 8006cac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006cae:	9908      	ldrgt	r1, [sp, #32]
 8006cb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8006cb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006cb8:	f100 0001 	add.w	r0, r0, #1
 8006cbc:	bfd4      	ite	le
 8006cbe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006cc0:	9308      	strgt	r3, [sp, #32]
 8006cc2:	3701      	adds	r7, #1
 8006cc4:	9019      	str	r0, [sp, #100]	@ 0x64
 8006cc6:	e7bf      	b.n	8006c48 <_strtod_l+0x148>
 8006cc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cce:	785a      	ldrb	r2, [r3, #1]
 8006cd0:	b37f      	cbz	r7, 8006d32 <_strtod_l+0x232>
 8006cd2:	4681      	mov	r9, r0
 8006cd4:	463d      	mov	r5, r7
 8006cd6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006cda:	2b09      	cmp	r3, #9
 8006cdc:	d912      	bls.n	8006d04 <_strtod_l+0x204>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e7c4      	b.n	8006c6c <_strtod_l+0x16c>
 8006ce2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ce8:	785a      	ldrb	r2, [r3, #1]
 8006cea:	3001      	adds	r0, #1
 8006cec:	2a30      	cmp	r2, #48	@ 0x30
 8006cee:	d0f8      	beq.n	8006ce2 <_strtod_l+0x1e2>
 8006cf0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	f200 84d3 	bhi.w	80076a0 <_strtod_l+0xba0>
 8006cfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cfe:	4681      	mov	r9, r0
 8006d00:	2000      	movs	r0, #0
 8006d02:	4605      	mov	r5, r0
 8006d04:	3a30      	subs	r2, #48	@ 0x30
 8006d06:	f100 0301 	add.w	r3, r0, #1
 8006d0a:	d02a      	beq.n	8006d62 <_strtod_l+0x262>
 8006d0c:	4499      	add	r9, r3
 8006d0e:	eb00 0c05 	add.w	ip, r0, r5
 8006d12:	462b      	mov	r3, r5
 8006d14:	210a      	movs	r1, #10
 8006d16:	4563      	cmp	r3, ip
 8006d18:	d10d      	bne.n	8006d36 <_strtod_l+0x236>
 8006d1a:	1c69      	adds	r1, r5, #1
 8006d1c:	4401      	add	r1, r0
 8006d1e:	4428      	add	r0, r5
 8006d20:	2808      	cmp	r0, #8
 8006d22:	dc16      	bgt.n	8006d52 <_strtod_l+0x252>
 8006d24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d26:	230a      	movs	r3, #10
 8006d28:	fb03 2300 	mla	r3, r3, r0, r2
 8006d2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e018      	b.n	8006d64 <_strtod_l+0x264>
 8006d32:	4638      	mov	r0, r7
 8006d34:	e7da      	b.n	8006cec <_strtod_l+0x1ec>
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	f103 0301 	add.w	r3, r3, #1
 8006d3c:	dc03      	bgt.n	8006d46 <_strtod_l+0x246>
 8006d3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006d40:	434e      	muls	r6, r1
 8006d42:	960a      	str	r6, [sp, #40]	@ 0x28
 8006d44:	e7e7      	b.n	8006d16 <_strtod_l+0x216>
 8006d46:	2b10      	cmp	r3, #16
 8006d48:	bfde      	ittt	le
 8006d4a:	9e08      	ldrle	r6, [sp, #32]
 8006d4c:	434e      	mulle	r6, r1
 8006d4e:	9608      	strle	r6, [sp, #32]
 8006d50:	e7e1      	b.n	8006d16 <_strtod_l+0x216>
 8006d52:	280f      	cmp	r0, #15
 8006d54:	dceb      	bgt.n	8006d2e <_strtod_l+0x22e>
 8006d56:	9808      	ldr	r0, [sp, #32]
 8006d58:	230a      	movs	r3, #10
 8006d5a:	fb03 2300 	mla	r3, r3, r0, r2
 8006d5e:	9308      	str	r3, [sp, #32]
 8006d60:	e7e5      	b.n	8006d2e <_strtod_l+0x22e>
 8006d62:	4629      	mov	r1, r5
 8006d64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d66:	1c50      	adds	r0, r2, #1
 8006d68:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d6a:	7852      	ldrb	r2, [r2, #1]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	460d      	mov	r5, r1
 8006d70:	e7b1      	b.n	8006cd6 <_strtod_l+0x1d6>
 8006d72:	f04f 0900 	mov.w	r9, #0
 8006d76:	2301      	movs	r3, #1
 8006d78:	e77d      	b.n	8006c76 <_strtod_l+0x176>
 8006d7a:	f04f 0c00 	mov.w	ip, #0
 8006d7e:	1ca2      	adds	r2, r4, #2
 8006d80:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d82:	78a2      	ldrb	r2, [r4, #2]
 8006d84:	e785      	b.n	8006c92 <_strtod_l+0x192>
 8006d86:	f04f 0c01 	mov.w	ip, #1
 8006d8a:	e7f8      	b.n	8006d7e <_strtod_l+0x27e>
 8006d8c:	0800b690 	.word	0x0800b690
 8006d90:	0800b678 	.word	0x0800b678
 8006d94:	7ff00000 	.word	0x7ff00000
 8006d98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d9a:	1c51      	adds	r1, r2, #1
 8006d9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d9e:	7852      	ldrb	r2, [r2, #1]
 8006da0:	2a30      	cmp	r2, #48	@ 0x30
 8006da2:	d0f9      	beq.n	8006d98 <_strtod_l+0x298>
 8006da4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006da8:	2908      	cmp	r1, #8
 8006daa:	f63f af78 	bhi.w	8006c9e <_strtod_l+0x19e>
 8006dae:	3a30      	subs	r2, #48	@ 0x30
 8006db0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006db2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006db4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006db6:	f04f 080a 	mov.w	r8, #10
 8006dba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006dbc:	1c56      	adds	r6, r2, #1
 8006dbe:	9619      	str	r6, [sp, #100]	@ 0x64
 8006dc0:	7852      	ldrb	r2, [r2, #1]
 8006dc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006dc6:	f1be 0f09 	cmp.w	lr, #9
 8006dca:	d939      	bls.n	8006e40 <_strtod_l+0x340>
 8006dcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006dce:	1a76      	subs	r6, r6, r1
 8006dd0:	2e08      	cmp	r6, #8
 8006dd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006dd6:	dc03      	bgt.n	8006de0 <_strtod_l+0x2e0>
 8006dd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006dda:	4588      	cmp	r8, r1
 8006ddc:	bfa8      	it	ge
 8006dde:	4688      	movge	r8, r1
 8006de0:	f1bc 0f00 	cmp.w	ip, #0
 8006de4:	d001      	beq.n	8006dea <_strtod_l+0x2ea>
 8006de6:	f1c8 0800 	rsb	r8, r8, #0
 8006dea:	2d00      	cmp	r5, #0
 8006dec:	d14e      	bne.n	8006e8c <_strtod_l+0x38c>
 8006dee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006df0:	4308      	orrs	r0, r1
 8006df2:	f47f aebe 	bne.w	8006b72 <_strtod_l+0x72>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f47f aed6 	bne.w	8006ba8 <_strtod_l+0xa8>
 8006dfc:	2a69      	cmp	r2, #105	@ 0x69
 8006dfe:	d028      	beq.n	8006e52 <_strtod_l+0x352>
 8006e00:	dc25      	bgt.n	8006e4e <_strtod_l+0x34e>
 8006e02:	2a49      	cmp	r2, #73	@ 0x49
 8006e04:	d025      	beq.n	8006e52 <_strtod_l+0x352>
 8006e06:	2a4e      	cmp	r2, #78	@ 0x4e
 8006e08:	f47f aece 	bne.w	8006ba8 <_strtod_l+0xa8>
 8006e0c:	499b      	ldr	r1, [pc, #620]	@ (800707c <_strtod_l+0x57c>)
 8006e0e:	a819      	add	r0, sp, #100	@ 0x64
 8006e10:	f002 fe6a 	bl	8009ae8 <__match>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	f43f aec7 	beq.w	8006ba8 <_strtod_l+0xa8>
 8006e1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b28      	cmp	r3, #40	@ 0x28
 8006e20:	d12e      	bne.n	8006e80 <_strtod_l+0x380>
 8006e22:	4997      	ldr	r1, [pc, #604]	@ (8007080 <_strtod_l+0x580>)
 8006e24:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e26:	a819      	add	r0, sp, #100	@ 0x64
 8006e28:	f002 fe72 	bl	8009b10 <__hexnan>
 8006e2c:	2805      	cmp	r0, #5
 8006e2e:	d127      	bne.n	8006e80 <_strtod_l+0x380>
 8006e30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006e36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006e3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006e3e:	e698      	b.n	8006b72 <_strtod_l+0x72>
 8006e40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e42:	fb08 2101 	mla	r1, r8, r1, r2
 8006e46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006e4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e4c:	e7b5      	b.n	8006dba <_strtod_l+0x2ba>
 8006e4e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006e50:	e7da      	b.n	8006e08 <_strtod_l+0x308>
 8006e52:	498c      	ldr	r1, [pc, #560]	@ (8007084 <_strtod_l+0x584>)
 8006e54:	a819      	add	r0, sp, #100	@ 0x64
 8006e56:	f002 fe47 	bl	8009ae8 <__match>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	f43f aea4 	beq.w	8006ba8 <_strtod_l+0xa8>
 8006e60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e62:	4989      	ldr	r1, [pc, #548]	@ (8007088 <_strtod_l+0x588>)
 8006e64:	3b01      	subs	r3, #1
 8006e66:	a819      	add	r0, sp, #100	@ 0x64
 8006e68:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e6a:	f002 fe3d 	bl	8009ae8 <__match>
 8006e6e:	b910      	cbnz	r0, 8006e76 <_strtod_l+0x376>
 8006e70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e72:	3301      	adds	r3, #1
 8006e74:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007098 <_strtod_l+0x598>
 8006e7a:	f04f 0a00 	mov.w	sl, #0
 8006e7e:	e678      	b.n	8006b72 <_strtod_l+0x72>
 8006e80:	4882      	ldr	r0, [pc, #520]	@ (800708c <_strtod_l+0x58c>)
 8006e82:	f001 fce5 	bl	8008850 <nan>
 8006e86:	ec5b ab10 	vmov	sl, fp, d0
 8006e8a:	e672      	b.n	8006b72 <_strtod_l+0x72>
 8006e8c:	eba8 0309 	sub.w	r3, r8, r9
 8006e90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e94:	2f00      	cmp	r7, #0
 8006e96:	bf08      	it	eq
 8006e98:	462f      	moveq	r7, r5
 8006e9a:	2d10      	cmp	r5, #16
 8006e9c:	462c      	mov	r4, r5
 8006e9e:	bfa8      	it	ge
 8006ea0:	2410      	movge	r4, #16
 8006ea2:	f7f9 fb2f 	bl	8000504 <__aeabi_ui2d>
 8006ea6:	2d09      	cmp	r5, #9
 8006ea8:	4682      	mov	sl, r0
 8006eaa:	468b      	mov	fp, r1
 8006eac:	dc13      	bgt.n	8006ed6 <_strtod_l+0x3d6>
 8006eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f43f ae5e 	beq.w	8006b72 <_strtod_l+0x72>
 8006eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb8:	dd78      	ble.n	8006fac <_strtod_l+0x4ac>
 8006eba:	2b16      	cmp	r3, #22
 8006ebc:	dc5f      	bgt.n	8006f7e <_strtod_l+0x47e>
 8006ebe:	4974      	ldr	r1, [pc, #464]	@ (8007090 <_strtod_l+0x590>)
 8006ec0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ec8:	4652      	mov	r2, sl
 8006eca:	465b      	mov	r3, fp
 8006ecc:	f7f9 fb94 	bl	80005f8 <__aeabi_dmul>
 8006ed0:	4682      	mov	sl, r0
 8006ed2:	468b      	mov	fp, r1
 8006ed4:	e64d      	b.n	8006b72 <_strtod_l+0x72>
 8006ed6:	4b6e      	ldr	r3, [pc, #440]	@ (8007090 <_strtod_l+0x590>)
 8006ed8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006edc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ee0:	f7f9 fb8a 	bl	80005f8 <__aeabi_dmul>
 8006ee4:	4682      	mov	sl, r0
 8006ee6:	9808      	ldr	r0, [sp, #32]
 8006ee8:	468b      	mov	fp, r1
 8006eea:	f7f9 fb0b 	bl	8000504 <__aeabi_ui2d>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	f7f9 f9c9 	bl	800028c <__adddf3>
 8006efa:	2d0f      	cmp	r5, #15
 8006efc:	4682      	mov	sl, r0
 8006efe:	468b      	mov	fp, r1
 8006f00:	ddd5      	ble.n	8006eae <_strtod_l+0x3ae>
 8006f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f04:	1b2c      	subs	r4, r5, r4
 8006f06:	441c      	add	r4, r3
 8006f08:	2c00      	cmp	r4, #0
 8006f0a:	f340 8096 	ble.w	800703a <_strtod_l+0x53a>
 8006f0e:	f014 030f 	ands.w	r3, r4, #15
 8006f12:	d00a      	beq.n	8006f2a <_strtod_l+0x42a>
 8006f14:	495e      	ldr	r1, [pc, #376]	@ (8007090 <_strtod_l+0x590>)
 8006f16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f1a:	4652      	mov	r2, sl
 8006f1c:	465b      	mov	r3, fp
 8006f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f22:	f7f9 fb69 	bl	80005f8 <__aeabi_dmul>
 8006f26:	4682      	mov	sl, r0
 8006f28:	468b      	mov	fp, r1
 8006f2a:	f034 040f 	bics.w	r4, r4, #15
 8006f2e:	d073      	beq.n	8007018 <_strtod_l+0x518>
 8006f30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006f34:	dd48      	ble.n	8006fc8 <_strtod_l+0x4c8>
 8006f36:	2400      	movs	r4, #0
 8006f38:	46a0      	mov	r8, r4
 8006f3a:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f3c:	46a1      	mov	r9, r4
 8006f3e:	9a05      	ldr	r2, [sp, #20]
 8006f40:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007098 <_strtod_l+0x598>
 8006f44:	2322      	movs	r3, #34	@ 0x22
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	f04f 0a00 	mov.w	sl, #0
 8006f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f43f ae0f 	beq.w	8006b72 <_strtod_l+0x72>
 8006f54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f56:	9805      	ldr	r0, [sp, #20]
 8006f58:	f002 ff7e 	bl	8009e58 <_Bfree>
 8006f5c:	9805      	ldr	r0, [sp, #20]
 8006f5e:	4649      	mov	r1, r9
 8006f60:	f002 ff7a 	bl	8009e58 <_Bfree>
 8006f64:	9805      	ldr	r0, [sp, #20]
 8006f66:	4641      	mov	r1, r8
 8006f68:	f002 ff76 	bl	8009e58 <_Bfree>
 8006f6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f6e:	9805      	ldr	r0, [sp, #20]
 8006f70:	f002 ff72 	bl	8009e58 <_Bfree>
 8006f74:	9805      	ldr	r0, [sp, #20]
 8006f76:	4621      	mov	r1, r4
 8006f78:	f002 ff6e 	bl	8009e58 <_Bfree>
 8006f7c:	e5f9      	b.n	8006b72 <_strtod_l+0x72>
 8006f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006f84:	4293      	cmp	r3, r2
 8006f86:	dbbc      	blt.n	8006f02 <_strtod_l+0x402>
 8006f88:	4c41      	ldr	r4, [pc, #260]	@ (8007090 <_strtod_l+0x590>)
 8006f8a:	f1c5 050f 	rsb	r5, r5, #15
 8006f8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006f92:	4652      	mov	r2, sl
 8006f94:	465b      	mov	r3, fp
 8006f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f9a:	f7f9 fb2d 	bl	80005f8 <__aeabi_dmul>
 8006f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa0:	1b5d      	subs	r5, r3, r5
 8006fa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006fa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006faa:	e78f      	b.n	8006ecc <_strtod_l+0x3cc>
 8006fac:	3316      	adds	r3, #22
 8006fae:	dba8      	blt.n	8006f02 <_strtod_l+0x402>
 8006fb0:	4b37      	ldr	r3, [pc, #220]	@ (8007090 <_strtod_l+0x590>)
 8006fb2:	eba9 0808 	sub.w	r8, r9, r8
 8006fb6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006fba:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006fbe:	4650      	mov	r0, sl
 8006fc0:	4659      	mov	r1, fp
 8006fc2:	f7f9 fc43 	bl	800084c <__aeabi_ddiv>
 8006fc6:	e783      	b.n	8006ed0 <_strtod_l+0x3d0>
 8006fc8:	4b32      	ldr	r3, [pc, #200]	@ (8007094 <_strtod_l+0x594>)
 8006fca:	9308      	str	r3, [sp, #32]
 8006fcc:	2300      	movs	r3, #0
 8006fce:	1124      	asrs	r4, r4, #4
 8006fd0:	4650      	mov	r0, sl
 8006fd2:	4659      	mov	r1, fp
 8006fd4:	461e      	mov	r6, r3
 8006fd6:	2c01      	cmp	r4, #1
 8006fd8:	dc21      	bgt.n	800701e <_strtod_l+0x51e>
 8006fda:	b10b      	cbz	r3, 8006fe0 <_strtod_l+0x4e0>
 8006fdc:	4682      	mov	sl, r0
 8006fde:	468b      	mov	fp, r1
 8006fe0:	492c      	ldr	r1, [pc, #176]	@ (8007094 <_strtod_l+0x594>)
 8006fe2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006fe6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006fea:	4652      	mov	r2, sl
 8006fec:	465b      	mov	r3, fp
 8006fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ff2:	f7f9 fb01 	bl	80005f8 <__aeabi_dmul>
 8006ff6:	4b28      	ldr	r3, [pc, #160]	@ (8007098 <_strtod_l+0x598>)
 8006ff8:	460a      	mov	r2, r1
 8006ffa:	400b      	ands	r3, r1
 8006ffc:	4927      	ldr	r1, [pc, #156]	@ (800709c <_strtod_l+0x59c>)
 8006ffe:	428b      	cmp	r3, r1
 8007000:	4682      	mov	sl, r0
 8007002:	d898      	bhi.n	8006f36 <_strtod_l+0x436>
 8007004:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007008:	428b      	cmp	r3, r1
 800700a:	bf86      	itte	hi
 800700c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80070a0 <_strtod_l+0x5a0>
 8007010:	f04f 3aff 	movhi.w	sl, #4294967295
 8007014:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007018:	2300      	movs	r3, #0
 800701a:	9308      	str	r3, [sp, #32]
 800701c:	e07a      	b.n	8007114 <_strtod_l+0x614>
 800701e:	07e2      	lsls	r2, r4, #31
 8007020:	d505      	bpl.n	800702e <_strtod_l+0x52e>
 8007022:	9b08      	ldr	r3, [sp, #32]
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f7f9 fae6 	bl	80005f8 <__aeabi_dmul>
 800702c:	2301      	movs	r3, #1
 800702e:	9a08      	ldr	r2, [sp, #32]
 8007030:	3208      	adds	r2, #8
 8007032:	3601      	adds	r6, #1
 8007034:	1064      	asrs	r4, r4, #1
 8007036:	9208      	str	r2, [sp, #32]
 8007038:	e7cd      	b.n	8006fd6 <_strtod_l+0x4d6>
 800703a:	d0ed      	beq.n	8007018 <_strtod_l+0x518>
 800703c:	4264      	negs	r4, r4
 800703e:	f014 020f 	ands.w	r2, r4, #15
 8007042:	d00a      	beq.n	800705a <_strtod_l+0x55a>
 8007044:	4b12      	ldr	r3, [pc, #72]	@ (8007090 <_strtod_l+0x590>)
 8007046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800704a:	4650      	mov	r0, sl
 800704c:	4659      	mov	r1, fp
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f7f9 fbfb 	bl	800084c <__aeabi_ddiv>
 8007056:	4682      	mov	sl, r0
 8007058:	468b      	mov	fp, r1
 800705a:	1124      	asrs	r4, r4, #4
 800705c:	d0dc      	beq.n	8007018 <_strtod_l+0x518>
 800705e:	2c1f      	cmp	r4, #31
 8007060:	dd20      	ble.n	80070a4 <_strtod_l+0x5a4>
 8007062:	2400      	movs	r4, #0
 8007064:	46a0      	mov	r8, r4
 8007066:	940a      	str	r4, [sp, #40]	@ 0x28
 8007068:	46a1      	mov	r9, r4
 800706a:	9a05      	ldr	r2, [sp, #20]
 800706c:	2322      	movs	r3, #34	@ 0x22
 800706e:	f04f 0a00 	mov.w	sl, #0
 8007072:	f04f 0b00 	mov.w	fp, #0
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	e768      	b.n	8006f4c <_strtod_l+0x44c>
 800707a:	bf00      	nop
 800707c:	0800b6dd 	.word	0x0800b6dd
 8007080:	0800b67c 	.word	0x0800b67c
 8007084:	0800b6d5 	.word	0x0800b6d5
 8007088:	0800b7c1 	.word	0x0800b7c1
 800708c:	0800b7bd 	.word	0x0800b7bd
 8007090:	0800b928 	.word	0x0800b928
 8007094:	0800b900 	.word	0x0800b900
 8007098:	7ff00000 	.word	0x7ff00000
 800709c:	7ca00000 	.word	0x7ca00000
 80070a0:	7fefffff 	.word	0x7fefffff
 80070a4:	f014 0310 	ands.w	r3, r4, #16
 80070a8:	bf18      	it	ne
 80070aa:	236a      	movne	r3, #106	@ 0x6a
 80070ac:	4ea9      	ldr	r6, [pc, #676]	@ (8007354 <_strtod_l+0x854>)
 80070ae:	9308      	str	r3, [sp, #32]
 80070b0:	4650      	mov	r0, sl
 80070b2:	4659      	mov	r1, fp
 80070b4:	2300      	movs	r3, #0
 80070b6:	07e2      	lsls	r2, r4, #31
 80070b8:	d504      	bpl.n	80070c4 <_strtod_l+0x5c4>
 80070ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070be:	f7f9 fa9b 	bl	80005f8 <__aeabi_dmul>
 80070c2:	2301      	movs	r3, #1
 80070c4:	1064      	asrs	r4, r4, #1
 80070c6:	f106 0608 	add.w	r6, r6, #8
 80070ca:	d1f4      	bne.n	80070b6 <_strtod_l+0x5b6>
 80070cc:	b10b      	cbz	r3, 80070d2 <_strtod_l+0x5d2>
 80070ce:	4682      	mov	sl, r0
 80070d0:	468b      	mov	fp, r1
 80070d2:	9b08      	ldr	r3, [sp, #32]
 80070d4:	b1b3      	cbz	r3, 8007104 <_strtod_l+0x604>
 80070d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80070da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80070de:	2b00      	cmp	r3, #0
 80070e0:	4659      	mov	r1, fp
 80070e2:	dd0f      	ble.n	8007104 <_strtod_l+0x604>
 80070e4:	2b1f      	cmp	r3, #31
 80070e6:	dd55      	ble.n	8007194 <_strtod_l+0x694>
 80070e8:	2b34      	cmp	r3, #52	@ 0x34
 80070ea:	bfde      	ittt	le
 80070ec:	f04f 33ff 	movle.w	r3, #4294967295
 80070f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80070f4:	4093      	lslle	r3, r2
 80070f6:	f04f 0a00 	mov.w	sl, #0
 80070fa:	bfcc      	ite	gt
 80070fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007100:	ea03 0b01 	andle.w	fp, r3, r1
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	4650      	mov	r0, sl
 800710a:	4659      	mov	r1, fp
 800710c:	f7f9 fcdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007110:	2800      	cmp	r0, #0
 8007112:	d1a6      	bne.n	8007062 <_strtod_l+0x562>
 8007114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800711a:	9805      	ldr	r0, [sp, #20]
 800711c:	462b      	mov	r3, r5
 800711e:	463a      	mov	r2, r7
 8007120:	f002 ff02 	bl	8009f28 <__s2b>
 8007124:	900a      	str	r0, [sp, #40]	@ 0x28
 8007126:	2800      	cmp	r0, #0
 8007128:	f43f af05 	beq.w	8006f36 <_strtod_l+0x436>
 800712c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800712e:	2a00      	cmp	r2, #0
 8007130:	eba9 0308 	sub.w	r3, r9, r8
 8007134:	bfa8      	it	ge
 8007136:	2300      	movge	r3, #0
 8007138:	9312      	str	r3, [sp, #72]	@ 0x48
 800713a:	2400      	movs	r4, #0
 800713c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007140:	9316      	str	r3, [sp, #88]	@ 0x58
 8007142:	46a0      	mov	r8, r4
 8007144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007146:	9805      	ldr	r0, [sp, #20]
 8007148:	6859      	ldr	r1, [r3, #4]
 800714a:	f002 fe45 	bl	8009dd8 <_Balloc>
 800714e:	4681      	mov	r9, r0
 8007150:	2800      	cmp	r0, #0
 8007152:	f43f aef4 	beq.w	8006f3e <_strtod_l+0x43e>
 8007156:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	3202      	adds	r2, #2
 800715c:	f103 010c 	add.w	r1, r3, #12
 8007160:	0092      	lsls	r2, r2, #2
 8007162:	300c      	adds	r0, #12
 8007164:	f001 fb63 	bl	800882e <memcpy>
 8007168:	ec4b ab10 	vmov	d0, sl, fp
 800716c:	9805      	ldr	r0, [sp, #20]
 800716e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007170:	a91b      	add	r1, sp, #108	@ 0x6c
 8007172:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007176:	f003 fa13 	bl	800a5a0 <__d2b>
 800717a:	901a      	str	r0, [sp, #104]	@ 0x68
 800717c:	2800      	cmp	r0, #0
 800717e:	f43f aede 	beq.w	8006f3e <_strtod_l+0x43e>
 8007182:	9805      	ldr	r0, [sp, #20]
 8007184:	2101      	movs	r1, #1
 8007186:	f002 ff65 	bl	800a054 <__i2b>
 800718a:	4680      	mov	r8, r0
 800718c:	b948      	cbnz	r0, 80071a2 <_strtod_l+0x6a2>
 800718e:	f04f 0800 	mov.w	r8, #0
 8007192:	e6d4      	b.n	8006f3e <_strtod_l+0x43e>
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	fa02 f303 	lsl.w	r3, r2, r3
 800719c:	ea03 0a0a 	and.w	sl, r3, sl
 80071a0:	e7b0      	b.n	8007104 <_strtod_l+0x604>
 80071a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80071a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80071a6:	2d00      	cmp	r5, #0
 80071a8:	bfab      	itete	ge
 80071aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80071ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80071ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80071b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80071b2:	bfac      	ite	ge
 80071b4:	18ef      	addge	r7, r5, r3
 80071b6:	1b5e      	sublt	r6, r3, r5
 80071b8:	9b08      	ldr	r3, [sp, #32]
 80071ba:	1aed      	subs	r5, r5, r3
 80071bc:	4415      	add	r5, r2
 80071be:	4b66      	ldr	r3, [pc, #408]	@ (8007358 <_strtod_l+0x858>)
 80071c0:	3d01      	subs	r5, #1
 80071c2:	429d      	cmp	r5, r3
 80071c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80071c8:	da50      	bge.n	800726c <_strtod_l+0x76c>
 80071ca:	1b5b      	subs	r3, r3, r5
 80071cc:	2b1f      	cmp	r3, #31
 80071ce:	eba2 0203 	sub.w	r2, r2, r3
 80071d2:	f04f 0101 	mov.w	r1, #1
 80071d6:	dc3d      	bgt.n	8007254 <_strtod_l+0x754>
 80071d8:	fa01 f303 	lsl.w	r3, r1, r3
 80071dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071de:	2300      	movs	r3, #0
 80071e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80071e2:	18bd      	adds	r5, r7, r2
 80071e4:	9b08      	ldr	r3, [sp, #32]
 80071e6:	42af      	cmp	r7, r5
 80071e8:	4416      	add	r6, r2
 80071ea:	441e      	add	r6, r3
 80071ec:	463b      	mov	r3, r7
 80071ee:	bfa8      	it	ge
 80071f0:	462b      	movge	r3, r5
 80071f2:	42b3      	cmp	r3, r6
 80071f4:	bfa8      	it	ge
 80071f6:	4633      	movge	r3, r6
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bfc2      	ittt	gt
 80071fc:	1aed      	subgt	r5, r5, r3
 80071fe:	1af6      	subgt	r6, r6, r3
 8007200:	1aff      	subgt	r7, r7, r3
 8007202:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007204:	2b00      	cmp	r3, #0
 8007206:	dd16      	ble.n	8007236 <_strtod_l+0x736>
 8007208:	4641      	mov	r1, r8
 800720a:	9805      	ldr	r0, [sp, #20]
 800720c:	461a      	mov	r2, r3
 800720e:	f002 ffe1 	bl	800a1d4 <__pow5mult>
 8007212:	4680      	mov	r8, r0
 8007214:	2800      	cmp	r0, #0
 8007216:	d0ba      	beq.n	800718e <_strtod_l+0x68e>
 8007218:	4601      	mov	r1, r0
 800721a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800721c:	9805      	ldr	r0, [sp, #20]
 800721e:	f002 ff2f 	bl	800a080 <__multiply>
 8007222:	900e      	str	r0, [sp, #56]	@ 0x38
 8007224:	2800      	cmp	r0, #0
 8007226:	f43f ae8a 	beq.w	8006f3e <_strtod_l+0x43e>
 800722a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800722c:	9805      	ldr	r0, [sp, #20]
 800722e:	f002 fe13 	bl	8009e58 <_Bfree>
 8007232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007234:	931a      	str	r3, [sp, #104]	@ 0x68
 8007236:	2d00      	cmp	r5, #0
 8007238:	dc1d      	bgt.n	8007276 <_strtod_l+0x776>
 800723a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723c:	2b00      	cmp	r3, #0
 800723e:	dd23      	ble.n	8007288 <_strtod_l+0x788>
 8007240:	4649      	mov	r1, r9
 8007242:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007244:	9805      	ldr	r0, [sp, #20]
 8007246:	f002 ffc5 	bl	800a1d4 <__pow5mult>
 800724a:	4681      	mov	r9, r0
 800724c:	b9e0      	cbnz	r0, 8007288 <_strtod_l+0x788>
 800724e:	f04f 0900 	mov.w	r9, #0
 8007252:	e674      	b.n	8006f3e <_strtod_l+0x43e>
 8007254:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007258:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800725c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007260:	35e2      	adds	r5, #226	@ 0xe2
 8007262:	fa01 f305 	lsl.w	r3, r1, r5
 8007266:	9310      	str	r3, [sp, #64]	@ 0x40
 8007268:	9113      	str	r1, [sp, #76]	@ 0x4c
 800726a:	e7ba      	b.n	80071e2 <_strtod_l+0x6e2>
 800726c:	2300      	movs	r3, #0
 800726e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007270:	2301      	movs	r3, #1
 8007272:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007274:	e7b5      	b.n	80071e2 <_strtod_l+0x6e2>
 8007276:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007278:	9805      	ldr	r0, [sp, #20]
 800727a:	462a      	mov	r2, r5
 800727c:	f003 f804 	bl	800a288 <__lshift>
 8007280:	901a      	str	r0, [sp, #104]	@ 0x68
 8007282:	2800      	cmp	r0, #0
 8007284:	d1d9      	bne.n	800723a <_strtod_l+0x73a>
 8007286:	e65a      	b.n	8006f3e <_strtod_l+0x43e>
 8007288:	2e00      	cmp	r6, #0
 800728a:	dd07      	ble.n	800729c <_strtod_l+0x79c>
 800728c:	4649      	mov	r1, r9
 800728e:	9805      	ldr	r0, [sp, #20]
 8007290:	4632      	mov	r2, r6
 8007292:	f002 fff9 	bl	800a288 <__lshift>
 8007296:	4681      	mov	r9, r0
 8007298:	2800      	cmp	r0, #0
 800729a:	d0d8      	beq.n	800724e <_strtod_l+0x74e>
 800729c:	2f00      	cmp	r7, #0
 800729e:	dd08      	ble.n	80072b2 <_strtod_l+0x7b2>
 80072a0:	4641      	mov	r1, r8
 80072a2:	9805      	ldr	r0, [sp, #20]
 80072a4:	463a      	mov	r2, r7
 80072a6:	f002 ffef 	bl	800a288 <__lshift>
 80072aa:	4680      	mov	r8, r0
 80072ac:	2800      	cmp	r0, #0
 80072ae:	f43f ae46 	beq.w	8006f3e <_strtod_l+0x43e>
 80072b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072b4:	9805      	ldr	r0, [sp, #20]
 80072b6:	464a      	mov	r2, r9
 80072b8:	f003 f86e 	bl	800a398 <__mdiff>
 80072bc:	4604      	mov	r4, r0
 80072be:	2800      	cmp	r0, #0
 80072c0:	f43f ae3d 	beq.w	8006f3e <_strtod_l+0x43e>
 80072c4:	68c3      	ldr	r3, [r0, #12]
 80072c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072c8:	2300      	movs	r3, #0
 80072ca:	60c3      	str	r3, [r0, #12]
 80072cc:	4641      	mov	r1, r8
 80072ce:	f003 f847 	bl	800a360 <__mcmp>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	da46      	bge.n	8007364 <_strtod_l+0x864>
 80072d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072d8:	ea53 030a 	orrs.w	r3, r3, sl
 80072dc:	d16c      	bne.n	80073b8 <_strtod_l+0x8b8>
 80072de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d168      	bne.n	80073b8 <_strtod_l+0x8b8>
 80072e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072ea:	0d1b      	lsrs	r3, r3, #20
 80072ec:	051b      	lsls	r3, r3, #20
 80072ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80072f2:	d961      	bls.n	80073b8 <_strtod_l+0x8b8>
 80072f4:	6963      	ldr	r3, [r4, #20]
 80072f6:	b913      	cbnz	r3, 80072fe <_strtod_l+0x7fe>
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	dd5c      	ble.n	80073b8 <_strtod_l+0x8b8>
 80072fe:	4621      	mov	r1, r4
 8007300:	2201      	movs	r2, #1
 8007302:	9805      	ldr	r0, [sp, #20]
 8007304:	f002 ffc0 	bl	800a288 <__lshift>
 8007308:	4641      	mov	r1, r8
 800730a:	4604      	mov	r4, r0
 800730c:	f003 f828 	bl	800a360 <__mcmp>
 8007310:	2800      	cmp	r0, #0
 8007312:	dd51      	ble.n	80073b8 <_strtod_l+0x8b8>
 8007314:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007318:	9a08      	ldr	r2, [sp, #32]
 800731a:	0d1b      	lsrs	r3, r3, #20
 800731c:	051b      	lsls	r3, r3, #20
 800731e:	2a00      	cmp	r2, #0
 8007320:	d06b      	beq.n	80073fa <_strtod_l+0x8fa>
 8007322:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007326:	d868      	bhi.n	80073fa <_strtod_l+0x8fa>
 8007328:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800732c:	f67f ae9d 	bls.w	800706a <_strtod_l+0x56a>
 8007330:	4b0a      	ldr	r3, [pc, #40]	@ (800735c <_strtod_l+0x85c>)
 8007332:	4650      	mov	r0, sl
 8007334:	4659      	mov	r1, fp
 8007336:	2200      	movs	r2, #0
 8007338:	f7f9 f95e 	bl	80005f8 <__aeabi_dmul>
 800733c:	4b08      	ldr	r3, [pc, #32]	@ (8007360 <_strtod_l+0x860>)
 800733e:	400b      	ands	r3, r1
 8007340:	4682      	mov	sl, r0
 8007342:	468b      	mov	fp, r1
 8007344:	2b00      	cmp	r3, #0
 8007346:	f47f ae05 	bne.w	8006f54 <_strtod_l+0x454>
 800734a:	9a05      	ldr	r2, [sp, #20]
 800734c:	2322      	movs	r3, #34	@ 0x22
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	e600      	b.n	8006f54 <_strtod_l+0x454>
 8007352:	bf00      	nop
 8007354:	0800b6a8 	.word	0x0800b6a8
 8007358:	fffffc02 	.word	0xfffffc02
 800735c:	39500000 	.word	0x39500000
 8007360:	7ff00000 	.word	0x7ff00000
 8007364:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007368:	d165      	bne.n	8007436 <_strtod_l+0x936>
 800736a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800736c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007370:	b35a      	cbz	r2, 80073ca <_strtod_l+0x8ca>
 8007372:	4a9f      	ldr	r2, [pc, #636]	@ (80075f0 <_strtod_l+0xaf0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d12b      	bne.n	80073d0 <_strtod_l+0x8d0>
 8007378:	9b08      	ldr	r3, [sp, #32]
 800737a:	4651      	mov	r1, sl
 800737c:	b303      	cbz	r3, 80073c0 <_strtod_l+0x8c0>
 800737e:	4b9d      	ldr	r3, [pc, #628]	@ (80075f4 <_strtod_l+0xaf4>)
 8007380:	465a      	mov	r2, fp
 8007382:	4013      	ands	r3, r2
 8007384:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007388:	f04f 32ff 	mov.w	r2, #4294967295
 800738c:	d81b      	bhi.n	80073c6 <_strtod_l+0x8c6>
 800738e:	0d1b      	lsrs	r3, r3, #20
 8007390:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007394:	fa02 f303 	lsl.w	r3, r2, r3
 8007398:	4299      	cmp	r1, r3
 800739a:	d119      	bne.n	80073d0 <_strtod_l+0x8d0>
 800739c:	4b96      	ldr	r3, [pc, #600]	@ (80075f8 <_strtod_l+0xaf8>)
 800739e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d102      	bne.n	80073aa <_strtod_l+0x8aa>
 80073a4:	3101      	adds	r1, #1
 80073a6:	f43f adca 	beq.w	8006f3e <_strtod_l+0x43e>
 80073aa:	4b92      	ldr	r3, [pc, #584]	@ (80075f4 <_strtod_l+0xaf4>)
 80073ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073ae:	401a      	ands	r2, r3
 80073b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80073b4:	f04f 0a00 	mov.w	sl, #0
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1b8      	bne.n	8007330 <_strtod_l+0x830>
 80073be:	e5c9      	b.n	8006f54 <_strtod_l+0x454>
 80073c0:	f04f 33ff 	mov.w	r3, #4294967295
 80073c4:	e7e8      	b.n	8007398 <_strtod_l+0x898>
 80073c6:	4613      	mov	r3, r2
 80073c8:	e7e6      	b.n	8007398 <_strtod_l+0x898>
 80073ca:	ea53 030a 	orrs.w	r3, r3, sl
 80073ce:	d0a1      	beq.n	8007314 <_strtod_l+0x814>
 80073d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073d2:	b1db      	cbz	r3, 800740c <_strtod_l+0x90c>
 80073d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073d6:	4213      	tst	r3, r2
 80073d8:	d0ee      	beq.n	80073b8 <_strtod_l+0x8b8>
 80073da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073dc:	9a08      	ldr	r2, [sp, #32]
 80073de:	4650      	mov	r0, sl
 80073e0:	4659      	mov	r1, fp
 80073e2:	b1bb      	cbz	r3, 8007414 <_strtod_l+0x914>
 80073e4:	f7ff fb6d 	bl	8006ac2 <sulp>
 80073e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073ec:	ec53 2b10 	vmov	r2, r3, d0
 80073f0:	f7f8 ff4c 	bl	800028c <__adddf3>
 80073f4:	4682      	mov	sl, r0
 80073f6:	468b      	mov	fp, r1
 80073f8:	e7de      	b.n	80073b8 <_strtod_l+0x8b8>
 80073fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80073fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007402:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007406:	f04f 3aff 	mov.w	sl, #4294967295
 800740a:	e7d5      	b.n	80073b8 <_strtod_l+0x8b8>
 800740c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800740e:	ea13 0f0a 	tst.w	r3, sl
 8007412:	e7e1      	b.n	80073d8 <_strtod_l+0x8d8>
 8007414:	f7ff fb55 	bl	8006ac2 <sulp>
 8007418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800741c:	ec53 2b10 	vmov	r2, r3, d0
 8007420:	f7f8 ff32 	bl	8000288 <__aeabi_dsub>
 8007424:	2200      	movs	r2, #0
 8007426:	2300      	movs	r3, #0
 8007428:	4682      	mov	sl, r0
 800742a:	468b      	mov	fp, r1
 800742c:	f7f9 fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007430:	2800      	cmp	r0, #0
 8007432:	d0c1      	beq.n	80073b8 <_strtod_l+0x8b8>
 8007434:	e619      	b.n	800706a <_strtod_l+0x56a>
 8007436:	4641      	mov	r1, r8
 8007438:	4620      	mov	r0, r4
 800743a:	f003 f909 	bl	800a650 <__ratio>
 800743e:	ec57 6b10 	vmov	r6, r7, d0
 8007442:	2200      	movs	r2, #0
 8007444:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007448:	4630      	mov	r0, r6
 800744a:	4639      	mov	r1, r7
 800744c:	f7f9 fb50 	bl	8000af0 <__aeabi_dcmple>
 8007450:	2800      	cmp	r0, #0
 8007452:	d06f      	beq.n	8007534 <_strtod_l+0xa34>
 8007454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007456:	2b00      	cmp	r3, #0
 8007458:	d17a      	bne.n	8007550 <_strtod_l+0xa50>
 800745a:	f1ba 0f00 	cmp.w	sl, #0
 800745e:	d158      	bne.n	8007512 <_strtod_l+0xa12>
 8007460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007466:	2b00      	cmp	r3, #0
 8007468:	d15a      	bne.n	8007520 <_strtod_l+0xa20>
 800746a:	4b64      	ldr	r3, [pc, #400]	@ (80075fc <_strtod_l+0xafc>)
 800746c:	2200      	movs	r2, #0
 800746e:	4630      	mov	r0, r6
 8007470:	4639      	mov	r1, r7
 8007472:	f7f9 fb33 	bl	8000adc <__aeabi_dcmplt>
 8007476:	2800      	cmp	r0, #0
 8007478:	d159      	bne.n	800752e <_strtod_l+0xa2e>
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	4b60      	ldr	r3, [pc, #384]	@ (8007600 <_strtod_l+0xb00>)
 8007480:	2200      	movs	r2, #0
 8007482:	f7f9 f8b9 	bl	80005f8 <__aeabi_dmul>
 8007486:	4606      	mov	r6, r0
 8007488:	460f      	mov	r7, r1
 800748a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800748e:	9606      	str	r6, [sp, #24]
 8007490:	9307      	str	r3, [sp, #28]
 8007492:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007496:	4d57      	ldr	r5, [pc, #348]	@ (80075f4 <_strtod_l+0xaf4>)
 8007498:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800749c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800749e:	401d      	ands	r5, r3
 80074a0:	4b58      	ldr	r3, [pc, #352]	@ (8007604 <_strtod_l+0xb04>)
 80074a2:	429d      	cmp	r5, r3
 80074a4:	f040 80b2 	bne.w	800760c <_strtod_l+0xb0c>
 80074a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80074ae:	ec4b ab10 	vmov	d0, sl, fp
 80074b2:	f003 f805 	bl	800a4c0 <__ulp>
 80074b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074ba:	ec51 0b10 	vmov	r0, r1, d0
 80074be:	f7f9 f89b 	bl	80005f8 <__aeabi_dmul>
 80074c2:	4652      	mov	r2, sl
 80074c4:	465b      	mov	r3, fp
 80074c6:	f7f8 fee1 	bl	800028c <__adddf3>
 80074ca:	460b      	mov	r3, r1
 80074cc:	4949      	ldr	r1, [pc, #292]	@ (80075f4 <_strtod_l+0xaf4>)
 80074ce:	4a4e      	ldr	r2, [pc, #312]	@ (8007608 <_strtod_l+0xb08>)
 80074d0:	4019      	ands	r1, r3
 80074d2:	4291      	cmp	r1, r2
 80074d4:	4682      	mov	sl, r0
 80074d6:	d942      	bls.n	800755e <_strtod_l+0xa5e>
 80074d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074da:	4b47      	ldr	r3, [pc, #284]	@ (80075f8 <_strtod_l+0xaf8>)
 80074dc:	429a      	cmp	r2, r3
 80074de:	d103      	bne.n	80074e8 <_strtod_l+0x9e8>
 80074e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074e2:	3301      	adds	r3, #1
 80074e4:	f43f ad2b 	beq.w	8006f3e <_strtod_l+0x43e>
 80074e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80075f8 <_strtod_l+0xaf8>
 80074ec:	f04f 3aff 	mov.w	sl, #4294967295
 80074f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074f2:	9805      	ldr	r0, [sp, #20]
 80074f4:	f002 fcb0 	bl	8009e58 <_Bfree>
 80074f8:	9805      	ldr	r0, [sp, #20]
 80074fa:	4649      	mov	r1, r9
 80074fc:	f002 fcac 	bl	8009e58 <_Bfree>
 8007500:	9805      	ldr	r0, [sp, #20]
 8007502:	4641      	mov	r1, r8
 8007504:	f002 fca8 	bl	8009e58 <_Bfree>
 8007508:	9805      	ldr	r0, [sp, #20]
 800750a:	4621      	mov	r1, r4
 800750c:	f002 fca4 	bl	8009e58 <_Bfree>
 8007510:	e618      	b.n	8007144 <_strtod_l+0x644>
 8007512:	f1ba 0f01 	cmp.w	sl, #1
 8007516:	d103      	bne.n	8007520 <_strtod_l+0xa20>
 8007518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800751a:	2b00      	cmp	r3, #0
 800751c:	f43f ada5 	beq.w	800706a <_strtod_l+0x56a>
 8007520:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80075d0 <_strtod_l+0xad0>
 8007524:	4f35      	ldr	r7, [pc, #212]	@ (80075fc <_strtod_l+0xafc>)
 8007526:	ed8d 7b06 	vstr	d7, [sp, #24]
 800752a:	2600      	movs	r6, #0
 800752c:	e7b1      	b.n	8007492 <_strtod_l+0x992>
 800752e:	4f34      	ldr	r7, [pc, #208]	@ (8007600 <_strtod_l+0xb00>)
 8007530:	2600      	movs	r6, #0
 8007532:	e7aa      	b.n	800748a <_strtod_l+0x98a>
 8007534:	4b32      	ldr	r3, [pc, #200]	@ (8007600 <_strtod_l+0xb00>)
 8007536:	4630      	mov	r0, r6
 8007538:	4639      	mov	r1, r7
 800753a:	2200      	movs	r2, #0
 800753c:	f7f9 f85c 	bl	80005f8 <__aeabi_dmul>
 8007540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007542:	4606      	mov	r6, r0
 8007544:	460f      	mov	r7, r1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d09f      	beq.n	800748a <_strtod_l+0x98a>
 800754a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800754e:	e7a0      	b.n	8007492 <_strtod_l+0x992>
 8007550:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80075d8 <_strtod_l+0xad8>
 8007554:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007558:	ec57 6b17 	vmov	r6, r7, d7
 800755c:	e799      	b.n	8007492 <_strtod_l+0x992>
 800755e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007562:	9b08      	ldr	r3, [sp, #32]
 8007564:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1c1      	bne.n	80074f0 <_strtod_l+0x9f0>
 800756c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007570:	0d1b      	lsrs	r3, r3, #20
 8007572:	051b      	lsls	r3, r3, #20
 8007574:	429d      	cmp	r5, r3
 8007576:	d1bb      	bne.n	80074f0 <_strtod_l+0x9f0>
 8007578:	4630      	mov	r0, r6
 800757a:	4639      	mov	r1, r7
 800757c:	f7f9 fb9c 	bl	8000cb8 <__aeabi_d2lz>
 8007580:	f7f9 f80c 	bl	800059c <__aeabi_l2d>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f8 fe7c 	bl	8000288 <__aeabi_dsub>
 8007590:	460b      	mov	r3, r1
 8007592:	4602      	mov	r2, r0
 8007594:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007598:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800759c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800759e:	ea46 060a 	orr.w	r6, r6, sl
 80075a2:	431e      	orrs	r6, r3
 80075a4:	d06f      	beq.n	8007686 <_strtod_l+0xb86>
 80075a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80075e0 <_strtod_l+0xae0>)
 80075a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ac:	f7f9 fa96 	bl	8000adc <__aeabi_dcmplt>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	f47f accf 	bne.w	8006f54 <_strtod_l+0x454>
 80075b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80075e8 <_strtod_l+0xae8>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075c0:	f7f9 faaa 	bl	8000b18 <__aeabi_dcmpgt>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d093      	beq.n	80074f0 <_strtod_l+0x9f0>
 80075c8:	e4c4      	b.n	8006f54 <_strtod_l+0x454>
 80075ca:	bf00      	nop
 80075cc:	f3af 8000 	nop.w
 80075d0:	00000000 	.word	0x00000000
 80075d4:	bff00000 	.word	0xbff00000
 80075d8:	00000000 	.word	0x00000000
 80075dc:	3ff00000 	.word	0x3ff00000
 80075e0:	94a03595 	.word	0x94a03595
 80075e4:	3fdfffff 	.word	0x3fdfffff
 80075e8:	35afe535 	.word	0x35afe535
 80075ec:	3fe00000 	.word	0x3fe00000
 80075f0:	000fffff 	.word	0x000fffff
 80075f4:	7ff00000 	.word	0x7ff00000
 80075f8:	7fefffff 	.word	0x7fefffff
 80075fc:	3ff00000 	.word	0x3ff00000
 8007600:	3fe00000 	.word	0x3fe00000
 8007604:	7fe00000 	.word	0x7fe00000
 8007608:	7c9fffff 	.word	0x7c9fffff
 800760c:	9b08      	ldr	r3, [sp, #32]
 800760e:	b323      	cbz	r3, 800765a <_strtod_l+0xb5a>
 8007610:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007614:	d821      	bhi.n	800765a <_strtod_l+0xb5a>
 8007616:	a328      	add	r3, pc, #160	@ (adr r3, 80076b8 <_strtod_l+0xbb8>)
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	4630      	mov	r0, r6
 800761e:	4639      	mov	r1, r7
 8007620:	f7f9 fa66 	bl	8000af0 <__aeabi_dcmple>
 8007624:	b1a0      	cbz	r0, 8007650 <_strtod_l+0xb50>
 8007626:	4639      	mov	r1, r7
 8007628:	4630      	mov	r0, r6
 800762a:	f7f9 fabd 	bl	8000ba8 <__aeabi_d2uiz>
 800762e:	2801      	cmp	r0, #1
 8007630:	bf38      	it	cc
 8007632:	2001      	movcc	r0, #1
 8007634:	f7f8 ff66 	bl	8000504 <__aeabi_ui2d>
 8007638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800763a:	4606      	mov	r6, r0
 800763c:	460f      	mov	r7, r1
 800763e:	b9fb      	cbnz	r3, 8007680 <_strtod_l+0xb80>
 8007640:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007644:	9014      	str	r0, [sp, #80]	@ 0x50
 8007646:	9315      	str	r3, [sp, #84]	@ 0x54
 8007648:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800764c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007650:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007652:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007656:	1b5b      	subs	r3, r3, r5
 8007658:	9311      	str	r3, [sp, #68]	@ 0x44
 800765a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800765e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007662:	f002 ff2d 	bl	800a4c0 <__ulp>
 8007666:	4650      	mov	r0, sl
 8007668:	ec53 2b10 	vmov	r2, r3, d0
 800766c:	4659      	mov	r1, fp
 800766e:	f7f8 ffc3 	bl	80005f8 <__aeabi_dmul>
 8007672:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007676:	f7f8 fe09 	bl	800028c <__adddf3>
 800767a:	4682      	mov	sl, r0
 800767c:	468b      	mov	fp, r1
 800767e:	e770      	b.n	8007562 <_strtod_l+0xa62>
 8007680:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007684:	e7e0      	b.n	8007648 <_strtod_l+0xb48>
 8007686:	a30e      	add	r3, pc, #56	@ (adr r3, 80076c0 <_strtod_l+0xbc0>)
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f9 fa26 	bl	8000adc <__aeabi_dcmplt>
 8007690:	e798      	b.n	80075c4 <_strtod_l+0xac4>
 8007692:	2300      	movs	r3, #0
 8007694:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007696:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007698:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	f7ff ba6d 	b.w	8006b7a <_strtod_l+0x7a>
 80076a0:	2a65      	cmp	r2, #101	@ 0x65
 80076a2:	f43f ab66 	beq.w	8006d72 <_strtod_l+0x272>
 80076a6:	2a45      	cmp	r2, #69	@ 0x45
 80076a8:	f43f ab63 	beq.w	8006d72 <_strtod_l+0x272>
 80076ac:	2301      	movs	r3, #1
 80076ae:	f7ff bb9e 	b.w	8006dee <_strtod_l+0x2ee>
 80076b2:	bf00      	nop
 80076b4:	f3af 8000 	nop.w
 80076b8:	ffc00000 	.word	0xffc00000
 80076bc:	41dfffff 	.word	0x41dfffff
 80076c0:	94a03595 	.word	0x94a03595
 80076c4:	3fcfffff 	.word	0x3fcfffff

080076c8 <_strtod_r>:
 80076c8:	4b01      	ldr	r3, [pc, #4]	@ (80076d0 <_strtod_r+0x8>)
 80076ca:	f7ff ba19 	b.w	8006b00 <_strtod_l>
 80076ce:	bf00      	nop
 80076d0:	20000018 	.word	0x20000018

080076d4 <strtod>:
 80076d4:	460a      	mov	r2, r1
 80076d6:	4601      	mov	r1, r0
 80076d8:	4802      	ldr	r0, [pc, #8]	@ (80076e4 <strtod+0x10>)
 80076da:	4b03      	ldr	r3, [pc, #12]	@ (80076e8 <strtod+0x14>)
 80076dc:	6800      	ldr	r0, [r0, #0]
 80076de:	f7ff ba0f 	b.w	8006b00 <_strtod_l>
 80076e2:	bf00      	nop
 80076e4:	20000184 	.word	0x20000184
 80076e8:	20000018 	.word	0x20000018

080076ec <__cvt>:
 80076ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f0:	ec57 6b10 	vmov	r6, r7, d0
 80076f4:	2f00      	cmp	r7, #0
 80076f6:	460c      	mov	r4, r1
 80076f8:	4619      	mov	r1, r3
 80076fa:	463b      	mov	r3, r7
 80076fc:	bfbb      	ittet	lt
 80076fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007702:	461f      	movlt	r7, r3
 8007704:	2300      	movge	r3, #0
 8007706:	232d      	movlt	r3, #45	@ 0x2d
 8007708:	700b      	strb	r3, [r1, #0]
 800770a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800770c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007710:	4691      	mov	r9, r2
 8007712:	f023 0820 	bic.w	r8, r3, #32
 8007716:	bfbc      	itt	lt
 8007718:	4632      	movlt	r2, r6
 800771a:	4616      	movlt	r6, r2
 800771c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007720:	d005      	beq.n	800772e <__cvt+0x42>
 8007722:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007726:	d100      	bne.n	800772a <__cvt+0x3e>
 8007728:	3401      	adds	r4, #1
 800772a:	2102      	movs	r1, #2
 800772c:	e000      	b.n	8007730 <__cvt+0x44>
 800772e:	2103      	movs	r1, #3
 8007730:	ab03      	add	r3, sp, #12
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	ab02      	add	r3, sp, #8
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	ec47 6b10 	vmov	d0, r6, r7
 800773c:	4653      	mov	r3, sl
 800773e:	4622      	mov	r2, r4
 8007740:	f001 f93a 	bl	80089b8 <_dtoa_r>
 8007744:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007748:	4605      	mov	r5, r0
 800774a:	d119      	bne.n	8007780 <__cvt+0x94>
 800774c:	f019 0f01 	tst.w	r9, #1
 8007750:	d00e      	beq.n	8007770 <__cvt+0x84>
 8007752:	eb00 0904 	add.w	r9, r0, r4
 8007756:	2200      	movs	r2, #0
 8007758:	2300      	movs	r3, #0
 800775a:	4630      	mov	r0, r6
 800775c:	4639      	mov	r1, r7
 800775e:	f7f9 f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007762:	b108      	cbz	r0, 8007768 <__cvt+0x7c>
 8007764:	f8cd 900c 	str.w	r9, [sp, #12]
 8007768:	2230      	movs	r2, #48	@ 0x30
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	454b      	cmp	r3, r9
 800776e:	d31e      	bcc.n	80077ae <__cvt+0xc2>
 8007770:	9b03      	ldr	r3, [sp, #12]
 8007772:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007774:	1b5b      	subs	r3, r3, r5
 8007776:	4628      	mov	r0, r5
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	b004      	add	sp, #16
 800777c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007780:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007784:	eb00 0904 	add.w	r9, r0, r4
 8007788:	d1e5      	bne.n	8007756 <__cvt+0x6a>
 800778a:	7803      	ldrb	r3, [r0, #0]
 800778c:	2b30      	cmp	r3, #48	@ 0x30
 800778e:	d10a      	bne.n	80077a6 <__cvt+0xba>
 8007790:	2200      	movs	r2, #0
 8007792:	2300      	movs	r3, #0
 8007794:	4630      	mov	r0, r6
 8007796:	4639      	mov	r1, r7
 8007798:	f7f9 f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800779c:	b918      	cbnz	r0, 80077a6 <__cvt+0xba>
 800779e:	f1c4 0401 	rsb	r4, r4, #1
 80077a2:	f8ca 4000 	str.w	r4, [sl]
 80077a6:	f8da 3000 	ldr.w	r3, [sl]
 80077aa:	4499      	add	r9, r3
 80077ac:	e7d3      	b.n	8007756 <__cvt+0x6a>
 80077ae:	1c59      	adds	r1, r3, #1
 80077b0:	9103      	str	r1, [sp, #12]
 80077b2:	701a      	strb	r2, [r3, #0]
 80077b4:	e7d9      	b.n	800776a <__cvt+0x7e>

080077b6 <__exponent>:
 80077b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077b8:	2900      	cmp	r1, #0
 80077ba:	bfba      	itte	lt
 80077bc:	4249      	neglt	r1, r1
 80077be:	232d      	movlt	r3, #45	@ 0x2d
 80077c0:	232b      	movge	r3, #43	@ 0x2b
 80077c2:	2909      	cmp	r1, #9
 80077c4:	7002      	strb	r2, [r0, #0]
 80077c6:	7043      	strb	r3, [r0, #1]
 80077c8:	dd29      	ble.n	800781e <__exponent+0x68>
 80077ca:	f10d 0307 	add.w	r3, sp, #7
 80077ce:	461d      	mov	r5, r3
 80077d0:	270a      	movs	r7, #10
 80077d2:	461a      	mov	r2, r3
 80077d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80077d8:	fb07 1416 	mls	r4, r7, r6, r1
 80077dc:	3430      	adds	r4, #48	@ 0x30
 80077de:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077e2:	460c      	mov	r4, r1
 80077e4:	2c63      	cmp	r4, #99	@ 0x63
 80077e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80077ea:	4631      	mov	r1, r6
 80077ec:	dcf1      	bgt.n	80077d2 <__exponent+0x1c>
 80077ee:	3130      	adds	r1, #48	@ 0x30
 80077f0:	1e94      	subs	r4, r2, #2
 80077f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077f6:	1c41      	adds	r1, r0, #1
 80077f8:	4623      	mov	r3, r4
 80077fa:	42ab      	cmp	r3, r5
 80077fc:	d30a      	bcc.n	8007814 <__exponent+0x5e>
 80077fe:	f10d 0309 	add.w	r3, sp, #9
 8007802:	1a9b      	subs	r3, r3, r2
 8007804:	42ac      	cmp	r4, r5
 8007806:	bf88      	it	hi
 8007808:	2300      	movhi	r3, #0
 800780a:	3302      	adds	r3, #2
 800780c:	4403      	add	r3, r0
 800780e:	1a18      	subs	r0, r3, r0
 8007810:	b003      	add	sp, #12
 8007812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007814:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007818:	f801 6f01 	strb.w	r6, [r1, #1]!
 800781c:	e7ed      	b.n	80077fa <__exponent+0x44>
 800781e:	2330      	movs	r3, #48	@ 0x30
 8007820:	3130      	adds	r1, #48	@ 0x30
 8007822:	7083      	strb	r3, [r0, #2]
 8007824:	70c1      	strb	r1, [r0, #3]
 8007826:	1d03      	adds	r3, r0, #4
 8007828:	e7f1      	b.n	800780e <__exponent+0x58>
	...

0800782c <_printf_float>:
 800782c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007830:	b08d      	sub	sp, #52	@ 0x34
 8007832:	460c      	mov	r4, r1
 8007834:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007838:	4616      	mov	r6, r2
 800783a:	461f      	mov	r7, r3
 800783c:	4605      	mov	r5, r0
 800783e:	f000 ff7f 	bl	8008740 <_localeconv_r>
 8007842:	6803      	ldr	r3, [r0, #0]
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	4618      	mov	r0, r3
 8007848:	f7f8 fd12 	bl	8000270 <strlen>
 800784c:	2300      	movs	r3, #0
 800784e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007850:	f8d8 3000 	ldr.w	r3, [r8]
 8007854:	9005      	str	r0, [sp, #20]
 8007856:	3307      	adds	r3, #7
 8007858:	f023 0307 	bic.w	r3, r3, #7
 800785c:	f103 0208 	add.w	r2, r3, #8
 8007860:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007864:	f8d4 b000 	ldr.w	fp, [r4]
 8007868:	f8c8 2000 	str.w	r2, [r8]
 800786c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007870:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007874:	9307      	str	r3, [sp, #28]
 8007876:	f8cd 8018 	str.w	r8, [sp, #24]
 800787a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800787e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007882:	4b9c      	ldr	r3, [pc, #624]	@ (8007af4 <_printf_float+0x2c8>)
 8007884:	f04f 32ff 	mov.w	r2, #4294967295
 8007888:	f7f9 f950 	bl	8000b2c <__aeabi_dcmpun>
 800788c:	bb70      	cbnz	r0, 80078ec <_printf_float+0xc0>
 800788e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007892:	4b98      	ldr	r3, [pc, #608]	@ (8007af4 <_printf_float+0x2c8>)
 8007894:	f04f 32ff 	mov.w	r2, #4294967295
 8007898:	f7f9 f92a 	bl	8000af0 <__aeabi_dcmple>
 800789c:	bb30      	cbnz	r0, 80078ec <_printf_float+0xc0>
 800789e:	2200      	movs	r2, #0
 80078a0:	2300      	movs	r3, #0
 80078a2:	4640      	mov	r0, r8
 80078a4:	4649      	mov	r1, r9
 80078a6:	f7f9 f919 	bl	8000adc <__aeabi_dcmplt>
 80078aa:	b110      	cbz	r0, 80078b2 <_printf_float+0x86>
 80078ac:	232d      	movs	r3, #45	@ 0x2d
 80078ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078b2:	4a91      	ldr	r2, [pc, #580]	@ (8007af8 <_printf_float+0x2cc>)
 80078b4:	4b91      	ldr	r3, [pc, #580]	@ (8007afc <_printf_float+0x2d0>)
 80078b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80078ba:	bf94      	ite	ls
 80078bc:	4690      	movls	r8, r2
 80078be:	4698      	movhi	r8, r3
 80078c0:	2303      	movs	r3, #3
 80078c2:	6123      	str	r3, [r4, #16]
 80078c4:	f02b 0304 	bic.w	r3, fp, #4
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	f04f 0900 	mov.w	r9, #0
 80078ce:	9700      	str	r7, [sp, #0]
 80078d0:	4633      	mov	r3, r6
 80078d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80078d4:	4621      	mov	r1, r4
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 f9d2 	bl	8007c80 <_printf_common>
 80078dc:	3001      	adds	r0, #1
 80078de:	f040 808d 	bne.w	80079fc <_printf_float+0x1d0>
 80078e2:	f04f 30ff 	mov.w	r0, #4294967295
 80078e6:	b00d      	add	sp, #52	@ 0x34
 80078e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ec:	4642      	mov	r2, r8
 80078ee:	464b      	mov	r3, r9
 80078f0:	4640      	mov	r0, r8
 80078f2:	4649      	mov	r1, r9
 80078f4:	f7f9 f91a 	bl	8000b2c <__aeabi_dcmpun>
 80078f8:	b140      	cbz	r0, 800790c <_printf_float+0xe0>
 80078fa:	464b      	mov	r3, r9
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bfbc      	itt	lt
 8007900:	232d      	movlt	r3, #45	@ 0x2d
 8007902:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007906:	4a7e      	ldr	r2, [pc, #504]	@ (8007b00 <_printf_float+0x2d4>)
 8007908:	4b7e      	ldr	r3, [pc, #504]	@ (8007b04 <_printf_float+0x2d8>)
 800790a:	e7d4      	b.n	80078b6 <_printf_float+0x8a>
 800790c:	6863      	ldr	r3, [r4, #4]
 800790e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007912:	9206      	str	r2, [sp, #24]
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	d13b      	bne.n	8007990 <_printf_float+0x164>
 8007918:	2306      	movs	r3, #6
 800791a:	6063      	str	r3, [r4, #4]
 800791c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007920:	2300      	movs	r3, #0
 8007922:	6022      	str	r2, [r4, #0]
 8007924:	9303      	str	r3, [sp, #12]
 8007926:	ab0a      	add	r3, sp, #40	@ 0x28
 8007928:	e9cd a301 	strd	sl, r3, [sp, #4]
 800792c:	ab09      	add	r3, sp, #36	@ 0x24
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	6861      	ldr	r1, [r4, #4]
 8007932:	ec49 8b10 	vmov	d0, r8, r9
 8007936:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800793a:	4628      	mov	r0, r5
 800793c:	f7ff fed6 	bl	80076ec <__cvt>
 8007940:	9b06      	ldr	r3, [sp, #24]
 8007942:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007944:	2b47      	cmp	r3, #71	@ 0x47
 8007946:	4680      	mov	r8, r0
 8007948:	d129      	bne.n	800799e <_printf_float+0x172>
 800794a:	1cc8      	adds	r0, r1, #3
 800794c:	db02      	blt.n	8007954 <_printf_float+0x128>
 800794e:	6863      	ldr	r3, [r4, #4]
 8007950:	4299      	cmp	r1, r3
 8007952:	dd41      	ble.n	80079d8 <_printf_float+0x1ac>
 8007954:	f1aa 0a02 	sub.w	sl, sl, #2
 8007958:	fa5f fa8a 	uxtb.w	sl, sl
 800795c:	3901      	subs	r1, #1
 800795e:	4652      	mov	r2, sl
 8007960:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007964:	9109      	str	r1, [sp, #36]	@ 0x24
 8007966:	f7ff ff26 	bl	80077b6 <__exponent>
 800796a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800796c:	1813      	adds	r3, r2, r0
 800796e:	2a01      	cmp	r2, #1
 8007970:	4681      	mov	r9, r0
 8007972:	6123      	str	r3, [r4, #16]
 8007974:	dc02      	bgt.n	800797c <_printf_float+0x150>
 8007976:	6822      	ldr	r2, [r4, #0]
 8007978:	07d2      	lsls	r2, r2, #31
 800797a:	d501      	bpl.n	8007980 <_printf_float+0x154>
 800797c:	3301      	adds	r3, #1
 800797e:	6123      	str	r3, [r4, #16]
 8007980:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0a2      	beq.n	80078ce <_printf_float+0xa2>
 8007988:	232d      	movs	r3, #45	@ 0x2d
 800798a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800798e:	e79e      	b.n	80078ce <_printf_float+0xa2>
 8007990:	9a06      	ldr	r2, [sp, #24]
 8007992:	2a47      	cmp	r2, #71	@ 0x47
 8007994:	d1c2      	bne.n	800791c <_printf_float+0xf0>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1c0      	bne.n	800791c <_printf_float+0xf0>
 800799a:	2301      	movs	r3, #1
 800799c:	e7bd      	b.n	800791a <_printf_float+0xee>
 800799e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079a2:	d9db      	bls.n	800795c <_printf_float+0x130>
 80079a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80079a8:	d118      	bne.n	80079dc <_printf_float+0x1b0>
 80079aa:	2900      	cmp	r1, #0
 80079ac:	6863      	ldr	r3, [r4, #4]
 80079ae:	dd0b      	ble.n	80079c8 <_printf_float+0x19c>
 80079b0:	6121      	str	r1, [r4, #16]
 80079b2:	b913      	cbnz	r3, 80079ba <_printf_float+0x18e>
 80079b4:	6822      	ldr	r2, [r4, #0]
 80079b6:	07d0      	lsls	r0, r2, #31
 80079b8:	d502      	bpl.n	80079c0 <_printf_float+0x194>
 80079ba:	3301      	adds	r3, #1
 80079bc:	440b      	add	r3, r1
 80079be:	6123      	str	r3, [r4, #16]
 80079c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079c2:	f04f 0900 	mov.w	r9, #0
 80079c6:	e7db      	b.n	8007980 <_printf_float+0x154>
 80079c8:	b913      	cbnz	r3, 80079d0 <_printf_float+0x1a4>
 80079ca:	6822      	ldr	r2, [r4, #0]
 80079cc:	07d2      	lsls	r2, r2, #31
 80079ce:	d501      	bpl.n	80079d4 <_printf_float+0x1a8>
 80079d0:	3302      	adds	r3, #2
 80079d2:	e7f4      	b.n	80079be <_printf_float+0x192>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e7f2      	b.n	80079be <_printf_float+0x192>
 80079d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80079dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079de:	4299      	cmp	r1, r3
 80079e0:	db05      	blt.n	80079ee <_printf_float+0x1c2>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	6121      	str	r1, [r4, #16]
 80079e6:	07d8      	lsls	r0, r3, #31
 80079e8:	d5ea      	bpl.n	80079c0 <_printf_float+0x194>
 80079ea:	1c4b      	adds	r3, r1, #1
 80079ec:	e7e7      	b.n	80079be <_printf_float+0x192>
 80079ee:	2900      	cmp	r1, #0
 80079f0:	bfd4      	ite	le
 80079f2:	f1c1 0202 	rsble	r2, r1, #2
 80079f6:	2201      	movgt	r2, #1
 80079f8:	4413      	add	r3, r2
 80079fa:	e7e0      	b.n	80079be <_printf_float+0x192>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	055a      	lsls	r2, r3, #21
 8007a00:	d407      	bmi.n	8007a12 <_printf_float+0x1e6>
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	4642      	mov	r2, r8
 8007a06:	4631      	mov	r1, r6
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b8      	blx	r7
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d12b      	bne.n	8007a68 <_printf_float+0x23c>
 8007a10:	e767      	b.n	80078e2 <_printf_float+0xb6>
 8007a12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a16:	f240 80dd 	bls.w	8007bd4 <_printf_float+0x3a8>
 8007a1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2300      	movs	r3, #0
 8007a22:	f7f9 f851 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d033      	beq.n	8007a92 <_printf_float+0x266>
 8007a2a:	4a37      	ldr	r2, [pc, #220]	@ (8007b08 <_printf_float+0x2dc>)
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	f43f af54 	beq.w	80078e2 <_printf_float+0xb6>
 8007a3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a3e:	4543      	cmp	r3, r8
 8007a40:	db02      	blt.n	8007a48 <_printf_float+0x21c>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	07d8      	lsls	r0, r3, #31
 8007a46:	d50f      	bpl.n	8007a68 <_printf_float+0x23c>
 8007a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4628      	mov	r0, r5
 8007a50:	47b8      	blx	r7
 8007a52:	3001      	adds	r0, #1
 8007a54:	f43f af45 	beq.w	80078e2 <_printf_float+0xb6>
 8007a58:	f04f 0900 	mov.w	r9, #0
 8007a5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a60:	f104 0a1a 	add.w	sl, r4, #26
 8007a64:	45c8      	cmp	r8, r9
 8007a66:	dc09      	bgt.n	8007a7c <_printf_float+0x250>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	079b      	lsls	r3, r3, #30
 8007a6c:	f100 8103 	bmi.w	8007c76 <_printf_float+0x44a>
 8007a70:	68e0      	ldr	r0, [r4, #12]
 8007a72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a74:	4298      	cmp	r0, r3
 8007a76:	bfb8      	it	lt
 8007a78:	4618      	movlt	r0, r3
 8007a7a:	e734      	b.n	80078e6 <_printf_float+0xba>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4652      	mov	r2, sl
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	f43f af2b 	beq.w	80078e2 <_printf_float+0xb6>
 8007a8c:	f109 0901 	add.w	r9, r9, #1
 8007a90:	e7e8      	b.n	8007a64 <_printf_float+0x238>
 8007a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dc39      	bgt.n	8007b0c <_printf_float+0x2e0>
 8007a98:	4a1b      	ldr	r2, [pc, #108]	@ (8007b08 <_printf_float+0x2dc>)
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b8      	blx	r7
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	f43f af1d 	beq.w	80078e2 <_printf_float+0xb6>
 8007aa8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007aac:	ea59 0303 	orrs.w	r3, r9, r3
 8007ab0:	d102      	bne.n	8007ab8 <_printf_float+0x28c>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	07d9      	lsls	r1, r3, #31
 8007ab6:	d5d7      	bpl.n	8007a68 <_printf_float+0x23c>
 8007ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007abc:	4631      	mov	r1, r6
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b8      	blx	r7
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	f43f af0d 	beq.w	80078e2 <_printf_float+0xb6>
 8007ac8:	f04f 0a00 	mov.w	sl, #0
 8007acc:	f104 0b1a 	add.w	fp, r4, #26
 8007ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad2:	425b      	negs	r3, r3
 8007ad4:	4553      	cmp	r3, sl
 8007ad6:	dc01      	bgt.n	8007adc <_printf_float+0x2b0>
 8007ad8:	464b      	mov	r3, r9
 8007ada:	e793      	b.n	8007a04 <_printf_float+0x1d8>
 8007adc:	2301      	movs	r3, #1
 8007ade:	465a      	mov	r2, fp
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	f43f aefb 	beq.w	80078e2 <_printf_float+0xb6>
 8007aec:	f10a 0a01 	add.w	sl, sl, #1
 8007af0:	e7ee      	b.n	8007ad0 <_printf_float+0x2a4>
 8007af2:	bf00      	nop
 8007af4:	7fefffff 	.word	0x7fefffff
 8007af8:	0800b6d0 	.word	0x0800b6d0
 8007afc:	0800b6d4 	.word	0x0800b6d4
 8007b00:	0800b6d8 	.word	0x0800b6d8
 8007b04:	0800b6dc 	.word	0x0800b6dc
 8007b08:	0800b6e0 	.word	0x0800b6e0
 8007b0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b12:	4553      	cmp	r3, sl
 8007b14:	bfa8      	it	ge
 8007b16:	4653      	movge	r3, sl
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	4699      	mov	r9, r3
 8007b1c:	dc36      	bgt.n	8007b8c <_printf_float+0x360>
 8007b1e:	f04f 0b00 	mov.w	fp, #0
 8007b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b26:	f104 021a 	add.w	r2, r4, #26
 8007b2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b2c:	9306      	str	r3, [sp, #24]
 8007b2e:	eba3 0309 	sub.w	r3, r3, r9
 8007b32:	455b      	cmp	r3, fp
 8007b34:	dc31      	bgt.n	8007b9a <_printf_float+0x36e>
 8007b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b38:	459a      	cmp	sl, r3
 8007b3a:	dc3a      	bgt.n	8007bb2 <_printf_float+0x386>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	07da      	lsls	r2, r3, #31
 8007b40:	d437      	bmi.n	8007bb2 <_printf_float+0x386>
 8007b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b44:	ebaa 0903 	sub.w	r9, sl, r3
 8007b48:	9b06      	ldr	r3, [sp, #24]
 8007b4a:	ebaa 0303 	sub.w	r3, sl, r3
 8007b4e:	4599      	cmp	r9, r3
 8007b50:	bfa8      	it	ge
 8007b52:	4699      	movge	r9, r3
 8007b54:	f1b9 0f00 	cmp.w	r9, #0
 8007b58:	dc33      	bgt.n	8007bc2 <_printf_float+0x396>
 8007b5a:	f04f 0800 	mov.w	r8, #0
 8007b5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b62:	f104 0b1a 	add.w	fp, r4, #26
 8007b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b68:	ebaa 0303 	sub.w	r3, sl, r3
 8007b6c:	eba3 0309 	sub.w	r3, r3, r9
 8007b70:	4543      	cmp	r3, r8
 8007b72:	f77f af79 	ble.w	8007a68 <_printf_float+0x23c>
 8007b76:	2301      	movs	r3, #1
 8007b78:	465a      	mov	r2, fp
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	47b8      	blx	r7
 8007b80:	3001      	adds	r0, #1
 8007b82:	f43f aeae 	beq.w	80078e2 <_printf_float+0xb6>
 8007b86:	f108 0801 	add.w	r8, r8, #1
 8007b8a:	e7ec      	b.n	8007b66 <_printf_float+0x33a>
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	4631      	mov	r1, r6
 8007b90:	4628      	mov	r0, r5
 8007b92:	47b8      	blx	r7
 8007b94:	3001      	adds	r0, #1
 8007b96:	d1c2      	bne.n	8007b1e <_printf_float+0x2f2>
 8007b98:	e6a3      	b.n	80078e2 <_printf_float+0xb6>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	9206      	str	r2, [sp, #24]
 8007ba2:	47b8      	blx	r7
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	f43f ae9c 	beq.w	80078e2 <_printf_float+0xb6>
 8007baa:	9a06      	ldr	r2, [sp, #24]
 8007bac:	f10b 0b01 	add.w	fp, fp, #1
 8007bb0:	e7bb      	b.n	8007b2a <_printf_float+0x2fe>
 8007bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d1c0      	bne.n	8007b42 <_printf_float+0x316>
 8007bc0:	e68f      	b.n	80078e2 <_printf_float+0xb6>
 8007bc2:	9a06      	ldr	r2, [sp, #24]
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	4442      	add	r2, r8
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47b8      	blx	r7
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d1c3      	bne.n	8007b5a <_printf_float+0x32e>
 8007bd2:	e686      	b.n	80078e2 <_printf_float+0xb6>
 8007bd4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bd8:	f1ba 0f01 	cmp.w	sl, #1
 8007bdc:	dc01      	bgt.n	8007be2 <_printf_float+0x3b6>
 8007bde:	07db      	lsls	r3, r3, #31
 8007be0:	d536      	bpl.n	8007c50 <_printf_float+0x424>
 8007be2:	2301      	movs	r3, #1
 8007be4:	4642      	mov	r2, r8
 8007be6:	4631      	mov	r1, r6
 8007be8:	4628      	mov	r0, r5
 8007bea:	47b8      	blx	r7
 8007bec:	3001      	adds	r0, #1
 8007bee:	f43f ae78 	beq.w	80078e2 <_printf_float+0xb6>
 8007bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b8      	blx	r7
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	f43f ae70 	beq.w	80078e2 <_printf_float+0xb6>
 8007c02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c06:	2200      	movs	r2, #0
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c0e:	f7f8 ff5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c12:	b9c0      	cbnz	r0, 8007c46 <_printf_float+0x41a>
 8007c14:	4653      	mov	r3, sl
 8007c16:	f108 0201 	add.w	r2, r8, #1
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	d10c      	bne.n	8007c3e <_printf_float+0x412>
 8007c24:	e65d      	b.n	80078e2 <_printf_float+0xb6>
 8007c26:	2301      	movs	r3, #1
 8007c28:	465a      	mov	r2, fp
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b8      	blx	r7
 8007c30:	3001      	adds	r0, #1
 8007c32:	f43f ae56 	beq.w	80078e2 <_printf_float+0xb6>
 8007c36:	f108 0801 	add.w	r8, r8, #1
 8007c3a:	45d0      	cmp	r8, sl
 8007c3c:	dbf3      	blt.n	8007c26 <_printf_float+0x3fa>
 8007c3e:	464b      	mov	r3, r9
 8007c40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c44:	e6df      	b.n	8007a06 <_printf_float+0x1da>
 8007c46:	f04f 0800 	mov.w	r8, #0
 8007c4a:	f104 0b1a 	add.w	fp, r4, #26
 8007c4e:	e7f4      	b.n	8007c3a <_printf_float+0x40e>
 8007c50:	2301      	movs	r3, #1
 8007c52:	4642      	mov	r2, r8
 8007c54:	e7e1      	b.n	8007c1a <_printf_float+0x3ee>
 8007c56:	2301      	movs	r3, #1
 8007c58:	464a      	mov	r2, r9
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b8      	blx	r7
 8007c60:	3001      	adds	r0, #1
 8007c62:	f43f ae3e 	beq.w	80078e2 <_printf_float+0xb6>
 8007c66:	f108 0801 	add.w	r8, r8, #1
 8007c6a:	68e3      	ldr	r3, [r4, #12]
 8007c6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c6e:	1a5b      	subs	r3, r3, r1
 8007c70:	4543      	cmp	r3, r8
 8007c72:	dcf0      	bgt.n	8007c56 <_printf_float+0x42a>
 8007c74:	e6fc      	b.n	8007a70 <_printf_float+0x244>
 8007c76:	f04f 0800 	mov.w	r8, #0
 8007c7a:	f104 0919 	add.w	r9, r4, #25
 8007c7e:	e7f4      	b.n	8007c6a <_printf_float+0x43e>

08007c80 <_printf_common>:
 8007c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c84:	4616      	mov	r6, r2
 8007c86:	4698      	mov	r8, r3
 8007c88:	688a      	ldr	r2, [r1, #8]
 8007c8a:	690b      	ldr	r3, [r1, #16]
 8007c8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c90:	4293      	cmp	r3, r2
 8007c92:	bfb8      	it	lt
 8007c94:	4613      	movlt	r3, r2
 8007c96:	6033      	str	r3, [r6, #0]
 8007c98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	b10a      	cbz	r2, 8007ca6 <_printf_common+0x26>
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	6033      	str	r3, [r6, #0]
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	0699      	lsls	r1, r3, #26
 8007caa:	bf42      	ittt	mi
 8007cac:	6833      	ldrmi	r3, [r6, #0]
 8007cae:	3302      	addmi	r3, #2
 8007cb0:	6033      	strmi	r3, [r6, #0]
 8007cb2:	6825      	ldr	r5, [r4, #0]
 8007cb4:	f015 0506 	ands.w	r5, r5, #6
 8007cb8:	d106      	bne.n	8007cc8 <_printf_common+0x48>
 8007cba:	f104 0a19 	add.w	sl, r4, #25
 8007cbe:	68e3      	ldr	r3, [r4, #12]
 8007cc0:	6832      	ldr	r2, [r6, #0]
 8007cc2:	1a9b      	subs	r3, r3, r2
 8007cc4:	42ab      	cmp	r3, r5
 8007cc6:	dc26      	bgt.n	8007d16 <_printf_common+0x96>
 8007cc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ccc:	6822      	ldr	r2, [r4, #0]
 8007cce:	3b00      	subs	r3, #0
 8007cd0:	bf18      	it	ne
 8007cd2:	2301      	movne	r3, #1
 8007cd4:	0692      	lsls	r2, r2, #26
 8007cd6:	d42b      	bmi.n	8007d30 <_printf_common+0xb0>
 8007cd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cdc:	4641      	mov	r1, r8
 8007cde:	4638      	mov	r0, r7
 8007ce0:	47c8      	blx	r9
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	d01e      	beq.n	8007d24 <_printf_common+0xa4>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	6922      	ldr	r2, [r4, #16]
 8007cea:	f003 0306 	and.w	r3, r3, #6
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	bf02      	ittt	eq
 8007cf2:	68e5      	ldreq	r5, [r4, #12]
 8007cf4:	6833      	ldreq	r3, [r6, #0]
 8007cf6:	1aed      	subeq	r5, r5, r3
 8007cf8:	68a3      	ldr	r3, [r4, #8]
 8007cfa:	bf0c      	ite	eq
 8007cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d00:	2500      	movne	r5, #0
 8007d02:	4293      	cmp	r3, r2
 8007d04:	bfc4      	itt	gt
 8007d06:	1a9b      	subgt	r3, r3, r2
 8007d08:	18ed      	addgt	r5, r5, r3
 8007d0a:	2600      	movs	r6, #0
 8007d0c:	341a      	adds	r4, #26
 8007d0e:	42b5      	cmp	r5, r6
 8007d10:	d11a      	bne.n	8007d48 <_printf_common+0xc8>
 8007d12:	2000      	movs	r0, #0
 8007d14:	e008      	b.n	8007d28 <_printf_common+0xa8>
 8007d16:	2301      	movs	r3, #1
 8007d18:	4652      	mov	r2, sl
 8007d1a:	4641      	mov	r1, r8
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	47c8      	blx	r9
 8007d20:	3001      	adds	r0, #1
 8007d22:	d103      	bne.n	8007d2c <_printf_common+0xac>
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295
 8007d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	e7c6      	b.n	8007cbe <_printf_common+0x3e>
 8007d30:	18e1      	adds	r1, r4, r3
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	2030      	movs	r0, #48	@ 0x30
 8007d36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d3a:	4422      	add	r2, r4
 8007d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d44:	3302      	adds	r3, #2
 8007d46:	e7c7      	b.n	8007cd8 <_printf_common+0x58>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	4641      	mov	r1, r8
 8007d4e:	4638      	mov	r0, r7
 8007d50:	47c8      	blx	r9
 8007d52:	3001      	adds	r0, #1
 8007d54:	d0e6      	beq.n	8007d24 <_printf_common+0xa4>
 8007d56:	3601      	adds	r6, #1
 8007d58:	e7d9      	b.n	8007d0e <_printf_common+0x8e>
	...

08007d5c <_printf_i>:
 8007d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	7e0f      	ldrb	r7, [r1, #24]
 8007d62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d64:	2f78      	cmp	r7, #120	@ 0x78
 8007d66:	4691      	mov	r9, r2
 8007d68:	4680      	mov	r8, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	469a      	mov	sl, r3
 8007d6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d72:	d807      	bhi.n	8007d84 <_printf_i+0x28>
 8007d74:	2f62      	cmp	r7, #98	@ 0x62
 8007d76:	d80a      	bhi.n	8007d8e <_printf_i+0x32>
 8007d78:	2f00      	cmp	r7, #0
 8007d7a:	f000 80d2 	beq.w	8007f22 <_printf_i+0x1c6>
 8007d7e:	2f58      	cmp	r7, #88	@ 0x58
 8007d80:	f000 80b9 	beq.w	8007ef6 <_printf_i+0x19a>
 8007d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d8c:	e03a      	b.n	8007e04 <_printf_i+0xa8>
 8007d8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d92:	2b15      	cmp	r3, #21
 8007d94:	d8f6      	bhi.n	8007d84 <_printf_i+0x28>
 8007d96:	a101      	add	r1, pc, #4	@ (adr r1, 8007d9c <_printf_i+0x40>)
 8007d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d9c:	08007df5 	.word	0x08007df5
 8007da0:	08007e09 	.word	0x08007e09
 8007da4:	08007d85 	.word	0x08007d85
 8007da8:	08007d85 	.word	0x08007d85
 8007dac:	08007d85 	.word	0x08007d85
 8007db0:	08007d85 	.word	0x08007d85
 8007db4:	08007e09 	.word	0x08007e09
 8007db8:	08007d85 	.word	0x08007d85
 8007dbc:	08007d85 	.word	0x08007d85
 8007dc0:	08007d85 	.word	0x08007d85
 8007dc4:	08007d85 	.word	0x08007d85
 8007dc8:	08007f09 	.word	0x08007f09
 8007dcc:	08007e33 	.word	0x08007e33
 8007dd0:	08007ec3 	.word	0x08007ec3
 8007dd4:	08007d85 	.word	0x08007d85
 8007dd8:	08007d85 	.word	0x08007d85
 8007ddc:	08007f2b 	.word	0x08007f2b
 8007de0:	08007d85 	.word	0x08007d85
 8007de4:	08007e33 	.word	0x08007e33
 8007de8:	08007d85 	.word	0x08007d85
 8007dec:	08007d85 	.word	0x08007d85
 8007df0:	08007ecb 	.word	0x08007ecb
 8007df4:	6833      	ldr	r3, [r6, #0]
 8007df6:	1d1a      	adds	r2, r3, #4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6032      	str	r2, [r6, #0]
 8007dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e04:	2301      	movs	r3, #1
 8007e06:	e09d      	b.n	8007f44 <_printf_i+0x1e8>
 8007e08:	6833      	ldr	r3, [r6, #0]
 8007e0a:	6820      	ldr	r0, [r4, #0]
 8007e0c:	1d19      	adds	r1, r3, #4
 8007e0e:	6031      	str	r1, [r6, #0]
 8007e10:	0606      	lsls	r6, r0, #24
 8007e12:	d501      	bpl.n	8007e18 <_printf_i+0xbc>
 8007e14:	681d      	ldr	r5, [r3, #0]
 8007e16:	e003      	b.n	8007e20 <_printf_i+0xc4>
 8007e18:	0645      	lsls	r5, r0, #25
 8007e1a:	d5fb      	bpl.n	8007e14 <_printf_i+0xb8>
 8007e1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e20:	2d00      	cmp	r5, #0
 8007e22:	da03      	bge.n	8007e2c <_printf_i+0xd0>
 8007e24:	232d      	movs	r3, #45	@ 0x2d
 8007e26:	426d      	negs	r5, r5
 8007e28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e2c:	4859      	ldr	r0, [pc, #356]	@ (8007f94 <_printf_i+0x238>)
 8007e2e:	230a      	movs	r3, #10
 8007e30:	e011      	b.n	8007e56 <_printf_i+0xfa>
 8007e32:	6821      	ldr	r1, [r4, #0]
 8007e34:	6833      	ldr	r3, [r6, #0]
 8007e36:	0608      	lsls	r0, r1, #24
 8007e38:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e3c:	d402      	bmi.n	8007e44 <_printf_i+0xe8>
 8007e3e:	0649      	lsls	r1, r1, #25
 8007e40:	bf48      	it	mi
 8007e42:	b2ad      	uxthmi	r5, r5
 8007e44:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e46:	4853      	ldr	r0, [pc, #332]	@ (8007f94 <_printf_i+0x238>)
 8007e48:	6033      	str	r3, [r6, #0]
 8007e4a:	bf14      	ite	ne
 8007e4c:	230a      	movne	r3, #10
 8007e4e:	2308      	moveq	r3, #8
 8007e50:	2100      	movs	r1, #0
 8007e52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e56:	6866      	ldr	r6, [r4, #4]
 8007e58:	60a6      	str	r6, [r4, #8]
 8007e5a:	2e00      	cmp	r6, #0
 8007e5c:	bfa2      	ittt	ge
 8007e5e:	6821      	ldrge	r1, [r4, #0]
 8007e60:	f021 0104 	bicge.w	r1, r1, #4
 8007e64:	6021      	strge	r1, [r4, #0]
 8007e66:	b90d      	cbnz	r5, 8007e6c <_printf_i+0x110>
 8007e68:	2e00      	cmp	r6, #0
 8007e6a:	d04b      	beq.n	8007f04 <_printf_i+0x1a8>
 8007e6c:	4616      	mov	r6, r2
 8007e6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e72:	fb03 5711 	mls	r7, r3, r1, r5
 8007e76:	5dc7      	ldrb	r7, [r0, r7]
 8007e78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e7c:	462f      	mov	r7, r5
 8007e7e:	42bb      	cmp	r3, r7
 8007e80:	460d      	mov	r5, r1
 8007e82:	d9f4      	bls.n	8007e6e <_printf_i+0x112>
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d10b      	bne.n	8007ea0 <_printf_i+0x144>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	07df      	lsls	r7, r3, #31
 8007e8c:	d508      	bpl.n	8007ea0 <_printf_i+0x144>
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	6861      	ldr	r1, [r4, #4]
 8007e92:	4299      	cmp	r1, r3
 8007e94:	bfde      	ittt	le
 8007e96:	2330      	movle	r3, #48	@ 0x30
 8007e98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ea0:	1b92      	subs	r2, r2, r6
 8007ea2:	6122      	str	r2, [r4, #16]
 8007ea4:	f8cd a000 	str.w	sl, [sp]
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	aa03      	add	r2, sp, #12
 8007eac:	4621      	mov	r1, r4
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f7ff fee6 	bl	8007c80 <_printf_common>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d14a      	bne.n	8007f4e <_printf_i+0x1f2>
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	b004      	add	sp, #16
 8007ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	f043 0320 	orr.w	r3, r3, #32
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	4833      	ldr	r0, [pc, #204]	@ (8007f98 <_printf_i+0x23c>)
 8007ecc:	2778      	movs	r7, #120	@ 0x78
 8007ece:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	6831      	ldr	r1, [r6, #0]
 8007ed6:	061f      	lsls	r7, r3, #24
 8007ed8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007edc:	d402      	bmi.n	8007ee4 <_printf_i+0x188>
 8007ede:	065f      	lsls	r7, r3, #25
 8007ee0:	bf48      	it	mi
 8007ee2:	b2ad      	uxthmi	r5, r5
 8007ee4:	6031      	str	r1, [r6, #0]
 8007ee6:	07d9      	lsls	r1, r3, #31
 8007ee8:	bf44      	itt	mi
 8007eea:	f043 0320 	orrmi.w	r3, r3, #32
 8007eee:	6023      	strmi	r3, [r4, #0]
 8007ef0:	b11d      	cbz	r5, 8007efa <_printf_i+0x19e>
 8007ef2:	2310      	movs	r3, #16
 8007ef4:	e7ac      	b.n	8007e50 <_printf_i+0xf4>
 8007ef6:	4827      	ldr	r0, [pc, #156]	@ (8007f94 <_printf_i+0x238>)
 8007ef8:	e7e9      	b.n	8007ece <_printf_i+0x172>
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	f023 0320 	bic.w	r3, r3, #32
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	e7f6      	b.n	8007ef2 <_printf_i+0x196>
 8007f04:	4616      	mov	r6, r2
 8007f06:	e7bd      	b.n	8007e84 <_printf_i+0x128>
 8007f08:	6833      	ldr	r3, [r6, #0]
 8007f0a:	6825      	ldr	r5, [r4, #0]
 8007f0c:	6961      	ldr	r1, [r4, #20]
 8007f0e:	1d18      	adds	r0, r3, #4
 8007f10:	6030      	str	r0, [r6, #0]
 8007f12:	062e      	lsls	r6, r5, #24
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	d501      	bpl.n	8007f1c <_printf_i+0x1c0>
 8007f18:	6019      	str	r1, [r3, #0]
 8007f1a:	e002      	b.n	8007f22 <_printf_i+0x1c6>
 8007f1c:	0668      	lsls	r0, r5, #25
 8007f1e:	d5fb      	bpl.n	8007f18 <_printf_i+0x1bc>
 8007f20:	8019      	strh	r1, [r3, #0]
 8007f22:	2300      	movs	r3, #0
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	4616      	mov	r6, r2
 8007f28:	e7bc      	b.n	8007ea4 <_printf_i+0x148>
 8007f2a:	6833      	ldr	r3, [r6, #0]
 8007f2c:	1d1a      	adds	r2, r3, #4
 8007f2e:	6032      	str	r2, [r6, #0]
 8007f30:	681e      	ldr	r6, [r3, #0]
 8007f32:	6862      	ldr	r2, [r4, #4]
 8007f34:	2100      	movs	r1, #0
 8007f36:	4630      	mov	r0, r6
 8007f38:	f7f8 f94a 	bl	80001d0 <memchr>
 8007f3c:	b108      	cbz	r0, 8007f42 <_printf_i+0x1e6>
 8007f3e:	1b80      	subs	r0, r0, r6
 8007f40:	6060      	str	r0, [r4, #4]
 8007f42:	6863      	ldr	r3, [r4, #4]
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	2300      	movs	r3, #0
 8007f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f4c:	e7aa      	b.n	8007ea4 <_printf_i+0x148>
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	4632      	mov	r2, r6
 8007f52:	4649      	mov	r1, r9
 8007f54:	4640      	mov	r0, r8
 8007f56:	47d0      	blx	sl
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d0ad      	beq.n	8007eb8 <_printf_i+0x15c>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	079b      	lsls	r3, r3, #30
 8007f60:	d413      	bmi.n	8007f8a <_printf_i+0x22e>
 8007f62:	68e0      	ldr	r0, [r4, #12]
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	4298      	cmp	r0, r3
 8007f68:	bfb8      	it	lt
 8007f6a:	4618      	movlt	r0, r3
 8007f6c:	e7a6      	b.n	8007ebc <_printf_i+0x160>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4632      	mov	r2, r6
 8007f72:	4649      	mov	r1, r9
 8007f74:	4640      	mov	r0, r8
 8007f76:	47d0      	blx	sl
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d09d      	beq.n	8007eb8 <_printf_i+0x15c>
 8007f7c:	3501      	adds	r5, #1
 8007f7e:	68e3      	ldr	r3, [r4, #12]
 8007f80:	9903      	ldr	r1, [sp, #12]
 8007f82:	1a5b      	subs	r3, r3, r1
 8007f84:	42ab      	cmp	r3, r5
 8007f86:	dcf2      	bgt.n	8007f6e <_printf_i+0x212>
 8007f88:	e7eb      	b.n	8007f62 <_printf_i+0x206>
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	f104 0619 	add.w	r6, r4, #25
 8007f90:	e7f5      	b.n	8007f7e <_printf_i+0x222>
 8007f92:	bf00      	nop
 8007f94:	0800b6e2 	.word	0x0800b6e2
 8007f98:	0800b6f3 	.word	0x0800b6f3

08007f9c <_scanf_float>:
 8007f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	b087      	sub	sp, #28
 8007fa2:	4617      	mov	r7, r2
 8007fa4:	9303      	str	r3, [sp, #12]
 8007fa6:	688b      	ldr	r3, [r1, #8]
 8007fa8:	1e5a      	subs	r2, r3, #1
 8007faa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007fae:	bf81      	itttt	hi
 8007fb0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007fb4:	eb03 0b05 	addhi.w	fp, r3, r5
 8007fb8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007fbc:	608b      	strhi	r3, [r1, #8]
 8007fbe:	680b      	ldr	r3, [r1, #0]
 8007fc0:	460a      	mov	r2, r1
 8007fc2:	f04f 0500 	mov.w	r5, #0
 8007fc6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007fca:	f842 3b1c 	str.w	r3, [r2], #28
 8007fce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fd2:	4680      	mov	r8, r0
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	bf98      	it	ls
 8007fd8:	f04f 0b00 	movls.w	fp, #0
 8007fdc:	9201      	str	r2, [sp, #4]
 8007fde:	4616      	mov	r6, r2
 8007fe0:	46aa      	mov	sl, r5
 8007fe2:	46a9      	mov	r9, r5
 8007fe4:	9502      	str	r5, [sp, #8]
 8007fe6:	68a2      	ldr	r2, [r4, #8]
 8007fe8:	b152      	cbz	r2, 8008000 <_scanf_float+0x64>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b4e      	cmp	r3, #78	@ 0x4e
 8007ff0:	d864      	bhi.n	80080bc <_scanf_float+0x120>
 8007ff2:	2b40      	cmp	r3, #64	@ 0x40
 8007ff4:	d83c      	bhi.n	8008070 <_scanf_float+0xd4>
 8007ff6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007ffa:	b2c8      	uxtb	r0, r1
 8007ffc:	280e      	cmp	r0, #14
 8007ffe:	d93a      	bls.n	8008076 <_scanf_float+0xda>
 8008000:	f1b9 0f00 	cmp.w	r9, #0
 8008004:	d003      	beq.n	800800e <_scanf_float+0x72>
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008012:	f1ba 0f01 	cmp.w	sl, #1
 8008016:	f200 8117 	bhi.w	8008248 <_scanf_float+0x2ac>
 800801a:	9b01      	ldr	r3, [sp, #4]
 800801c:	429e      	cmp	r6, r3
 800801e:	f200 8108 	bhi.w	8008232 <_scanf_float+0x296>
 8008022:	2001      	movs	r0, #1
 8008024:	b007      	add	sp, #28
 8008026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800802e:	2a0d      	cmp	r2, #13
 8008030:	d8e6      	bhi.n	8008000 <_scanf_float+0x64>
 8008032:	a101      	add	r1, pc, #4	@ (adr r1, 8008038 <_scanf_float+0x9c>)
 8008034:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008038:	0800817f 	.word	0x0800817f
 800803c:	08008001 	.word	0x08008001
 8008040:	08008001 	.word	0x08008001
 8008044:	08008001 	.word	0x08008001
 8008048:	080081df 	.word	0x080081df
 800804c:	080081b7 	.word	0x080081b7
 8008050:	08008001 	.word	0x08008001
 8008054:	08008001 	.word	0x08008001
 8008058:	0800818d 	.word	0x0800818d
 800805c:	08008001 	.word	0x08008001
 8008060:	08008001 	.word	0x08008001
 8008064:	08008001 	.word	0x08008001
 8008068:	08008001 	.word	0x08008001
 800806c:	08008145 	.word	0x08008145
 8008070:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008074:	e7db      	b.n	800802e <_scanf_float+0x92>
 8008076:	290e      	cmp	r1, #14
 8008078:	d8c2      	bhi.n	8008000 <_scanf_float+0x64>
 800807a:	a001      	add	r0, pc, #4	@ (adr r0, 8008080 <_scanf_float+0xe4>)
 800807c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008080:	08008135 	.word	0x08008135
 8008084:	08008001 	.word	0x08008001
 8008088:	08008135 	.word	0x08008135
 800808c:	080081cb 	.word	0x080081cb
 8008090:	08008001 	.word	0x08008001
 8008094:	080080dd 	.word	0x080080dd
 8008098:	0800811b 	.word	0x0800811b
 800809c:	0800811b 	.word	0x0800811b
 80080a0:	0800811b 	.word	0x0800811b
 80080a4:	0800811b 	.word	0x0800811b
 80080a8:	0800811b 	.word	0x0800811b
 80080ac:	0800811b 	.word	0x0800811b
 80080b0:	0800811b 	.word	0x0800811b
 80080b4:	0800811b 	.word	0x0800811b
 80080b8:	0800811b 	.word	0x0800811b
 80080bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80080be:	d809      	bhi.n	80080d4 <_scanf_float+0x138>
 80080c0:	2b60      	cmp	r3, #96	@ 0x60
 80080c2:	d8b2      	bhi.n	800802a <_scanf_float+0x8e>
 80080c4:	2b54      	cmp	r3, #84	@ 0x54
 80080c6:	d07b      	beq.n	80081c0 <_scanf_float+0x224>
 80080c8:	2b59      	cmp	r3, #89	@ 0x59
 80080ca:	d199      	bne.n	8008000 <_scanf_float+0x64>
 80080cc:	2d07      	cmp	r5, #7
 80080ce:	d197      	bne.n	8008000 <_scanf_float+0x64>
 80080d0:	2508      	movs	r5, #8
 80080d2:	e02c      	b.n	800812e <_scanf_float+0x192>
 80080d4:	2b74      	cmp	r3, #116	@ 0x74
 80080d6:	d073      	beq.n	80081c0 <_scanf_float+0x224>
 80080d8:	2b79      	cmp	r3, #121	@ 0x79
 80080da:	e7f6      	b.n	80080ca <_scanf_float+0x12e>
 80080dc:	6821      	ldr	r1, [r4, #0]
 80080de:	05c8      	lsls	r0, r1, #23
 80080e0:	d51b      	bpl.n	800811a <_scanf_float+0x17e>
 80080e2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80080e6:	6021      	str	r1, [r4, #0]
 80080e8:	f109 0901 	add.w	r9, r9, #1
 80080ec:	f1bb 0f00 	cmp.w	fp, #0
 80080f0:	d003      	beq.n	80080fa <_scanf_float+0x15e>
 80080f2:	3201      	adds	r2, #1
 80080f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080f8:	60a2      	str	r2, [r4, #8]
 80080fa:	68a3      	ldr	r3, [r4, #8]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	60a3      	str	r3, [r4, #8]
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	3301      	adds	r3, #1
 8008104:	6123      	str	r3, [r4, #16]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	3b01      	subs	r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	607b      	str	r3, [r7, #4]
 800810e:	f340 8087 	ble.w	8008220 <_scanf_float+0x284>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	e765      	b.n	8007fe6 <_scanf_float+0x4a>
 800811a:	eb1a 0105 	adds.w	r1, sl, r5
 800811e:	f47f af6f 	bne.w	8008000 <_scanf_float+0x64>
 8008122:	6822      	ldr	r2, [r4, #0]
 8008124:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008128:	6022      	str	r2, [r4, #0]
 800812a:	460d      	mov	r5, r1
 800812c:	468a      	mov	sl, r1
 800812e:	f806 3b01 	strb.w	r3, [r6], #1
 8008132:	e7e2      	b.n	80080fa <_scanf_float+0x15e>
 8008134:	6822      	ldr	r2, [r4, #0]
 8008136:	0610      	lsls	r0, r2, #24
 8008138:	f57f af62 	bpl.w	8008000 <_scanf_float+0x64>
 800813c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008140:	6022      	str	r2, [r4, #0]
 8008142:	e7f4      	b.n	800812e <_scanf_float+0x192>
 8008144:	f1ba 0f00 	cmp.w	sl, #0
 8008148:	d10e      	bne.n	8008168 <_scanf_float+0x1cc>
 800814a:	f1b9 0f00 	cmp.w	r9, #0
 800814e:	d10e      	bne.n	800816e <_scanf_float+0x1d2>
 8008150:	6822      	ldr	r2, [r4, #0]
 8008152:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008156:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800815a:	d108      	bne.n	800816e <_scanf_float+0x1d2>
 800815c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008160:	6022      	str	r2, [r4, #0]
 8008162:	f04f 0a01 	mov.w	sl, #1
 8008166:	e7e2      	b.n	800812e <_scanf_float+0x192>
 8008168:	f1ba 0f02 	cmp.w	sl, #2
 800816c:	d055      	beq.n	800821a <_scanf_float+0x27e>
 800816e:	2d01      	cmp	r5, #1
 8008170:	d002      	beq.n	8008178 <_scanf_float+0x1dc>
 8008172:	2d04      	cmp	r5, #4
 8008174:	f47f af44 	bne.w	8008000 <_scanf_float+0x64>
 8008178:	3501      	adds	r5, #1
 800817a:	b2ed      	uxtb	r5, r5
 800817c:	e7d7      	b.n	800812e <_scanf_float+0x192>
 800817e:	f1ba 0f01 	cmp.w	sl, #1
 8008182:	f47f af3d 	bne.w	8008000 <_scanf_float+0x64>
 8008186:	f04f 0a02 	mov.w	sl, #2
 800818a:	e7d0      	b.n	800812e <_scanf_float+0x192>
 800818c:	b97d      	cbnz	r5, 80081ae <_scanf_float+0x212>
 800818e:	f1b9 0f00 	cmp.w	r9, #0
 8008192:	f47f af38 	bne.w	8008006 <_scanf_float+0x6a>
 8008196:	6822      	ldr	r2, [r4, #0]
 8008198:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800819c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80081a0:	f040 8108 	bne.w	80083b4 <_scanf_float+0x418>
 80081a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081a8:	6022      	str	r2, [r4, #0]
 80081aa:	2501      	movs	r5, #1
 80081ac:	e7bf      	b.n	800812e <_scanf_float+0x192>
 80081ae:	2d03      	cmp	r5, #3
 80081b0:	d0e2      	beq.n	8008178 <_scanf_float+0x1dc>
 80081b2:	2d05      	cmp	r5, #5
 80081b4:	e7de      	b.n	8008174 <_scanf_float+0x1d8>
 80081b6:	2d02      	cmp	r5, #2
 80081b8:	f47f af22 	bne.w	8008000 <_scanf_float+0x64>
 80081bc:	2503      	movs	r5, #3
 80081be:	e7b6      	b.n	800812e <_scanf_float+0x192>
 80081c0:	2d06      	cmp	r5, #6
 80081c2:	f47f af1d 	bne.w	8008000 <_scanf_float+0x64>
 80081c6:	2507      	movs	r5, #7
 80081c8:	e7b1      	b.n	800812e <_scanf_float+0x192>
 80081ca:	6822      	ldr	r2, [r4, #0]
 80081cc:	0591      	lsls	r1, r2, #22
 80081ce:	f57f af17 	bpl.w	8008000 <_scanf_float+0x64>
 80081d2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80081d6:	6022      	str	r2, [r4, #0]
 80081d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80081dc:	e7a7      	b.n	800812e <_scanf_float+0x192>
 80081de:	6822      	ldr	r2, [r4, #0]
 80081e0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80081e4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80081e8:	d006      	beq.n	80081f8 <_scanf_float+0x25c>
 80081ea:	0550      	lsls	r0, r2, #21
 80081ec:	f57f af08 	bpl.w	8008000 <_scanf_float+0x64>
 80081f0:	f1b9 0f00 	cmp.w	r9, #0
 80081f4:	f000 80de 	beq.w	80083b4 <_scanf_float+0x418>
 80081f8:	0591      	lsls	r1, r2, #22
 80081fa:	bf58      	it	pl
 80081fc:	9902      	ldrpl	r1, [sp, #8]
 80081fe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008202:	bf58      	it	pl
 8008204:	eba9 0101 	subpl.w	r1, r9, r1
 8008208:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800820c:	bf58      	it	pl
 800820e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008212:	6022      	str	r2, [r4, #0]
 8008214:	f04f 0900 	mov.w	r9, #0
 8008218:	e789      	b.n	800812e <_scanf_float+0x192>
 800821a:	f04f 0a03 	mov.w	sl, #3
 800821e:	e786      	b.n	800812e <_scanf_float+0x192>
 8008220:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008224:	4639      	mov	r1, r7
 8008226:	4640      	mov	r0, r8
 8008228:	4798      	blx	r3
 800822a:	2800      	cmp	r0, #0
 800822c:	f43f aedb 	beq.w	8007fe6 <_scanf_float+0x4a>
 8008230:	e6e6      	b.n	8008000 <_scanf_float+0x64>
 8008232:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008236:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800823a:	463a      	mov	r2, r7
 800823c:	4640      	mov	r0, r8
 800823e:	4798      	blx	r3
 8008240:	6923      	ldr	r3, [r4, #16]
 8008242:	3b01      	subs	r3, #1
 8008244:	6123      	str	r3, [r4, #16]
 8008246:	e6e8      	b.n	800801a <_scanf_float+0x7e>
 8008248:	1e6b      	subs	r3, r5, #1
 800824a:	2b06      	cmp	r3, #6
 800824c:	d824      	bhi.n	8008298 <_scanf_float+0x2fc>
 800824e:	2d02      	cmp	r5, #2
 8008250:	d836      	bhi.n	80082c0 <_scanf_float+0x324>
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	429e      	cmp	r6, r3
 8008256:	f67f aee4 	bls.w	8008022 <_scanf_float+0x86>
 800825a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800825e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008262:	463a      	mov	r2, r7
 8008264:	4640      	mov	r0, r8
 8008266:	4798      	blx	r3
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	3b01      	subs	r3, #1
 800826c:	6123      	str	r3, [r4, #16]
 800826e:	e7f0      	b.n	8008252 <_scanf_float+0x2b6>
 8008270:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008274:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008278:	463a      	mov	r2, r7
 800827a:	4640      	mov	r0, r8
 800827c:	4798      	blx	r3
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	3b01      	subs	r3, #1
 8008282:	6123      	str	r3, [r4, #16]
 8008284:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008288:	fa5f fa8a 	uxtb.w	sl, sl
 800828c:	f1ba 0f02 	cmp.w	sl, #2
 8008290:	d1ee      	bne.n	8008270 <_scanf_float+0x2d4>
 8008292:	3d03      	subs	r5, #3
 8008294:	b2ed      	uxtb	r5, r5
 8008296:	1b76      	subs	r6, r6, r5
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	05da      	lsls	r2, r3, #23
 800829c:	d530      	bpl.n	8008300 <_scanf_float+0x364>
 800829e:	055b      	lsls	r3, r3, #21
 80082a0:	d511      	bpl.n	80082c6 <_scanf_float+0x32a>
 80082a2:	9b01      	ldr	r3, [sp, #4]
 80082a4:	429e      	cmp	r6, r3
 80082a6:	f67f aebc 	bls.w	8008022 <_scanf_float+0x86>
 80082aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082b2:	463a      	mov	r2, r7
 80082b4:	4640      	mov	r0, r8
 80082b6:	4798      	blx	r3
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	6123      	str	r3, [r4, #16]
 80082be:	e7f0      	b.n	80082a2 <_scanf_float+0x306>
 80082c0:	46aa      	mov	sl, r5
 80082c2:	46b3      	mov	fp, r6
 80082c4:	e7de      	b.n	8008284 <_scanf_float+0x2e8>
 80082c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	2965      	cmp	r1, #101	@ 0x65
 80082ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80082d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80082d6:	6123      	str	r3, [r4, #16]
 80082d8:	d00c      	beq.n	80082f4 <_scanf_float+0x358>
 80082da:	2945      	cmp	r1, #69	@ 0x45
 80082dc:	d00a      	beq.n	80082f4 <_scanf_float+0x358>
 80082de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082e2:	463a      	mov	r2, r7
 80082e4:	4640      	mov	r0, r8
 80082e6:	4798      	blx	r3
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	1eb5      	subs	r5, r6, #2
 80082f2:	6123      	str	r3, [r4, #16]
 80082f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082f8:	463a      	mov	r2, r7
 80082fa:	4640      	mov	r0, r8
 80082fc:	4798      	blx	r3
 80082fe:	462e      	mov	r6, r5
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	f012 0210 	ands.w	r2, r2, #16
 8008306:	d001      	beq.n	800830c <_scanf_float+0x370>
 8008308:	2000      	movs	r0, #0
 800830a:	e68b      	b.n	8008024 <_scanf_float+0x88>
 800830c:	7032      	strb	r2, [r6, #0]
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008318:	d11c      	bne.n	8008354 <_scanf_float+0x3b8>
 800831a:	9b02      	ldr	r3, [sp, #8]
 800831c:	454b      	cmp	r3, r9
 800831e:	eba3 0209 	sub.w	r2, r3, r9
 8008322:	d123      	bne.n	800836c <_scanf_float+0x3d0>
 8008324:	9901      	ldr	r1, [sp, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	4640      	mov	r0, r8
 800832a:	f7ff f9cd 	bl	80076c8 <_strtod_r>
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	6821      	ldr	r1, [r4, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f011 0f02 	tst.w	r1, #2
 8008338:	ec57 6b10 	vmov	r6, r7, d0
 800833c:	f103 0204 	add.w	r2, r3, #4
 8008340:	d01f      	beq.n	8008382 <_scanf_float+0x3e6>
 8008342:	9903      	ldr	r1, [sp, #12]
 8008344:	600a      	str	r2, [r1, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	e9c3 6700 	strd	r6, r7, [r3]
 800834c:	68e3      	ldr	r3, [r4, #12]
 800834e:	3301      	adds	r3, #1
 8008350:	60e3      	str	r3, [r4, #12]
 8008352:	e7d9      	b.n	8008308 <_scanf_float+0x36c>
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0e4      	beq.n	8008324 <_scanf_float+0x388>
 800835a:	9905      	ldr	r1, [sp, #20]
 800835c:	230a      	movs	r3, #10
 800835e:	3101      	adds	r1, #1
 8008360:	4640      	mov	r0, r8
 8008362:	f002 fa65 	bl	800a830 <_strtol_r>
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	9e05      	ldr	r6, [sp, #20]
 800836a:	1ac2      	subs	r2, r0, r3
 800836c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008370:	429e      	cmp	r6, r3
 8008372:	bf28      	it	cs
 8008374:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008378:	4910      	ldr	r1, [pc, #64]	@ (80083bc <_scanf_float+0x420>)
 800837a:	4630      	mov	r0, r6
 800837c:	f000 f8e4 	bl	8008548 <siprintf>
 8008380:	e7d0      	b.n	8008324 <_scanf_float+0x388>
 8008382:	f011 0f04 	tst.w	r1, #4
 8008386:	9903      	ldr	r1, [sp, #12]
 8008388:	600a      	str	r2, [r1, #0]
 800838a:	d1dc      	bne.n	8008346 <_scanf_float+0x3aa>
 800838c:	681d      	ldr	r5, [r3, #0]
 800838e:	4632      	mov	r2, r6
 8008390:	463b      	mov	r3, r7
 8008392:	4630      	mov	r0, r6
 8008394:	4639      	mov	r1, r7
 8008396:	f7f8 fbc9 	bl	8000b2c <__aeabi_dcmpun>
 800839a:	b128      	cbz	r0, 80083a8 <_scanf_float+0x40c>
 800839c:	4808      	ldr	r0, [pc, #32]	@ (80083c0 <_scanf_float+0x424>)
 800839e:	f000 fa5f 	bl	8008860 <nanf>
 80083a2:	ed85 0a00 	vstr	s0, [r5]
 80083a6:	e7d1      	b.n	800834c <_scanf_float+0x3b0>
 80083a8:	4630      	mov	r0, r6
 80083aa:	4639      	mov	r1, r7
 80083ac:	f7f8 fc1c 	bl	8000be8 <__aeabi_d2f>
 80083b0:	6028      	str	r0, [r5, #0]
 80083b2:	e7cb      	b.n	800834c <_scanf_float+0x3b0>
 80083b4:	f04f 0900 	mov.w	r9, #0
 80083b8:	e629      	b.n	800800e <_scanf_float+0x72>
 80083ba:	bf00      	nop
 80083bc:	0800b704 	.word	0x0800b704
 80083c0:	0800b7bd 	.word	0x0800b7bd

080083c4 <std>:
 80083c4:	2300      	movs	r3, #0
 80083c6:	b510      	push	{r4, lr}
 80083c8:	4604      	mov	r4, r0
 80083ca:	e9c0 3300 	strd	r3, r3, [r0]
 80083ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083d2:	6083      	str	r3, [r0, #8]
 80083d4:	8181      	strh	r1, [r0, #12]
 80083d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80083d8:	81c2      	strh	r2, [r0, #14]
 80083da:	6183      	str	r3, [r0, #24]
 80083dc:	4619      	mov	r1, r3
 80083de:	2208      	movs	r2, #8
 80083e0:	305c      	adds	r0, #92	@ 0x5c
 80083e2:	f000 f914 	bl	800860e <memset>
 80083e6:	4b0d      	ldr	r3, [pc, #52]	@ (800841c <std+0x58>)
 80083e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80083ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008420 <std+0x5c>)
 80083ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008424 <std+0x60>)
 80083f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008428 <std+0x64>)
 80083f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80083f6:	4b0d      	ldr	r3, [pc, #52]	@ (800842c <std+0x68>)
 80083f8:	6224      	str	r4, [r4, #32]
 80083fa:	429c      	cmp	r4, r3
 80083fc:	d006      	beq.n	800840c <std+0x48>
 80083fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008402:	4294      	cmp	r4, r2
 8008404:	d002      	beq.n	800840c <std+0x48>
 8008406:	33d0      	adds	r3, #208	@ 0xd0
 8008408:	429c      	cmp	r4, r3
 800840a:	d105      	bne.n	8008418 <std+0x54>
 800840c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008414:	f000 ba08 	b.w	8008828 <__retarget_lock_init_recursive>
 8008418:	bd10      	pop	{r4, pc}
 800841a:	bf00      	nop
 800841c:	08008589 	.word	0x08008589
 8008420:	080085ab 	.word	0x080085ab
 8008424:	080085e3 	.word	0x080085e3
 8008428:	08008607 	.word	0x08008607
 800842c:	20000590 	.word	0x20000590

08008430 <stdio_exit_handler>:
 8008430:	4a02      	ldr	r2, [pc, #8]	@ (800843c <stdio_exit_handler+0xc>)
 8008432:	4903      	ldr	r1, [pc, #12]	@ (8008440 <stdio_exit_handler+0x10>)
 8008434:	4803      	ldr	r0, [pc, #12]	@ (8008444 <stdio_exit_handler+0x14>)
 8008436:	f000 b869 	b.w	800850c <_fwalk_sglue>
 800843a:	bf00      	nop
 800843c:	2000000c 	.word	0x2000000c
 8008440:	0800ac05 	.word	0x0800ac05
 8008444:	20000188 	.word	0x20000188

08008448 <cleanup_stdio>:
 8008448:	6841      	ldr	r1, [r0, #4]
 800844a:	4b0c      	ldr	r3, [pc, #48]	@ (800847c <cleanup_stdio+0x34>)
 800844c:	4299      	cmp	r1, r3
 800844e:	b510      	push	{r4, lr}
 8008450:	4604      	mov	r4, r0
 8008452:	d001      	beq.n	8008458 <cleanup_stdio+0x10>
 8008454:	f002 fbd6 	bl	800ac04 <_fflush_r>
 8008458:	68a1      	ldr	r1, [r4, #8]
 800845a:	4b09      	ldr	r3, [pc, #36]	@ (8008480 <cleanup_stdio+0x38>)
 800845c:	4299      	cmp	r1, r3
 800845e:	d002      	beq.n	8008466 <cleanup_stdio+0x1e>
 8008460:	4620      	mov	r0, r4
 8008462:	f002 fbcf 	bl	800ac04 <_fflush_r>
 8008466:	68e1      	ldr	r1, [r4, #12]
 8008468:	4b06      	ldr	r3, [pc, #24]	@ (8008484 <cleanup_stdio+0x3c>)
 800846a:	4299      	cmp	r1, r3
 800846c:	d004      	beq.n	8008478 <cleanup_stdio+0x30>
 800846e:	4620      	mov	r0, r4
 8008470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008474:	f002 bbc6 	b.w	800ac04 <_fflush_r>
 8008478:	bd10      	pop	{r4, pc}
 800847a:	bf00      	nop
 800847c:	20000590 	.word	0x20000590
 8008480:	200005f8 	.word	0x200005f8
 8008484:	20000660 	.word	0x20000660

08008488 <global_stdio_init.part.0>:
 8008488:	b510      	push	{r4, lr}
 800848a:	4b0b      	ldr	r3, [pc, #44]	@ (80084b8 <global_stdio_init.part.0+0x30>)
 800848c:	4c0b      	ldr	r4, [pc, #44]	@ (80084bc <global_stdio_init.part.0+0x34>)
 800848e:	4a0c      	ldr	r2, [pc, #48]	@ (80084c0 <global_stdio_init.part.0+0x38>)
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	4620      	mov	r0, r4
 8008494:	2200      	movs	r2, #0
 8008496:	2104      	movs	r1, #4
 8008498:	f7ff ff94 	bl	80083c4 <std>
 800849c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084a0:	2201      	movs	r2, #1
 80084a2:	2109      	movs	r1, #9
 80084a4:	f7ff ff8e 	bl	80083c4 <std>
 80084a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084ac:	2202      	movs	r2, #2
 80084ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084b2:	2112      	movs	r1, #18
 80084b4:	f7ff bf86 	b.w	80083c4 <std>
 80084b8:	200006c8 	.word	0x200006c8
 80084bc:	20000590 	.word	0x20000590
 80084c0:	08008431 	.word	0x08008431

080084c4 <__sfp_lock_acquire>:
 80084c4:	4801      	ldr	r0, [pc, #4]	@ (80084cc <__sfp_lock_acquire+0x8>)
 80084c6:	f000 b9b0 	b.w	800882a <__retarget_lock_acquire_recursive>
 80084ca:	bf00      	nop
 80084cc:	200006d1 	.word	0x200006d1

080084d0 <__sfp_lock_release>:
 80084d0:	4801      	ldr	r0, [pc, #4]	@ (80084d8 <__sfp_lock_release+0x8>)
 80084d2:	f000 b9ab 	b.w	800882c <__retarget_lock_release_recursive>
 80084d6:	bf00      	nop
 80084d8:	200006d1 	.word	0x200006d1

080084dc <__sinit>:
 80084dc:	b510      	push	{r4, lr}
 80084de:	4604      	mov	r4, r0
 80084e0:	f7ff fff0 	bl	80084c4 <__sfp_lock_acquire>
 80084e4:	6a23      	ldr	r3, [r4, #32]
 80084e6:	b11b      	cbz	r3, 80084f0 <__sinit+0x14>
 80084e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ec:	f7ff bff0 	b.w	80084d0 <__sfp_lock_release>
 80084f0:	4b04      	ldr	r3, [pc, #16]	@ (8008504 <__sinit+0x28>)
 80084f2:	6223      	str	r3, [r4, #32]
 80084f4:	4b04      	ldr	r3, [pc, #16]	@ (8008508 <__sinit+0x2c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1f5      	bne.n	80084e8 <__sinit+0xc>
 80084fc:	f7ff ffc4 	bl	8008488 <global_stdio_init.part.0>
 8008500:	e7f2      	b.n	80084e8 <__sinit+0xc>
 8008502:	bf00      	nop
 8008504:	08008449 	.word	0x08008449
 8008508:	200006c8 	.word	0x200006c8

0800850c <_fwalk_sglue>:
 800850c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008510:	4607      	mov	r7, r0
 8008512:	4688      	mov	r8, r1
 8008514:	4614      	mov	r4, r2
 8008516:	2600      	movs	r6, #0
 8008518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800851c:	f1b9 0901 	subs.w	r9, r9, #1
 8008520:	d505      	bpl.n	800852e <_fwalk_sglue+0x22>
 8008522:	6824      	ldr	r4, [r4, #0]
 8008524:	2c00      	cmp	r4, #0
 8008526:	d1f7      	bne.n	8008518 <_fwalk_sglue+0xc>
 8008528:	4630      	mov	r0, r6
 800852a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800852e:	89ab      	ldrh	r3, [r5, #12]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d907      	bls.n	8008544 <_fwalk_sglue+0x38>
 8008534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008538:	3301      	adds	r3, #1
 800853a:	d003      	beq.n	8008544 <_fwalk_sglue+0x38>
 800853c:	4629      	mov	r1, r5
 800853e:	4638      	mov	r0, r7
 8008540:	47c0      	blx	r8
 8008542:	4306      	orrs	r6, r0
 8008544:	3568      	adds	r5, #104	@ 0x68
 8008546:	e7e9      	b.n	800851c <_fwalk_sglue+0x10>

08008548 <siprintf>:
 8008548:	b40e      	push	{r1, r2, r3}
 800854a:	b500      	push	{lr}
 800854c:	b09c      	sub	sp, #112	@ 0x70
 800854e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008550:	9002      	str	r0, [sp, #8]
 8008552:	9006      	str	r0, [sp, #24]
 8008554:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008558:	4809      	ldr	r0, [pc, #36]	@ (8008580 <siprintf+0x38>)
 800855a:	9107      	str	r1, [sp, #28]
 800855c:	9104      	str	r1, [sp, #16]
 800855e:	4909      	ldr	r1, [pc, #36]	@ (8008584 <siprintf+0x3c>)
 8008560:	f853 2b04 	ldr.w	r2, [r3], #4
 8008564:	9105      	str	r1, [sp, #20]
 8008566:	6800      	ldr	r0, [r0, #0]
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	a902      	add	r1, sp, #8
 800856c:	f002 f9ca 	bl	800a904 <_svfiprintf_r>
 8008570:	9b02      	ldr	r3, [sp, #8]
 8008572:	2200      	movs	r2, #0
 8008574:	701a      	strb	r2, [r3, #0]
 8008576:	b01c      	add	sp, #112	@ 0x70
 8008578:	f85d eb04 	ldr.w	lr, [sp], #4
 800857c:	b003      	add	sp, #12
 800857e:	4770      	bx	lr
 8008580:	20000184 	.word	0x20000184
 8008584:	ffff0208 	.word	0xffff0208

08008588 <__sread>:
 8008588:	b510      	push	{r4, lr}
 800858a:	460c      	mov	r4, r1
 800858c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008590:	f000 f8fc 	bl	800878c <_read_r>
 8008594:	2800      	cmp	r0, #0
 8008596:	bfab      	itete	ge
 8008598:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800859a:	89a3      	ldrhlt	r3, [r4, #12]
 800859c:	181b      	addge	r3, r3, r0
 800859e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085a2:	bfac      	ite	ge
 80085a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085a6:	81a3      	strhlt	r3, [r4, #12]
 80085a8:	bd10      	pop	{r4, pc}

080085aa <__swrite>:
 80085aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ae:	461f      	mov	r7, r3
 80085b0:	898b      	ldrh	r3, [r1, #12]
 80085b2:	05db      	lsls	r3, r3, #23
 80085b4:	4605      	mov	r5, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	4616      	mov	r6, r2
 80085ba:	d505      	bpl.n	80085c8 <__swrite+0x1e>
 80085bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c0:	2302      	movs	r3, #2
 80085c2:	2200      	movs	r2, #0
 80085c4:	f000 f8d0 	bl	8008768 <_lseek_r>
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085d2:	81a3      	strh	r3, [r4, #12]
 80085d4:	4632      	mov	r2, r6
 80085d6:	463b      	mov	r3, r7
 80085d8:	4628      	mov	r0, r5
 80085da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085de:	f000 b8e7 	b.w	80087b0 <_write_r>

080085e2 <__sseek>:
 80085e2:	b510      	push	{r4, lr}
 80085e4:	460c      	mov	r4, r1
 80085e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ea:	f000 f8bd 	bl	8008768 <_lseek_r>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	89a3      	ldrh	r3, [r4, #12]
 80085f2:	bf15      	itete	ne
 80085f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085fe:	81a3      	strheq	r3, [r4, #12]
 8008600:	bf18      	it	ne
 8008602:	81a3      	strhne	r3, [r4, #12]
 8008604:	bd10      	pop	{r4, pc}

08008606 <__sclose>:
 8008606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800860a:	f000 b89d 	b.w	8008748 <_close_r>

0800860e <memset>:
 800860e:	4402      	add	r2, r0
 8008610:	4603      	mov	r3, r0
 8008612:	4293      	cmp	r3, r2
 8008614:	d100      	bne.n	8008618 <memset+0xa>
 8008616:	4770      	bx	lr
 8008618:	f803 1b01 	strb.w	r1, [r3], #1
 800861c:	e7f9      	b.n	8008612 <memset+0x4>

0800861e <strcat>:
 800861e:	b510      	push	{r4, lr}
 8008620:	4602      	mov	r2, r0
 8008622:	7814      	ldrb	r4, [r2, #0]
 8008624:	4613      	mov	r3, r2
 8008626:	3201      	adds	r2, #1
 8008628:	2c00      	cmp	r4, #0
 800862a:	d1fa      	bne.n	8008622 <strcat+0x4>
 800862c:	3b01      	subs	r3, #1
 800862e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008636:	2a00      	cmp	r2, #0
 8008638:	d1f9      	bne.n	800862e <strcat+0x10>
 800863a:	bd10      	pop	{r4, pc}

0800863c <strncmp>:
 800863c:	b510      	push	{r4, lr}
 800863e:	b16a      	cbz	r2, 800865c <strncmp+0x20>
 8008640:	3901      	subs	r1, #1
 8008642:	1884      	adds	r4, r0, r2
 8008644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008648:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800864c:	429a      	cmp	r2, r3
 800864e:	d103      	bne.n	8008658 <strncmp+0x1c>
 8008650:	42a0      	cmp	r0, r4
 8008652:	d001      	beq.n	8008658 <strncmp+0x1c>
 8008654:	2a00      	cmp	r2, #0
 8008656:	d1f5      	bne.n	8008644 <strncmp+0x8>
 8008658:	1ad0      	subs	r0, r2, r3
 800865a:	bd10      	pop	{r4, pc}
 800865c:	4610      	mov	r0, r2
 800865e:	e7fc      	b.n	800865a <strncmp+0x1e>

08008660 <strncpy>:
 8008660:	b510      	push	{r4, lr}
 8008662:	3901      	subs	r1, #1
 8008664:	4603      	mov	r3, r0
 8008666:	b132      	cbz	r2, 8008676 <strncpy+0x16>
 8008668:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800866c:	f803 4b01 	strb.w	r4, [r3], #1
 8008670:	3a01      	subs	r2, #1
 8008672:	2c00      	cmp	r4, #0
 8008674:	d1f7      	bne.n	8008666 <strncpy+0x6>
 8008676:	441a      	add	r2, r3
 8008678:	2100      	movs	r1, #0
 800867a:	4293      	cmp	r3, r2
 800867c:	d100      	bne.n	8008680 <strncpy+0x20>
 800867e:	bd10      	pop	{r4, pc}
 8008680:	f803 1b01 	strb.w	r1, [r3], #1
 8008684:	e7f9      	b.n	800867a <strncpy+0x1a>
	...

08008688 <strtok>:
 8008688:	4b16      	ldr	r3, [pc, #88]	@ (80086e4 <strtok+0x5c>)
 800868a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868e:	681f      	ldr	r7, [r3, #0]
 8008690:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008692:	4605      	mov	r5, r0
 8008694:	460e      	mov	r6, r1
 8008696:	b9ec      	cbnz	r4, 80086d4 <strtok+0x4c>
 8008698:	2050      	movs	r0, #80	@ 0x50
 800869a:	f001 fad5 	bl	8009c48 <malloc>
 800869e:	4602      	mov	r2, r0
 80086a0:	6478      	str	r0, [r7, #68]	@ 0x44
 80086a2:	b920      	cbnz	r0, 80086ae <strtok+0x26>
 80086a4:	4b10      	ldr	r3, [pc, #64]	@ (80086e8 <strtok+0x60>)
 80086a6:	4811      	ldr	r0, [pc, #68]	@ (80086ec <strtok+0x64>)
 80086a8:	215b      	movs	r1, #91	@ 0x5b
 80086aa:	f000 f8df 	bl	800886c <__assert_func>
 80086ae:	e9c0 4400 	strd	r4, r4, [r0]
 80086b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80086b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80086ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80086be:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80086c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80086c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80086ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80086ce:	6184      	str	r4, [r0, #24]
 80086d0:	7704      	strb	r4, [r0, #28]
 80086d2:	6244      	str	r4, [r0, #36]	@ 0x24
 80086d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086d6:	4631      	mov	r1, r6
 80086d8:	4628      	mov	r0, r5
 80086da:	2301      	movs	r3, #1
 80086dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086e0:	f000 b806 	b.w	80086f0 <__strtok_r>
 80086e4:	20000184 	.word	0x20000184
 80086e8:	0800b709 	.word	0x0800b709
 80086ec:	0800b720 	.word	0x0800b720

080086f0 <__strtok_r>:
 80086f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086f2:	4604      	mov	r4, r0
 80086f4:	b908      	cbnz	r0, 80086fa <__strtok_r+0xa>
 80086f6:	6814      	ldr	r4, [r2, #0]
 80086f8:	b144      	cbz	r4, 800870c <__strtok_r+0x1c>
 80086fa:	4620      	mov	r0, r4
 80086fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008700:	460f      	mov	r7, r1
 8008702:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008706:	b91e      	cbnz	r6, 8008710 <__strtok_r+0x20>
 8008708:	b965      	cbnz	r5, 8008724 <__strtok_r+0x34>
 800870a:	6015      	str	r5, [r2, #0]
 800870c:	2000      	movs	r0, #0
 800870e:	e005      	b.n	800871c <__strtok_r+0x2c>
 8008710:	42b5      	cmp	r5, r6
 8008712:	d1f6      	bne.n	8008702 <__strtok_r+0x12>
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1f0      	bne.n	80086fa <__strtok_r+0xa>
 8008718:	6014      	str	r4, [r2, #0]
 800871a:	7003      	strb	r3, [r0, #0]
 800871c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800871e:	461c      	mov	r4, r3
 8008720:	e00c      	b.n	800873c <__strtok_r+0x4c>
 8008722:	b915      	cbnz	r5, 800872a <__strtok_r+0x3a>
 8008724:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008728:	460e      	mov	r6, r1
 800872a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800872e:	42ab      	cmp	r3, r5
 8008730:	d1f7      	bne.n	8008722 <__strtok_r+0x32>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0f3      	beq.n	800871e <__strtok_r+0x2e>
 8008736:	2300      	movs	r3, #0
 8008738:	f804 3c01 	strb.w	r3, [r4, #-1]
 800873c:	6014      	str	r4, [r2, #0]
 800873e:	e7ed      	b.n	800871c <__strtok_r+0x2c>

08008740 <_localeconv_r>:
 8008740:	4800      	ldr	r0, [pc, #0]	@ (8008744 <_localeconv_r+0x4>)
 8008742:	4770      	bx	lr
 8008744:	20000108 	.word	0x20000108

08008748 <_close_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4d06      	ldr	r5, [pc, #24]	@ (8008764 <_close_r+0x1c>)
 800874c:	2300      	movs	r3, #0
 800874e:	4604      	mov	r4, r0
 8008750:	4608      	mov	r0, r1
 8008752:	602b      	str	r3, [r5, #0]
 8008754:	f7fa fef8 	bl	8003548 <_close>
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	d102      	bne.n	8008762 <_close_r+0x1a>
 800875c:	682b      	ldr	r3, [r5, #0]
 800875e:	b103      	cbz	r3, 8008762 <_close_r+0x1a>
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	200006cc 	.word	0x200006cc

08008768 <_lseek_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	@ (8008788 <_lseek_r+0x20>)
 800876c:	4604      	mov	r4, r0
 800876e:	4608      	mov	r0, r1
 8008770:	4611      	mov	r1, r2
 8008772:	2200      	movs	r2, #0
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	f7fa ff0d 	bl	8003596 <_lseek>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_lseek_r+0x1e>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_lseek_r+0x1e>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	200006cc 	.word	0x200006cc

0800878c <_read_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d07      	ldr	r5, [pc, #28]	@ (80087ac <_read_r+0x20>)
 8008790:	4604      	mov	r4, r0
 8008792:	4608      	mov	r0, r1
 8008794:	4611      	mov	r1, r2
 8008796:	2200      	movs	r2, #0
 8008798:	602a      	str	r2, [r5, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	f7fa fe9b 	bl	80034d6 <_read>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_read_r+0x1e>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_read_r+0x1e>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	200006cc 	.word	0x200006cc

080087b0 <_write_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d07      	ldr	r5, [pc, #28]	@ (80087d0 <_write_r+0x20>)
 80087b4:	4604      	mov	r4, r0
 80087b6:	4608      	mov	r0, r1
 80087b8:	4611      	mov	r1, r2
 80087ba:	2200      	movs	r2, #0
 80087bc:	602a      	str	r2, [r5, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	f7fa fea6 	bl	8003510 <_write>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_write_r+0x1e>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_write_r+0x1e>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	200006cc 	.word	0x200006cc

080087d4 <__errno>:
 80087d4:	4b01      	ldr	r3, [pc, #4]	@ (80087dc <__errno+0x8>)
 80087d6:	6818      	ldr	r0, [r3, #0]
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000184 	.word	0x20000184

080087e0 <__libc_init_array>:
 80087e0:	b570      	push	{r4, r5, r6, lr}
 80087e2:	4d0d      	ldr	r5, [pc, #52]	@ (8008818 <__libc_init_array+0x38>)
 80087e4:	4c0d      	ldr	r4, [pc, #52]	@ (800881c <__libc_init_array+0x3c>)
 80087e6:	1b64      	subs	r4, r4, r5
 80087e8:	10a4      	asrs	r4, r4, #2
 80087ea:	2600      	movs	r6, #0
 80087ec:	42a6      	cmp	r6, r4
 80087ee:	d109      	bne.n	8008804 <__libc_init_array+0x24>
 80087f0:	4d0b      	ldr	r5, [pc, #44]	@ (8008820 <__libc_init_array+0x40>)
 80087f2:	4c0c      	ldr	r4, [pc, #48]	@ (8008824 <__libc_init_array+0x44>)
 80087f4:	f002 feca 	bl	800b58c <_init>
 80087f8:	1b64      	subs	r4, r4, r5
 80087fa:	10a4      	asrs	r4, r4, #2
 80087fc:	2600      	movs	r6, #0
 80087fe:	42a6      	cmp	r6, r4
 8008800:	d105      	bne.n	800880e <__libc_init_array+0x2e>
 8008802:	bd70      	pop	{r4, r5, r6, pc}
 8008804:	f855 3b04 	ldr.w	r3, [r5], #4
 8008808:	4798      	blx	r3
 800880a:	3601      	adds	r6, #1
 800880c:	e7ee      	b.n	80087ec <__libc_init_array+0xc>
 800880e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008812:	4798      	blx	r3
 8008814:	3601      	adds	r6, #1
 8008816:	e7f2      	b.n	80087fe <__libc_init_array+0x1e>
 8008818:	0800bb20 	.word	0x0800bb20
 800881c:	0800bb20 	.word	0x0800bb20
 8008820:	0800bb20 	.word	0x0800bb20
 8008824:	0800bb24 	.word	0x0800bb24

08008828 <__retarget_lock_init_recursive>:
 8008828:	4770      	bx	lr

0800882a <__retarget_lock_acquire_recursive>:
 800882a:	4770      	bx	lr

0800882c <__retarget_lock_release_recursive>:
 800882c:	4770      	bx	lr

0800882e <memcpy>:
 800882e:	440a      	add	r2, r1
 8008830:	4291      	cmp	r1, r2
 8008832:	f100 33ff 	add.w	r3, r0, #4294967295
 8008836:	d100      	bne.n	800883a <memcpy+0xc>
 8008838:	4770      	bx	lr
 800883a:	b510      	push	{r4, lr}
 800883c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008840:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008844:	4291      	cmp	r1, r2
 8008846:	d1f9      	bne.n	800883c <memcpy+0xe>
 8008848:	bd10      	pop	{r4, pc}
 800884a:	0000      	movs	r0, r0
 800884c:	0000      	movs	r0, r0
	...

08008850 <nan>:
 8008850:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008858 <nan+0x8>
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	00000000 	.word	0x00000000
 800885c:	7ff80000 	.word	0x7ff80000

08008860 <nanf>:
 8008860:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008868 <nanf+0x8>
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	7fc00000 	.word	0x7fc00000

0800886c <__assert_func>:
 800886c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800886e:	4614      	mov	r4, r2
 8008870:	461a      	mov	r2, r3
 8008872:	4b09      	ldr	r3, [pc, #36]	@ (8008898 <__assert_func+0x2c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4605      	mov	r5, r0
 8008878:	68d8      	ldr	r0, [r3, #12]
 800887a:	b954      	cbnz	r4, 8008892 <__assert_func+0x26>
 800887c:	4b07      	ldr	r3, [pc, #28]	@ (800889c <__assert_func+0x30>)
 800887e:	461c      	mov	r4, r3
 8008880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008884:	9100      	str	r1, [sp, #0]
 8008886:	462b      	mov	r3, r5
 8008888:	4905      	ldr	r1, [pc, #20]	@ (80088a0 <__assert_func+0x34>)
 800888a:	f002 f9e3 	bl	800ac54 <fiprintf>
 800888e:	f002 fa1d 	bl	800accc <abort>
 8008892:	4b04      	ldr	r3, [pc, #16]	@ (80088a4 <__assert_func+0x38>)
 8008894:	e7f4      	b.n	8008880 <__assert_func+0x14>
 8008896:	bf00      	nop
 8008898:	20000184 	.word	0x20000184
 800889c:	0800b7bd 	.word	0x0800b7bd
 80088a0:	0800b78f 	.word	0x0800b78f
 80088a4:	0800b782 	.word	0x0800b782

080088a8 <quorem>:
 80088a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	6903      	ldr	r3, [r0, #16]
 80088ae:	690c      	ldr	r4, [r1, #16]
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	4607      	mov	r7, r0
 80088b4:	db7e      	blt.n	80089b4 <quorem+0x10c>
 80088b6:	3c01      	subs	r4, #1
 80088b8:	f101 0814 	add.w	r8, r1, #20
 80088bc:	00a3      	lsls	r3, r4, #2
 80088be:	f100 0514 	add.w	r5, r0, #20
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088d2:	3301      	adds	r3, #1
 80088d4:	429a      	cmp	r2, r3
 80088d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088da:	fbb2 f6f3 	udiv	r6, r2, r3
 80088de:	d32e      	bcc.n	800893e <quorem+0x96>
 80088e0:	f04f 0a00 	mov.w	sl, #0
 80088e4:	46c4      	mov	ip, r8
 80088e6:	46ae      	mov	lr, r5
 80088e8:	46d3      	mov	fp, sl
 80088ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088ee:	b298      	uxth	r0, r3
 80088f0:	fb06 a000 	mla	r0, r6, r0, sl
 80088f4:	0c02      	lsrs	r2, r0, #16
 80088f6:	0c1b      	lsrs	r3, r3, #16
 80088f8:	fb06 2303 	mla	r3, r6, r3, r2
 80088fc:	f8de 2000 	ldr.w	r2, [lr]
 8008900:	b280      	uxth	r0, r0
 8008902:	b292      	uxth	r2, r2
 8008904:	1a12      	subs	r2, r2, r0
 8008906:	445a      	add	r2, fp
 8008908:	f8de 0000 	ldr.w	r0, [lr]
 800890c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008910:	b29b      	uxth	r3, r3
 8008912:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008916:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800891a:	b292      	uxth	r2, r2
 800891c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008920:	45e1      	cmp	r9, ip
 8008922:	f84e 2b04 	str.w	r2, [lr], #4
 8008926:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800892a:	d2de      	bcs.n	80088ea <quorem+0x42>
 800892c:	9b00      	ldr	r3, [sp, #0]
 800892e:	58eb      	ldr	r3, [r5, r3]
 8008930:	b92b      	cbnz	r3, 800893e <quorem+0x96>
 8008932:	9b01      	ldr	r3, [sp, #4]
 8008934:	3b04      	subs	r3, #4
 8008936:	429d      	cmp	r5, r3
 8008938:	461a      	mov	r2, r3
 800893a:	d32f      	bcc.n	800899c <quorem+0xf4>
 800893c:	613c      	str	r4, [r7, #16]
 800893e:	4638      	mov	r0, r7
 8008940:	f001 fd0e 	bl	800a360 <__mcmp>
 8008944:	2800      	cmp	r0, #0
 8008946:	db25      	blt.n	8008994 <quorem+0xec>
 8008948:	4629      	mov	r1, r5
 800894a:	2000      	movs	r0, #0
 800894c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008950:	f8d1 c000 	ldr.w	ip, [r1]
 8008954:	fa1f fe82 	uxth.w	lr, r2
 8008958:	fa1f f38c 	uxth.w	r3, ip
 800895c:	eba3 030e 	sub.w	r3, r3, lr
 8008960:	4403      	add	r3, r0
 8008962:	0c12      	lsrs	r2, r2, #16
 8008964:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008968:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800896c:	b29b      	uxth	r3, r3
 800896e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008972:	45c1      	cmp	r9, r8
 8008974:	f841 3b04 	str.w	r3, [r1], #4
 8008978:	ea4f 4022 	mov.w	r0, r2, asr #16
 800897c:	d2e6      	bcs.n	800894c <quorem+0xa4>
 800897e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008986:	b922      	cbnz	r2, 8008992 <quorem+0xea>
 8008988:	3b04      	subs	r3, #4
 800898a:	429d      	cmp	r5, r3
 800898c:	461a      	mov	r2, r3
 800898e:	d30b      	bcc.n	80089a8 <quorem+0x100>
 8008990:	613c      	str	r4, [r7, #16]
 8008992:	3601      	adds	r6, #1
 8008994:	4630      	mov	r0, r6
 8008996:	b003      	add	sp, #12
 8008998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899c:	6812      	ldr	r2, [r2, #0]
 800899e:	3b04      	subs	r3, #4
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	d1cb      	bne.n	800893c <quorem+0x94>
 80089a4:	3c01      	subs	r4, #1
 80089a6:	e7c6      	b.n	8008936 <quorem+0x8e>
 80089a8:	6812      	ldr	r2, [r2, #0]
 80089aa:	3b04      	subs	r3, #4
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	d1ef      	bne.n	8008990 <quorem+0xe8>
 80089b0:	3c01      	subs	r4, #1
 80089b2:	e7ea      	b.n	800898a <quorem+0xe2>
 80089b4:	2000      	movs	r0, #0
 80089b6:	e7ee      	b.n	8008996 <quorem+0xee>

080089b8 <_dtoa_r>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	69c7      	ldr	r7, [r0, #28]
 80089be:	b099      	sub	sp, #100	@ 0x64
 80089c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089c4:	ec55 4b10 	vmov	r4, r5, d0
 80089c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80089ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80089cc:	4683      	mov	fp, r0
 80089ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80089d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089d2:	b97f      	cbnz	r7, 80089f4 <_dtoa_r+0x3c>
 80089d4:	2010      	movs	r0, #16
 80089d6:	f001 f937 	bl	8009c48 <malloc>
 80089da:	4602      	mov	r2, r0
 80089dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80089e0:	b920      	cbnz	r0, 80089ec <_dtoa_r+0x34>
 80089e2:	4ba7      	ldr	r3, [pc, #668]	@ (8008c80 <_dtoa_r+0x2c8>)
 80089e4:	21ef      	movs	r1, #239	@ 0xef
 80089e6:	48a7      	ldr	r0, [pc, #668]	@ (8008c84 <_dtoa_r+0x2cc>)
 80089e8:	f7ff ff40 	bl	800886c <__assert_func>
 80089ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80089f0:	6007      	str	r7, [r0, #0]
 80089f2:	60c7      	str	r7, [r0, #12]
 80089f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089f8:	6819      	ldr	r1, [r3, #0]
 80089fa:	b159      	cbz	r1, 8008a14 <_dtoa_r+0x5c>
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	604a      	str	r2, [r1, #4]
 8008a00:	2301      	movs	r3, #1
 8008a02:	4093      	lsls	r3, r2
 8008a04:	608b      	str	r3, [r1, #8]
 8008a06:	4658      	mov	r0, fp
 8008a08:	f001 fa26 	bl	8009e58 <_Bfree>
 8008a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	1e2b      	subs	r3, r5, #0
 8008a16:	bfb9      	ittee	lt
 8008a18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a1c:	9303      	strlt	r3, [sp, #12]
 8008a1e:	2300      	movge	r3, #0
 8008a20:	6033      	strge	r3, [r6, #0]
 8008a22:	9f03      	ldr	r7, [sp, #12]
 8008a24:	4b98      	ldr	r3, [pc, #608]	@ (8008c88 <_dtoa_r+0x2d0>)
 8008a26:	bfbc      	itt	lt
 8008a28:	2201      	movlt	r2, #1
 8008a2a:	6032      	strlt	r2, [r6, #0]
 8008a2c:	43bb      	bics	r3, r7
 8008a2e:	d112      	bne.n	8008a56 <_dtoa_r+0x9e>
 8008a30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a3c:	4323      	orrs	r3, r4
 8008a3e:	f000 854d 	beq.w	80094dc <_dtoa_r+0xb24>
 8008a42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008c9c <_dtoa_r+0x2e4>
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 854f 	beq.w	80094ec <_dtoa_r+0xb34>
 8008a4e:	f10a 0303 	add.w	r3, sl, #3
 8008a52:	f000 bd49 	b.w	80094e8 <_dtoa_r+0xb30>
 8008a56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	ec51 0b17 	vmov	r0, r1, d7
 8008a60:	2300      	movs	r3, #0
 8008a62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008a66:	f7f8 f82f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a6a:	4680      	mov	r8, r0
 8008a6c:	b158      	cbz	r0, 8008a86 <_dtoa_r+0xce>
 8008a6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a70:	2301      	movs	r3, #1
 8008a72:	6013      	str	r3, [r2, #0]
 8008a74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a76:	b113      	cbz	r3, 8008a7e <_dtoa_r+0xc6>
 8008a78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008a7a:	4b84      	ldr	r3, [pc, #528]	@ (8008c8c <_dtoa_r+0x2d4>)
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008ca0 <_dtoa_r+0x2e8>
 8008a82:	f000 bd33 	b.w	80094ec <_dtoa_r+0xb34>
 8008a86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008a8a:	aa16      	add	r2, sp, #88	@ 0x58
 8008a8c:	a917      	add	r1, sp, #92	@ 0x5c
 8008a8e:	4658      	mov	r0, fp
 8008a90:	f001 fd86 	bl	800a5a0 <__d2b>
 8008a94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008a98:	4681      	mov	r9, r0
 8008a9a:	2e00      	cmp	r6, #0
 8008a9c:	d077      	beq.n	8008b8e <_dtoa_r+0x1d6>
 8008a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008aa0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008aac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ab0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ab4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ab8:	4619      	mov	r1, r3
 8008aba:	2200      	movs	r2, #0
 8008abc:	4b74      	ldr	r3, [pc, #464]	@ (8008c90 <_dtoa_r+0x2d8>)
 8008abe:	f7f7 fbe3 	bl	8000288 <__aeabi_dsub>
 8008ac2:	a369      	add	r3, pc, #420	@ (adr r3, 8008c68 <_dtoa_r+0x2b0>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f7f7 fd96 	bl	80005f8 <__aeabi_dmul>
 8008acc:	a368      	add	r3, pc, #416	@ (adr r3, 8008c70 <_dtoa_r+0x2b8>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f7f7 fbdb 	bl	800028c <__adddf3>
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	4630      	mov	r0, r6
 8008ada:	460d      	mov	r5, r1
 8008adc:	f7f7 fd22 	bl	8000524 <__aeabi_i2d>
 8008ae0:	a365      	add	r3, pc, #404	@ (adr r3, 8008c78 <_dtoa_r+0x2c0>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f7f7 fd87 	bl	80005f8 <__aeabi_dmul>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4620      	mov	r0, r4
 8008af0:	4629      	mov	r1, r5
 8008af2:	f7f7 fbcb 	bl	800028c <__adddf3>
 8008af6:	4604      	mov	r4, r0
 8008af8:	460d      	mov	r5, r1
 8008afa:	f7f8 f82d 	bl	8000b58 <__aeabi_d2iz>
 8008afe:	2200      	movs	r2, #0
 8008b00:	4607      	mov	r7, r0
 8008b02:	2300      	movs	r3, #0
 8008b04:	4620      	mov	r0, r4
 8008b06:	4629      	mov	r1, r5
 8008b08:	f7f7 ffe8 	bl	8000adc <__aeabi_dcmplt>
 8008b0c:	b140      	cbz	r0, 8008b20 <_dtoa_r+0x168>
 8008b0e:	4638      	mov	r0, r7
 8008b10:	f7f7 fd08 	bl	8000524 <__aeabi_i2d>
 8008b14:	4622      	mov	r2, r4
 8008b16:	462b      	mov	r3, r5
 8008b18:	f7f7 ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b1c:	b900      	cbnz	r0, 8008b20 <_dtoa_r+0x168>
 8008b1e:	3f01      	subs	r7, #1
 8008b20:	2f16      	cmp	r7, #22
 8008b22:	d851      	bhi.n	8008bc8 <_dtoa_r+0x210>
 8008b24:	4b5b      	ldr	r3, [pc, #364]	@ (8008c94 <_dtoa_r+0x2dc>)
 8008b26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b32:	f7f7 ffd3 	bl	8000adc <__aeabi_dcmplt>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d048      	beq.n	8008bcc <_dtoa_r+0x214>
 8008b3a:	3f01      	subs	r7, #1
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b42:	1b9b      	subs	r3, r3, r6
 8008b44:	1e5a      	subs	r2, r3, #1
 8008b46:	bf44      	itt	mi
 8008b48:	f1c3 0801 	rsbmi	r8, r3, #1
 8008b4c:	2300      	movmi	r3, #0
 8008b4e:	9208      	str	r2, [sp, #32]
 8008b50:	bf54      	ite	pl
 8008b52:	f04f 0800 	movpl.w	r8, #0
 8008b56:	9308      	strmi	r3, [sp, #32]
 8008b58:	2f00      	cmp	r7, #0
 8008b5a:	db39      	blt.n	8008bd0 <_dtoa_r+0x218>
 8008b5c:	9b08      	ldr	r3, [sp, #32]
 8008b5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008b60:	443b      	add	r3, r7
 8008b62:	9308      	str	r3, [sp, #32]
 8008b64:	2300      	movs	r3, #0
 8008b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b6a:	2b09      	cmp	r3, #9
 8008b6c:	d864      	bhi.n	8008c38 <_dtoa_r+0x280>
 8008b6e:	2b05      	cmp	r3, #5
 8008b70:	bfc4      	itt	gt
 8008b72:	3b04      	subgt	r3, #4
 8008b74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b78:	f1a3 0302 	sub.w	r3, r3, #2
 8008b7c:	bfcc      	ite	gt
 8008b7e:	2400      	movgt	r4, #0
 8008b80:	2401      	movle	r4, #1
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d863      	bhi.n	8008c4e <_dtoa_r+0x296>
 8008b86:	e8df f003 	tbb	[pc, r3]
 8008b8a:	372a      	.short	0x372a
 8008b8c:	5535      	.short	0x5535
 8008b8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008b92:	441e      	add	r6, r3
 8008b94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b98:	2b20      	cmp	r3, #32
 8008b9a:	bfc1      	itttt	gt
 8008b9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ba0:	409f      	lslgt	r7, r3
 8008ba2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ba6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008baa:	bfd6      	itet	le
 8008bac:	f1c3 0320 	rsble	r3, r3, #32
 8008bb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008bb4:	fa04 f003 	lslle.w	r0, r4, r3
 8008bb8:	f7f7 fca4 	bl	8000504 <__aeabi_ui2d>
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008bc2:	3e01      	subs	r6, #1
 8008bc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8008bc6:	e777      	b.n	8008ab8 <_dtoa_r+0x100>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e7b8      	b.n	8008b3e <_dtoa_r+0x186>
 8008bcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008bce:	e7b7      	b.n	8008b40 <_dtoa_r+0x188>
 8008bd0:	427b      	negs	r3, r7
 8008bd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	eba8 0807 	sub.w	r8, r8, r7
 8008bda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008bdc:	e7c4      	b.n	8008b68 <_dtoa_r+0x1b0>
 8008bde:	2300      	movs	r3, #0
 8008be0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dc35      	bgt.n	8008c54 <_dtoa_r+0x29c>
 8008be8:	2301      	movs	r3, #1
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	9307      	str	r3, [sp, #28]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bf2:	e00b      	b.n	8008c0c <_dtoa_r+0x254>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e7f3      	b.n	8008be0 <_dtoa_r+0x228>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bfe:	18fb      	adds	r3, r7, r3
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	3301      	adds	r3, #1
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	9307      	str	r3, [sp, #28]
 8008c08:	bfb8      	it	lt
 8008c0a:	2301      	movlt	r3, #1
 8008c0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008c10:	2100      	movs	r1, #0
 8008c12:	2204      	movs	r2, #4
 8008c14:	f102 0514 	add.w	r5, r2, #20
 8008c18:	429d      	cmp	r5, r3
 8008c1a:	d91f      	bls.n	8008c5c <_dtoa_r+0x2a4>
 8008c1c:	6041      	str	r1, [r0, #4]
 8008c1e:	4658      	mov	r0, fp
 8008c20:	f001 f8da 	bl	8009dd8 <_Balloc>
 8008c24:	4682      	mov	sl, r0
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d13c      	bne.n	8008ca4 <_dtoa_r+0x2ec>
 8008c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8008c98 <_dtoa_r+0x2e0>)
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c32:	e6d8      	b.n	80089e6 <_dtoa_r+0x2e>
 8008c34:	2301      	movs	r3, #1
 8008c36:	e7e0      	b.n	8008bfa <_dtoa_r+0x242>
 8008c38:	2401      	movs	r4, #1
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	9307      	str	r3, [sp, #28]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2312      	movs	r3, #18
 8008c4c:	e7d0      	b.n	8008bf0 <_dtoa_r+0x238>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c52:	e7f5      	b.n	8008c40 <_dtoa_r+0x288>
 8008c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	9307      	str	r3, [sp, #28]
 8008c5a:	e7d7      	b.n	8008c0c <_dtoa_r+0x254>
 8008c5c:	3101      	adds	r1, #1
 8008c5e:	0052      	lsls	r2, r2, #1
 8008c60:	e7d8      	b.n	8008c14 <_dtoa_r+0x25c>
 8008c62:	bf00      	nop
 8008c64:	f3af 8000 	nop.w
 8008c68:	636f4361 	.word	0x636f4361
 8008c6c:	3fd287a7 	.word	0x3fd287a7
 8008c70:	8b60c8b3 	.word	0x8b60c8b3
 8008c74:	3fc68a28 	.word	0x3fc68a28
 8008c78:	509f79fb 	.word	0x509f79fb
 8008c7c:	3fd34413 	.word	0x3fd34413
 8008c80:	0800b709 	.word	0x0800b709
 8008c84:	0800b7cb 	.word	0x0800b7cb
 8008c88:	7ff00000 	.word	0x7ff00000
 8008c8c:	0800b6e1 	.word	0x0800b6e1
 8008c90:	3ff80000 	.word	0x3ff80000
 8008c94:	0800b928 	.word	0x0800b928
 8008c98:	0800b823 	.word	0x0800b823
 8008c9c:	0800b7c7 	.word	0x0800b7c7
 8008ca0:	0800b6e0 	.word	0x0800b6e0
 8008ca4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ca8:	6018      	str	r0, [r3, #0]
 8008caa:	9b07      	ldr	r3, [sp, #28]
 8008cac:	2b0e      	cmp	r3, #14
 8008cae:	f200 80a4 	bhi.w	8008dfa <_dtoa_r+0x442>
 8008cb2:	2c00      	cmp	r4, #0
 8008cb4:	f000 80a1 	beq.w	8008dfa <_dtoa_r+0x442>
 8008cb8:	2f00      	cmp	r7, #0
 8008cba:	dd33      	ble.n	8008d24 <_dtoa_r+0x36c>
 8008cbc:	4bad      	ldr	r3, [pc, #692]	@ (8008f74 <_dtoa_r+0x5bc>)
 8008cbe:	f007 020f 	and.w	r2, r7, #15
 8008cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cc6:	ed93 7b00 	vldr	d7, [r3]
 8008cca:	05f8      	lsls	r0, r7, #23
 8008ccc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008cd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008cd4:	d516      	bpl.n	8008d04 <_dtoa_r+0x34c>
 8008cd6:	4ba8      	ldr	r3, [pc, #672]	@ (8008f78 <_dtoa_r+0x5c0>)
 8008cd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ce0:	f7f7 fdb4 	bl	800084c <__aeabi_ddiv>
 8008ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce8:	f004 040f 	and.w	r4, r4, #15
 8008cec:	2603      	movs	r6, #3
 8008cee:	4da2      	ldr	r5, [pc, #648]	@ (8008f78 <_dtoa_r+0x5c0>)
 8008cf0:	b954      	cbnz	r4, 8008d08 <_dtoa_r+0x350>
 8008cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cfa:	f7f7 fda7 	bl	800084c <__aeabi_ddiv>
 8008cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d02:	e028      	b.n	8008d56 <_dtoa_r+0x39e>
 8008d04:	2602      	movs	r6, #2
 8008d06:	e7f2      	b.n	8008cee <_dtoa_r+0x336>
 8008d08:	07e1      	lsls	r1, r4, #31
 8008d0a:	d508      	bpl.n	8008d1e <_dtoa_r+0x366>
 8008d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d14:	f7f7 fc70 	bl	80005f8 <__aeabi_dmul>
 8008d18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d1c:	3601      	adds	r6, #1
 8008d1e:	1064      	asrs	r4, r4, #1
 8008d20:	3508      	adds	r5, #8
 8008d22:	e7e5      	b.n	8008cf0 <_dtoa_r+0x338>
 8008d24:	f000 80d2 	beq.w	8008ecc <_dtoa_r+0x514>
 8008d28:	427c      	negs	r4, r7
 8008d2a:	4b92      	ldr	r3, [pc, #584]	@ (8008f74 <_dtoa_r+0x5bc>)
 8008d2c:	4d92      	ldr	r5, [pc, #584]	@ (8008f78 <_dtoa_r+0x5c0>)
 8008d2e:	f004 020f 	and.w	r2, r4, #15
 8008d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d3e:	f7f7 fc5b 	bl	80005f8 <__aeabi_dmul>
 8008d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d46:	1124      	asrs	r4, r4, #4
 8008d48:	2300      	movs	r3, #0
 8008d4a:	2602      	movs	r6, #2
 8008d4c:	2c00      	cmp	r4, #0
 8008d4e:	f040 80b2 	bne.w	8008eb6 <_dtoa_r+0x4fe>
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1d3      	bne.n	8008cfe <_dtoa_r+0x346>
 8008d56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 80b7 	beq.w	8008ed0 <_dtoa_r+0x518>
 8008d62:	4b86      	ldr	r3, [pc, #536]	@ (8008f7c <_dtoa_r+0x5c4>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	4620      	mov	r0, r4
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7f7 feb7 	bl	8000adc <__aeabi_dcmplt>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	f000 80ae 	beq.w	8008ed0 <_dtoa_r+0x518>
 8008d74:	9b07      	ldr	r3, [sp, #28]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 80aa 	beq.w	8008ed0 <_dtoa_r+0x518>
 8008d7c:	9b00      	ldr	r3, [sp, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	dd37      	ble.n	8008df2 <_dtoa_r+0x43a>
 8008d82:	1e7b      	subs	r3, r7, #1
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	4620      	mov	r0, r4
 8008d88:	4b7d      	ldr	r3, [pc, #500]	@ (8008f80 <_dtoa_r+0x5c8>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	f7f7 fc33 	bl	80005f8 <__aeabi_dmul>
 8008d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d96:	9c00      	ldr	r4, [sp, #0]
 8008d98:	3601      	adds	r6, #1
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f7f7 fbc2 	bl	8000524 <__aeabi_i2d>
 8008da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008da4:	f7f7 fc28 	bl	80005f8 <__aeabi_dmul>
 8008da8:	4b76      	ldr	r3, [pc, #472]	@ (8008f84 <_dtoa_r+0x5cc>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	f7f7 fa6e 	bl	800028c <__adddf3>
 8008db0:	4605      	mov	r5, r0
 8008db2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008db6:	2c00      	cmp	r4, #0
 8008db8:	f040 808d 	bne.w	8008ed6 <_dtoa_r+0x51e>
 8008dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dc0:	4b71      	ldr	r3, [pc, #452]	@ (8008f88 <_dtoa_r+0x5d0>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f7f7 fa60 	bl	8000288 <__aeabi_dsub>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dd0:	462a      	mov	r2, r5
 8008dd2:	4633      	mov	r3, r6
 8008dd4:	f7f7 fea0 	bl	8000b18 <__aeabi_dcmpgt>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	f040 828b 	bne.w	80092f4 <_dtoa_r+0x93c>
 8008dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de2:	462a      	mov	r2, r5
 8008de4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008de8:	f7f7 fe78 	bl	8000adc <__aeabi_dcmplt>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	f040 8128 	bne.w	8009042 <_dtoa_r+0x68a>
 8008df2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008df6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008dfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f2c0 815a 	blt.w	80090b6 <_dtoa_r+0x6fe>
 8008e02:	2f0e      	cmp	r7, #14
 8008e04:	f300 8157 	bgt.w	80090b6 <_dtoa_r+0x6fe>
 8008e08:	4b5a      	ldr	r3, [pc, #360]	@ (8008f74 <_dtoa_r+0x5bc>)
 8008e0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e0e:	ed93 7b00 	vldr	d7, [r3]
 8008e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	ed8d 7b00 	vstr	d7, [sp]
 8008e1a:	da03      	bge.n	8008e24 <_dtoa_r+0x46c>
 8008e1c:	9b07      	ldr	r3, [sp, #28]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f340 8101 	ble.w	8009026 <_dtoa_r+0x66e>
 8008e24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e28:	4656      	mov	r6, sl
 8008e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4629      	mov	r1, r5
 8008e32:	f7f7 fd0b 	bl	800084c <__aeabi_ddiv>
 8008e36:	f7f7 fe8f 	bl	8000b58 <__aeabi_d2iz>
 8008e3a:	4680      	mov	r8, r0
 8008e3c:	f7f7 fb72 	bl	8000524 <__aeabi_i2d>
 8008e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e44:	f7f7 fbd8 	bl	80005f8 <__aeabi_dmul>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	4629      	mov	r1, r5
 8008e50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e54:	f7f7 fa18 	bl	8000288 <__aeabi_dsub>
 8008e58:	f806 4b01 	strb.w	r4, [r6], #1
 8008e5c:	9d07      	ldr	r5, [sp, #28]
 8008e5e:	eba6 040a 	sub.w	r4, r6, sl
 8008e62:	42a5      	cmp	r5, r4
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	f040 8117 	bne.w	800909a <_dtoa_r+0x6e2>
 8008e6c:	f7f7 fa0e 	bl	800028c <__adddf3>
 8008e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e74:	4604      	mov	r4, r0
 8008e76:	460d      	mov	r5, r1
 8008e78:	f7f7 fe4e 	bl	8000b18 <__aeabi_dcmpgt>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	f040 80f9 	bne.w	8009074 <_dtoa_r+0x6bc>
 8008e82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e86:	4620      	mov	r0, r4
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7f7 fe1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e8e:	b118      	cbz	r0, 8008e98 <_dtoa_r+0x4e0>
 8008e90:	f018 0f01 	tst.w	r8, #1
 8008e94:	f040 80ee 	bne.w	8009074 <_dtoa_r+0x6bc>
 8008e98:	4649      	mov	r1, r9
 8008e9a:	4658      	mov	r0, fp
 8008e9c:	f000 ffdc 	bl	8009e58 <_Bfree>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	7033      	strb	r3, [r6, #0]
 8008ea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ea6:	3701      	adds	r7, #1
 8008ea8:	601f      	str	r7, [r3, #0]
 8008eaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 831d 	beq.w	80094ec <_dtoa_r+0xb34>
 8008eb2:	601e      	str	r6, [r3, #0]
 8008eb4:	e31a      	b.n	80094ec <_dtoa_r+0xb34>
 8008eb6:	07e2      	lsls	r2, r4, #31
 8008eb8:	d505      	bpl.n	8008ec6 <_dtoa_r+0x50e>
 8008eba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ebe:	f7f7 fb9b 	bl	80005f8 <__aeabi_dmul>
 8008ec2:	3601      	adds	r6, #1
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	1064      	asrs	r4, r4, #1
 8008ec8:	3508      	adds	r5, #8
 8008eca:	e73f      	b.n	8008d4c <_dtoa_r+0x394>
 8008ecc:	2602      	movs	r6, #2
 8008ece:	e742      	b.n	8008d56 <_dtoa_r+0x39e>
 8008ed0:	9c07      	ldr	r4, [sp, #28]
 8008ed2:	9704      	str	r7, [sp, #16]
 8008ed4:	e761      	b.n	8008d9a <_dtoa_r+0x3e2>
 8008ed6:	4b27      	ldr	r3, [pc, #156]	@ (8008f74 <_dtoa_r+0x5bc>)
 8008ed8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ede:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ee2:	4454      	add	r4, sl
 8008ee4:	2900      	cmp	r1, #0
 8008ee6:	d053      	beq.n	8008f90 <_dtoa_r+0x5d8>
 8008ee8:	4928      	ldr	r1, [pc, #160]	@ (8008f8c <_dtoa_r+0x5d4>)
 8008eea:	2000      	movs	r0, #0
 8008eec:	f7f7 fcae 	bl	800084c <__aeabi_ddiv>
 8008ef0:	4633      	mov	r3, r6
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	f7f7 f9c8 	bl	8000288 <__aeabi_dsub>
 8008ef8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008efc:	4656      	mov	r6, sl
 8008efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f02:	f7f7 fe29 	bl	8000b58 <__aeabi_d2iz>
 8008f06:	4605      	mov	r5, r0
 8008f08:	f7f7 fb0c 	bl	8000524 <__aeabi_i2d>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f14:	f7f7 f9b8 	bl	8000288 <__aeabi_dsub>
 8008f18:	3530      	adds	r5, #48	@ 0x30
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f22:	f806 5b01 	strb.w	r5, [r6], #1
 8008f26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f2a:	f7f7 fdd7 	bl	8000adc <__aeabi_dcmplt>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d171      	bne.n	8009016 <_dtoa_r+0x65e>
 8008f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f36:	4911      	ldr	r1, [pc, #68]	@ (8008f7c <_dtoa_r+0x5c4>)
 8008f38:	2000      	movs	r0, #0
 8008f3a:	f7f7 f9a5 	bl	8000288 <__aeabi_dsub>
 8008f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f42:	f7f7 fdcb 	bl	8000adc <__aeabi_dcmplt>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	f040 8095 	bne.w	8009076 <_dtoa_r+0x6be>
 8008f4c:	42a6      	cmp	r6, r4
 8008f4e:	f43f af50 	beq.w	8008df2 <_dtoa_r+0x43a>
 8008f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f56:	4b0a      	ldr	r3, [pc, #40]	@ (8008f80 <_dtoa_r+0x5c8>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f7f7 fb4d 	bl	80005f8 <__aeabi_dmul>
 8008f5e:	4b08      	ldr	r3, [pc, #32]	@ (8008f80 <_dtoa_r+0x5c8>)
 8008f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f64:	2200      	movs	r2, #0
 8008f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f6a:	f7f7 fb45 	bl	80005f8 <__aeabi_dmul>
 8008f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f72:	e7c4      	b.n	8008efe <_dtoa_r+0x546>
 8008f74:	0800b928 	.word	0x0800b928
 8008f78:	0800b900 	.word	0x0800b900
 8008f7c:	3ff00000 	.word	0x3ff00000
 8008f80:	40240000 	.word	0x40240000
 8008f84:	401c0000 	.word	0x401c0000
 8008f88:	40140000 	.word	0x40140000
 8008f8c:	3fe00000 	.word	0x3fe00000
 8008f90:	4631      	mov	r1, r6
 8008f92:	4628      	mov	r0, r5
 8008f94:	f7f7 fb30 	bl	80005f8 <__aeabi_dmul>
 8008f98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f9c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008f9e:	4656      	mov	r6, sl
 8008fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fa4:	f7f7 fdd8 	bl	8000b58 <__aeabi_d2iz>
 8008fa8:	4605      	mov	r5, r0
 8008faa:	f7f7 fabb 	bl	8000524 <__aeabi_i2d>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fb6:	f7f7 f967 	bl	8000288 <__aeabi_dsub>
 8008fba:	3530      	adds	r5, #48	@ 0x30
 8008fbc:	f806 5b01 	strb.w	r5, [r6], #1
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	42a6      	cmp	r6, r4
 8008fc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fca:	f04f 0200 	mov.w	r2, #0
 8008fce:	d124      	bne.n	800901a <_dtoa_r+0x662>
 8008fd0:	4bac      	ldr	r3, [pc, #688]	@ (8009284 <_dtoa_r+0x8cc>)
 8008fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008fd6:	f7f7 f959 	bl	800028c <__adddf3>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fe2:	f7f7 fd99 	bl	8000b18 <__aeabi_dcmpgt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d145      	bne.n	8009076 <_dtoa_r+0x6be>
 8008fea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fee:	49a5      	ldr	r1, [pc, #660]	@ (8009284 <_dtoa_r+0x8cc>)
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	f7f7 f949 	bl	8000288 <__aeabi_dsub>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ffe:	f7f7 fd6d 	bl	8000adc <__aeabi_dcmplt>
 8009002:	2800      	cmp	r0, #0
 8009004:	f43f aef5 	beq.w	8008df2 <_dtoa_r+0x43a>
 8009008:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800900a:	1e73      	subs	r3, r6, #1
 800900c:	9315      	str	r3, [sp, #84]	@ 0x54
 800900e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009012:	2b30      	cmp	r3, #48	@ 0x30
 8009014:	d0f8      	beq.n	8009008 <_dtoa_r+0x650>
 8009016:	9f04      	ldr	r7, [sp, #16]
 8009018:	e73e      	b.n	8008e98 <_dtoa_r+0x4e0>
 800901a:	4b9b      	ldr	r3, [pc, #620]	@ (8009288 <_dtoa_r+0x8d0>)
 800901c:	f7f7 faec 	bl	80005f8 <__aeabi_dmul>
 8009020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009024:	e7bc      	b.n	8008fa0 <_dtoa_r+0x5e8>
 8009026:	d10c      	bne.n	8009042 <_dtoa_r+0x68a>
 8009028:	4b98      	ldr	r3, [pc, #608]	@ (800928c <_dtoa_r+0x8d4>)
 800902a:	2200      	movs	r2, #0
 800902c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009030:	f7f7 fae2 	bl	80005f8 <__aeabi_dmul>
 8009034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009038:	f7f7 fd64 	bl	8000b04 <__aeabi_dcmpge>
 800903c:	2800      	cmp	r0, #0
 800903e:	f000 8157 	beq.w	80092f0 <_dtoa_r+0x938>
 8009042:	2400      	movs	r4, #0
 8009044:	4625      	mov	r5, r4
 8009046:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009048:	43db      	mvns	r3, r3
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	4656      	mov	r6, sl
 800904e:	2700      	movs	r7, #0
 8009050:	4621      	mov	r1, r4
 8009052:	4658      	mov	r0, fp
 8009054:	f000 ff00 	bl	8009e58 <_Bfree>
 8009058:	2d00      	cmp	r5, #0
 800905a:	d0dc      	beq.n	8009016 <_dtoa_r+0x65e>
 800905c:	b12f      	cbz	r7, 800906a <_dtoa_r+0x6b2>
 800905e:	42af      	cmp	r7, r5
 8009060:	d003      	beq.n	800906a <_dtoa_r+0x6b2>
 8009062:	4639      	mov	r1, r7
 8009064:	4658      	mov	r0, fp
 8009066:	f000 fef7 	bl	8009e58 <_Bfree>
 800906a:	4629      	mov	r1, r5
 800906c:	4658      	mov	r0, fp
 800906e:	f000 fef3 	bl	8009e58 <_Bfree>
 8009072:	e7d0      	b.n	8009016 <_dtoa_r+0x65e>
 8009074:	9704      	str	r7, [sp, #16]
 8009076:	4633      	mov	r3, r6
 8009078:	461e      	mov	r6, r3
 800907a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800907e:	2a39      	cmp	r2, #57	@ 0x39
 8009080:	d107      	bne.n	8009092 <_dtoa_r+0x6da>
 8009082:	459a      	cmp	sl, r3
 8009084:	d1f8      	bne.n	8009078 <_dtoa_r+0x6c0>
 8009086:	9a04      	ldr	r2, [sp, #16]
 8009088:	3201      	adds	r2, #1
 800908a:	9204      	str	r2, [sp, #16]
 800908c:	2230      	movs	r2, #48	@ 0x30
 800908e:	f88a 2000 	strb.w	r2, [sl]
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	3201      	adds	r2, #1
 8009096:	701a      	strb	r2, [r3, #0]
 8009098:	e7bd      	b.n	8009016 <_dtoa_r+0x65e>
 800909a:	4b7b      	ldr	r3, [pc, #492]	@ (8009288 <_dtoa_r+0x8d0>)
 800909c:	2200      	movs	r2, #0
 800909e:	f7f7 faab 	bl	80005f8 <__aeabi_dmul>
 80090a2:	2200      	movs	r2, #0
 80090a4:	2300      	movs	r3, #0
 80090a6:	4604      	mov	r4, r0
 80090a8:	460d      	mov	r5, r1
 80090aa:	f7f7 fd0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f43f aebb 	beq.w	8008e2a <_dtoa_r+0x472>
 80090b4:	e6f0      	b.n	8008e98 <_dtoa_r+0x4e0>
 80090b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80090b8:	2a00      	cmp	r2, #0
 80090ba:	f000 80db 	beq.w	8009274 <_dtoa_r+0x8bc>
 80090be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090c0:	2a01      	cmp	r2, #1
 80090c2:	f300 80bf 	bgt.w	8009244 <_dtoa_r+0x88c>
 80090c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80090c8:	2a00      	cmp	r2, #0
 80090ca:	f000 80b7 	beq.w	800923c <_dtoa_r+0x884>
 80090ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80090d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090d4:	4646      	mov	r6, r8
 80090d6:	9a08      	ldr	r2, [sp, #32]
 80090d8:	2101      	movs	r1, #1
 80090da:	441a      	add	r2, r3
 80090dc:	4658      	mov	r0, fp
 80090de:	4498      	add	r8, r3
 80090e0:	9208      	str	r2, [sp, #32]
 80090e2:	f000 ffb7 	bl	800a054 <__i2b>
 80090e6:	4605      	mov	r5, r0
 80090e8:	b15e      	cbz	r6, 8009102 <_dtoa_r+0x74a>
 80090ea:	9b08      	ldr	r3, [sp, #32]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	dd08      	ble.n	8009102 <_dtoa_r+0x74a>
 80090f0:	42b3      	cmp	r3, r6
 80090f2:	9a08      	ldr	r2, [sp, #32]
 80090f4:	bfa8      	it	ge
 80090f6:	4633      	movge	r3, r6
 80090f8:	eba8 0803 	sub.w	r8, r8, r3
 80090fc:	1af6      	subs	r6, r6, r3
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	9308      	str	r3, [sp, #32]
 8009102:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009104:	b1f3      	cbz	r3, 8009144 <_dtoa_r+0x78c>
 8009106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 80b7 	beq.w	800927c <_dtoa_r+0x8c4>
 800910e:	b18c      	cbz	r4, 8009134 <_dtoa_r+0x77c>
 8009110:	4629      	mov	r1, r5
 8009112:	4622      	mov	r2, r4
 8009114:	4658      	mov	r0, fp
 8009116:	f001 f85d 	bl	800a1d4 <__pow5mult>
 800911a:	464a      	mov	r2, r9
 800911c:	4601      	mov	r1, r0
 800911e:	4605      	mov	r5, r0
 8009120:	4658      	mov	r0, fp
 8009122:	f000 ffad 	bl	800a080 <__multiply>
 8009126:	4649      	mov	r1, r9
 8009128:	9004      	str	r0, [sp, #16]
 800912a:	4658      	mov	r0, fp
 800912c:	f000 fe94 	bl	8009e58 <_Bfree>
 8009130:	9b04      	ldr	r3, [sp, #16]
 8009132:	4699      	mov	r9, r3
 8009134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009136:	1b1a      	subs	r2, r3, r4
 8009138:	d004      	beq.n	8009144 <_dtoa_r+0x78c>
 800913a:	4649      	mov	r1, r9
 800913c:	4658      	mov	r0, fp
 800913e:	f001 f849 	bl	800a1d4 <__pow5mult>
 8009142:	4681      	mov	r9, r0
 8009144:	2101      	movs	r1, #1
 8009146:	4658      	mov	r0, fp
 8009148:	f000 ff84 	bl	800a054 <__i2b>
 800914c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800914e:	4604      	mov	r4, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 81cf 	beq.w	80094f4 <_dtoa_r+0xb3c>
 8009156:	461a      	mov	r2, r3
 8009158:	4601      	mov	r1, r0
 800915a:	4658      	mov	r0, fp
 800915c:	f001 f83a 	bl	800a1d4 <__pow5mult>
 8009160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009162:	2b01      	cmp	r3, #1
 8009164:	4604      	mov	r4, r0
 8009166:	f300 8095 	bgt.w	8009294 <_dtoa_r+0x8dc>
 800916a:	9b02      	ldr	r3, [sp, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f040 8087 	bne.w	8009280 <_dtoa_r+0x8c8>
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009178:	2b00      	cmp	r3, #0
 800917a:	f040 8089 	bne.w	8009290 <_dtoa_r+0x8d8>
 800917e:	9b03      	ldr	r3, [sp, #12]
 8009180:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009184:	0d1b      	lsrs	r3, r3, #20
 8009186:	051b      	lsls	r3, r3, #20
 8009188:	b12b      	cbz	r3, 8009196 <_dtoa_r+0x7de>
 800918a:	9b08      	ldr	r3, [sp, #32]
 800918c:	3301      	adds	r3, #1
 800918e:	9308      	str	r3, [sp, #32]
 8009190:	f108 0801 	add.w	r8, r8, #1
 8009194:	2301      	movs	r3, #1
 8009196:	930a      	str	r3, [sp, #40]	@ 0x28
 8009198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 81b0 	beq.w	8009500 <_dtoa_r+0xb48>
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091a6:	6918      	ldr	r0, [r3, #16]
 80091a8:	f000 ff08 	bl	8009fbc <__hi0bits>
 80091ac:	f1c0 0020 	rsb	r0, r0, #32
 80091b0:	9b08      	ldr	r3, [sp, #32]
 80091b2:	4418      	add	r0, r3
 80091b4:	f010 001f 	ands.w	r0, r0, #31
 80091b8:	d077      	beq.n	80092aa <_dtoa_r+0x8f2>
 80091ba:	f1c0 0320 	rsb	r3, r0, #32
 80091be:	2b04      	cmp	r3, #4
 80091c0:	dd6b      	ble.n	800929a <_dtoa_r+0x8e2>
 80091c2:	9b08      	ldr	r3, [sp, #32]
 80091c4:	f1c0 001c 	rsb	r0, r0, #28
 80091c8:	4403      	add	r3, r0
 80091ca:	4480      	add	r8, r0
 80091cc:	4406      	add	r6, r0
 80091ce:	9308      	str	r3, [sp, #32]
 80091d0:	f1b8 0f00 	cmp.w	r8, #0
 80091d4:	dd05      	ble.n	80091e2 <_dtoa_r+0x82a>
 80091d6:	4649      	mov	r1, r9
 80091d8:	4642      	mov	r2, r8
 80091da:	4658      	mov	r0, fp
 80091dc:	f001 f854 	bl	800a288 <__lshift>
 80091e0:	4681      	mov	r9, r0
 80091e2:	9b08      	ldr	r3, [sp, #32]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dd05      	ble.n	80091f4 <_dtoa_r+0x83c>
 80091e8:	4621      	mov	r1, r4
 80091ea:	461a      	mov	r2, r3
 80091ec:	4658      	mov	r0, fp
 80091ee:	f001 f84b 	bl	800a288 <__lshift>
 80091f2:	4604      	mov	r4, r0
 80091f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d059      	beq.n	80092ae <_dtoa_r+0x8f6>
 80091fa:	4621      	mov	r1, r4
 80091fc:	4648      	mov	r0, r9
 80091fe:	f001 f8af 	bl	800a360 <__mcmp>
 8009202:	2800      	cmp	r0, #0
 8009204:	da53      	bge.n	80092ae <_dtoa_r+0x8f6>
 8009206:	1e7b      	subs	r3, r7, #1
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	4649      	mov	r1, r9
 800920c:	2300      	movs	r3, #0
 800920e:	220a      	movs	r2, #10
 8009210:	4658      	mov	r0, fp
 8009212:	f000 fe43 	bl	8009e9c <__multadd>
 8009216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009218:	4681      	mov	r9, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 8172 	beq.w	8009504 <_dtoa_r+0xb4c>
 8009220:	2300      	movs	r3, #0
 8009222:	4629      	mov	r1, r5
 8009224:	220a      	movs	r2, #10
 8009226:	4658      	mov	r0, fp
 8009228:	f000 fe38 	bl	8009e9c <__multadd>
 800922c:	9b00      	ldr	r3, [sp, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	4605      	mov	r5, r0
 8009232:	dc67      	bgt.n	8009304 <_dtoa_r+0x94c>
 8009234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009236:	2b02      	cmp	r3, #2
 8009238:	dc41      	bgt.n	80092be <_dtoa_r+0x906>
 800923a:	e063      	b.n	8009304 <_dtoa_r+0x94c>
 800923c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800923e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009242:	e746      	b.n	80090d2 <_dtoa_r+0x71a>
 8009244:	9b07      	ldr	r3, [sp, #28]
 8009246:	1e5c      	subs	r4, r3, #1
 8009248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800924a:	42a3      	cmp	r3, r4
 800924c:	bfbf      	itttt	lt
 800924e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009250:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009252:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009254:	1ae3      	sublt	r3, r4, r3
 8009256:	bfb4      	ite	lt
 8009258:	18d2      	addlt	r2, r2, r3
 800925a:	1b1c      	subge	r4, r3, r4
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	bfbc      	itt	lt
 8009260:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009262:	2400      	movlt	r4, #0
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfb5      	itete	lt
 8009268:	eba8 0603 	sublt.w	r6, r8, r3
 800926c:	9b07      	ldrge	r3, [sp, #28]
 800926e:	2300      	movlt	r3, #0
 8009270:	4646      	movge	r6, r8
 8009272:	e730      	b.n	80090d6 <_dtoa_r+0x71e>
 8009274:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009276:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009278:	4646      	mov	r6, r8
 800927a:	e735      	b.n	80090e8 <_dtoa_r+0x730>
 800927c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800927e:	e75c      	b.n	800913a <_dtoa_r+0x782>
 8009280:	2300      	movs	r3, #0
 8009282:	e788      	b.n	8009196 <_dtoa_r+0x7de>
 8009284:	3fe00000 	.word	0x3fe00000
 8009288:	40240000 	.word	0x40240000
 800928c:	40140000 	.word	0x40140000
 8009290:	9b02      	ldr	r3, [sp, #8]
 8009292:	e780      	b.n	8009196 <_dtoa_r+0x7de>
 8009294:	2300      	movs	r3, #0
 8009296:	930a      	str	r3, [sp, #40]	@ 0x28
 8009298:	e782      	b.n	80091a0 <_dtoa_r+0x7e8>
 800929a:	d099      	beq.n	80091d0 <_dtoa_r+0x818>
 800929c:	9a08      	ldr	r2, [sp, #32]
 800929e:	331c      	adds	r3, #28
 80092a0:	441a      	add	r2, r3
 80092a2:	4498      	add	r8, r3
 80092a4:	441e      	add	r6, r3
 80092a6:	9208      	str	r2, [sp, #32]
 80092a8:	e792      	b.n	80091d0 <_dtoa_r+0x818>
 80092aa:	4603      	mov	r3, r0
 80092ac:	e7f6      	b.n	800929c <_dtoa_r+0x8e4>
 80092ae:	9b07      	ldr	r3, [sp, #28]
 80092b0:	9704      	str	r7, [sp, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	dc20      	bgt.n	80092f8 <_dtoa_r+0x940>
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	dd1e      	ble.n	80092fc <_dtoa_r+0x944>
 80092be:	9b00      	ldr	r3, [sp, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f47f aec0 	bne.w	8009046 <_dtoa_r+0x68e>
 80092c6:	4621      	mov	r1, r4
 80092c8:	2205      	movs	r2, #5
 80092ca:	4658      	mov	r0, fp
 80092cc:	f000 fde6 	bl	8009e9c <__multadd>
 80092d0:	4601      	mov	r1, r0
 80092d2:	4604      	mov	r4, r0
 80092d4:	4648      	mov	r0, r9
 80092d6:	f001 f843 	bl	800a360 <__mcmp>
 80092da:	2800      	cmp	r0, #0
 80092dc:	f77f aeb3 	ble.w	8009046 <_dtoa_r+0x68e>
 80092e0:	4656      	mov	r6, sl
 80092e2:	2331      	movs	r3, #49	@ 0x31
 80092e4:	f806 3b01 	strb.w	r3, [r6], #1
 80092e8:	9b04      	ldr	r3, [sp, #16]
 80092ea:	3301      	adds	r3, #1
 80092ec:	9304      	str	r3, [sp, #16]
 80092ee:	e6ae      	b.n	800904e <_dtoa_r+0x696>
 80092f0:	9c07      	ldr	r4, [sp, #28]
 80092f2:	9704      	str	r7, [sp, #16]
 80092f4:	4625      	mov	r5, r4
 80092f6:	e7f3      	b.n	80092e0 <_dtoa_r+0x928>
 80092f8:	9b07      	ldr	r3, [sp, #28]
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 8104 	beq.w	800950c <_dtoa_r+0xb54>
 8009304:	2e00      	cmp	r6, #0
 8009306:	dd05      	ble.n	8009314 <_dtoa_r+0x95c>
 8009308:	4629      	mov	r1, r5
 800930a:	4632      	mov	r2, r6
 800930c:	4658      	mov	r0, fp
 800930e:	f000 ffbb 	bl	800a288 <__lshift>
 8009312:	4605      	mov	r5, r0
 8009314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009316:	2b00      	cmp	r3, #0
 8009318:	d05a      	beq.n	80093d0 <_dtoa_r+0xa18>
 800931a:	6869      	ldr	r1, [r5, #4]
 800931c:	4658      	mov	r0, fp
 800931e:	f000 fd5b 	bl	8009dd8 <_Balloc>
 8009322:	4606      	mov	r6, r0
 8009324:	b928      	cbnz	r0, 8009332 <_dtoa_r+0x97a>
 8009326:	4b84      	ldr	r3, [pc, #528]	@ (8009538 <_dtoa_r+0xb80>)
 8009328:	4602      	mov	r2, r0
 800932a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800932e:	f7ff bb5a 	b.w	80089e6 <_dtoa_r+0x2e>
 8009332:	692a      	ldr	r2, [r5, #16]
 8009334:	3202      	adds	r2, #2
 8009336:	0092      	lsls	r2, r2, #2
 8009338:	f105 010c 	add.w	r1, r5, #12
 800933c:	300c      	adds	r0, #12
 800933e:	f7ff fa76 	bl	800882e <memcpy>
 8009342:	2201      	movs	r2, #1
 8009344:	4631      	mov	r1, r6
 8009346:	4658      	mov	r0, fp
 8009348:	f000 ff9e 	bl	800a288 <__lshift>
 800934c:	f10a 0301 	add.w	r3, sl, #1
 8009350:	9307      	str	r3, [sp, #28]
 8009352:	9b00      	ldr	r3, [sp, #0]
 8009354:	4453      	add	r3, sl
 8009356:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009358:	9b02      	ldr	r3, [sp, #8]
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	462f      	mov	r7, r5
 8009360:	930a      	str	r3, [sp, #40]	@ 0x28
 8009362:	4605      	mov	r5, r0
 8009364:	9b07      	ldr	r3, [sp, #28]
 8009366:	4621      	mov	r1, r4
 8009368:	3b01      	subs	r3, #1
 800936a:	4648      	mov	r0, r9
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	f7ff fa9b 	bl	80088a8 <quorem>
 8009372:	4639      	mov	r1, r7
 8009374:	9002      	str	r0, [sp, #8]
 8009376:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800937a:	4648      	mov	r0, r9
 800937c:	f000 fff0 	bl	800a360 <__mcmp>
 8009380:	462a      	mov	r2, r5
 8009382:	9008      	str	r0, [sp, #32]
 8009384:	4621      	mov	r1, r4
 8009386:	4658      	mov	r0, fp
 8009388:	f001 f806 	bl	800a398 <__mdiff>
 800938c:	68c2      	ldr	r2, [r0, #12]
 800938e:	4606      	mov	r6, r0
 8009390:	bb02      	cbnz	r2, 80093d4 <_dtoa_r+0xa1c>
 8009392:	4601      	mov	r1, r0
 8009394:	4648      	mov	r0, r9
 8009396:	f000 ffe3 	bl	800a360 <__mcmp>
 800939a:	4602      	mov	r2, r0
 800939c:	4631      	mov	r1, r6
 800939e:	4658      	mov	r0, fp
 80093a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80093a2:	f000 fd59 	bl	8009e58 <_Bfree>
 80093a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093aa:	9e07      	ldr	r6, [sp, #28]
 80093ac:	ea43 0102 	orr.w	r1, r3, r2
 80093b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093b2:	4319      	orrs	r1, r3
 80093b4:	d110      	bne.n	80093d8 <_dtoa_r+0xa20>
 80093b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093ba:	d029      	beq.n	8009410 <_dtoa_r+0xa58>
 80093bc:	9b08      	ldr	r3, [sp, #32]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	dd02      	ble.n	80093c8 <_dtoa_r+0xa10>
 80093c2:	9b02      	ldr	r3, [sp, #8]
 80093c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80093c8:	9b00      	ldr	r3, [sp, #0]
 80093ca:	f883 8000 	strb.w	r8, [r3]
 80093ce:	e63f      	b.n	8009050 <_dtoa_r+0x698>
 80093d0:	4628      	mov	r0, r5
 80093d2:	e7bb      	b.n	800934c <_dtoa_r+0x994>
 80093d4:	2201      	movs	r2, #1
 80093d6:	e7e1      	b.n	800939c <_dtoa_r+0x9e4>
 80093d8:	9b08      	ldr	r3, [sp, #32]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	db04      	blt.n	80093e8 <_dtoa_r+0xa30>
 80093de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093e0:	430b      	orrs	r3, r1
 80093e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093e4:	430b      	orrs	r3, r1
 80093e6:	d120      	bne.n	800942a <_dtoa_r+0xa72>
 80093e8:	2a00      	cmp	r2, #0
 80093ea:	dded      	ble.n	80093c8 <_dtoa_r+0xa10>
 80093ec:	4649      	mov	r1, r9
 80093ee:	2201      	movs	r2, #1
 80093f0:	4658      	mov	r0, fp
 80093f2:	f000 ff49 	bl	800a288 <__lshift>
 80093f6:	4621      	mov	r1, r4
 80093f8:	4681      	mov	r9, r0
 80093fa:	f000 ffb1 	bl	800a360 <__mcmp>
 80093fe:	2800      	cmp	r0, #0
 8009400:	dc03      	bgt.n	800940a <_dtoa_r+0xa52>
 8009402:	d1e1      	bne.n	80093c8 <_dtoa_r+0xa10>
 8009404:	f018 0f01 	tst.w	r8, #1
 8009408:	d0de      	beq.n	80093c8 <_dtoa_r+0xa10>
 800940a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800940e:	d1d8      	bne.n	80093c2 <_dtoa_r+0xa0a>
 8009410:	9a00      	ldr	r2, [sp, #0]
 8009412:	2339      	movs	r3, #57	@ 0x39
 8009414:	7013      	strb	r3, [r2, #0]
 8009416:	4633      	mov	r3, r6
 8009418:	461e      	mov	r6, r3
 800941a:	3b01      	subs	r3, #1
 800941c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009420:	2a39      	cmp	r2, #57	@ 0x39
 8009422:	d052      	beq.n	80094ca <_dtoa_r+0xb12>
 8009424:	3201      	adds	r2, #1
 8009426:	701a      	strb	r2, [r3, #0]
 8009428:	e612      	b.n	8009050 <_dtoa_r+0x698>
 800942a:	2a00      	cmp	r2, #0
 800942c:	dd07      	ble.n	800943e <_dtoa_r+0xa86>
 800942e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009432:	d0ed      	beq.n	8009410 <_dtoa_r+0xa58>
 8009434:	9a00      	ldr	r2, [sp, #0]
 8009436:	f108 0301 	add.w	r3, r8, #1
 800943a:	7013      	strb	r3, [r2, #0]
 800943c:	e608      	b.n	8009050 <_dtoa_r+0x698>
 800943e:	9b07      	ldr	r3, [sp, #28]
 8009440:	9a07      	ldr	r2, [sp, #28]
 8009442:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009448:	4293      	cmp	r3, r2
 800944a:	d028      	beq.n	800949e <_dtoa_r+0xae6>
 800944c:	4649      	mov	r1, r9
 800944e:	2300      	movs	r3, #0
 8009450:	220a      	movs	r2, #10
 8009452:	4658      	mov	r0, fp
 8009454:	f000 fd22 	bl	8009e9c <__multadd>
 8009458:	42af      	cmp	r7, r5
 800945a:	4681      	mov	r9, r0
 800945c:	f04f 0300 	mov.w	r3, #0
 8009460:	f04f 020a 	mov.w	r2, #10
 8009464:	4639      	mov	r1, r7
 8009466:	4658      	mov	r0, fp
 8009468:	d107      	bne.n	800947a <_dtoa_r+0xac2>
 800946a:	f000 fd17 	bl	8009e9c <__multadd>
 800946e:	4607      	mov	r7, r0
 8009470:	4605      	mov	r5, r0
 8009472:	9b07      	ldr	r3, [sp, #28]
 8009474:	3301      	adds	r3, #1
 8009476:	9307      	str	r3, [sp, #28]
 8009478:	e774      	b.n	8009364 <_dtoa_r+0x9ac>
 800947a:	f000 fd0f 	bl	8009e9c <__multadd>
 800947e:	4629      	mov	r1, r5
 8009480:	4607      	mov	r7, r0
 8009482:	2300      	movs	r3, #0
 8009484:	220a      	movs	r2, #10
 8009486:	4658      	mov	r0, fp
 8009488:	f000 fd08 	bl	8009e9c <__multadd>
 800948c:	4605      	mov	r5, r0
 800948e:	e7f0      	b.n	8009472 <_dtoa_r+0xaba>
 8009490:	9b00      	ldr	r3, [sp, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	bfcc      	ite	gt
 8009496:	461e      	movgt	r6, r3
 8009498:	2601      	movle	r6, #1
 800949a:	4456      	add	r6, sl
 800949c:	2700      	movs	r7, #0
 800949e:	4649      	mov	r1, r9
 80094a0:	2201      	movs	r2, #1
 80094a2:	4658      	mov	r0, fp
 80094a4:	f000 fef0 	bl	800a288 <__lshift>
 80094a8:	4621      	mov	r1, r4
 80094aa:	4681      	mov	r9, r0
 80094ac:	f000 ff58 	bl	800a360 <__mcmp>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	dcb0      	bgt.n	8009416 <_dtoa_r+0xa5e>
 80094b4:	d102      	bne.n	80094bc <_dtoa_r+0xb04>
 80094b6:	f018 0f01 	tst.w	r8, #1
 80094ba:	d1ac      	bne.n	8009416 <_dtoa_r+0xa5e>
 80094bc:	4633      	mov	r3, r6
 80094be:	461e      	mov	r6, r3
 80094c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094c4:	2a30      	cmp	r2, #48	@ 0x30
 80094c6:	d0fa      	beq.n	80094be <_dtoa_r+0xb06>
 80094c8:	e5c2      	b.n	8009050 <_dtoa_r+0x698>
 80094ca:	459a      	cmp	sl, r3
 80094cc:	d1a4      	bne.n	8009418 <_dtoa_r+0xa60>
 80094ce:	9b04      	ldr	r3, [sp, #16]
 80094d0:	3301      	adds	r3, #1
 80094d2:	9304      	str	r3, [sp, #16]
 80094d4:	2331      	movs	r3, #49	@ 0x31
 80094d6:	f88a 3000 	strb.w	r3, [sl]
 80094da:	e5b9      	b.n	8009050 <_dtoa_r+0x698>
 80094dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800953c <_dtoa_r+0xb84>
 80094e2:	b11b      	cbz	r3, 80094ec <_dtoa_r+0xb34>
 80094e4:	f10a 0308 	add.w	r3, sl, #8
 80094e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	4650      	mov	r0, sl
 80094ee:	b019      	add	sp, #100	@ 0x64
 80094f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	f77f ae37 	ble.w	800916a <_dtoa_r+0x7b2>
 80094fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009500:	2001      	movs	r0, #1
 8009502:	e655      	b.n	80091b0 <_dtoa_r+0x7f8>
 8009504:	9b00      	ldr	r3, [sp, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	f77f aed6 	ble.w	80092b8 <_dtoa_r+0x900>
 800950c:	4656      	mov	r6, sl
 800950e:	4621      	mov	r1, r4
 8009510:	4648      	mov	r0, r9
 8009512:	f7ff f9c9 	bl	80088a8 <quorem>
 8009516:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800951a:	f806 8b01 	strb.w	r8, [r6], #1
 800951e:	9b00      	ldr	r3, [sp, #0]
 8009520:	eba6 020a 	sub.w	r2, r6, sl
 8009524:	4293      	cmp	r3, r2
 8009526:	ddb3      	ble.n	8009490 <_dtoa_r+0xad8>
 8009528:	4649      	mov	r1, r9
 800952a:	2300      	movs	r3, #0
 800952c:	220a      	movs	r2, #10
 800952e:	4658      	mov	r0, fp
 8009530:	f000 fcb4 	bl	8009e9c <__multadd>
 8009534:	4681      	mov	r9, r0
 8009536:	e7ea      	b.n	800950e <_dtoa_r+0xb56>
 8009538:	0800b823 	.word	0x0800b823
 800953c:	0800b7be 	.word	0x0800b7be

08009540 <_free_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4605      	mov	r5, r0
 8009544:	2900      	cmp	r1, #0
 8009546:	d041      	beq.n	80095cc <_free_r+0x8c>
 8009548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954c:	1f0c      	subs	r4, r1, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	bfb8      	it	lt
 8009552:	18e4      	addlt	r4, r4, r3
 8009554:	f000 fc34 	bl	8009dc0 <__malloc_lock>
 8009558:	4a1d      	ldr	r2, [pc, #116]	@ (80095d0 <_free_r+0x90>)
 800955a:	6813      	ldr	r3, [r2, #0]
 800955c:	b933      	cbnz	r3, 800956c <_free_r+0x2c>
 800955e:	6063      	str	r3, [r4, #4]
 8009560:	6014      	str	r4, [r2, #0]
 8009562:	4628      	mov	r0, r5
 8009564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009568:	f000 bc30 	b.w	8009dcc <__malloc_unlock>
 800956c:	42a3      	cmp	r3, r4
 800956e:	d908      	bls.n	8009582 <_free_r+0x42>
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	1821      	adds	r1, r4, r0
 8009574:	428b      	cmp	r3, r1
 8009576:	bf01      	itttt	eq
 8009578:	6819      	ldreq	r1, [r3, #0]
 800957a:	685b      	ldreq	r3, [r3, #4]
 800957c:	1809      	addeq	r1, r1, r0
 800957e:	6021      	streq	r1, [r4, #0]
 8009580:	e7ed      	b.n	800955e <_free_r+0x1e>
 8009582:	461a      	mov	r2, r3
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	b10b      	cbz	r3, 800958c <_free_r+0x4c>
 8009588:	42a3      	cmp	r3, r4
 800958a:	d9fa      	bls.n	8009582 <_free_r+0x42>
 800958c:	6811      	ldr	r1, [r2, #0]
 800958e:	1850      	adds	r0, r2, r1
 8009590:	42a0      	cmp	r0, r4
 8009592:	d10b      	bne.n	80095ac <_free_r+0x6c>
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	4401      	add	r1, r0
 8009598:	1850      	adds	r0, r2, r1
 800959a:	4283      	cmp	r3, r0
 800959c:	6011      	str	r1, [r2, #0]
 800959e:	d1e0      	bne.n	8009562 <_free_r+0x22>
 80095a0:	6818      	ldr	r0, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	6053      	str	r3, [r2, #4]
 80095a6:	4408      	add	r0, r1
 80095a8:	6010      	str	r0, [r2, #0]
 80095aa:	e7da      	b.n	8009562 <_free_r+0x22>
 80095ac:	d902      	bls.n	80095b4 <_free_r+0x74>
 80095ae:	230c      	movs	r3, #12
 80095b0:	602b      	str	r3, [r5, #0]
 80095b2:	e7d6      	b.n	8009562 <_free_r+0x22>
 80095b4:	6820      	ldr	r0, [r4, #0]
 80095b6:	1821      	adds	r1, r4, r0
 80095b8:	428b      	cmp	r3, r1
 80095ba:	bf04      	itt	eq
 80095bc:	6819      	ldreq	r1, [r3, #0]
 80095be:	685b      	ldreq	r3, [r3, #4]
 80095c0:	6063      	str	r3, [r4, #4]
 80095c2:	bf04      	itt	eq
 80095c4:	1809      	addeq	r1, r1, r0
 80095c6:	6021      	streq	r1, [r4, #0]
 80095c8:	6054      	str	r4, [r2, #4]
 80095ca:	e7ca      	b.n	8009562 <_free_r+0x22>
 80095cc:	bd38      	pop	{r3, r4, r5, pc}
 80095ce:	bf00      	nop
 80095d0:	200006d8 	.word	0x200006d8

080095d4 <rshift>:
 80095d4:	6903      	ldr	r3, [r0, #16]
 80095d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80095da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095e2:	f100 0414 	add.w	r4, r0, #20
 80095e6:	dd45      	ble.n	8009674 <rshift+0xa0>
 80095e8:	f011 011f 	ands.w	r1, r1, #31
 80095ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095f4:	d10c      	bne.n	8009610 <rshift+0x3c>
 80095f6:	f100 0710 	add.w	r7, r0, #16
 80095fa:	4629      	mov	r1, r5
 80095fc:	42b1      	cmp	r1, r6
 80095fe:	d334      	bcc.n	800966a <rshift+0x96>
 8009600:	1a9b      	subs	r3, r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	1eea      	subs	r2, r5, #3
 8009606:	4296      	cmp	r6, r2
 8009608:	bf38      	it	cc
 800960a:	2300      	movcc	r3, #0
 800960c:	4423      	add	r3, r4
 800960e:	e015      	b.n	800963c <rshift+0x68>
 8009610:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009614:	f1c1 0820 	rsb	r8, r1, #32
 8009618:	40cf      	lsrs	r7, r1
 800961a:	f105 0e04 	add.w	lr, r5, #4
 800961e:	46a1      	mov	r9, r4
 8009620:	4576      	cmp	r6, lr
 8009622:	46f4      	mov	ip, lr
 8009624:	d815      	bhi.n	8009652 <rshift+0x7e>
 8009626:	1a9a      	subs	r2, r3, r2
 8009628:	0092      	lsls	r2, r2, #2
 800962a:	3a04      	subs	r2, #4
 800962c:	3501      	adds	r5, #1
 800962e:	42ae      	cmp	r6, r5
 8009630:	bf38      	it	cc
 8009632:	2200      	movcc	r2, #0
 8009634:	18a3      	adds	r3, r4, r2
 8009636:	50a7      	str	r7, [r4, r2]
 8009638:	b107      	cbz	r7, 800963c <rshift+0x68>
 800963a:	3304      	adds	r3, #4
 800963c:	1b1a      	subs	r2, r3, r4
 800963e:	42a3      	cmp	r3, r4
 8009640:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009644:	bf08      	it	eq
 8009646:	2300      	moveq	r3, #0
 8009648:	6102      	str	r2, [r0, #16]
 800964a:	bf08      	it	eq
 800964c:	6143      	streq	r3, [r0, #20]
 800964e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009652:	f8dc c000 	ldr.w	ip, [ip]
 8009656:	fa0c fc08 	lsl.w	ip, ip, r8
 800965a:	ea4c 0707 	orr.w	r7, ip, r7
 800965e:	f849 7b04 	str.w	r7, [r9], #4
 8009662:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009666:	40cf      	lsrs	r7, r1
 8009668:	e7da      	b.n	8009620 <rshift+0x4c>
 800966a:	f851 cb04 	ldr.w	ip, [r1], #4
 800966e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009672:	e7c3      	b.n	80095fc <rshift+0x28>
 8009674:	4623      	mov	r3, r4
 8009676:	e7e1      	b.n	800963c <rshift+0x68>

08009678 <__hexdig_fun>:
 8009678:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800967c:	2b09      	cmp	r3, #9
 800967e:	d802      	bhi.n	8009686 <__hexdig_fun+0xe>
 8009680:	3820      	subs	r0, #32
 8009682:	b2c0      	uxtb	r0, r0
 8009684:	4770      	bx	lr
 8009686:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800968a:	2b05      	cmp	r3, #5
 800968c:	d801      	bhi.n	8009692 <__hexdig_fun+0x1a>
 800968e:	3847      	subs	r0, #71	@ 0x47
 8009690:	e7f7      	b.n	8009682 <__hexdig_fun+0xa>
 8009692:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009696:	2b05      	cmp	r3, #5
 8009698:	d801      	bhi.n	800969e <__hexdig_fun+0x26>
 800969a:	3827      	subs	r0, #39	@ 0x27
 800969c:	e7f1      	b.n	8009682 <__hexdig_fun+0xa>
 800969e:	2000      	movs	r0, #0
 80096a0:	4770      	bx	lr
	...

080096a4 <__gethex>:
 80096a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	b085      	sub	sp, #20
 80096aa:	468a      	mov	sl, r1
 80096ac:	9302      	str	r3, [sp, #8]
 80096ae:	680b      	ldr	r3, [r1, #0]
 80096b0:	9001      	str	r0, [sp, #4]
 80096b2:	4690      	mov	r8, r2
 80096b4:	1c9c      	adds	r4, r3, #2
 80096b6:	46a1      	mov	r9, r4
 80096b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80096bc:	2830      	cmp	r0, #48	@ 0x30
 80096be:	d0fa      	beq.n	80096b6 <__gethex+0x12>
 80096c0:	eba9 0303 	sub.w	r3, r9, r3
 80096c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80096c8:	f7ff ffd6 	bl	8009678 <__hexdig_fun>
 80096cc:	4605      	mov	r5, r0
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d168      	bne.n	80097a4 <__gethex+0x100>
 80096d2:	49a0      	ldr	r1, [pc, #640]	@ (8009954 <__gethex+0x2b0>)
 80096d4:	2201      	movs	r2, #1
 80096d6:	4648      	mov	r0, r9
 80096d8:	f7fe ffb0 	bl	800863c <strncmp>
 80096dc:	4607      	mov	r7, r0
 80096de:	2800      	cmp	r0, #0
 80096e0:	d167      	bne.n	80097b2 <__gethex+0x10e>
 80096e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80096e6:	4626      	mov	r6, r4
 80096e8:	f7ff ffc6 	bl	8009678 <__hexdig_fun>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d062      	beq.n	80097b6 <__gethex+0x112>
 80096f0:	4623      	mov	r3, r4
 80096f2:	7818      	ldrb	r0, [r3, #0]
 80096f4:	2830      	cmp	r0, #48	@ 0x30
 80096f6:	4699      	mov	r9, r3
 80096f8:	f103 0301 	add.w	r3, r3, #1
 80096fc:	d0f9      	beq.n	80096f2 <__gethex+0x4e>
 80096fe:	f7ff ffbb 	bl	8009678 <__hexdig_fun>
 8009702:	fab0 f580 	clz	r5, r0
 8009706:	096d      	lsrs	r5, r5, #5
 8009708:	f04f 0b01 	mov.w	fp, #1
 800970c:	464a      	mov	r2, r9
 800970e:	4616      	mov	r6, r2
 8009710:	3201      	adds	r2, #1
 8009712:	7830      	ldrb	r0, [r6, #0]
 8009714:	f7ff ffb0 	bl	8009678 <__hexdig_fun>
 8009718:	2800      	cmp	r0, #0
 800971a:	d1f8      	bne.n	800970e <__gethex+0x6a>
 800971c:	498d      	ldr	r1, [pc, #564]	@ (8009954 <__gethex+0x2b0>)
 800971e:	2201      	movs	r2, #1
 8009720:	4630      	mov	r0, r6
 8009722:	f7fe ff8b 	bl	800863c <strncmp>
 8009726:	2800      	cmp	r0, #0
 8009728:	d13f      	bne.n	80097aa <__gethex+0x106>
 800972a:	b944      	cbnz	r4, 800973e <__gethex+0x9a>
 800972c:	1c74      	adds	r4, r6, #1
 800972e:	4622      	mov	r2, r4
 8009730:	4616      	mov	r6, r2
 8009732:	3201      	adds	r2, #1
 8009734:	7830      	ldrb	r0, [r6, #0]
 8009736:	f7ff ff9f 	bl	8009678 <__hexdig_fun>
 800973a:	2800      	cmp	r0, #0
 800973c:	d1f8      	bne.n	8009730 <__gethex+0x8c>
 800973e:	1ba4      	subs	r4, r4, r6
 8009740:	00a7      	lsls	r7, r4, #2
 8009742:	7833      	ldrb	r3, [r6, #0]
 8009744:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009748:	2b50      	cmp	r3, #80	@ 0x50
 800974a:	d13e      	bne.n	80097ca <__gethex+0x126>
 800974c:	7873      	ldrb	r3, [r6, #1]
 800974e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009750:	d033      	beq.n	80097ba <__gethex+0x116>
 8009752:	2b2d      	cmp	r3, #45	@ 0x2d
 8009754:	d034      	beq.n	80097c0 <__gethex+0x11c>
 8009756:	1c71      	adds	r1, r6, #1
 8009758:	2400      	movs	r4, #0
 800975a:	7808      	ldrb	r0, [r1, #0]
 800975c:	f7ff ff8c 	bl	8009678 <__hexdig_fun>
 8009760:	1e43      	subs	r3, r0, #1
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b18      	cmp	r3, #24
 8009766:	d830      	bhi.n	80097ca <__gethex+0x126>
 8009768:	f1a0 0210 	sub.w	r2, r0, #16
 800976c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009770:	f7ff ff82 	bl	8009678 <__hexdig_fun>
 8009774:	f100 3cff 	add.w	ip, r0, #4294967295
 8009778:	fa5f fc8c 	uxtb.w	ip, ip
 800977c:	f1bc 0f18 	cmp.w	ip, #24
 8009780:	f04f 030a 	mov.w	r3, #10
 8009784:	d91e      	bls.n	80097c4 <__gethex+0x120>
 8009786:	b104      	cbz	r4, 800978a <__gethex+0xe6>
 8009788:	4252      	negs	r2, r2
 800978a:	4417      	add	r7, r2
 800978c:	f8ca 1000 	str.w	r1, [sl]
 8009790:	b1ed      	cbz	r5, 80097ce <__gethex+0x12a>
 8009792:	f1bb 0f00 	cmp.w	fp, #0
 8009796:	bf0c      	ite	eq
 8009798:	2506      	moveq	r5, #6
 800979a:	2500      	movne	r5, #0
 800979c:	4628      	mov	r0, r5
 800979e:	b005      	add	sp, #20
 80097a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a4:	2500      	movs	r5, #0
 80097a6:	462c      	mov	r4, r5
 80097a8:	e7b0      	b.n	800970c <__gethex+0x68>
 80097aa:	2c00      	cmp	r4, #0
 80097ac:	d1c7      	bne.n	800973e <__gethex+0x9a>
 80097ae:	4627      	mov	r7, r4
 80097b0:	e7c7      	b.n	8009742 <__gethex+0x9e>
 80097b2:	464e      	mov	r6, r9
 80097b4:	462f      	mov	r7, r5
 80097b6:	2501      	movs	r5, #1
 80097b8:	e7c3      	b.n	8009742 <__gethex+0x9e>
 80097ba:	2400      	movs	r4, #0
 80097bc:	1cb1      	adds	r1, r6, #2
 80097be:	e7cc      	b.n	800975a <__gethex+0xb6>
 80097c0:	2401      	movs	r4, #1
 80097c2:	e7fb      	b.n	80097bc <__gethex+0x118>
 80097c4:	fb03 0002 	mla	r0, r3, r2, r0
 80097c8:	e7ce      	b.n	8009768 <__gethex+0xc4>
 80097ca:	4631      	mov	r1, r6
 80097cc:	e7de      	b.n	800978c <__gethex+0xe8>
 80097ce:	eba6 0309 	sub.w	r3, r6, r9
 80097d2:	3b01      	subs	r3, #1
 80097d4:	4629      	mov	r1, r5
 80097d6:	2b07      	cmp	r3, #7
 80097d8:	dc0a      	bgt.n	80097f0 <__gethex+0x14c>
 80097da:	9801      	ldr	r0, [sp, #4]
 80097dc:	f000 fafc 	bl	8009dd8 <_Balloc>
 80097e0:	4604      	mov	r4, r0
 80097e2:	b940      	cbnz	r0, 80097f6 <__gethex+0x152>
 80097e4:	4b5c      	ldr	r3, [pc, #368]	@ (8009958 <__gethex+0x2b4>)
 80097e6:	4602      	mov	r2, r0
 80097e8:	21e4      	movs	r1, #228	@ 0xe4
 80097ea:	485c      	ldr	r0, [pc, #368]	@ (800995c <__gethex+0x2b8>)
 80097ec:	f7ff f83e 	bl	800886c <__assert_func>
 80097f0:	3101      	adds	r1, #1
 80097f2:	105b      	asrs	r3, r3, #1
 80097f4:	e7ef      	b.n	80097d6 <__gethex+0x132>
 80097f6:	f100 0a14 	add.w	sl, r0, #20
 80097fa:	2300      	movs	r3, #0
 80097fc:	4655      	mov	r5, sl
 80097fe:	469b      	mov	fp, r3
 8009800:	45b1      	cmp	r9, r6
 8009802:	d337      	bcc.n	8009874 <__gethex+0x1d0>
 8009804:	f845 bb04 	str.w	fp, [r5], #4
 8009808:	eba5 050a 	sub.w	r5, r5, sl
 800980c:	10ad      	asrs	r5, r5, #2
 800980e:	6125      	str	r5, [r4, #16]
 8009810:	4658      	mov	r0, fp
 8009812:	f000 fbd3 	bl	8009fbc <__hi0bits>
 8009816:	016d      	lsls	r5, r5, #5
 8009818:	f8d8 6000 	ldr.w	r6, [r8]
 800981c:	1a2d      	subs	r5, r5, r0
 800981e:	42b5      	cmp	r5, r6
 8009820:	dd54      	ble.n	80098cc <__gethex+0x228>
 8009822:	1bad      	subs	r5, r5, r6
 8009824:	4629      	mov	r1, r5
 8009826:	4620      	mov	r0, r4
 8009828:	f000 ff67 	bl	800a6fa <__any_on>
 800982c:	4681      	mov	r9, r0
 800982e:	b178      	cbz	r0, 8009850 <__gethex+0x1ac>
 8009830:	1e6b      	subs	r3, r5, #1
 8009832:	1159      	asrs	r1, r3, #5
 8009834:	f003 021f 	and.w	r2, r3, #31
 8009838:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800983c:	f04f 0901 	mov.w	r9, #1
 8009840:	fa09 f202 	lsl.w	r2, r9, r2
 8009844:	420a      	tst	r2, r1
 8009846:	d003      	beq.n	8009850 <__gethex+0x1ac>
 8009848:	454b      	cmp	r3, r9
 800984a:	dc36      	bgt.n	80098ba <__gethex+0x216>
 800984c:	f04f 0902 	mov.w	r9, #2
 8009850:	4629      	mov	r1, r5
 8009852:	4620      	mov	r0, r4
 8009854:	f7ff febe 	bl	80095d4 <rshift>
 8009858:	442f      	add	r7, r5
 800985a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800985e:	42bb      	cmp	r3, r7
 8009860:	da42      	bge.n	80098e8 <__gethex+0x244>
 8009862:	9801      	ldr	r0, [sp, #4]
 8009864:	4621      	mov	r1, r4
 8009866:	f000 faf7 	bl	8009e58 <_Bfree>
 800986a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800986c:	2300      	movs	r3, #0
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	25a3      	movs	r5, #163	@ 0xa3
 8009872:	e793      	b.n	800979c <__gethex+0xf8>
 8009874:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009878:	2a2e      	cmp	r2, #46	@ 0x2e
 800987a:	d012      	beq.n	80098a2 <__gethex+0x1fe>
 800987c:	2b20      	cmp	r3, #32
 800987e:	d104      	bne.n	800988a <__gethex+0x1e6>
 8009880:	f845 bb04 	str.w	fp, [r5], #4
 8009884:	f04f 0b00 	mov.w	fp, #0
 8009888:	465b      	mov	r3, fp
 800988a:	7830      	ldrb	r0, [r6, #0]
 800988c:	9303      	str	r3, [sp, #12]
 800988e:	f7ff fef3 	bl	8009678 <__hexdig_fun>
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	f000 000f 	and.w	r0, r0, #15
 8009898:	4098      	lsls	r0, r3
 800989a:	ea4b 0b00 	orr.w	fp, fp, r0
 800989e:	3304      	adds	r3, #4
 80098a0:	e7ae      	b.n	8009800 <__gethex+0x15c>
 80098a2:	45b1      	cmp	r9, r6
 80098a4:	d8ea      	bhi.n	800987c <__gethex+0x1d8>
 80098a6:	492b      	ldr	r1, [pc, #172]	@ (8009954 <__gethex+0x2b0>)
 80098a8:	9303      	str	r3, [sp, #12]
 80098aa:	2201      	movs	r2, #1
 80098ac:	4630      	mov	r0, r6
 80098ae:	f7fe fec5 	bl	800863c <strncmp>
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d1e1      	bne.n	800987c <__gethex+0x1d8>
 80098b8:	e7a2      	b.n	8009800 <__gethex+0x15c>
 80098ba:	1ea9      	subs	r1, r5, #2
 80098bc:	4620      	mov	r0, r4
 80098be:	f000 ff1c 	bl	800a6fa <__any_on>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d0c2      	beq.n	800984c <__gethex+0x1a8>
 80098c6:	f04f 0903 	mov.w	r9, #3
 80098ca:	e7c1      	b.n	8009850 <__gethex+0x1ac>
 80098cc:	da09      	bge.n	80098e2 <__gethex+0x23e>
 80098ce:	1b75      	subs	r5, r6, r5
 80098d0:	4621      	mov	r1, r4
 80098d2:	9801      	ldr	r0, [sp, #4]
 80098d4:	462a      	mov	r2, r5
 80098d6:	f000 fcd7 	bl	800a288 <__lshift>
 80098da:	1b7f      	subs	r7, r7, r5
 80098dc:	4604      	mov	r4, r0
 80098de:	f100 0a14 	add.w	sl, r0, #20
 80098e2:	f04f 0900 	mov.w	r9, #0
 80098e6:	e7b8      	b.n	800985a <__gethex+0x1b6>
 80098e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098ec:	42bd      	cmp	r5, r7
 80098ee:	dd6f      	ble.n	80099d0 <__gethex+0x32c>
 80098f0:	1bed      	subs	r5, r5, r7
 80098f2:	42ae      	cmp	r6, r5
 80098f4:	dc34      	bgt.n	8009960 <__gethex+0x2bc>
 80098f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d022      	beq.n	8009944 <__gethex+0x2a0>
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d024      	beq.n	800994c <__gethex+0x2a8>
 8009902:	2b01      	cmp	r3, #1
 8009904:	d115      	bne.n	8009932 <__gethex+0x28e>
 8009906:	42ae      	cmp	r6, r5
 8009908:	d113      	bne.n	8009932 <__gethex+0x28e>
 800990a:	2e01      	cmp	r6, #1
 800990c:	d10b      	bne.n	8009926 <__gethex+0x282>
 800990e:	9a02      	ldr	r2, [sp, #8]
 8009910:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	2301      	movs	r3, #1
 8009918:	6123      	str	r3, [r4, #16]
 800991a:	f8ca 3000 	str.w	r3, [sl]
 800991e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009920:	2562      	movs	r5, #98	@ 0x62
 8009922:	601c      	str	r4, [r3, #0]
 8009924:	e73a      	b.n	800979c <__gethex+0xf8>
 8009926:	1e71      	subs	r1, r6, #1
 8009928:	4620      	mov	r0, r4
 800992a:	f000 fee6 	bl	800a6fa <__any_on>
 800992e:	2800      	cmp	r0, #0
 8009930:	d1ed      	bne.n	800990e <__gethex+0x26a>
 8009932:	9801      	ldr	r0, [sp, #4]
 8009934:	4621      	mov	r1, r4
 8009936:	f000 fa8f 	bl	8009e58 <_Bfree>
 800993a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800993c:	2300      	movs	r3, #0
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	2550      	movs	r5, #80	@ 0x50
 8009942:	e72b      	b.n	800979c <__gethex+0xf8>
 8009944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1f3      	bne.n	8009932 <__gethex+0x28e>
 800994a:	e7e0      	b.n	800990e <__gethex+0x26a>
 800994c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1dd      	bne.n	800990e <__gethex+0x26a>
 8009952:	e7ee      	b.n	8009932 <__gethex+0x28e>
 8009954:	0800b678 	.word	0x0800b678
 8009958:	0800b823 	.word	0x0800b823
 800995c:	0800b834 	.word	0x0800b834
 8009960:	1e6f      	subs	r7, r5, #1
 8009962:	f1b9 0f00 	cmp.w	r9, #0
 8009966:	d130      	bne.n	80099ca <__gethex+0x326>
 8009968:	b127      	cbz	r7, 8009974 <__gethex+0x2d0>
 800996a:	4639      	mov	r1, r7
 800996c:	4620      	mov	r0, r4
 800996e:	f000 fec4 	bl	800a6fa <__any_on>
 8009972:	4681      	mov	r9, r0
 8009974:	117a      	asrs	r2, r7, #5
 8009976:	2301      	movs	r3, #1
 8009978:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800997c:	f007 071f 	and.w	r7, r7, #31
 8009980:	40bb      	lsls	r3, r7
 8009982:	4213      	tst	r3, r2
 8009984:	4629      	mov	r1, r5
 8009986:	4620      	mov	r0, r4
 8009988:	bf18      	it	ne
 800998a:	f049 0902 	orrne.w	r9, r9, #2
 800998e:	f7ff fe21 	bl	80095d4 <rshift>
 8009992:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009996:	1b76      	subs	r6, r6, r5
 8009998:	2502      	movs	r5, #2
 800999a:	f1b9 0f00 	cmp.w	r9, #0
 800999e:	d047      	beq.n	8009a30 <__gethex+0x38c>
 80099a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d015      	beq.n	80099d4 <__gethex+0x330>
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	d017      	beq.n	80099dc <__gethex+0x338>
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d109      	bne.n	80099c4 <__gethex+0x320>
 80099b0:	f019 0f02 	tst.w	r9, #2
 80099b4:	d006      	beq.n	80099c4 <__gethex+0x320>
 80099b6:	f8da 3000 	ldr.w	r3, [sl]
 80099ba:	ea49 0903 	orr.w	r9, r9, r3
 80099be:	f019 0f01 	tst.w	r9, #1
 80099c2:	d10e      	bne.n	80099e2 <__gethex+0x33e>
 80099c4:	f045 0510 	orr.w	r5, r5, #16
 80099c8:	e032      	b.n	8009a30 <__gethex+0x38c>
 80099ca:	f04f 0901 	mov.w	r9, #1
 80099ce:	e7d1      	b.n	8009974 <__gethex+0x2d0>
 80099d0:	2501      	movs	r5, #1
 80099d2:	e7e2      	b.n	800999a <__gethex+0x2f6>
 80099d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099d6:	f1c3 0301 	rsb	r3, r3, #1
 80099da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0f0      	beq.n	80099c4 <__gethex+0x320>
 80099e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099e6:	f104 0314 	add.w	r3, r4, #20
 80099ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80099ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80099f2:	f04f 0c00 	mov.w	ip, #0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a00:	d01b      	beq.n	8009a3a <__gethex+0x396>
 8009a02:	3201      	adds	r2, #1
 8009a04:	6002      	str	r2, [r0, #0]
 8009a06:	2d02      	cmp	r5, #2
 8009a08:	f104 0314 	add.w	r3, r4, #20
 8009a0c:	d13c      	bne.n	8009a88 <__gethex+0x3e4>
 8009a0e:	f8d8 2000 	ldr.w	r2, [r8]
 8009a12:	3a01      	subs	r2, #1
 8009a14:	42b2      	cmp	r2, r6
 8009a16:	d109      	bne.n	8009a2c <__gethex+0x388>
 8009a18:	1171      	asrs	r1, r6, #5
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a20:	f006 061f 	and.w	r6, r6, #31
 8009a24:	fa02 f606 	lsl.w	r6, r2, r6
 8009a28:	421e      	tst	r6, r3
 8009a2a:	d13a      	bne.n	8009aa2 <__gethex+0x3fe>
 8009a2c:	f045 0520 	orr.w	r5, r5, #32
 8009a30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a32:	601c      	str	r4, [r3, #0]
 8009a34:	9b02      	ldr	r3, [sp, #8]
 8009a36:	601f      	str	r7, [r3, #0]
 8009a38:	e6b0      	b.n	800979c <__gethex+0xf8>
 8009a3a:	4299      	cmp	r1, r3
 8009a3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a40:	d8d9      	bhi.n	80099f6 <__gethex+0x352>
 8009a42:	68a3      	ldr	r3, [r4, #8]
 8009a44:	459b      	cmp	fp, r3
 8009a46:	db17      	blt.n	8009a78 <__gethex+0x3d4>
 8009a48:	6861      	ldr	r1, [r4, #4]
 8009a4a:	9801      	ldr	r0, [sp, #4]
 8009a4c:	3101      	adds	r1, #1
 8009a4e:	f000 f9c3 	bl	8009dd8 <_Balloc>
 8009a52:	4681      	mov	r9, r0
 8009a54:	b918      	cbnz	r0, 8009a5e <__gethex+0x3ba>
 8009a56:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac0 <__gethex+0x41c>)
 8009a58:	4602      	mov	r2, r0
 8009a5a:	2184      	movs	r1, #132	@ 0x84
 8009a5c:	e6c5      	b.n	80097ea <__gethex+0x146>
 8009a5e:	6922      	ldr	r2, [r4, #16]
 8009a60:	3202      	adds	r2, #2
 8009a62:	f104 010c 	add.w	r1, r4, #12
 8009a66:	0092      	lsls	r2, r2, #2
 8009a68:	300c      	adds	r0, #12
 8009a6a:	f7fe fee0 	bl	800882e <memcpy>
 8009a6e:	4621      	mov	r1, r4
 8009a70:	9801      	ldr	r0, [sp, #4]
 8009a72:	f000 f9f1 	bl	8009e58 <_Bfree>
 8009a76:	464c      	mov	r4, r9
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a80:	6122      	str	r2, [r4, #16]
 8009a82:	2201      	movs	r2, #1
 8009a84:	615a      	str	r2, [r3, #20]
 8009a86:	e7be      	b.n	8009a06 <__gethex+0x362>
 8009a88:	6922      	ldr	r2, [r4, #16]
 8009a8a:	455a      	cmp	r2, fp
 8009a8c:	dd0b      	ble.n	8009aa6 <__gethex+0x402>
 8009a8e:	2101      	movs	r1, #1
 8009a90:	4620      	mov	r0, r4
 8009a92:	f7ff fd9f 	bl	80095d4 <rshift>
 8009a96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a9a:	3701      	adds	r7, #1
 8009a9c:	42bb      	cmp	r3, r7
 8009a9e:	f6ff aee0 	blt.w	8009862 <__gethex+0x1be>
 8009aa2:	2501      	movs	r5, #1
 8009aa4:	e7c2      	b.n	8009a2c <__gethex+0x388>
 8009aa6:	f016 061f 	ands.w	r6, r6, #31
 8009aaa:	d0fa      	beq.n	8009aa2 <__gethex+0x3fe>
 8009aac:	4453      	add	r3, sl
 8009aae:	f1c6 0620 	rsb	r6, r6, #32
 8009ab2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ab6:	f000 fa81 	bl	8009fbc <__hi0bits>
 8009aba:	42b0      	cmp	r0, r6
 8009abc:	dbe7      	blt.n	8009a8e <__gethex+0x3ea>
 8009abe:	e7f0      	b.n	8009aa2 <__gethex+0x3fe>
 8009ac0:	0800b823 	.word	0x0800b823

08009ac4 <L_shift>:
 8009ac4:	f1c2 0208 	rsb	r2, r2, #8
 8009ac8:	0092      	lsls	r2, r2, #2
 8009aca:	b570      	push	{r4, r5, r6, lr}
 8009acc:	f1c2 0620 	rsb	r6, r2, #32
 8009ad0:	6843      	ldr	r3, [r0, #4]
 8009ad2:	6804      	ldr	r4, [r0, #0]
 8009ad4:	fa03 f506 	lsl.w	r5, r3, r6
 8009ad8:	432c      	orrs	r4, r5
 8009ada:	40d3      	lsrs	r3, r2
 8009adc:	6004      	str	r4, [r0, #0]
 8009ade:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ae2:	4288      	cmp	r0, r1
 8009ae4:	d3f4      	bcc.n	8009ad0 <L_shift+0xc>
 8009ae6:	bd70      	pop	{r4, r5, r6, pc}

08009ae8 <__match>:
 8009ae8:	b530      	push	{r4, r5, lr}
 8009aea:	6803      	ldr	r3, [r0, #0]
 8009aec:	3301      	adds	r3, #1
 8009aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009af2:	b914      	cbnz	r4, 8009afa <__match+0x12>
 8009af4:	6003      	str	r3, [r0, #0]
 8009af6:	2001      	movs	r0, #1
 8009af8:	bd30      	pop	{r4, r5, pc}
 8009afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009afe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009b02:	2d19      	cmp	r5, #25
 8009b04:	bf98      	it	ls
 8009b06:	3220      	addls	r2, #32
 8009b08:	42a2      	cmp	r2, r4
 8009b0a:	d0f0      	beq.n	8009aee <__match+0x6>
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	e7f3      	b.n	8009af8 <__match+0x10>

08009b10 <__hexnan>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	680b      	ldr	r3, [r1, #0]
 8009b16:	6801      	ldr	r1, [r0, #0]
 8009b18:	115e      	asrs	r6, r3, #5
 8009b1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b1e:	f013 031f 	ands.w	r3, r3, #31
 8009b22:	b087      	sub	sp, #28
 8009b24:	bf18      	it	ne
 8009b26:	3604      	addne	r6, #4
 8009b28:	2500      	movs	r5, #0
 8009b2a:	1f37      	subs	r7, r6, #4
 8009b2c:	4682      	mov	sl, r0
 8009b2e:	4690      	mov	r8, r2
 8009b30:	9301      	str	r3, [sp, #4]
 8009b32:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b36:	46b9      	mov	r9, r7
 8009b38:	463c      	mov	r4, r7
 8009b3a:	9502      	str	r5, [sp, #8]
 8009b3c:	46ab      	mov	fp, r5
 8009b3e:	784a      	ldrb	r2, [r1, #1]
 8009b40:	1c4b      	adds	r3, r1, #1
 8009b42:	9303      	str	r3, [sp, #12]
 8009b44:	b342      	cbz	r2, 8009b98 <__hexnan+0x88>
 8009b46:	4610      	mov	r0, r2
 8009b48:	9105      	str	r1, [sp, #20]
 8009b4a:	9204      	str	r2, [sp, #16]
 8009b4c:	f7ff fd94 	bl	8009678 <__hexdig_fun>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d151      	bne.n	8009bf8 <__hexnan+0xe8>
 8009b54:	9a04      	ldr	r2, [sp, #16]
 8009b56:	9905      	ldr	r1, [sp, #20]
 8009b58:	2a20      	cmp	r2, #32
 8009b5a:	d818      	bhi.n	8009b8e <__hexnan+0x7e>
 8009b5c:	9b02      	ldr	r3, [sp, #8]
 8009b5e:	459b      	cmp	fp, r3
 8009b60:	dd13      	ble.n	8009b8a <__hexnan+0x7a>
 8009b62:	454c      	cmp	r4, r9
 8009b64:	d206      	bcs.n	8009b74 <__hexnan+0x64>
 8009b66:	2d07      	cmp	r5, #7
 8009b68:	dc04      	bgt.n	8009b74 <__hexnan+0x64>
 8009b6a:	462a      	mov	r2, r5
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f7ff ffa8 	bl	8009ac4 <L_shift>
 8009b74:	4544      	cmp	r4, r8
 8009b76:	d952      	bls.n	8009c1e <__hexnan+0x10e>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f1a4 0904 	sub.w	r9, r4, #4
 8009b7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b82:	f8cd b008 	str.w	fp, [sp, #8]
 8009b86:	464c      	mov	r4, r9
 8009b88:	461d      	mov	r5, r3
 8009b8a:	9903      	ldr	r1, [sp, #12]
 8009b8c:	e7d7      	b.n	8009b3e <__hexnan+0x2e>
 8009b8e:	2a29      	cmp	r2, #41	@ 0x29
 8009b90:	d157      	bne.n	8009c42 <__hexnan+0x132>
 8009b92:	3102      	adds	r1, #2
 8009b94:	f8ca 1000 	str.w	r1, [sl]
 8009b98:	f1bb 0f00 	cmp.w	fp, #0
 8009b9c:	d051      	beq.n	8009c42 <__hexnan+0x132>
 8009b9e:	454c      	cmp	r4, r9
 8009ba0:	d206      	bcs.n	8009bb0 <__hexnan+0xa0>
 8009ba2:	2d07      	cmp	r5, #7
 8009ba4:	dc04      	bgt.n	8009bb0 <__hexnan+0xa0>
 8009ba6:	462a      	mov	r2, r5
 8009ba8:	4649      	mov	r1, r9
 8009baa:	4620      	mov	r0, r4
 8009bac:	f7ff ff8a 	bl	8009ac4 <L_shift>
 8009bb0:	4544      	cmp	r4, r8
 8009bb2:	d936      	bls.n	8009c22 <__hexnan+0x112>
 8009bb4:	f1a8 0204 	sub.w	r2, r8, #4
 8009bb8:	4623      	mov	r3, r4
 8009bba:	f853 1b04 	ldr.w	r1, [r3], #4
 8009bbe:	f842 1f04 	str.w	r1, [r2, #4]!
 8009bc2:	429f      	cmp	r7, r3
 8009bc4:	d2f9      	bcs.n	8009bba <__hexnan+0xaa>
 8009bc6:	1b3b      	subs	r3, r7, r4
 8009bc8:	f023 0303 	bic.w	r3, r3, #3
 8009bcc:	3304      	adds	r3, #4
 8009bce:	3401      	adds	r4, #1
 8009bd0:	3e03      	subs	r6, #3
 8009bd2:	42b4      	cmp	r4, r6
 8009bd4:	bf88      	it	hi
 8009bd6:	2304      	movhi	r3, #4
 8009bd8:	4443      	add	r3, r8
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f843 2b04 	str.w	r2, [r3], #4
 8009be0:	429f      	cmp	r7, r3
 8009be2:	d2fb      	bcs.n	8009bdc <__hexnan+0xcc>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	b91b      	cbnz	r3, 8009bf0 <__hexnan+0xe0>
 8009be8:	4547      	cmp	r7, r8
 8009bea:	d128      	bne.n	8009c3e <__hexnan+0x12e>
 8009bec:	2301      	movs	r3, #1
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	2005      	movs	r0, #5
 8009bf2:	b007      	add	sp, #28
 8009bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf8:	3501      	adds	r5, #1
 8009bfa:	2d08      	cmp	r5, #8
 8009bfc:	f10b 0b01 	add.w	fp, fp, #1
 8009c00:	dd06      	ble.n	8009c10 <__hexnan+0x100>
 8009c02:	4544      	cmp	r4, r8
 8009c04:	d9c1      	bls.n	8009b8a <__hexnan+0x7a>
 8009c06:	2300      	movs	r3, #0
 8009c08:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c0c:	2501      	movs	r5, #1
 8009c0e:	3c04      	subs	r4, #4
 8009c10:	6822      	ldr	r2, [r4, #0]
 8009c12:	f000 000f 	and.w	r0, r0, #15
 8009c16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c1a:	6020      	str	r0, [r4, #0]
 8009c1c:	e7b5      	b.n	8009b8a <__hexnan+0x7a>
 8009c1e:	2508      	movs	r5, #8
 8009c20:	e7b3      	b.n	8009b8a <__hexnan+0x7a>
 8009c22:	9b01      	ldr	r3, [sp, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d0dd      	beq.n	8009be4 <__hexnan+0xd4>
 8009c28:	f1c3 0320 	rsb	r3, r3, #32
 8009c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c30:	40da      	lsrs	r2, r3
 8009c32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c36:	4013      	ands	r3, r2
 8009c38:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c3c:	e7d2      	b.n	8009be4 <__hexnan+0xd4>
 8009c3e:	3f04      	subs	r7, #4
 8009c40:	e7d0      	b.n	8009be4 <__hexnan+0xd4>
 8009c42:	2004      	movs	r0, #4
 8009c44:	e7d5      	b.n	8009bf2 <__hexnan+0xe2>
	...

08009c48 <malloc>:
 8009c48:	4b02      	ldr	r3, [pc, #8]	@ (8009c54 <malloc+0xc>)
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	f000 b825 	b.w	8009c9c <_malloc_r>
 8009c52:	bf00      	nop
 8009c54:	20000184 	.word	0x20000184

08009c58 <sbrk_aligned>:
 8009c58:	b570      	push	{r4, r5, r6, lr}
 8009c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8009c98 <sbrk_aligned+0x40>)
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	6831      	ldr	r1, [r6, #0]
 8009c60:	4605      	mov	r5, r0
 8009c62:	b911      	cbnz	r1, 8009c6a <sbrk_aligned+0x12>
 8009c64:	f001 f822 	bl	800acac <_sbrk_r>
 8009c68:	6030      	str	r0, [r6, #0]
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	f001 f81d 	bl	800acac <_sbrk_r>
 8009c72:	1c43      	adds	r3, r0, #1
 8009c74:	d103      	bne.n	8009c7e <sbrk_aligned+0x26>
 8009c76:	f04f 34ff 	mov.w	r4, #4294967295
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	bd70      	pop	{r4, r5, r6, pc}
 8009c7e:	1cc4      	adds	r4, r0, #3
 8009c80:	f024 0403 	bic.w	r4, r4, #3
 8009c84:	42a0      	cmp	r0, r4
 8009c86:	d0f8      	beq.n	8009c7a <sbrk_aligned+0x22>
 8009c88:	1a21      	subs	r1, r4, r0
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f001 f80e 	bl	800acac <_sbrk_r>
 8009c90:	3001      	adds	r0, #1
 8009c92:	d1f2      	bne.n	8009c7a <sbrk_aligned+0x22>
 8009c94:	e7ef      	b.n	8009c76 <sbrk_aligned+0x1e>
 8009c96:	bf00      	nop
 8009c98:	200006d4 	.word	0x200006d4

08009c9c <_malloc_r>:
 8009c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca0:	1ccd      	adds	r5, r1, #3
 8009ca2:	f025 0503 	bic.w	r5, r5, #3
 8009ca6:	3508      	adds	r5, #8
 8009ca8:	2d0c      	cmp	r5, #12
 8009caa:	bf38      	it	cc
 8009cac:	250c      	movcc	r5, #12
 8009cae:	2d00      	cmp	r5, #0
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	db01      	blt.n	8009cb8 <_malloc_r+0x1c>
 8009cb4:	42a9      	cmp	r1, r5
 8009cb6:	d904      	bls.n	8009cc2 <_malloc_r+0x26>
 8009cb8:	230c      	movs	r3, #12
 8009cba:	6033      	str	r3, [r6, #0]
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d98 <_malloc_r+0xfc>
 8009cc6:	f000 f87b 	bl	8009dc0 <__malloc_lock>
 8009cca:	f8d8 3000 	ldr.w	r3, [r8]
 8009cce:	461c      	mov	r4, r3
 8009cd0:	bb44      	cbnz	r4, 8009d24 <_malloc_r+0x88>
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f7ff ffbf 	bl	8009c58 <sbrk_aligned>
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	4604      	mov	r4, r0
 8009cde:	d158      	bne.n	8009d92 <_malloc_r+0xf6>
 8009ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8009ce4:	4627      	mov	r7, r4
 8009ce6:	2f00      	cmp	r7, #0
 8009ce8:	d143      	bne.n	8009d72 <_malloc_r+0xd6>
 8009cea:	2c00      	cmp	r4, #0
 8009cec:	d04b      	beq.n	8009d86 <_malloc_r+0xea>
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	4639      	mov	r1, r7
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	eb04 0903 	add.w	r9, r4, r3
 8009cf8:	f000 ffd8 	bl	800acac <_sbrk_r>
 8009cfc:	4581      	cmp	r9, r0
 8009cfe:	d142      	bne.n	8009d86 <_malloc_r+0xea>
 8009d00:	6821      	ldr	r1, [r4, #0]
 8009d02:	1a6d      	subs	r5, r5, r1
 8009d04:	4629      	mov	r1, r5
 8009d06:	4630      	mov	r0, r6
 8009d08:	f7ff ffa6 	bl	8009c58 <sbrk_aligned>
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	d03a      	beq.n	8009d86 <_malloc_r+0xea>
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	442b      	add	r3, r5
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	f8d8 3000 	ldr.w	r3, [r8]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	bb62      	cbnz	r2, 8009d78 <_malloc_r+0xdc>
 8009d1e:	f8c8 7000 	str.w	r7, [r8]
 8009d22:	e00f      	b.n	8009d44 <_malloc_r+0xa8>
 8009d24:	6822      	ldr	r2, [r4, #0]
 8009d26:	1b52      	subs	r2, r2, r5
 8009d28:	d420      	bmi.n	8009d6c <_malloc_r+0xd0>
 8009d2a:	2a0b      	cmp	r2, #11
 8009d2c:	d917      	bls.n	8009d5e <_malloc_r+0xc2>
 8009d2e:	1961      	adds	r1, r4, r5
 8009d30:	42a3      	cmp	r3, r4
 8009d32:	6025      	str	r5, [r4, #0]
 8009d34:	bf18      	it	ne
 8009d36:	6059      	strne	r1, [r3, #4]
 8009d38:	6863      	ldr	r3, [r4, #4]
 8009d3a:	bf08      	it	eq
 8009d3c:	f8c8 1000 	streq.w	r1, [r8]
 8009d40:	5162      	str	r2, [r4, r5]
 8009d42:	604b      	str	r3, [r1, #4]
 8009d44:	4630      	mov	r0, r6
 8009d46:	f000 f841 	bl	8009dcc <__malloc_unlock>
 8009d4a:	f104 000b 	add.w	r0, r4, #11
 8009d4e:	1d23      	adds	r3, r4, #4
 8009d50:	f020 0007 	bic.w	r0, r0, #7
 8009d54:	1ac2      	subs	r2, r0, r3
 8009d56:	bf1c      	itt	ne
 8009d58:	1a1b      	subne	r3, r3, r0
 8009d5a:	50a3      	strne	r3, [r4, r2]
 8009d5c:	e7af      	b.n	8009cbe <_malloc_r+0x22>
 8009d5e:	6862      	ldr	r2, [r4, #4]
 8009d60:	42a3      	cmp	r3, r4
 8009d62:	bf0c      	ite	eq
 8009d64:	f8c8 2000 	streq.w	r2, [r8]
 8009d68:	605a      	strne	r2, [r3, #4]
 8009d6a:	e7eb      	b.n	8009d44 <_malloc_r+0xa8>
 8009d6c:	4623      	mov	r3, r4
 8009d6e:	6864      	ldr	r4, [r4, #4]
 8009d70:	e7ae      	b.n	8009cd0 <_malloc_r+0x34>
 8009d72:	463c      	mov	r4, r7
 8009d74:	687f      	ldr	r7, [r7, #4]
 8009d76:	e7b6      	b.n	8009ce6 <_malloc_r+0x4a>
 8009d78:	461a      	mov	r2, r3
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	42a3      	cmp	r3, r4
 8009d7e:	d1fb      	bne.n	8009d78 <_malloc_r+0xdc>
 8009d80:	2300      	movs	r3, #0
 8009d82:	6053      	str	r3, [r2, #4]
 8009d84:	e7de      	b.n	8009d44 <_malloc_r+0xa8>
 8009d86:	230c      	movs	r3, #12
 8009d88:	6033      	str	r3, [r6, #0]
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f000 f81e 	bl	8009dcc <__malloc_unlock>
 8009d90:	e794      	b.n	8009cbc <_malloc_r+0x20>
 8009d92:	6005      	str	r5, [r0, #0]
 8009d94:	e7d6      	b.n	8009d44 <_malloc_r+0xa8>
 8009d96:	bf00      	nop
 8009d98:	200006d8 	.word	0x200006d8

08009d9c <__ascii_mbtowc>:
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	b901      	cbnz	r1, 8009da2 <__ascii_mbtowc+0x6>
 8009da0:	a901      	add	r1, sp, #4
 8009da2:	b142      	cbz	r2, 8009db6 <__ascii_mbtowc+0x1a>
 8009da4:	b14b      	cbz	r3, 8009dba <__ascii_mbtowc+0x1e>
 8009da6:	7813      	ldrb	r3, [r2, #0]
 8009da8:	600b      	str	r3, [r1, #0]
 8009daa:	7812      	ldrb	r2, [r2, #0]
 8009dac:	1e10      	subs	r0, r2, #0
 8009dae:	bf18      	it	ne
 8009db0:	2001      	movne	r0, #1
 8009db2:	b002      	add	sp, #8
 8009db4:	4770      	bx	lr
 8009db6:	4610      	mov	r0, r2
 8009db8:	e7fb      	b.n	8009db2 <__ascii_mbtowc+0x16>
 8009dba:	f06f 0001 	mvn.w	r0, #1
 8009dbe:	e7f8      	b.n	8009db2 <__ascii_mbtowc+0x16>

08009dc0 <__malloc_lock>:
 8009dc0:	4801      	ldr	r0, [pc, #4]	@ (8009dc8 <__malloc_lock+0x8>)
 8009dc2:	f7fe bd32 	b.w	800882a <__retarget_lock_acquire_recursive>
 8009dc6:	bf00      	nop
 8009dc8:	200006d0 	.word	0x200006d0

08009dcc <__malloc_unlock>:
 8009dcc:	4801      	ldr	r0, [pc, #4]	@ (8009dd4 <__malloc_unlock+0x8>)
 8009dce:	f7fe bd2d 	b.w	800882c <__retarget_lock_release_recursive>
 8009dd2:	bf00      	nop
 8009dd4:	200006d0 	.word	0x200006d0

08009dd8 <_Balloc>:
 8009dd8:	b570      	push	{r4, r5, r6, lr}
 8009dda:	69c6      	ldr	r6, [r0, #28]
 8009ddc:	4604      	mov	r4, r0
 8009dde:	460d      	mov	r5, r1
 8009de0:	b976      	cbnz	r6, 8009e00 <_Balloc+0x28>
 8009de2:	2010      	movs	r0, #16
 8009de4:	f7ff ff30 	bl	8009c48 <malloc>
 8009de8:	4602      	mov	r2, r0
 8009dea:	61e0      	str	r0, [r4, #28]
 8009dec:	b920      	cbnz	r0, 8009df8 <_Balloc+0x20>
 8009dee:	4b18      	ldr	r3, [pc, #96]	@ (8009e50 <_Balloc+0x78>)
 8009df0:	4818      	ldr	r0, [pc, #96]	@ (8009e54 <_Balloc+0x7c>)
 8009df2:	216b      	movs	r1, #107	@ 0x6b
 8009df4:	f7fe fd3a 	bl	800886c <__assert_func>
 8009df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dfc:	6006      	str	r6, [r0, #0]
 8009dfe:	60c6      	str	r6, [r0, #12]
 8009e00:	69e6      	ldr	r6, [r4, #28]
 8009e02:	68f3      	ldr	r3, [r6, #12]
 8009e04:	b183      	cbz	r3, 8009e28 <_Balloc+0x50>
 8009e06:	69e3      	ldr	r3, [r4, #28]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e0e:	b9b8      	cbnz	r0, 8009e40 <_Balloc+0x68>
 8009e10:	2101      	movs	r1, #1
 8009e12:	fa01 f605 	lsl.w	r6, r1, r5
 8009e16:	1d72      	adds	r2, r6, #5
 8009e18:	0092      	lsls	r2, r2, #2
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f000 ff5d 	bl	800acda <_calloc_r>
 8009e20:	b160      	cbz	r0, 8009e3c <_Balloc+0x64>
 8009e22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e26:	e00e      	b.n	8009e46 <_Balloc+0x6e>
 8009e28:	2221      	movs	r2, #33	@ 0x21
 8009e2a:	2104      	movs	r1, #4
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 ff54 	bl	800acda <_calloc_r>
 8009e32:	69e3      	ldr	r3, [r4, #28]
 8009e34:	60f0      	str	r0, [r6, #12]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1e4      	bne.n	8009e06 <_Balloc+0x2e>
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	bd70      	pop	{r4, r5, r6, pc}
 8009e40:	6802      	ldr	r2, [r0, #0]
 8009e42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e46:	2300      	movs	r3, #0
 8009e48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e4c:	e7f7      	b.n	8009e3e <_Balloc+0x66>
 8009e4e:	bf00      	nop
 8009e50:	0800b709 	.word	0x0800b709
 8009e54:	0800b894 	.word	0x0800b894

08009e58 <_Bfree>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	69c6      	ldr	r6, [r0, #28]
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	460c      	mov	r4, r1
 8009e60:	b976      	cbnz	r6, 8009e80 <_Bfree+0x28>
 8009e62:	2010      	movs	r0, #16
 8009e64:	f7ff fef0 	bl	8009c48 <malloc>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	61e8      	str	r0, [r5, #28]
 8009e6c:	b920      	cbnz	r0, 8009e78 <_Bfree+0x20>
 8009e6e:	4b09      	ldr	r3, [pc, #36]	@ (8009e94 <_Bfree+0x3c>)
 8009e70:	4809      	ldr	r0, [pc, #36]	@ (8009e98 <_Bfree+0x40>)
 8009e72:	218f      	movs	r1, #143	@ 0x8f
 8009e74:	f7fe fcfa 	bl	800886c <__assert_func>
 8009e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e7c:	6006      	str	r6, [r0, #0]
 8009e7e:	60c6      	str	r6, [r0, #12]
 8009e80:	b13c      	cbz	r4, 8009e92 <_Bfree+0x3a>
 8009e82:	69eb      	ldr	r3, [r5, #28]
 8009e84:	6862      	ldr	r2, [r4, #4]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e8c:	6021      	str	r1, [r4, #0]
 8009e8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	0800b709 	.word	0x0800b709
 8009e98:	0800b894 	.word	0x0800b894

08009e9c <__multadd>:
 8009e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea0:	690d      	ldr	r5, [r1, #16]
 8009ea2:	4607      	mov	r7, r0
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	461e      	mov	r6, r3
 8009ea8:	f101 0c14 	add.w	ip, r1, #20
 8009eac:	2000      	movs	r0, #0
 8009eae:	f8dc 3000 	ldr.w	r3, [ip]
 8009eb2:	b299      	uxth	r1, r3
 8009eb4:	fb02 6101 	mla	r1, r2, r1, r6
 8009eb8:	0c1e      	lsrs	r6, r3, #16
 8009eba:	0c0b      	lsrs	r3, r1, #16
 8009ebc:	fb02 3306 	mla	r3, r2, r6, r3
 8009ec0:	b289      	uxth	r1, r1
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ec8:	4285      	cmp	r5, r0
 8009eca:	f84c 1b04 	str.w	r1, [ip], #4
 8009ece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ed2:	dcec      	bgt.n	8009eae <__multadd+0x12>
 8009ed4:	b30e      	cbz	r6, 8009f1a <__multadd+0x7e>
 8009ed6:	68a3      	ldr	r3, [r4, #8]
 8009ed8:	42ab      	cmp	r3, r5
 8009eda:	dc19      	bgt.n	8009f10 <__multadd+0x74>
 8009edc:	6861      	ldr	r1, [r4, #4]
 8009ede:	4638      	mov	r0, r7
 8009ee0:	3101      	adds	r1, #1
 8009ee2:	f7ff ff79 	bl	8009dd8 <_Balloc>
 8009ee6:	4680      	mov	r8, r0
 8009ee8:	b928      	cbnz	r0, 8009ef6 <__multadd+0x5a>
 8009eea:	4602      	mov	r2, r0
 8009eec:	4b0c      	ldr	r3, [pc, #48]	@ (8009f20 <__multadd+0x84>)
 8009eee:	480d      	ldr	r0, [pc, #52]	@ (8009f24 <__multadd+0x88>)
 8009ef0:	21ba      	movs	r1, #186	@ 0xba
 8009ef2:	f7fe fcbb 	bl	800886c <__assert_func>
 8009ef6:	6922      	ldr	r2, [r4, #16]
 8009ef8:	3202      	adds	r2, #2
 8009efa:	f104 010c 	add.w	r1, r4, #12
 8009efe:	0092      	lsls	r2, r2, #2
 8009f00:	300c      	adds	r0, #12
 8009f02:	f7fe fc94 	bl	800882e <memcpy>
 8009f06:	4621      	mov	r1, r4
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7ff ffa5 	bl	8009e58 <_Bfree>
 8009f0e:	4644      	mov	r4, r8
 8009f10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f14:	3501      	adds	r5, #1
 8009f16:	615e      	str	r6, [r3, #20]
 8009f18:	6125      	str	r5, [r4, #16]
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f20:	0800b823 	.word	0x0800b823
 8009f24:	0800b894 	.word	0x0800b894

08009f28 <__s2b>:
 8009f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	4615      	mov	r5, r2
 8009f30:	461f      	mov	r7, r3
 8009f32:	2209      	movs	r2, #9
 8009f34:	3308      	adds	r3, #8
 8009f36:	4606      	mov	r6, r0
 8009f38:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	2201      	movs	r2, #1
 8009f40:	429a      	cmp	r2, r3
 8009f42:	db09      	blt.n	8009f58 <__s2b+0x30>
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7ff ff47 	bl	8009dd8 <_Balloc>
 8009f4a:	b940      	cbnz	r0, 8009f5e <__s2b+0x36>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	4b19      	ldr	r3, [pc, #100]	@ (8009fb4 <__s2b+0x8c>)
 8009f50:	4819      	ldr	r0, [pc, #100]	@ (8009fb8 <__s2b+0x90>)
 8009f52:	21d3      	movs	r1, #211	@ 0xd3
 8009f54:	f7fe fc8a 	bl	800886c <__assert_func>
 8009f58:	0052      	lsls	r2, r2, #1
 8009f5a:	3101      	adds	r1, #1
 8009f5c:	e7f0      	b.n	8009f40 <__s2b+0x18>
 8009f5e:	9b08      	ldr	r3, [sp, #32]
 8009f60:	6143      	str	r3, [r0, #20]
 8009f62:	2d09      	cmp	r5, #9
 8009f64:	f04f 0301 	mov.w	r3, #1
 8009f68:	6103      	str	r3, [r0, #16]
 8009f6a:	dd16      	ble.n	8009f9a <__s2b+0x72>
 8009f6c:	f104 0909 	add.w	r9, r4, #9
 8009f70:	46c8      	mov	r8, r9
 8009f72:	442c      	add	r4, r5
 8009f74:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f78:	4601      	mov	r1, r0
 8009f7a:	3b30      	subs	r3, #48	@ 0x30
 8009f7c:	220a      	movs	r2, #10
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f7ff ff8c 	bl	8009e9c <__multadd>
 8009f84:	45a0      	cmp	r8, r4
 8009f86:	d1f5      	bne.n	8009f74 <__s2b+0x4c>
 8009f88:	f1a5 0408 	sub.w	r4, r5, #8
 8009f8c:	444c      	add	r4, r9
 8009f8e:	1b2d      	subs	r5, r5, r4
 8009f90:	1963      	adds	r3, r4, r5
 8009f92:	42bb      	cmp	r3, r7
 8009f94:	db04      	blt.n	8009fa0 <__s2b+0x78>
 8009f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9a:	340a      	adds	r4, #10
 8009f9c:	2509      	movs	r5, #9
 8009f9e:	e7f6      	b.n	8009f8e <__s2b+0x66>
 8009fa0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fa4:	4601      	mov	r1, r0
 8009fa6:	3b30      	subs	r3, #48	@ 0x30
 8009fa8:	220a      	movs	r2, #10
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff ff76 	bl	8009e9c <__multadd>
 8009fb0:	e7ee      	b.n	8009f90 <__s2b+0x68>
 8009fb2:	bf00      	nop
 8009fb4:	0800b823 	.word	0x0800b823
 8009fb8:	0800b894 	.word	0x0800b894

08009fbc <__hi0bits>:
 8009fbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	bf36      	itet	cc
 8009fc4:	0403      	lslcc	r3, r0, #16
 8009fc6:	2000      	movcs	r0, #0
 8009fc8:	2010      	movcc	r0, #16
 8009fca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fce:	bf3c      	itt	cc
 8009fd0:	021b      	lslcc	r3, r3, #8
 8009fd2:	3008      	addcc	r0, #8
 8009fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fd8:	bf3c      	itt	cc
 8009fda:	011b      	lslcc	r3, r3, #4
 8009fdc:	3004      	addcc	r0, #4
 8009fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fe2:	bf3c      	itt	cc
 8009fe4:	009b      	lslcc	r3, r3, #2
 8009fe6:	3002      	addcc	r0, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	db05      	blt.n	8009ff8 <__hi0bits+0x3c>
 8009fec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ff0:	f100 0001 	add.w	r0, r0, #1
 8009ff4:	bf08      	it	eq
 8009ff6:	2020      	moveq	r0, #32
 8009ff8:	4770      	bx	lr

08009ffa <__lo0bits>:
 8009ffa:	6803      	ldr	r3, [r0, #0]
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	f013 0007 	ands.w	r0, r3, #7
 800a002:	d00b      	beq.n	800a01c <__lo0bits+0x22>
 800a004:	07d9      	lsls	r1, r3, #31
 800a006:	d421      	bmi.n	800a04c <__lo0bits+0x52>
 800a008:	0798      	lsls	r0, r3, #30
 800a00a:	bf49      	itett	mi
 800a00c:	085b      	lsrmi	r3, r3, #1
 800a00e:	089b      	lsrpl	r3, r3, #2
 800a010:	2001      	movmi	r0, #1
 800a012:	6013      	strmi	r3, [r2, #0]
 800a014:	bf5c      	itt	pl
 800a016:	6013      	strpl	r3, [r2, #0]
 800a018:	2002      	movpl	r0, #2
 800a01a:	4770      	bx	lr
 800a01c:	b299      	uxth	r1, r3
 800a01e:	b909      	cbnz	r1, 800a024 <__lo0bits+0x2a>
 800a020:	0c1b      	lsrs	r3, r3, #16
 800a022:	2010      	movs	r0, #16
 800a024:	b2d9      	uxtb	r1, r3
 800a026:	b909      	cbnz	r1, 800a02c <__lo0bits+0x32>
 800a028:	3008      	adds	r0, #8
 800a02a:	0a1b      	lsrs	r3, r3, #8
 800a02c:	0719      	lsls	r1, r3, #28
 800a02e:	bf04      	itt	eq
 800a030:	091b      	lsreq	r3, r3, #4
 800a032:	3004      	addeq	r0, #4
 800a034:	0799      	lsls	r1, r3, #30
 800a036:	bf04      	itt	eq
 800a038:	089b      	lsreq	r3, r3, #2
 800a03a:	3002      	addeq	r0, #2
 800a03c:	07d9      	lsls	r1, r3, #31
 800a03e:	d403      	bmi.n	800a048 <__lo0bits+0x4e>
 800a040:	085b      	lsrs	r3, r3, #1
 800a042:	f100 0001 	add.w	r0, r0, #1
 800a046:	d003      	beq.n	800a050 <__lo0bits+0x56>
 800a048:	6013      	str	r3, [r2, #0]
 800a04a:	4770      	bx	lr
 800a04c:	2000      	movs	r0, #0
 800a04e:	4770      	bx	lr
 800a050:	2020      	movs	r0, #32
 800a052:	4770      	bx	lr

0800a054 <__i2b>:
 800a054:	b510      	push	{r4, lr}
 800a056:	460c      	mov	r4, r1
 800a058:	2101      	movs	r1, #1
 800a05a:	f7ff febd 	bl	8009dd8 <_Balloc>
 800a05e:	4602      	mov	r2, r0
 800a060:	b928      	cbnz	r0, 800a06e <__i2b+0x1a>
 800a062:	4b05      	ldr	r3, [pc, #20]	@ (800a078 <__i2b+0x24>)
 800a064:	4805      	ldr	r0, [pc, #20]	@ (800a07c <__i2b+0x28>)
 800a066:	f240 1145 	movw	r1, #325	@ 0x145
 800a06a:	f7fe fbff 	bl	800886c <__assert_func>
 800a06e:	2301      	movs	r3, #1
 800a070:	6144      	str	r4, [r0, #20]
 800a072:	6103      	str	r3, [r0, #16]
 800a074:	bd10      	pop	{r4, pc}
 800a076:	bf00      	nop
 800a078:	0800b823 	.word	0x0800b823
 800a07c:	0800b894 	.word	0x0800b894

0800a080 <__multiply>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	4614      	mov	r4, r2
 800a086:	690a      	ldr	r2, [r1, #16]
 800a088:	6923      	ldr	r3, [r4, #16]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	bfa8      	it	ge
 800a08e:	4623      	movge	r3, r4
 800a090:	460f      	mov	r7, r1
 800a092:	bfa4      	itt	ge
 800a094:	460c      	movge	r4, r1
 800a096:	461f      	movge	r7, r3
 800a098:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a09c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a0a0:	68a3      	ldr	r3, [r4, #8]
 800a0a2:	6861      	ldr	r1, [r4, #4]
 800a0a4:	eb0a 0609 	add.w	r6, sl, r9
 800a0a8:	42b3      	cmp	r3, r6
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	bfb8      	it	lt
 800a0ae:	3101      	addlt	r1, #1
 800a0b0:	f7ff fe92 	bl	8009dd8 <_Balloc>
 800a0b4:	b930      	cbnz	r0, 800a0c4 <__multiply+0x44>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	4b44      	ldr	r3, [pc, #272]	@ (800a1cc <__multiply+0x14c>)
 800a0ba:	4845      	ldr	r0, [pc, #276]	@ (800a1d0 <__multiply+0x150>)
 800a0bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a0c0:	f7fe fbd4 	bl	800886c <__assert_func>
 800a0c4:	f100 0514 	add.w	r5, r0, #20
 800a0c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0cc:	462b      	mov	r3, r5
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	4543      	cmp	r3, r8
 800a0d2:	d321      	bcc.n	800a118 <__multiply+0x98>
 800a0d4:	f107 0114 	add.w	r1, r7, #20
 800a0d8:	f104 0214 	add.w	r2, r4, #20
 800a0dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a0e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a0e4:	9302      	str	r3, [sp, #8]
 800a0e6:	1b13      	subs	r3, r2, r4
 800a0e8:	3b15      	subs	r3, #21
 800a0ea:	f023 0303 	bic.w	r3, r3, #3
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	f104 0715 	add.w	r7, r4, #21
 800a0f4:	42ba      	cmp	r2, r7
 800a0f6:	bf38      	it	cc
 800a0f8:	2304      	movcc	r3, #4
 800a0fa:	9301      	str	r3, [sp, #4]
 800a0fc:	9b02      	ldr	r3, [sp, #8]
 800a0fe:	9103      	str	r1, [sp, #12]
 800a100:	428b      	cmp	r3, r1
 800a102:	d80c      	bhi.n	800a11e <__multiply+0x9e>
 800a104:	2e00      	cmp	r6, #0
 800a106:	dd03      	ble.n	800a110 <__multiply+0x90>
 800a108:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d05b      	beq.n	800a1c8 <__multiply+0x148>
 800a110:	6106      	str	r6, [r0, #16]
 800a112:	b005      	add	sp, #20
 800a114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a118:	f843 2b04 	str.w	r2, [r3], #4
 800a11c:	e7d8      	b.n	800a0d0 <__multiply+0x50>
 800a11e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a122:	f1ba 0f00 	cmp.w	sl, #0
 800a126:	d024      	beq.n	800a172 <__multiply+0xf2>
 800a128:	f104 0e14 	add.w	lr, r4, #20
 800a12c:	46a9      	mov	r9, r5
 800a12e:	f04f 0c00 	mov.w	ip, #0
 800a132:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a136:	f8d9 3000 	ldr.w	r3, [r9]
 800a13a:	fa1f fb87 	uxth.w	fp, r7
 800a13e:	b29b      	uxth	r3, r3
 800a140:	fb0a 330b 	mla	r3, sl, fp, r3
 800a144:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a148:	f8d9 7000 	ldr.w	r7, [r9]
 800a14c:	4463      	add	r3, ip
 800a14e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a152:	fb0a c70b 	mla	r7, sl, fp, ip
 800a156:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a160:	4572      	cmp	r2, lr
 800a162:	f849 3b04 	str.w	r3, [r9], #4
 800a166:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a16a:	d8e2      	bhi.n	800a132 <__multiply+0xb2>
 800a16c:	9b01      	ldr	r3, [sp, #4]
 800a16e:	f845 c003 	str.w	ip, [r5, r3]
 800a172:	9b03      	ldr	r3, [sp, #12]
 800a174:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a178:	3104      	adds	r1, #4
 800a17a:	f1b9 0f00 	cmp.w	r9, #0
 800a17e:	d021      	beq.n	800a1c4 <__multiply+0x144>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	f104 0c14 	add.w	ip, r4, #20
 800a186:	46ae      	mov	lr, r5
 800a188:	f04f 0a00 	mov.w	sl, #0
 800a18c:	f8bc b000 	ldrh.w	fp, [ip]
 800a190:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a194:	fb09 770b 	mla	r7, r9, fp, r7
 800a198:	4457      	add	r7, sl
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1a0:	f84e 3b04 	str.w	r3, [lr], #4
 800a1a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1ac:	f8be 3000 	ldrh.w	r3, [lr]
 800a1b0:	fb09 330a 	mla	r3, r9, sl, r3
 800a1b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a1b8:	4562      	cmp	r2, ip
 800a1ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1be:	d8e5      	bhi.n	800a18c <__multiply+0x10c>
 800a1c0:	9f01      	ldr	r7, [sp, #4]
 800a1c2:	51eb      	str	r3, [r5, r7]
 800a1c4:	3504      	adds	r5, #4
 800a1c6:	e799      	b.n	800a0fc <__multiply+0x7c>
 800a1c8:	3e01      	subs	r6, #1
 800a1ca:	e79b      	b.n	800a104 <__multiply+0x84>
 800a1cc:	0800b823 	.word	0x0800b823
 800a1d0:	0800b894 	.word	0x0800b894

0800a1d4 <__pow5mult>:
 800a1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d8:	4615      	mov	r5, r2
 800a1da:	f012 0203 	ands.w	r2, r2, #3
 800a1de:	4607      	mov	r7, r0
 800a1e0:	460e      	mov	r6, r1
 800a1e2:	d007      	beq.n	800a1f4 <__pow5mult+0x20>
 800a1e4:	4c25      	ldr	r4, [pc, #148]	@ (800a27c <__pow5mult+0xa8>)
 800a1e6:	3a01      	subs	r2, #1
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1ee:	f7ff fe55 	bl	8009e9c <__multadd>
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	10ad      	asrs	r5, r5, #2
 800a1f6:	d03d      	beq.n	800a274 <__pow5mult+0xa0>
 800a1f8:	69fc      	ldr	r4, [r7, #28]
 800a1fa:	b97c      	cbnz	r4, 800a21c <__pow5mult+0x48>
 800a1fc:	2010      	movs	r0, #16
 800a1fe:	f7ff fd23 	bl	8009c48 <malloc>
 800a202:	4602      	mov	r2, r0
 800a204:	61f8      	str	r0, [r7, #28]
 800a206:	b928      	cbnz	r0, 800a214 <__pow5mult+0x40>
 800a208:	4b1d      	ldr	r3, [pc, #116]	@ (800a280 <__pow5mult+0xac>)
 800a20a:	481e      	ldr	r0, [pc, #120]	@ (800a284 <__pow5mult+0xb0>)
 800a20c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a210:	f7fe fb2c 	bl	800886c <__assert_func>
 800a214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a218:	6004      	str	r4, [r0, #0]
 800a21a:	60c4      	str	r4, [r0, #12]
 800a21c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a224:	b94c      	cbnz	r4, 800a23a <__pow5mult+0x66>
 800a226:	f240 2171 	movw	r1, #625	@ 0x271
 800a22a:	4638      	mov	r0, r7
 800a22c:	f7ff ff12 	bl	800a054 <__i2b>
 800a230:	2300      	movs	r3, #0
 800a232:	f8c8 0008 	str.w	r0, [r8, #8]
 800a236:	4604      	mov	r4, r0
 800a238:	6003      	str	r3, [r0, #0]
 800a23a:	f04f 0900 	mov.w	r9, #0
 800a23e:	07eb      	lsls	r3, r5, #31
 800a240:	d50a      	bpl.n	800a258 <__pow5mult+0x84>
 800a242:	4631      	mov	r1, r6
 800a244:	4622      	mov	r2, r4
 800a246:	4638      	mov	r0, r7
 800a248:	f7ff ff1a 	bl	800a080 <__multiply>
 800a24c:	4631      	mov	r1, r6
 800a24e:	4680      	mov	r8, r0
 800a250:	4638      	mov	r0, r7
 800a252:	f7ff fe01 	bl	8009e58 <_Bfree>
 800a256:	4646      	mov	r6, r8
 800a258:	106d      	asrs	r5, r5, #1
 800a25a:	d00b      	beq.n	800a274 <__pow5mult+0xa0>
 800a25c:	6820      	ldr	r0, [r4, #0]
 800a25e:	b938      	cbnz	r0, 800a270 <__pow5mult+0x9c>
 800a260:	4622      	mov	r2, r4
 800a262:	4621      	mov	r1, r4
 800a264:	4638      	mov	r0, r7
 800a266:	f7ff ff0b 	bl	800a080 <__multiply>
 800a26a:	6020      	str	r0, [r4, #0]
 800a26c:	f8c0 9000 	str.w	r9, [r0]
 800a270:	4604      	mov	r4, r0
 800a272:	e7e4      	b.n	800a23e <__pow5mult+0x6a>
 800a274:	4630      	mov	r0, r6
 800a276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a27a:	bf00      	nop
 800a27c:	0800b8f0 	.word	0x0800b8f0
 800a280:	0800b709 	.word	0x0800b709
 800a284:	0800b894 	.word	0x0800b894

0800a288 <__lshift>:
 800a288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a28c:	460c      	mov	r4, r1
 800a28e:	6849      	ldr	r1, [r1, #4]
 800a290:	6923      	ldr	r3, [r4, #16]
 800a292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a296:	68a3      	ldr	r3, [r4, #8]
 800a298:	4607      	mov	r7, r0
 800a29a:	4691      	mov	r9, r2
 800a29c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2a0:	f108 0601 	add.w	r6, r8, #1
 800a2a4:	42b3      	cmp	r3, r6
 800a2a6:	db0b      	blt.n	800a2c0 <__lshift+0x38>
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7ff fd95 	bl	8009dd8 <_Balloc>
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	b948      	cbnz	r0, 800a2c6 <__lshift+0x3e>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	4b28      	ldr	r3, [pc, #160]	@ (800a358 <__lshift+0xd0>)
 800a2b6:	4829      	ldr	r0, [pc, #164]	@ (800a35c <__lshift+0xd4>)
 800a2b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a2bc:	f7fe fad6 	bl	800886c <__assert_func>
 800a2c0:	3101      	adds	r1, #1
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	e7ee      	b.n	800a2a4 <__lshift+0x1c>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f100 0114 	add.w	r1, r0, #20
 800a2cc:	f100 0210 	add.w	r2, r0, #16
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	4553      	cmp	r3, sl
 800a2d4:	db33      	blt.n	800a33e <__lshift+0xb6>
 800a2d6:	6920      	ldr	r0, [r4, #16]
 800a2d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2dc:	f104 0314 	add.w	r3, r4, #20
 800a2e0:	f019 091f 	ands.w	r9, r9, #31
 800a2e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2ec:	d02b      	beq.n	800a346 <__lshift+0xbe>
 800a2ee:	f1c9 0e20 	rsb	lr, r9, #32
 800a2f2:	468a      	mov	sl, r1
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	6818      	ldr	r0, [r3, #0]
 800a2f8:	fa00 f009 	lsl.w	r0, r0, r9
 800a2fc:	4310      	orrs	r0, r2
 800a2fe:	f84a 0b04 	str.w	r0, [sl], #4
 800a302:	f853 2b04 	ldr.w	r2, [r3], #4
 800a306:	459c      	cmp	ip, r3
 800a308:	fa22 f20e 	lsr.w	r2, r2, lr
 800a30c:	d8f3      	bhi.n	800a2f6 <__lshift+0x6e>
 800a30e:	ebac 0304 	sub.w	r3, ip, r4
 800a312:	3b15      	subs	r3, #21
 800a314:	f023 0303 	bic.w	r3, r3, #3
 800a318:	3304      	adds	r3, #4
 800a31a:	f104 0015 	add.w	r0, r4, #21
 800a31e:	4584      	cmp	ip, r0
 800a320:	bf38      	it	cc
 800a322:	2304      	movcc	r3, #4
 800a324:	50ca      	str	r2, [r1, r3]
 800a326:	b10a      	cbz	r2, 800a32c <__lshift+0xa4>
 800a328:	f108 0602 	add.w	r6, r8, #2
 800a32c:	3e01      	subs	r6, #1
 800a32e:	4638      	mov	r0, r7
 800a330:	612e      	str	r6, [r5, #16]
 800a332:	4621      	mov	r1, r4
 800a334:	f7ff fd90 	bl	8009e58 <_Bfree>
 800a338:	4628      	mov	r0, r5
 800a33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a33e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a342:	3301      	adds	r3, #1
 800a344:	e7c5      	b.n	800a2d2 <__lshift+0x4a>
 800a346:	3904      	subs	r1, #4
 800a348:	f853 2b04 	ldr.w	r2, [r3], #4
 800a34c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a350:	459c      	cmp	ip, r3
 800a352:	d8f9      	bhi.n	800a348 <__lshift+0xc0>
 800a354:	e7ea      	b.n	800a32c <__lshift+0xa4>
 800a356:	bf00      	nop
 800a358:	0800b823 	.word	0x0800b823
 800a35c:	0800b894 	.word	0x0800b894

0800a360 <__mcmp>:
 800a360:	690a      	ldr	r2, [r1, #16]
 800a362:	4603      	mov	r3, r0
 800a364:	6900      	ldr	r0, [r0, #16]
 800a366:	1a80      	subs	r0, r0, r2
 800a368:	b530      	push	{r4, r5, lr}
 800a36a:	d10e      	bne.n	800a38a <__mcmp+0x2a>
 800a36c:	3314      	adds	r3, #20
 800a36e:	3114      	adds	r1, #20
 800a370:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a374:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a378:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a37c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a380:	4295      	cmp	r5, r2
 800a382:	d003      	beq.n	800a38c <__mcmp+0x2c>
 800a384:	d205      	bcs.n	800a392 <__mcmp+0x32>
 800a386:	f04f 30ff 	mov.w	r0, #4294967295
 800a38a:	bd30      	pop	{r4, r5, pc}
 800a38c:	42a3      	cmp	r3, r4
 800a38e:	d3f3      	bcc.n	800a378 <__mcmp+0x18>
 800a390:	e7fb      	b.n	800a38a <__mcmp+0x2a>
 800a392:	2001      	movs	r0, #1
 800a394:	e7f9      	b.n	800a38a <__mcmp+0x2a>
	...

0800a398 <__mdiff>:
 800a398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	4689      	mov	r9, r1
 800a39e:	4606      	mov	r6, r0
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	4648      	mov	r0, r9
 800a3a4:	4614      	mov	r4, r2
 800a3a6:	f7ff ffdb 	bl	800a360 <__mcmp>
 800a3aa:	1e05      	subs	r5, r0, #0
 800a3ac:	d112      	bne.n	800a3d4 <__mdiff+0x3c>
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f7ff fd11 	bl	8009dd8 <_Balloc>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	b928      	cbnz	r0, 800a3c6 <__mdiff+0x2e>
 800a3ba:	4b3f      	ldr	r3, [pc, #252]	@ (800a4b8 <__mdiff+0x120>)
 800a3bc:	f240 2137 	movw	r1, #567	@ 0x237
 800a3c0:	483e      	ldr	r0, [pc, #248]	@ (800a4bc <__mdiff+0x124>)
 800a3c2:	f7fe fa53 	bl	800886c <__assert_func>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	b003      	add	sp, #12
 800a3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d4:	bfbc      	itt	lt
 800a3d6:	464b      	movlt	r3, r9
 800a3d8:	46a1      	movlt	r9, r4
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a3e0:	bfba      	itte	lt
 800a3e2:	461c      	movlt	r4, r3
 800a3e4:	2501      	movlt	r5, #1
 800a3e6:	2500      	movge	r5, #0
 800a3e8:	f7ff fcf6 	bl	8009dd8 <_Balloc>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	b918      	cbnz	r0, 800a3f8 <__mdiff+0x60>
 800a3f0:	4b31      	ldr	r3, [pc, #196]	@ (800a4b8 <__mdiff+0x120>)
 800a3f2:	f240 2145 	movw	r1, #581	@ 0x245
 800a3f6:	e7e3      	b.n	800a3c0 <__mdiff+0x28>
 800a3f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a3fc:	6926      	ldr	r6, [r4, #16]
 800a3fe:	60c5      	str	r5, [r0, #12]
 800a400:	f109 0310 	add.w	r3, r9, #16
 800a404:	f109 0514 	add.w	r5, r9, #20
 800a408:	f104 0e14 	add.w	lr, r4, #20
 800a40c:	f100 0b14 	add.w	fp, r0, #20
 800a410:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a414:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	46d9      	mov	r9, fp
 800a41c:	f04f 0c00 	mov.w	ip, #0
 800a420:	9b01      	ldr	r3, [sp, #4]
 800a422:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a426:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a42a:	9301      	str	r3, [sp, #4]
 800a42c:	fa1f f38a 	uxth.w	r3, sl
 800a430:	4619      	mov	r1, r3
 800a432:	b283      	uxth	r3, r0
 800a434:	1acb      	subs	r3, r1, r3
 800a436:	0c00      	lsrs	r0, r0, #16
 800a438:	4463      	add	r3, ip
 800a43a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a43e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a442:	b29b      	uxth	r3, r3
 800a444:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a448:	4576      	cmp	r6, lr
 800a44a:	f849 3b04 	str.w	r3, [r9], #4
 800a44e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a452:	d8e5      	bhi.n	800a420 <__mdiff+0x88>
 800a454:	1b33      	subs	r3, r6, r4
 800a456:	3b15      	subs	r3, #21
 800a458:	f023 0303 	bic.w	r3, r3, #3
 800a45c:	3415      	adds	r4, #21
 800a45e:	3304      	adds	r3, #4
 800a460:	42a6      	cmp	r6, r4
 800a462:	bf38      	it	cc
 800a464:	2304      	movcc	r3, #4
 800a466:	441d      	add	r5, r3
 800a468:	445b      	add	r3, fp
 800a46a:	461e      	mov	r6, r3
 800a46c:	462c      	mov	r4, r5
 800a46e:	4544      	cmp	r4, r8
 800a470:	d30e      	bcc.n	800a490 <__mdiff+0xf8>
 800a472:	f108 0103 	add.w	r1, r8, #3
 800a476:	1b49      	subs	r1, r1, r5
 800a478:	f021 0103 	bic.w	r1, r1, #3
 800a47c:	3d03      	subs	r5, #3
 800a47e:	45a8      	cmp	r8, r5
 800a480:	bf38      	it	cc
 800a482:	2100      	movcc	r1, #0
 800a484:	440b      	add	r3, r1
 800a486:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a48a:	b191      	cbz	r1, 800a4b2 <__mdiff+0x11a>
 800a48c:	6117      	str	r7, [r2, #16]
 800a48e:	e79d      	b.n	800a3cc <__mdiff+0x34>
 800a490:	f854 1b04 	ldr.w	r1, [r4], #4
 800a494:	46e6      	mov	lr, ip
 800a496:	0c08      	lsrs	r0, r1, #16
 800a498:	fa1c fc81 	uxtah	ip, ip, r1
 800a49c:	4471      	add	r1, lr
 800a49e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a4a2:	b289      	uxth	r1, r1
 800a4a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a4a8:	f846 1b04 	str.w	r1, [r6], #4
 800a4ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4b0:	e7dd      	b.n	800a46e <__mdiff+0xd6>
 800a4b2:	3f01      	subs	r7, #1
 800a4b4:	e7e7      	b.n	800a486 <__mdiff+0xee>
 800a4b6:	bf00      	nop
 800a4b8:	0800b823 	.word	0x0800b823
 800a4bc:	0800b894 	.word	0x0800b894

0800a4c0 <__ulp>:
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	ed8d 0b00 	vstr	d0, [sp]
 800a4c6:	9a01      	ldr	r2, [sp, #4]
 800a4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a508 <__ulp+0x48>)
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	dc08      	bgt.n	800a4e6 <__ulp+0x26>
 800a4d4:	425b      	negs	r3, r3
 800a4d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a4da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a4de:	da04      	bge.n	800a4ea <__ulp+0x2a>
 800a4e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a4e4:	4113      	asrs	r3, r2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	e008      	b.n	800a4fc <__ulp+0x3c>
 800a4ea:	f1a2 0314 	sub.w	r3, r2, #20
 800a4ee:	2b1e      	cmp	r3, #30
 800a4f0:	bfda      	itte	le
 800a4f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a4f6:	40da      	lsrle	r2, r3
 800a4f8:	2201      	movgt	r2, #1
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4610      	mov	r0, r2
 800a500:	ec41 0b10 	vmov	d0, r0, r1
 800a504:	b002      	add	sp, #8
 800a506:	4770      	bx	lr
 800a508:	7ff00000 	.word	0x7ff00000

0800a50c <__b2d>:
 800a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a510:	6906      	ldr	r6, [r0, #16]
 800a512:	f100 0814 	add.w	r8, r0, #20
 800a516:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a51a:	1f37      	subs	r7, r6, #4
 800a51c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a520:	4610      	mov	r0, r2
 800a522:	f7ff fd4b 	bl	8009fbc <__hi0bits>
 800a526:	f1c0 0320 	rsb	r3, r0, #32
 800a52a:	280a      	cmp	r0, #10
 800a52c:	600b      	str	r3, [r1, #0]
 800a52e:	491b      	ldr	r1, [pc, #108]	@ (800a59c <__b2d+0x90>)
 800a530:	dc15      	bgt.n	800a55e <__b2d+0x52>
 800a532:	f1c0 0c0b 	rsb	ip, r0, #11
 800a536:	fa22 f30c 	lsr.w	r3, r2, ip
 800a53a:	45b8      	cmp	r8, r7
 800a53c:	ea43 0501 	orr.w	r5, r3, r1
 800a540:	bf34      	ite	cc
 800a542:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a546:	2300      	movcs	r3, #0
 800a548:	3015      	adds	r0, #21
 800a54a:	fa02 f000 	lsl.w	r0, r2, r0
 800a54e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a552:	4303      	orrs	r3, r0
 800a554:	461c      	mov	r4, r3
 800a556:	ec45 4b10 	vmov	d0, r4, r5
 800a55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a55e:	45b8      	cmp	r8, r7
 800a560:	bf3a      	itte	cc
 800a562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a566:	f1a6 0708 	subcc.w	r7, r6, #8
 800a56a:	2300      	movcs	r3, #0
 800a56c:	380b      	subs	r0, #11
 800a56e:	d012      	beq.n	800a596 <__b2d+0x8a>
 800a570:	f1c0 0120 	rsb	r1, r0, #32
 800a574:	fa23 f401 	lsr.w	r4, r3, r1
 800a578:	4082      	lsls	r2, r0
 800a57a:	4322      	orrs	r2, r4
 800a57c:	4547      	cmp	r7, r8
 800a57e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a582:	bf8c      	ite	hi
 800a584:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a588:	2200      	movls	r2, #0
 800a58a:	4083      	lsls	r3, r0
 800a58c:	40ca      	lsrs	r2, r1
 800a58e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a592:	4313      	orrs	r3, r2
 800a594:	e7de      	b.n	800a554 <__b2d+0x48>
 800a596:	ea42 0501 	orr.w	r5, r2, r1
 800a59a:	e7db      	b.n	800a554 <__b2d+0x48>
 800a59c:	3ff00000 	.word	0x3ff00000

0800a5a0 <__d2b>:
 800a5a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5a4:	460f      	mov	r7, r1
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	ec59 8b10 	vmov	r8, r9, d0
 800a5ac:	4616      	mov	r6, r2
 800a5ae:	f7ff fc13 	bl	8009dd8 <_Balloc>
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	b930      	cbnz	r0, 800a5c4 <__d2b+0x24>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	4b23      	ldr	r3, [pc, #140]	@ (800a648 <__d2b+0xa8>)
 800a5ba:	4824      	ldr	r0, [pc, #144]	@ (800a64c <__d2b+0xac>)
 800a5bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a5c0:	f7fe f954 	bl	800886c <__assert_func>
 800a5c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a5c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5cc:	b10d      	cbz	r5, 800a5d2 <__d2b+0x32>
 800a5ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	f1b8 0300 	subs.w	r3, r8, #0
 800a5d8:	d023      	beq.n	800a622 <__d2b+0x82>
 800a5da:	4668      	mov	r0, sp
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	f7ff fd0c 	bl	8009ffa <__lo0bits>
 800a5e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a5e6:	b1d0      	cbz	r0, 800a61e <__d2b+0x7e>
 800a5e8:	f1c0 0320 	rsb	r3, r0, #32
 800a5ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f0:	430b      	orrs	r3, r1
 800a5f2:	40c2      	lsrs	r2, r0
 800a5f4:	6163      	str	r3, [r4, #20]
 800a5f6:	9201      	str	r2, [sp, #4]
 800a5f8:	9b01      	ldr	r3, [sp, #4]
 800a5fa:	61a3      	str	r3, [r4, #24]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	bf0c      	ite	eq
 800a600:	2201      	moveq	r2, #1
 800a602:	2202      	movne	r2, #2
 800a604:	6122      	str	r2, [r4, #16]
 800a606:	b1a5      	cbz	r5, 800a632 <__d2b+0x92>
 800a608:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a60c:	4405      	add	r5, r0
 800a60e:	603d      	str	r5, [r7, #0]
 800a610:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a614:	6030      	str	r0, [r6, #0]
 800a616:	4620      	mov	r0, r4
 800a618:	b003      	add	sp, #12
 800a61a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a61e:	6161      	str	r1, [r4, #20]
 800a620:	e7ea      	b.n	800a5f8 <__d2b+0x58>
 800a622:	a801      	add	r0, sp, #4
 800a624:	f7ff fce9 	bl	8009ffa <__lo0bits>
 800a628:	9b01      	ldr	r3, [sp, #4]
 800a62a:	6163      	str	r3, [r4, #20]
 800a62c:	3020      	adds	r0, #32
 800a62e:	2201      	movs	r2, #1
 800a630:	e7e8      	b.n	800a604 <__d2b+0x64>
 800a632:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a636:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a63a:	6038      	str	r0, [r7, #0]
 800a63c:	6918      	ldr	r0, [r3, #16]
 800a63e:	f7ff fcbd 	bl	8009fbc <__hi0bits>
 800a642:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a646:	e7e5      	b.n	800a614 <__d2b+0x74>
 800a648:	0800b823 	.word	0x0800b823
 800a64c:	0800b894 	.word	0x0800b894

0800a650 <__ratio>:
 800a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	b085      	sub	sp, #20
 800a656:	e9cd 1000 	strd	r1, r0, [sp]
 800a65a:	a902      	add	r1, sp, #8
 800a65c:	f7ff ff56 	bl	800a50c <__b2d>
 800a660:	9800      	ldr	r0, [sp, #0]
 800a662:	a903      	add	r1, sp, #12
 800a664:	ec55 4b10 	vmov	r4, r5, d0
 800a668:	f7ff ff50 	bl	800a50c <__b2d>
 800a66c:	9b01      	ldr	r3, [sp, #4]
 800a66e:	6919      	ldr	r1, [r3, #16]
 800a670:	9b00      	ldr	r3, [sp, #0]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	1ac9      	subs	r1, r1, r3
 800a676:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a67a:	1a9b      	subs	r3, r3, r2
 800a67c:	ec5b ab10 	vmov	sl, fp, d0
 800a680:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a684:	2b00      	cmp	r3, #0
 800a686:	bfce      	itee	gt
 800a688:	462a      	movgt	r2, r5
 800a68a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a68e:	465a      	movle	r2, fp
 800a690:	462f      	mov	r7, r5
 800a692:	46d9      	mov	r9, fp
 800a694:	bfcc      	ite	gt
 800a696:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a69a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a69e:	464b      	mov	r3, r9
 800a6a0:	4652      	mov	r2, sl
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	f7f6 f8d1 	bl	800084c <__aeabi_ddiv>
 800a6aa:	ec41 0b10 	vmov	d0, r0, r1
 800a6ae:	b005      	add	sp, #20
 800a6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6b4 <__copybits>:
 800a6b4:	3901      	subs	r1, #1
 800a6b6:	b570      	push	{r4, r5, r6, lr}
 800a6b8:	1149      	asrs	r1, r1, #5
 800a6ba:	6914      	ldr	r4, [r2, #16]
 800a6bc:	3101      	adds	r1, #1
 800a6be:	f102 0314 	add.w	r3, r2, #20
 800a6c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a6c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6ca:	1f05      	subs	r5, r0, #4
 800a6cc:	42a3      	cmp	r3, r4
 800a6ce:	d30c      	bcc.n	800a6ea <__copybits+0x36>
 800a6d0:	1aa3      	subs	r3, r4, r2
 800a6d2:	3b11      	subs	r3, #17
 800a6d4:	f023 0303 	bic.w	r3, r3, #3
 800a6d8:	3211      	adds	r2, #17
 800a6da:	42a2      	cmp	r2, r4
 800a6dc:	bf88      	it	hi
 800a6de:	2300      	movhi	r3, #0
 800a6e0:	4418      	add	r0, r3
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	4288      	cmp	r0, r1
 800a6e6:	d305      	bcc.n	800a6f4 <__copybits+0x40>
 800a6e8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800a6ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800a6f2:	e7eb      	b.n	800a6cc <__copybits+0x18>
 800a6f4:	f840 3b04 	str.w	r3, [r0], #4
 800a6f8:	e7f4      	b.n	800a6e4 <__copybits+0x30>

0800a6fa <__any_on>:
 800a6fa:	f100 0214 	add.w	r2, r0, #20
 800a6fe:	6900      	ldr	r0, [r0, #16]
 800a700:	114b      	asrs	r3, r1, #5
 800a702:	4298      	cmp	r0, r3
 800a704:	b510      	push	{r4, lr}
 800a706:	db11      	blt.n	800a72c <__any_on+0x32>
 800a708:	dd0a      	ble.n	800a720 <__any_on+0x26>
 800a70a:	f011 011f 	ands.w	r1, r1, #31
 800a70e:	d007      	beq.n	800a720 <__any_on+0x26>
 800a710:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a714:	fa24 f001 	lsr.w	r0, r4, r1
 800a718:	fa00 f101 	lsl.w	r1, r0, r1
 800a71c:	428c      	cmp	r4, r1
 800a71e:	d10b      	bne.n	800a738 <__any_on+0x3e>
 800a720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a724:	4293      	cmp	r3, r2
 800a726:	d803      	bhi.n	800a730 <__any_on+0x36>
 800a728:	2000      	movs	r0, #0
 800a72a:	bd10      	pop	{r4, pc}
 800a72c:	4603      	mov	r3, r0
 800a72e:	e7f7      	b.n	800a720 <__any_on+0x26>
 800a730:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a734:	2900      	cmp	r1, #0
 800a736:	d0f5      	beq.n	800a724 <__any_on+0x2a>
 800a738:	2001      	movs	r0, #1
 800a73a:	e7f6      	b.n	800a72a <__any_on+0x30>

0800a73c <_strtol_l.constprop.0>:
 800a73c:	2b24      	cmp	r3, #36	@ 0x24
 800a73e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a742:	4686      	mov	lr, r0
 800a744:	4690      	mov	r8, r2
 800a746:	d801      	bhi.n	800a74c <_strtol_l.constprop.0+0x10>
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d106      	bne.n	800a75a <_strtol_l.constprop.0+0x1e>
 800a74c:	f7fe f842 	bl	80087d4 <__errno>
 800a750:	2316      	movs	r3, #22
 800a752:	6003      	str	r3, [r0, #0]
 800a754:	2000      	movs	r0, #0
 800a756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75a:	4834      	ldr	r0, [pc, #208]	@ (800a82c <_strtol_l.constprop.0+0xf0>)
 800a75c:	460d      	mov	r5, r1
 800a75e:	462a      	mov	r2, r5
 800a760:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a764:	5d06      	ldrb	r6, [r0, r4]
 800a766:	f016 0608 	ands.w	r6, r6, #8
 800a76a:	d1f8      	bne.n	800a75e <_strtol_l.constprop.0+0x22>
 800a76c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a76e:	d12d      	bne.n	800a7cc <_strtol_l.constprop.0+0x90>
 800a770:	782c      	ldrb	r4, [r5, #0]
 800a772:	2601      	movs	r6, #1
 800a774:	1c95      	adds	r5, r2, #2
 800a776:	f033 0210 	bics.w	r2, r3, #16
 800a77a:	d109      	bne.n	800a790 <_strtol_l.constprop.0+0x54>
 800a77c:	2c30      	cmp	r4, #48	@ 0x30
 800a77e:	d12a      	bne.n	800a7d6 <_strtol_l.constprop.0+0x9a>
 800a780:	782a      	ldrb	r2, [r5, #0]
 800a782:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a786:	2a58      	cmp	r2, #88	@ 0x58
 800a788:	d125      	bne.n	800a7d6 <_strtol_l.constprop.0+0x9a>
 800a78a:	786c      	ldrb	r4, [r5, #1]
 800a78c:	2310      	movs	r3, #16
 800a78e:	3502      	adds	r5, #2
 800a790:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a794:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a798:	2200      	movs	r2, #0
 800a79a:	fbbc f9f3 	udiv	r9, ip, r3
 800a79e:	4610      	mov	r0, r2
 800a7a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a7a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a7a8:	2f09      	cmp	r7, #9
 800a7aa:	d81b      	bhi.n	800a7e4 <_strtol_l.constprop.0+0xa8>
 800a7ac:	463c      	mov	r4, r7
 800a7ae:	42a3      	cmp	r3, r4
 800a7b0:	dd27      	ble.n	800a802 <_strtol_l.constprop.0+0xc6>
 800a7b2:	1c57      	adds	r7, r2, #1
 800a7b4:	d007      	beq.n	800a7c6 <_strtol_l.constprop.0+0x8a>
 800a7b6:	4581      	cmp	r9, r0
 800a7b8:	d320      	bcc.n	800a7fc <_strtol_l.constprop.0+0xc0>
 800a7ba:	d101      	bne.n	800a7c0 <_strtol_l.constprop.0+0x84>
 800a7bc:	45a2      	cmp	sl, r4
 800a7be:	db1d      	blt.n	800a7fc <_strtol_l.constprop.0+0xc0>
 800a7c0:	fb00 4003 	mla	r0, r0, r3, r4
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7ca:	e7eb      	b.n	800a7a4 <_strtol_l.constprop.0+0x68>
 800a7cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800a7ce:	bf04      	itt	eq
 800a7d0:	782c      	ldrbeq	r4, [r5, #0]
 800a7d2:	1c95      	addeq	r5, r2, #2
 800a7d4:	e7cf      	b.n	800a776 <_strtol_l.constprop.0+0x3a>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1da      	bne.n	800a790 <_strtol_l.constprop.0+0x54>
 800a7da:	2c30      	cmp	r4, #48	@ 0x30
 800a7dc:	bf0c      	ite	eq
 800a7de:	2308      	moveq	r3, #8
 800a7e0:	230a      	movne	r3, #10
 800a7e2:	e7d5      	b.n	800a790 <_strtol_l.constprop.0+0x54>
 800a7e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a7e8:	2f19      	cmp	r7, #25
 800a7ea:	d801      	bhi.n	800a7f0 <_strtol_l.constprop.0+0xb4>
 800a7ec:	3c37      	subs	r4, #55	@ 0x37
 800a7ee:	e7de      	b.n	800a7ae <_strtol_l.constprop.0+0x72>
 800a7f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a7f4:	2f19      	cmp	r7, #25
 800a7f6:	d804      	bhi.n	800a802 <_strtol_l.constprop.0+0xc6>
 800a7f8:	3c57      	subs	r4, #87	@ 0x57
 800a7fa:	e7d8      	b.n	800a7ae <_strtol_l.constprop.0+0x72>
 800a7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a800:	e7e1      	b.n	800a7c6 <_strtol_l.constprop.0+0x8a>
 800a802:	1c53      	adds	r3, r2, #1
 800a804:	d108      	bne.n	800a818 <_strtol_l.constprop.0+0xdc>
 800a806:	2322      	movs	r3, #34	@ 0x22
 800a808:	f8ce 3000 	str.w	r3, [lr]
 800a80c:	4660      	mov	r0, ip
 800a80e:	f1b8 0f00 	cmp.w	r8, #0
 800a812:	d0a0      	beq.n	800a756 <_strtol_l.constprop.0+0x1a>
 800a814:	1e69      	subs	r1, r5, #1
 800a816:	e006      	b.n	800a826 <_strtol_l.constprop.0+0xea>
 800a818:	b106      	cbz	r6, 800a81c <_strtol_l.constprop.0+0xe0>
 800a81a:	4240      	negs	r0, r0
 800a81c:	f1b8 0f00 	cmp.w	r8, #0
 800a820:	d099      	beq.n	800a756 <_strtol_l.constprop.0+0x1a>
 800a822:	2a00      	cmp	r2, #0
 800a824:	d1f6      	bne.n	800a814 <_strtol_l.constprop.0+0xd8>
 800a826:	f8c8 1000 	str.w	r1, [r8]
 800a82a:	e794      	b.n	800a756 <_strtol_l.constprop.0+0x1a>
 800a82c:	0800b9f1 	.word	0x0800b9f1

0800a830 <_strtol_r>:
 800a830:	f7ff bf84 	b.w	800a73c <_strtol_l.constprop.0>

0800a834 <__ascii_wctomb>:
 800a834:	4603      	mov	r3, r0
 800a836:	4608      	mov	r0, r1
 800a838:	b141      	cbz	r1, 800a84c <__ascii_wctomb+0x18>
 800a83a:	2aff      	cmp	r2, #255	@ 0xff
 800a83c:	d904      	bls.n	800a848 <__ascii_wctomb+0x14>
 800a83e:	228a      	movs	r2, #138	@ 0x8a
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	f04f 30ff 	mov.w	r0, #4294967295
 800a846:	4770      	bx	lr
 800a848:	700a      	strb	r2, [r1, #0]
 800a84a:	2001      	movs	r0, #1
 800a84c:	4770      	bx	lr

0800a84e <__ssputs_r>:
 800a84e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a852:	688e      	ldr	r6, [r1, #8]
 800a854:	461f      	mov	r7, r3
 800a856:	42be      	cmp	r6, r7
 800a858:	680b      	ldr	r3, [r1, #0]
 800a85a:	4682      	mov	sl, r0
 800a85c:	460c      	mov	r4, r1
 800a85e:	4690      	mov	r8, r2
 800a860:	d82d      	bhi.n	800a8be <__ssputs_r+0x70>
 800a862:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a866:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a86a:	d026      	beq.n	800a8ba <__ssputs_r+0x6c>
 800a86c:	6965      	ldr	r5, [r4, #20]
 800a86e:	6909      	ldr	r1, [r1, #16]
 800a870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a874:	eba3 0901 	sub.w	r9, r3, r1
 800a878:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a87c:	1c7b      	adds	r3, r7, #1
 800a87e:	444b      	add	r3, r9
 800a880:	106d      	asrs	r5, r5, #1
 800a882:	429d      	cmp	r5, r3
 800a884:	bf38      	it	cc
 800a886:	461d      	movcc	r5, r3
 800a888:	0553      	lsls	r3, r2, #21
 800a88a:	d527      	bpl.n	800a8dc <__ssputs_r+0x8e>
 800a88c:	4629      	mov	r1, r5
 800a88e:	f7ff fa05 	bl	8009c9c <_malloc_r>
 800a892:	4606      	mov	r6, r0
 800a894:	b360      	cbz	r0, 800a8f0 <__ssputs_r+0xa2>
 800a896:	6921      	ldr	r1, [r4, #16]
 800a898:	464a      	mov	r2, r9
 800a89a:	f7fd ffc8 	bl	800882e <memcpy>
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a8a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8a8:	81a3      	strh	r3, [r4, #12]
 800a8aa:	6126      	str	r6, [r4, #16]
 800a8ac:	6165      	str	r5, [r4, #20]
 800a8ae:	444e      	add	r6, r9
 800a8b0:	eba5 0509 	sub.w	r5, r5, r9
 800a8b4:	6026      	str	r6, [r4, #0]
 800a8b6:	60a5      	str	r5, [r4, #8]
 800a8b8:	463e      	mov	r6, r7
 800a8ba:	42be      	cmp	r6, r7
 800a8bc:	d900      	bls.n	800a8c0 <__ssputs_r+0x72>
 800a8be:	463e      	mov	r6, r7
 800a8c0:	6820      	ldr	r0, [r4, #0]
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	4641      	mov	r1, r8
 800a8c6:	f000 f9d7 	bl	800ac78 <memmove>
 800a8ca:	68a3      	ldr	r3, [r4, #8]
 800a8cc:	1b9b      	subs	r3, r3, r6
 800a8ce:	60a3      	str	r3, [r4, #8]
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	4433      	add	r3, r6
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8dc:	462a      	mov	r2, r5
 800a8de:	f000 fa10 	bl	800ad02 <_realloc_r>
 800a8e2:	4606      	mov	r6, r0
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d1e0      	bne.n	800a8aa <__ssputs_r+0x5c>
 800a8e8:	6921      	ldr	r1, [r4, #16]
 800a8ea:	4650      	mov	r0, sl
 800a8ec:	f7fe fe28 	bl	8009540 <_free_r>
 800a8f0:	230c      	movs	r3, #12
 800a8f2:	f8ca 3000 	str.w	r3, [sl]
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8fc:	81a3      	strh	r3, [r4, #12]
 800a8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a902:	e7e9      	b.n	800a8d8 <__ssputs_r+0x8a>

0800a904 <_svfiprintf_r>:
 800a904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a908:	4698      	mov	r8, r3
 800a90a:	898b      	ldrh	r3, [r1, #12]
 800a90c:	061b      	lsls	r3, r3, #24
 800a90e:	b09d      	sub	sp, #116	@ 0x74
 800a910:	4607      	mov	r7, r0
 800a912:	460d      	mov	r5, r1
 800a914:	4614      	mov	r4, r2
 800a916:	d510      	bpl.n	800a93a <_svfiprintf_r+0x36>
 800a918:	690b      	ldr	r3, [r1, #16]
 800a91a:	b973      	cbnz	r3, 800a93a <_svfiprintf_r+0x36>
 800a91c:	2140      	movs	r1, #64	@ 0x40
 800a91e:	f7ff f9bd 	bl	8009c9c <_malloc_r>
 800a922:	6028      	str	r0, [r5, #0]
 800a924:	6128      	str	r0, [r5, #16]
 800a926:	b930      	cbnz	r0, 800a936 <_svfiprintf_r+0x32>
 800a928:	230c      	movs	r3, #12
 800a92a:	603b      	str	r3, [r7, #0]
 800a92c:	f04f 30ff 	mov.w	r0, #4294967295
 800a930:	b01d      	add	sp, #116	@ 0x74
 800a932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a936:	2340      	movs	r3, #64	@ 0x40
 800a938:	616b      	str	r3, [r5, #20]
 800a93a:	2300      	movs	r3, #0
 800a93c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a93e:	2320      	movs	r3, #32
 800a940:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a944:	f8cd 800c 	str.w	r8, [sp, #12]
 800a948:	2330      	movs	r3, #48	@ 0x30
 800a94a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aae8 <_svfiprintf_r+0x1e4>
 800a94e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a952:	f04f 0901 	mov.w	r9, #1
 800a956:	4623      	mov	r3, r4
 800a958:	469a      	mov	sl, r3
 800a95a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a95e:	b10a      	cbz	r2, 800a964 <_svfiprintf_r+0x60>
 800a960:	2a25      	cmp	r2, #37	@ 0x25
 800a962:	d1f9      	bne.n	800a958 <_svfiprintf_r+0x54>
 800a964:	ebba 0b04 	subs.w	fp, sl, r4
 800a968:	d00b      	beq.n	800a982 <_svfiprintf_r+0x7e>
 800a96a:	465b      	mov	r3, fp
 800a96c:	4622      	mov	r2, r4
 800a96e:	4629      	mov	r1, r5
 800a970:	4638      	mov	r0, r7
 800a972:	f7ff ff6c 	bl	800a84e <__ssputs_r>
 800a976:	3001      	adds	r0, #1
 800a978:	f000 80a7 	beq.w	800aaca <_svfiprintf_r+0x1c6>
 800a97c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a97e:	445a      	add	r2, fp
 800a980:	9209      	str	r2, [sp, #36]	@ 0x24
 800a982:	f89a 3000 	ldrb.w	r3, [sl]
 800a986:	2b00      	cmp	r3, #0
 800a988:	f000 809f 	beq.w	800aaca <_svfiprintf_r+0x1c6>
 800a98c:	2300      	movs	r3, #0
 800a98e:	f04f 32ff 	mov.w	r2, #4294967295
 800a992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a996:	f10a 0a01 	add.w	sl, sl, #1
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	9307      	str	r3, [sp, #28]
 800a99e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9a4:	4654      	mov	r4, sl
 800a9a6:	2205      	movs	r2, #5
 800a9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ac:	484e      	ldr	r0, [pc, #312]	@ (800aae8 <_svfiprintf_r+0x1e4>)
 800a9ae:	f7f5 fc0f 	bl	80001d0 <memchr>
 800a9b2:	9a04      	ldr	r2, [sp, #16]
 800a9b4:	b9d8      	cbnz	r0, 800a9ee <_svfiprintf_r+0xea>
 800a9b6:	06d0      	lsls	r0, r2, #27
 800a9b8:	bf44      	itt	mi
 800a9ba:	2320      	movmi	r3, #32
 800a9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9c0:	0711      	lsls	r1, r2, #28
 800a9c2:	bf44      	itt	mi
 800a9c4:	232b      	movmi	r3, #43	@ 0x2b
 800a9c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9d0:	d015      	beq.n	800a9fe <_svfiprintf_r+0xfa>
 800a9d2:	9a07      	ldr	r2, [sp, #28]
 800a9d4:	4654      	mov	r4, sl
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	f04f 0c0a 	mov.w	ip, #10
 800a9dc:	4621      	mov	r1, r4
 800a9de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9e2:	3b30      	subs	r3, #48	@ 0x30
 800a9e4:	2b09      	cmp	r3, #9
 800a9e6:	d94b      	bls.n	800aa80 <_svfiprintf_r+0x17c>
 800a9e8:	b1b0      	cbz	r0, 800aa18 <_svfiprintf_r+0x114>
 800a9ea:	9207      	str	r2, [sp, #28]
 800a9ec:	e014      	b.n	800aa18 <_svfiprintf_r+0x114>
 800a9ee:	eba0 0308 	sub.w	r3, r0, r8
 800a9f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	9304      	str	r3, [sp, #16]
 800a9fa:	46a2      	mov	sl, r4
 800a9fc:	e7d2      	b.n	800a9a4 <_svfiprintf_r+0xa0>
 800a9fe:	9b03      	ldr	r3, [sp, #12]
 800aa00:	1d19      	adds	r1, r3, #4
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	9103      	str	r1, [sp, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	bfbb      	ittet	lt
 800aa0a:	425b      	neglt	r3, r3
 800aa0c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa10:	9307      	strge	r3, [sp, #28]
 800aa12:	9307      	strlt	r3, [sp, #28]
 800aa14:	bfb8      	it	lt
 800aa16:	9204      	strlt	r2, [sp, #16]
 800aa18:	7823      	ldrb	r3, [r4, #0]
 800aa1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa1c:	d10a      	bne.n	800aa34 <_svfiprintf_r+0x130>
 800aa1e:	7863      	ldrb	r3, [r4, #1]
 800aa20:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa22:	d132      	bne.n	800aa8a <_svfiprintf_r+0x186>
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	1d1a      	adds	r2, r3, #4
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	9203      	str	r2, [sp, #12]
 800aa2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa30:	3402      	adds	r4, #2
 800aa32:	9305      	str	r3, [sp, #20]
 800aa34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aaf8 <_svfiprintf_r+0x1f4>
 800aa38:	7821      	ldrb	r1, [r4, #0]
 800aa3a:	2203      	movs	r2, #3
 800aa3c:	4650      	mov	r0, sl
 800aa3e:	f7f5 fbc7 	bl	80001d0 <memchr>
 800aa42:	b138      	cbz	r0, 800aa54 <_svfiprintf_r+0x150>
 800aa44:	9b04      	ldr	r3, [sp, #16]
 800aa46:	eba0 000a 	sub.w	r0, r0, sl
 800aa4a:	2240      	movs	r2, #64	@ 0x40
 800aa4c:	4082      	lsls	r2, r0
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	3401      	adds	r4, #1
 800aa52:	9304      	str	r3, [sp, #16]
 800aa54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa58:	4824      	ldr	r0, [pc, #144]	@ (800aaec <_svfiprintf_r+0x1e8>)
 800aa5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa5e:	2206      	movs	r2, #6
 800aa60:	f7f5 fbb6 	bl	80001d0 <memchr>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d036      	beq.n	800aad6 <_svfiprintf_r+0x1d2>
 800aa68:	4b21      	ldr	r3, [pc, #132]	@ (800aaf0 <_svfiprintf_r+0x1ec>)
 800aa6a:	bb1b      	cbnz	r3, 800aab4 <_svfiprintf_r+0x1b0>
 800aa6c:	9b03      	ldr	r3, [sp, #12]
 800aa6e:	3307      	adds	r3, #7
 800aa70:	f023 0307 	bic.w	r3, r3, #7
 800aa74:	3308      	adds	r3, #8
 800aa76:	9303      	str	r3, [sp, #12]
 800aa78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa7a:	4433      	add	r3, r6
 800aa7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa7e:	e76a      	b.n	800a956 <_svfiprintf_r+0x52>
 800aa80:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa84:	460c      	mov	r4, r1
 800aa86:	2001      	movs	r0, #1
 800aa88:	e7a8      	b.n	800a9dc <_svfiprintf_r+0xd8>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	3401      	adds	r4, #1
 800aa8e:	9305      	str	r3, [sp, #20]
 800aa90:	4619      	mov	r1, r3
 800aa92:	f04f 0c0a 	mov.w	ip, #10
 800aa96:	4620      	mov	r0, r4
 800aa98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa9c:	3a30      	subs	r2, #48	@ 0x30
 800aa9e:	2a09      	cmp	r2, #9
 800aaa0:	d903      	bls.n	800aaaa <_svfiprintf_r+0x1a6>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d0c6      	beq.n	800aa34 <_svfiprintf_r+0x130>
 800aaa6:	9105      	str	r1, [sp, #20]
 800aaa8:	e7c4      	b.n	800aa34 <_svfiprintf_r+0x130>
 800aaaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaae:	4604      	mov	r4, r0
 800aab0:	2301      	movs	r3, #1
 800aab2:	e7f0      	b.n	800aa96 <_svfiprintf_r+0x192>
 800aab4:	ab03      	add	r3, sp, #12
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	462a      	mov	r2, r5
 800aaba:	4b0e      	ldr	r3, [pc, #56]	@ (800aaf4 <_svfiprintf_r+0x1f0>)
 800aabc:	a904      	add	r1, sp, #16
 800aabe:	4638      	mov	r0, r7
 800aac0:	f7fc feb4 	bl	800782c <_printf_float>
 800aac4:	1c42      	adds	r2, r0, #1
 800aac6:	4606      	mov	r6, r0
 800aac8:	d1d6      	bne.n	800aa78 <_svfiprintf_r+0x174>
 800aaca:	89ab      	ldrh	r3, [r5, #12]
 800aacc:	065b      	lsls	r3, r3, #25
 800aace:	f53f af2d 	bmi.w	800a92c <_svfiprintf_r+0x28>
 800aad2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aad4:	e72c      	b.n	800a930 <_svfiprintf_r+0x2c>
 800aad6:	ab03      	add	r3, sp, #12
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	462a      	mov	r2, r5
 800aadc:	4b05      	ldr	r3, [pc, #20]	@ (800aaf4 <_svfiprintf_r+0x1f0>)
 800aade:	a904      	add	r1, sp, #16
 800aae0:	4638      	mov	r0, r7
 800aae2:	f7fd f93b 	bl	8007d5c <_printf_i>
 800aae6:	e7ed      	b.n	800aac4 <_svfiprintf_r+0x1c0>
 800aae8:	0800baf1 	.word	0x0800baf1
 800aaec:	0800bafb 	.word	0x0800bafb
 800aaf0:	0800782d 	.word	0x0800782d
 800aaf4:	0800a84f 	.word	0x0800a84f
 800aaf8:	0800baf7 	.word	0x0800baf7

0800aafc <__sflush_r>:
 800aafc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab04:	0716      	lsls	r6, r2, #28
 800ab06:	4605      	mov	r5, r0
 800ab08:	460c      	mov	r4, r1
 800ab0a:	d454      	bmi.n	800abb6 <__sflush_r+0xba>
 800ab0c:	684b      	ldr	r3, [r1, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	dc02      	bgt.n	800ab18 <__sflush_r+0x1c>
 800ab12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	dd48      	ble.n	800abaa <__sflush_r+0xae>
 800ab18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab1a:	2e00      	cmp	r6, #0
 800ab1c:	d045      	beq.n	800abaa <__sflush_r+0xae>
 800ab1e:	2300      	movs	r3, #0
 800ab20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab24:	682f      	ldr	r7, [r5, #0]
 800ab26:	6a21      	ldr	r1, [r4, #32]
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	d030      	beq.n	800ab8e <__sflush_r+0x92>
 800ab2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	0759      	lsls	r1, r3, #29
 800ab32:	d505      	bpl.n	800ab40 <__sflush_r+0x44>
 800ab34:	6863      	ldr	r3, [r4, #4]
 800ab36:	1ad2      	subs	r2, r2, r3
 800ab38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab3a:	b10b      	cbz	r3, 800ab40 <__sflush_r+0x44>
 800ab3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab3e:	1ad2      	subs	r2, r2, r3
 800ab40:	2300      	movs	r3, #0
 800ab42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab44:	6a21      	ldr	r1, [r4, #32]
 800ab46:	4628      	mov	r0, r5
 800ab48:	47b0      	blx	r6
 800ab4a:	1c43      	adds	r3, r0, #1
 800ab4c:	89a3      	ldrh	r3, [r4, #12]
 800ab4e:	d106      	bne.n	800ab5e <__sflush_r+0x62>
 800ab50:	6829      	ldr	r1, [r5, #0]
 800ab52:	291d      	cmp	r1, #29
 800ab54:	d82b      	bhi.n	800abae <__sflush_r+0xb2>
 800ab56:	4a2a      	ldr	r2, [pc, #168]	@ (800ac00 <__sflush_r+0x104>)
 800ab58:	410a      	asrs	r2, r1
 800ab5a:	07d6      	lsls	r6, r2, #31
 800ab5c:	d427      	bmi.n	800abae <__sflush_r+0xb2>
 800ab5e:	2200      	movs	r2, #0
 800ab60:	6062      	str	r2, [r4, #4]
 800ab62:	04d9      	lsls	r1, r3, #19
 800ab64:	6922      	ldr	r2, [r4, #16]
 800ab66:	6022      	str	r2, [r4, #0]
 800ab68:	d504      	bpl.n	800ab74 <__sflush_r+0x78>
 800ab6a:	1c42      	adds	r2, r0, #1
 800ab6c:	d101      	bne.n	800ab72 <__sflush_r+0x76>
 800ab6e:	682b      	ldr	r3, [r5, #0]
 800ab70:	b903      	cbnz	r3, 800ab74 <__sflush_r+0x78>
 800ab72:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab76:	602f      	str	r7, [r5, #0]
 800ab78:	b1b9      	cbz	r1, 800abaa <__sflush_r+0xae>
 800ab7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab7e:	4299      	cmp	r1, r3
 800ab80:	d002      	beq.n	800ab88 <__sflush_r+0x8c>
 800ab82:	4628      	mov	r0, r5
 800ab84:	f7fe fcdc 	bl	8009540 <_free_r>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab8c:	e00d      	b.n	800abaa <__sflush_r+0xae>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	4628      	mov	r0, r5
 800ab92:	47b0      	blx	r6
 800ab94:	4602      	mov	r2, r0
 800ab96:	1c50      	adds	r0, r2, #1
 800ab98:	d1c9      	bne.n	800ab2e <__sflush_r+0x32>
 800ab9a:	682b      	ldr	r3, [r5, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d0c6      	beq.n	800ab2e <__sflush_r+0x32>
 800aba0:	2b1d      	cmp	r3, #29
 800aba2:	d001      	beq.n	800aba8 <__sflush_r+0xac>
 800aba4:	2b16      	cmp	r3, #22
 800aba6:	d11e      	bne.n	800abe6 <__sflush_r+0xea>
 800aba8:	602f      	str	r7, [r5, #0]
 800abaa:	2000      	movs	r0, #0
 800abac:	e022      	b.n	800abf4 <__sflush_r+0xf8>
 800abae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abb2:	b21b      	sxth	r3, r3
 800abb4:	e01b      	b.n	800abee <__sflush_r+0xf2>
 800abb6:	690f      	ldr	r7, [r1, #16]
 800abb8:	2f00      	cmp	r7, #0
 800abba:	d0f6      	beq.n	800abaa <__sflush_r+0xae>
 800abbc:	0793      	lsls	r3, r2, #30
 800abbe:	680e      	ldr	r6, [r1, #0]
 800abc0:	bf08      	it	eq
 800abc2:	694b      	ldreq	r3, [r1, #20]
 800abc4:	600f      	str	r7, [r1, #0]
 800abc6:	bf18      	it	ne
 800abc8:	2300      	movne	r3, #0
 800abca:	eba6 0807 	sub.w	r8, r6, r7
 800abce:	608b      	str	r3, [r1, #8]
 800abd0:	f1b8 0f00 	cmp.w	r8, #0
 800abd4:	dde9      	ble.n	800abaa <__sflush_r+0xae>
 800abd6:	6a21      	ldr	r1, [r4, #32]
 800abd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abda:	4643      	mov	r3, r8
 800abdc:	463a      	mov	r2, r7
 800abde:	4628      	mov	r0, r5
 800abe0:	47b0      	blx	r6
 800abe2:	2800      	cmp	r0, #0
 800abe4:	dc08      	bgt.n	800abf8 <__sflush_r+0xfc>
 800abe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abee:	81a3      	strh	r3, [r4, #12]
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295
 800abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf8:	4407      	add	r7, r0
 800abfa:	eba8 0800 	sub.w	r8, r8, r0
 800abfe:	e7e7      	b.n	800abd0 <__sflush_r+0xd4>
 800ac00:	dfbffffe 	.word	0xdfbffffe

0800ac04 <_fflush_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	690b      	ldr	r3, [r1, #16]
 800ac08:	4605      	mov	r5, r0
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	b913      	cbnz	r3, 800ac14 <_fflush_r+0x10>
 800ac0e:	2500      	movs	r5, #0
 800ac10:	4628      	mov	r0, r5
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	b118      	cbz	r0, 800ac1e <_fflush_r+0x1a>
 800ac16:	6a03      	ldr	r3, [r0, #32]
 800ac18:	b90b      	cbnz	r3, 800ac1e <_fflush_r+0x1a>
 800ac1a:	f7fd fc5f 	bl	80084dc <__sinit>
 800ac1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d0f3      	beq.n	800ac0e <_fflush_r+0xa>
 800ac26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac28:	07d0      	lsls	r0, r2, #31
 800ac2a:	d404      	bmi.n	800ac36 <_fflush_r+0x32>
 800ac2c:	0599      	lsls	r1, r3, #22
 800ac2e:	d402      	bmi.n	800ac36 <_fflush_r+0x32>
 800ac30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac32:	f7fd fdfa 	bl	800882a <__retarget_lock_acquire_recursive>
 800ac36:	4628      	mov	r0, r5
 800ac38:	4621      	mov	r1, r4
 800ac3a:	f7ff ff5f 	bl	800aafc <__sflush_r>
 800ac3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac40:	07da      	lsls	r2, r3, #31
 800ac42:	4605      	mov	r5, r0
 800ac44:	d4e4      	bmi.n	800ac10 <_fflush_r+0xc>
 800ac46:	89a3      	ldrh	r3, [r4, #12]
 800ac48:	059b      	lsls	r3, r3, #22
 800ac4a:	d4e1      	bmi.n	800ac10 <_fflush_r+0xc>
 800ac4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac4e:	f7fd fded 	bl	800882c <__retarget_lock_release_recursive>
 800ac52:	e7dd      	b.n	800ac10 <_fflush_r+0xc>

0800ac54 <fiprintf>:
 800ac54:	b40e      	push	{r1, r2, r3}
 800ac56:	b503      	push	{r0, r1, lr}
 800ac58:	4601      	mov	r1, r0
 800ac5a:	ab03      	add	r3, sp, #12
 800ac5c:	4805      	ldr	r0, [pc, #20]	@ (800ac74 <fiprintf+0x20>)
 800ac5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac62:	6800      	ldr	r0, [r0, #0]
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	f000 f8a3 	bl	800adb0 <_vfiprintf_r>
 800ac6a:	b002      	add	sp, #8
 800ac6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac70:	b003      	add	sp, #12
 800ac72:	4770      	bx	lr
 800ac74:	20000184 	.word	0x20000184

0800ac78 <memmove>:
 800ac78:	4288      	cmp	r0, r1
 800ac7a:	b510      	push	{r4, lr}
 800ac7c:	eb01 0402 	add.w	r4, r1, r2
 800ac80:	d902      	bls.n	800ac88 <memmove+0x10>
 800ac82:	4284      	cmp	r4, r0
 800ac84:	4623      	mov	r3, r4
 800ac86:	d807      	bhi.n	800ac98 <memmove+0x20>
 800ac88:	1e43      	subs	r3, r0, #1
 800ac8a:	42a1      	cmp	r1, r4
 800ac8c:	d008      	beq.n	800aca0 <memmove+0x28>
 800ac8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac96:	e7f8      	b.n	800ac8a <memmove+0x12>
 800ac98:	4402      	add	r2, r0
 800ac9a:	4601      	mov	r1, r0
 800ac9c:	428a      	cmp	r2, r1
 800ac9e:	d100      	bne.n	800aca2 <memmove+0x2a>
 800aca0:	bd10      	pop	{r4, pc}
 800aca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acaa:	e7f7      	b.n	800ac9c <memmove+0x24>

0800acac <_sbrk_r>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	4d06      	ldr	r5, [pc, #24]	@ (800acc8 <_sbrk_r+0x1c>)
 800acb0:	2300      	movs	r3, #0
 800acb2:	4604      	mov	r4, r0
 800acb4:	4608      	mov	r0, r1
 800acb6:	602b      	str	r3, [r5, #0]
 800acb8:	f7f8 fc7a 	bl	80035b0 <_sbrk>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_sbrk_r+0x1a>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_sbrk_r+0x1a>
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	200006cc 	.word	0x200006cc

0800accc <abort>:
 800accc:	b508      	push	{r3, lr}
 800acce:	2006      	movs	r0, #6
 800acd0:	f000 fa42 	bl	800b158 <raise>
 800acd4:	2001      	movs	r0, #1
 800acd6:	f7f8 fbf3 	bl	80034c0 <_exit>

0800acda <_calloc_r>:
 800acda:	b570      	push	{r4, r5, r6, lr}
 800acdc:	fba1 5402 	umull	r5, r4, r1, r2
 800ace0:	b93c      	cbnz	r4, 800acf2 <_calloc_r+0x18>
 800ace2:	4629      	mov	r1, r5
 800ace4:	f7fe ffda 	bl	8009c9c <_malloc_r>
 800ace8:	4606      	mov	r6, r0
 800acea:	b928      	cbnz	r0, 800acf8 <_calloc_r+0x1e>
 800acec:	2600      	movs	r6, #0
 800acee:	4630      	mov	r0, r6
 800acf0:	bd70      	pop	{r4, r5, r6, pc}
 800acf2:	220c      	movs	r2, #12
 800acf4:	6002      	str	r2, [r0, #0]
 800acf6:	e7f9      	b.n	800acec <_calloc_r+0x12>
 800acf8:	462a      	mov	r2, r5
 800acfa:	4621      	mov	r1, r4
 800acfc:	f7fd fc87 	bl	800860e <memset>
 800ad00:	e7f5      	b.n	800acee <_calloc_r+0x14>

0800ad02 <_realloc_r>:
 800ad02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad06:	4680      	mov	r8, r0
 800ad08:	4615      	mov	r5, r2
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	b921      	cbnz	r1, 800ad18 <_realloc_r+0x16>
 800ad0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad12:	4611      	mov	r1, r2
 800ad14:	f7fe bfc2 	b.w	8009c9c <_malloc_r>
 800ad18:	b92a      	cbnz	r2, 800ad26 <_realloc_r+0x24>
 800ad1a:	f7fe fc11 	bl	8009540 <_free_r>
 800ad1e:	2400      	movs	r4, #0
 800ad20:	4620      	mov	r0, r4
 800ad22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad26:	f000 fa33 	bl	800b190 <_malloc_usable_size_r>
 800ad2a:	4285      	cmp	r5, r0
 800ad2c:	4606      	mov	r6, r0
 800ad2e:	d802      	bhi.n	800ad36 <_realloc_r+0x34>
 800ad30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad34:	d8f4      	bhi.n	800ad20 <_realloc_r+0x1e>
 800ad36:	4629      	mov	r1, r5
 800ad38:	4640      	mov	r0, r8
 800ad3a:	f7fe ffaf 	bl	8009c9c <_malloc_r>
 800ad3e:	4607      	mov	r7, r0
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d0ec      	beq.n	800ad1e <_realloc_r+0x1c>
 800ad44:	42b5      	cmp	r5, r6
 800ad46:	462a      	mov	r2, r5
 800ad48:	4621      	mov	r1, r4
 800ad4a:	bf28      	it	cs
 800ad4c:	4632      	movcs	r2, r6
 800ad4e:	f7fd fd6e 	bl	800882e <memcpy>
 800ad52:	4621      	mov	r1, r4
 800ad54:	4640      	mov	r0, r8
 800ad56:	f7fe fbf3 	bl	8009540 <_free_r>
 800ad5a:	463c      	mov	r4, r7
 800ad5c:	e7e0      	b.n	800ad20 <_realloc_r+0x1e>

0800ad5e <__sfputc_r>:
 800ad5e:	6893      	ldr	r3, [r2, #8]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	b410      	push	{r4}
 800ad66:	6093      	str	r3, [r2, #8]
 800ad68:	da08      	bge.n	800ad7c <__sfputc_r+0x1e>
 800ad6a:	6994      	ldr	r4, [r2, #24]
 800ad6c:	42a3      	cmp	r3, r4
 800ad6e:	db01      	blt.n	800ad74 <__sfputc_r+0x16>
 800ad70:	290a      	cmp	r1, #10
 800ad72:	d103      	bne.n	800ad7c <__sfputc_r+0x1e>
 800ad74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad78:	f000 b932 	b.w	800afe0 <__swbuf_r>
 800ad7c:	6813      	ldr	r3, [r2, #0]
 800ad7e:	1c58      	adds	r0, r3, #1
 800ad80:	6010      	str	r0, [r2, #0]
 800ad82:	7019      	strb	r1, [r3, #0]
 800ad84:	4608      	mov	r0, r1
 800ad86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <__sfputs_r>:
 800ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8e:	4606      	mov	r6, r0
 800ad90:	460f      	mov	r7, r1
 800ad92:	4614      	mov	r4, r2
 800ad94:	18d5      	adds	r5, r2, r3
 800ad96:	42ac      	cmp	r4, r5
 800ad98:	d101      	bne.n	800ad9e <__sfputs_r+0x12>
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	e007      	b.n	800adae <__sfputs_r+0x22>
 800ad9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada2:	463a      	mov	r2, r7
 800ada4:	4630      	mov	r0, r6
 800ada6:	f7ff ffda 	bl	800ad5e <__sfputc_r>
 800adaa:	1c43      	adds	r3, r0, #1
 800adac:	d1f3      	bne.n	800ad96 <__sfputs_r+0xa>
 800adae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adb0 <_vfiprintf_r>:
 800adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	460d      	mov	r5, r1
 800adb6:	b09d      	sub	sp, #116	@ 0x74
 800adb8:	4614      	mov	r4, r2
 800adba:	4698      	mov	r8, r3
 800adbc:	4606      	mov	r6, r0
 800adbe:	b118      	cbz	r0, 800adc8 <_vfiprintf_r+0x18>
 800adc0:	6a03      	ldr	r3, [r0, #32]
 800adc2:	b90b      	cbnz	r3, 800adc8 <_vfiprintf_r+0x18>
 800adc4:	f7fd fb8a 	bl	80084dc <__sinit>
 800adc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adca:	07d9      	lsls	r1, r3, #31
 800adcc:	d405      	bmi.n	800adda <_vfiprintf_r+0x2a>
 800adce:	89ab      	ldrh	r3, [r5, #12]
 800add0:	059a      	lsls	r2, r3, #22
 800add2:	d402      	bmi.n	800adda <_vfiprintf_r+0x2a>
 800add4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800add6:	f7fd fd28 	bl	800882a <__retarget_lock_acquire_recursive>
 800adda:	89ab      	ldrh	r3, [r5, #12]
 800addc:	071b      	lsls	r3, r3, #28
 800adde:	d501      	bpl.n	800ade4 <_vfiprintf_r+0x34>
 800ade0:	692b      	ldr	r3, [r5, #16]
 800ade2:	b99b      	cbnz	r3, 800ae0c <_vfiprintf_r+0x5c>
 800ade4:	4629      	mov	r1, r5
 800ade6:	4630      	mov	r0, r6
 800ade8:	f000 f938 	bl	800b05c <__swsetup_r>
 800adec:	b170      	cbz	r0, 800ae0c <_vfiprintf_r+0x5c>
 800adee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adf0:	07dc      	lsls	r4, r3, #31
 800adf2:	d504      	bpl.n	800adfe <_vfiprintf_r+0x4e>
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295
 800adf8:	b01d      	add	sp, #116	@ 0x74
 800adfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfe:	89ab      	ldrh	r3, [r5, #12]
 800ae00:	0598      	lsls	r0, r3, #22
 800ae02:	d4f7      	bmi.n	800adf4 <_vfiprintf_r+0x44>
 800ae04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae06:	f7fd fd11 	bl	800882c <__retarget_lock_release_recursive>
 800ae0a:	e7f3      	b.n	800adf4 <_vfiprintf_r+0x44>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae10:	2320      	movs	r3, #32
 800ae12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae1a:	2330      	movs	r3, #48	@ 0x30
 800ae1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800afcc <_vfiprintf_r+0x21c>
 800ae20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae24:	f04f 0901 	mov.w	r9, #1
 800ae28:	4623      	mov	r3, r4
 800ae2a:	469a      	mov	sl, r3
 800ae2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae30:	b10a      	cbz	r2, 800ae36 <_vfiprintf_r+0x86>
 800ae32:	2a25      	cmp	r2, #37	@ 0x25
 800ae34:	d1f9      	bne.n	800ae2a <_vfiprintf_r+0x7a>
 800ae36:	ebba 0b04 	subs.w	fp, sl, r4
 800ae3a:	d00b      	beq.n	800ae54 <_vfiprintf_r+0xa4>
 800ae3c:	465b      	mov	r3, fp
 800ae3e:	4622      	mov	r2, r4
 800ae40:	4629      	mov	r1, r5
 800ae42:	4630      	mov	r0, r6
 800ae44:	f7ff ffa2 	bl	800ad8c <__sfputs_r>
 800ae48:	3001      	adds	r0, #1
 800ae4a:	f000 80a7 	beq.w	800af9c <_vfiprintf_r+0x1ec>
 800ae4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae50:	445a      	add	r2, fp
 800ae52:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae54:	f89a 3000 	ldrb.w	r3, [sl]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f000 809f 	beq.w	800af9c <_vfiprintf_r+0x1ec>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	f04f 32ff 	mov.w	r2, #4294967295
 800ae64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae68:	f10a 0a01 	add.w	sl, sl, #1
 800ae6c:	9304      	str	r3, [sp, #16]
 800ae6e:	9307      	str	r3, [sp, #28]
 800ae70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae74:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae76:	4654      	mov	r4, sl
 800ae78:	2205      	movs	r2, #5
 800ae7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7e:	4853      	ldr	r0, [pc, #332]	@ (800afcc <_vfiprintf_r+0x21c>)
 800ae80:	f7f5 f9a6 	bl	80001d0 <memchr>
 800ae84:	9a04      	ldr	r2, [sp, #16]
 800ae86:	b9d8      	cbnz	r0, 800aec0 <_vfiprintf_r+0x110>
 800ae88:	06d1      	lsls	r1, r2, #27
 800ae8a:	bf44      	itt	mi
 800ae8c:	2320      	movmi	r3, #32
 800ae8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae92:	0713      	lsls	r3, r2, #28
 800ae94:	bf44      	itt	mi
 800ae96:	232b      	movmi	r3, #43	@ 0x2b
 800ae98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae9c:	f89a 3000 	ldrb.w	r3, [sl]
 800aea0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aea2:	d015      	beq.n	800aed0 <_vfiprintf_r+0x120>
 800aea4:	9a07      	ldr	r2, [sp, #28]
 800aea6:	4654      	mov	r4, sl
 800aea8:	2000      	movs	r0, #0
 800aeaa:	f04f 0c0a 	mov.w	ip, #10
 800aeae:	4621      	mov	r1, r4
 800aeb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeb4:	3b30      	subs	r3, #48	@ 0x30
 800aeb6:	2b09      	cmp	r3, #9
 800aeb8:	d94b      	bls.n	800af52 <_vfiprintf_r+0x1a2>
 800aeba:	b1b0      	cbz	r0, 800aeea <_vfiprintf_r+0x13a>
 800aebc:	9207      	str	r2, [sp, #28]
 800aebe:	e014      	b.n	800aeea <_vfiprintf_r+0x13a>
 800aec0:	eba0 0308 	sub.w	r3, r0, r8
 800aec4:	fa09 f303 	lsl.w	r3, r9, r3
 800aec8:	4313      	orrs	r3, r2
 800aeca:	9304      	str	r3, [sp, #16]
 800aecc:	46a2      	mov	sl, r4
 800aece:	e7d2      	b.n	800ae76 <_vfiprintf_r+0xc6>
 800aed0:	9b03      	ldr	r3, [sp, #12]
 800aed2:	1d19      	adds	r1, r3, #4
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	9103      	str	r1, [sp, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	bfbb      	ittet	lt
 800aedc:	425b      	neglt	r3, r3
 800aede:	f042 0202 	orrlt.w	r2, r2, #2
 800aee2:	9307      	strge	r3, [sp, #28]
 800aee4:	9307      	strlt	r3, [sp, #28]
 800aee6:	bfb8      	it	lt
 800aee8:	9204      	strlt	r2, [sp, #16]
 800aeea:	7823      	ldrb	r3, [r4, #0]
 800aeec:	2b2e      	cmp	r3, #46	@ 0x2e
 800aeee:	d10a      	bne.n	800af06 <_vfiprintf_r+0x156>
 800aef0:	7863      	ldrb	r3, [r4, #1]
 800aef2:	2b2a      	cmp	r3, #42	@ 0x2a
 800aef4:	d132      	bne.n	800af5c <_vfiprintf_r+0x1ac>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	1d1a      	adds	r2, r3, #4
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	9203      	str	r2, [sp, #12]
 800aefe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af02:	3402      	adds	r4, #2
 800af04:	9305      	str	r3, [sp, #20]
 800af06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800afdc <_vfiprintf_r+0x22c>
 800af0a:	7821      	ldrb	r1, [r4, #0]
 800af0c:	2203      	movs	r2, #3
 800af0e:	4650      	mov	r0, sl
 800af10:	f7f5 f95e 	bl	80001d0 <memchr>
 800af14:	b138      	cbz	r0, 800af26 <_vfiprintf_r+0x176>
 800af16:	9b04      	ldr	r3, [sp, #16]
 800af18:	eba0 000a 	sub.w	r0, r0, sl
 800af1c:	2240      	movs	r2, #64	@ 0x40
 800af1e:	4082      	lsls	r2, r0
 800af20:	4313      	orrs	r3, r2
 800af22:	3401      	adds	r4, #1
 800af24:	9304      	str	r3, [sp, #16]
 800af26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af2a:	4829      	ldr	r0, [pc, #164]	@ (800afd0 <_vfiprintf_r+0x220>)
 800af2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af30:	2206      	movs	r2, #6
 800af32:	f7f5 f94d 	bl	80001d0 <memchr>
 800af36:	2800      	cmp	r0, #0
 800af38:	d03f      	beq.n	800afba <_vfiprintf_r+0x20a>
 800af3a:	4b26      	ldr	r3, [pc, #152]	@ (800afd4 <_vfiprintf_r+0x224>)
 800af3c:	bb1b      	cbnz	r3, 800af86 <_vfiprintf_r+0x1d6>
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	3307      	adds	r3, #7
 800af42:	f023 0307 	bic.w	r3, r3, #7
 800af46:	3308      	adds	r3, #8
 800af48:	9303      	str	r3, [sp, #12]
 800af4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af4c:	443b      	add	r3, r7
 800af4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af50:	e76a      	b.n	800ae28 <_vfiprintf_r+0x78>
 800af52:	fb0c 3202 	mla	r2, ip, r2, r3
 800af56:	460c      	mov	r4, r1
 800af58:	2001      	movs	r0, #1
 800af5a:	e7a8      	b.n	800aeae <_vfiprintf_r+0xfe>
 800af5c:	2300      	movs	r3, #0
 800af5e:	3401      	adds	r4, #1
 800af60:	9305      	str	r3, [sp, #20]
 800af62:	4619      	mov	r1, r3
 800af64:	f04f 0c0a 	mov.w	ip, #10
 800af68:	4620      	mov	r0, r4
 800af6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af6e:	3a30      	subs	r2, #48	@ 0x30
 800af70:	2a09      	cmp	r2, #9
 800af72:	d903      	bls.n	800af7c <_vfiprintf_r+0x1cc>
 800af74:	2b00      	cmp	r3, #0
 800af76:	d0c6      	beq.n	800af06 <_vfiprintf_r+0x156>
 800af78:	9105      	str	r1, [sp, #20]
 800af7a:	e7c4      	b.n	800af06 <_vfiprintf_r+0x156>
 800af7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af80:	4604      	mov	r4, r0
 800af82:	2301      	movs	r3, #1
 800af84:	e7f0      	b.n	800af68 <_vfiprintf_r+0x1b8>
 800af86:	ab03      	add	r3, sp, #12
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	462a      	mov	r2, r5
 800af8c:	4b12      	ldr	r3, [pc, #72]	@ (800afd8 <_vfiprintf_r+0x228>)
 800af8e:	a904      	add	r1, sp, #16
 800af90:	4630      	mov	r0, r6
 800af92:	f7fc fc4b 	bl	800782c <_printf_float>
 800af96:	4607      	mov	r7, r0
 800af98:	1c78      	adds	r0, r7, #1
 800af9a:	d1d6      	bne.n	800af4a <_vfiprintf_r+0x19a>
 800af9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af9e:	07d9      	lsls	r1, r3, #31
 800afa0:	d405      	bmi.n	800afae <_vfiprintf_r+0x1fe>
 800afa2:	89ab      	ldrh	r3, [r5, #12]
 800afa4:	059a      	lsls	r2, r3, #22
 800afa6:	d402      	bmi.n	800afae <_vfiprintf_r+0x1fe>
 800afa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afaa:	f7fd fc3f 	bl	800882c <__retarget_lock_release_recursive>
 800afae:	89ab      	ldrh	r3, [r5, #12]
 800afb0:	065b      	lsls	r3, r3, #25
 800afb2:	f53f af1f 	bmi.w	800adf4 <_vfiprintf_r+0x44>
 800afb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afb8:	e71e      	b.n	800adf8 <_vfiprintf_r+0x48>
 800afba:	ab03      	add	r3, sp, #12
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	462a      	mov	r2, r5
 800afc0:	4b05      	ldr	r3, [pc, #20]	@ (800afd8 <_vfiprintf_r+0x228>)
 800afc2:	a904      	add	r1, sp, #16
 800afc4:	4630      	mov	r0, r6
 800afc6:	f7fc fec9 	bl	8007d5c <_printf_i>
 800afca:	e7e4      	b.n	800af96 <_vfiprintf_r+0x1e6>
 800afcc:	0800baf1 	.word	0x0800baf1
 800afd0:	0800bafb 	.word	0x0800bafb
 800afd4:	0800782d 	.word	0x0800782d
 800afd8:	0800ad8d 	.word	0x0800ad8d
 800afdc:	0800baf7 	.word	0x0800baf7

0800afe0 <__swbuf_r>:
 800afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe2:	460e      	mov	r6, r1
 800afe4:	4614      	mov	r4, r2
 800afe6:	4605      	mov	r5, r0
 800afe8:	b118      	cbz	r0, 800aff2 <__swbuf_r+0x12>
 800afea:	6a03      	ldr	r3, [r0, #32]
 800afec:	b90b      	cbnz	r3, 800aff2 <__swbuf_r+0x12>
 800afee:	f7fd fa75 	bl	80084dc <__sinit>
 800aff2:	69a3      	ldr	r3, [r4, #24]
 800aff4:	60a3      	str	r3, [r4, #8]
 800aff6:	89a3      	ldrh	r3, [r4, #12]
 800aff8:	071a      	lsls	r2, r3, #28
 800affa:	d501      	bpl.n	800b000 <__swbuf_r+0x20>
 800affc:	6923      	ldr	r3, [r4, #16]
 800affe:	b943      	cbnz	r3, 800b012 <__swbuf_r+0x32>
 800b000:	4621      	mov	r1, r4
 800b002:	4628      	mov	r0, r5
 800b004:	f000 f82a 	bl	800b05c <__swsetup_r>
 800b008:	b118      	cbz	r0, 800b012 <__swbuf_r+0x32>
 800b00a:	f04f 37ff 	mov.w	r7, #4294967295
 800b00e:	4638      	mov	r0, r7
 800b010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	6922      	ldr	r2, [r4, #16]
 800b016:	1a98      	subs	r0, r3, r2
 800b018:	6963      	ldr	r3, [r4, #20]
 800b01a:	b2f6      	uxtb	r6, r6
 800b01c:	4283      	cmp	r3, r0
 800b01e:	4637      	mov	r7, r6
 800b020:	dc05      	bgt.n	800b02e <__swbuf_r+0x4e>
 800b022:	4621      	mov	r1, r4
 800b024:	4628      	mov	r0, r5
 800b026:	f7ff fded 	bl	800ac04 <_fflush_r>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d1ed      	bne.n	800b00a <__swbuf_r+0x2a>
 800b02e:	68a3      	ldr	r3, [r4, #8]
 800b030:	3b01      	subs	r3, #1
 800b032:	60a3      	str	r3, [r4, #8]
 800b034:	6823      	ldr	r3, [r4, #0]
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	6022      	str	r2, [r4, #0]
 800b03a:	701e      	strb	r6, [r3, #0]
 800b03c:	6962      	ldr	r2, [r4, #20]
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	429a      	cmp	r2, r3
 800b042:	d004      	beq.n	800b04e <__swbuf_r+0x6e>
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	07db      	lsls	r3, r3, #31
 800b048:	d5e1      	bpl.n	800b00e <__swbuf_r+0x2e>
 800b04a:	2e0a      	cmp	r6, #10
 800b04c:	d1df      	bne.n	800b00e <__swbuf_r+0x2e>
 800b04e:	4621      	mov	r1, r4
 800b050:	4628      	mov	r0, r5
 800b052:	f7ff fdd7 	bl	800ac04 <_fflush_r>
 800b056:	2800      	cmp	r0, #0
 800b058:	d0d9      	beq.n	800b00e <__swbuf_r+0x2e>
 800b05a:	e7d6      	b.n	800b00a <__swbuf_r+0x2a>

0800b05c <__swsetup_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	4b29      	ldr	r3, [pc, #164]	@ (800b104 <__swsetup_r+0xa8>)
 800b060:	4605      	mov	r5, r0
 800b062:	6818      	ldr	r0, [r3, #0]
 800b064:	460c      	mov	r4, r1
 800b066:	b118      	cbz	r0, 800b070 <__swsetup_r+0x14>
 800b068:	6a03      	ldr	r3, [r0, #32]
 800b06a:	b90b      	cbnz	r3, 800b070 <__swsetup_r+0x14>
 800b06c:	f7fd fa36 	bl	80084dc <__sinit>
 800b070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b074:	0719      	lsls	r1, r3, #28
 800b076:	d422      	bmi.n	800b0be <__swsetup_r+0x62>
 800b078:	06da      	lsls	r2, r3, #27
 800b07a:	d407      	bmi.n	800b08c <__swsetup_r+0x30>
 800b07c:	2209      	movs	r2, #9
 800b07e:	602a      	str	r2, [r5, #0]
 800b080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	f04f 30ff 	mov.w	r0, #4294967295
 800b08a:	e033      	b.n	800b0f4 <__swsetup_r+0x98>
 800b08c:	0758      	lsls	r0, r3, #29
 800b08e:	d512      	bpl.n	800b0b6 <__swsetup_r+0x5a>
 800b090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b092:	b141      	cbz	r1, 800b0a6 <__swsetup_r+0x4a>
 800b094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b098:	4299      	cmp	r1, r3
 800b09a:	d002      	beq.n	800b0a2 <__swsetup_r+0x46>
 800b09c:	4628      	mov	r0, r5
 800b09e:	f7fe fa4f 	bl	8009540 <_free_r>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0ac:	81a3      	strh	r3, [r4, #12]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	6063      	str	r3, [r4, #4]
 800b0b2:	6923      	ldr	r3, [r4, #16]
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	f043 0308 	orr.w	r3, r3, #8
 800b0bc:	81a3      	strh	r3, [r4, #12]
 800b0be:	6923      	ldr	r3, [r4, #16]
 800b0c0:	b94b      	cbnz	r3, 800b0d6 <__swsetup_r+0x7a>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0cc:	d003      	beq.n	800b0d6 <__swsetup_r+0x7a>
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f000 f88b 	bl	800b1ec <__smakebuf_r>
 800b0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0da:	f013 0201 	ands.w	r2, r3, #1
 800b0de:	d00a      	beq.n	800b0f6 <__swsetup_r+0x9a>
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	60a2      	str	r2, [r4, #8]
 800b0e4:	6962      	ldr	r2, [r4, #20]
 800b0e6:	4252      	negs	r2, r2
 800b0e8:	61a2      	str	r2, [r4, #24]
 800b0ea:	6922      	ldr	r2, [r4, #16]
 800b0ec:	b942      	cbnz	r2, 800b100 <__swsetup_r+0xa4>
 800b0ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0f2:	d1c5      	bne.n	800b080 <__swsetup_r+0x24>
 800b0f4:	bd38      	pop	{r3, r4, r5, pc}
 800b0f6:	0799      	lsls	r1, r3, #30
 800b0f8:	bf58      	it	pl
 800b0fa:	6962      	ldrpl	r2, [r4, #20]
 800b0fc:	60a2      	str	r2, [r4, #8]
 800b0fe:	e7f4      	b.n	800b0ea <__swsetup_r+0x8e>
 800b100:	2000      	movs	r0, #0
 800b102:	e7f7      	b.n	800b0f4 <__swsetup_r+0x98>
 800b104:	20000184 	.word	0x20000184

0800b108 <_raise_r>:
 800b108:	291f      	cmp	r1, #31
 800b10a:	b538      	push	{r3, r4, r5, lr}
 800b10c:	4605      	mov	r5, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	d904      	bls.n	800b11c <_raise_r+0x14>
 800b112:	2316      	movs	r3, #22
 800b114:	6003      	str	r3, [r0, #0]
 800b116:	f04f 30ff 	mov.w	r0, #4294967295
 800b11a:	bd38      	pop	{r3, r4, r5, pc}
 800b11c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b11e:	b112      	cbz	r2, 800b126 <_raise_r+0x1e>
 800b120:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b124:	b94b      	cbnz	r3, 800b13a <_raise_r+0x32>
 800b126:	4628      	mov	r0, r5
 800b128:	f000 f830 	bl	800b18c <_getpid_r>
 800b12c:	4622      	mov	r2, r4
 800b12e:	4601      	mov	r1, r0
 800b130:	4628      	mov	r0, r5
 800b132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b136:	f000 b817 	b.w	800b168 <_kill_r>
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d00a      	beq.n	800b154 <_raise_r+0x4c>
 800b13e:	1c59      	adds	r1, r3, #1
 800b140:	d103      	bne.n	800b14a <_raise_r+0x42>
 800b142:	2316      	movs	r3, #22
 800b144:	6003      	str	r3, [r0, #0]
 800b146:	2001      	movs	r0, #1
 800b148:	e7e7      	b.n	800b11a <_raise_r+0x12>
 800b14a:	2100      	movs	r1, #0
 800b14c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b150:	4620      	mov	r0, r4
 800b152:	4798      	blx	r3
 800b154:	2000      	movs	r0, #0
 800b156:	e7e0      	b.n	800b11a <_raise_r+0x12>

0800b158 <raise>:
 800b158:	4b02      	ldr	r3, [pc, #8]	@ (800b164 <raise+0xc>)
 800b15a:	4601      	mov	r1, r0
 800b15c:	6818      	ldr	r0, [r3, #0]
 800b15e:	f7ff bfd3 	b.w	800b108 <_raise_r>
 800b162:	bf00      	nop
 800b164:	20000184 	.word	0x20000184

0800b168 <_kill_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4d07      	ldr	r5, [pc, #28]	@ (800b188 <_kill_r+0x20>)
 800b16c:	2300      	movs	r3, #0
 800b16e:	4604      	mov	r4, r0
 800b170:	4608      	mov	r0, r1
 800b172:	4611      	mov	r1, r2
 800b174:	602b      	str	r3, [r5, #0]
 800b176:	f7f8 f993 	bl	80034a0 <_kill>
 800b17a:	1c43      	adds	r3, r0, #1
 800b17c:	d102      	bne.n	800b184 <_kill_r+0x1c>
 800b17e:	682b      	ldr	r3, [r5, #0]
 800b180:	b103      	cbz	r3, 800b184 <_kill_r+0x1c>
 800b182:	6023      	str	r3, [r4, #0]
 800b184:	bd38      	pop	{r3, r4, r5, pc}
 800b186:	bf00      	nop
 800b188:	200006cc 	.word	0x200006cc

0800b18c <_getpid_r>:
 800b18c:	f7f8 b980 	b.w	8003490 <_getpid>

0800b190 <_malloc_usable_size_r>:
 800b190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b194:	1f18      	subs	r0, r3, #4
 800b196:	2b00      	cmp	r3, #0
 800b198:	bfbc      	itt	lt
 800b19a:	580b      	ldrlt	r3, [r1, r0]
 800b19c:	18c0      	addlt	r0, r0, r3
 800b19e:	4770      	bx	lr

0800b1a0 <__swhatbuf_r>:
 800b1a0:	b570      	push	{r4, r5, r6, lr}
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a8:	2900      	cmp	r1, #0
 800b1aa:	b096      	sub	sp, #88	@ 0x58
 800b1ac:	4615      	mov	r5, r2
 800b1ae:	461e      	mov	r6, r3
 800b1b0:	da0d      	bge.n	800b1ce <__swhatbuf_r+0x2e>
 800b1b2:	89a3      	ldrh	r3, [r4, #12]
 800b1b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1b8:	f04f 0100 	mov.w	r1, #0
 800b1bc:	bf14      	ite	ne
 800b1be:	2340      	movne	r3, #64	@ 0x40
 800b1c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	6031      	str	r1, [r6, #0]
 800b1c8:	602b      	str	r3, [r5, #0]
 800b1ca:	b016      	add	sp, #88	@ 0x58
 800b1cc:	bd70      	pop	{r4, r5, r6, pc}
 800b1ce:	466a      	mov	r2, sp
 800b1d0:	f000 f848 	bl	800b264 <_fstat_r>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	dbec      	blt.n	800b1b2 <__swhatbuf_r+0x12>
 800b1d8:	9901      	ldr	r1, [sp, #4]
 800b1da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b1de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b1e2:	4259      	negs	r1, r3
 800b1e4:	4159      	adcs	r1, r3
 800b1e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1ea:	e7eb      	b.n	800b1c4 <__swhatbuf_r+0x24>

0800b1ec <__smakebuf_r>:
 800b1ec:	898b      	ldrh	r3, [r1, #12]
 800b1ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1f0:	079d      	lsls	r5, r3, #30
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	d507      	bpl.n	800b208 <__smakebuf_r+0x1c>
 800b1f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	6123      	str	r3, [r4, #16]
 800b200:	2301      	movs	r3, #1
 800b202:	6163      	str	r3, [r4, #20]
 800b204:	b003      	add	sp, #12
 800b206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b208:	ab01      	add	r3, sp, #4
 800b20a:	466a      	mov	r2, sp
 800b20c:	f7ff ffc8 	bl	800b1a0 <__swhatbuf_r>
 800b210:	9f00      	ldr	r7, [sp, #0]
 800b212:	4605      	mov	r5, r0
 800b214:	4639      	mov	r1, r7
 800b216:	4630      	mov	r0, r6
 800b218:	f7fe fd40 	bl	8009c9c <_malloc_r>
 800b21c:	b948      	cbnz	r0, 800b232 <__smakebuf_r+0x46>
 800b21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b222:	059a      	lsls	r2, r3, #22
 800b224:	d4ee      	bmi.n	800b204 <__smakebuf_r+0x18>
 800b226:	f023 0303 	bic.w	r3, r3, #3
 800b22a:	f043 0302 	orr.w	r3, r3, #2
 800b22e:	81a3      	strh	r3, [r4, #12]
 800b230:	e7e2      	b.n	800b1f8 <__smakebuf_r+0xc>
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	6020      	str	r0, [r4, #0]
 800b236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	9b01      	ldr	r3, [sp, #4]
 800b23e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b242:	b15b      	cbz	r3, 800b25c <__smakebuf_r+0x70>
 800b244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b248:	4630      	mov	r0, r6
 800b24a:	f000 f81d 	bl	800b288 <_isatty_r>
 800b24e:	b128      	cbz	r0, 800b25c <__smakebuf_r+0x70>
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	f023 0303 	bic.w	r3, r3, #3
 800b256:	f043 0301 	orr.w	r3, r3, #1
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	431d      	orrs	r5, r3
 800b260:	81a5      	strh	r5, [r4, #12]
 800b262:	e7cf      	b.n	800b204 <__smakebuf_r+0x18>

0800b264 <_fstat_r>:
 800b264:	b538      	push	{r3, r4, r5, lr}
 800b266:	4d07      	ldr	r5, [pc, #28]	@ (800b284 <_fstat_r+0x20>)
 800b268:	2300      	movs	r3, #0
 800b26a:	4604      	mov	r4, r0
 800b26c:	4608      	mov	r0, r1
 800b26e:	4611      	mov	r1, r2
 800b270:	602b      	str	r3, [r5, #0]
 800b272:	f7f8 f975 	bl	8003560 <_fstat>
 800b276:	1c43      	adds	r3, r0, #1
 800b278:	d102      	bne.n	800b280 <_fstat_r+0x1c>
 800b27a:	682b      	ldr	r3, [r5, #0]
 800b27c:	b103      	cbz	r3, 800b280 <_fstat_r+0x1c>
 800b27e:	6023      	str	r3, [r4, #0]
 800b280:	bd38      	pop	{r3, r4, r5, pc}
 800b282:	bf00      	nop
 800b284:	200006cc 	.word	0x200006cc

0800b288 <_isatty_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4d06      	ldr	r5, [pc, #24]	@ (800b2a4 <_isatty_r+0x1c>)
 800b28c:	2300      	movs	r3, #0
 800b28e:	4604      	mov	r4, r0
 800b290:	4608      	mov	r0, r1
 800b292:	602b      	str	r3, [r5, #0]
 800b294:	f7f8 f974 	bl	8003580 <_isatty>
 800b298:	1c43      	adds	r3, r0, #1
 800b29a:	d102      	bne.n	800b2a2 <_isatty_r+0x1a>
 800b29c:	682b      	ldr	r3, [r5, #0]
 800b29e:	b103      	cbz	r3, 800b2a2 <_isatty_r+0x1a>
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	bd38      	pop	{r3, r4, r5, pc}
 800b2a4:	200006cc 	.word	0x200006cc

0800b2a8 <fmod>:
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2aa:	ed2d 8b02 	vpush	{d8}
 800b2ae:	ec57 6b10 	vmov	r6, r7, d0
 800b2b2:	ec55 4b11 	vmov	r4, r5, d1
 800b2b6:	f000 f85f 	bl	800b378 <__ieee754_fmod>
 800b2ba:	4622      	mov	r2, r4
 800b2bc:	462b      	mov	r3, r5
 800b2be:	4630      	mov	r0, r6
 800b2c0:	4639      	mov	r1, r7
 800b2c2:	eeb0 8a40 	vmov.f32	s16, s0
 800b2c6:	eef0 8a60 	vmov.f32	s17, s1
 800b2ca:	f7f5 fc2f 	bl	8000b2c <__aeabi_dcmpun>
 800b2ce:	b990      	cbnz	r0, 800b2f6 <fmod+0x4e>
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	f7f5 fbf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2dc:	b158      	cbz	r0, 800b2f6 <fmod+0x4e>
 800b2de:	f7fd fa79 	bl	80087d4 <__errno>
 800b2e2:	2321      	movs	r3, #33	@ 0x21
 800b2e4:	6003      	str	r3, [r0, #0]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	f7f5 faad 	bl	800084c <__aeabi_ddiv>
 800b2f2:	ec41 0b18 	vmov	d8, r0, r1
 800b2f6:	eeb0 0a48 	vmov.f32	s0, s16
 800b2fa:	eef0 0a68 	vmov.f32	s1, s17
 800b2fe:	ecbd 8b02 	vpop	{d8}
 800b302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b304 <trunc>:
 800b304:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800b308:	ec5c bb10 	vmov	fp, ip, d0
 800b30c:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800b310:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800b314:	2913      	cmp	r1, #19
 800b316:	4664      	mov	r4, ip
 800b318:	dc14      	bgt.n	800b344 <trunc+0x40>
 800b31a:	2900      	cmp	r1, #0
 800b31c:	bfa4      	itt	ge
 800b31e:	4b15      	ldrge	r3, [pc, #84]	@ (800b374 <trunc+0x70>)
 800b320:	fa43 f101 	asrge.w	r1, r3, r1
 800b324:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800b328:	bfad      	iteet	ge
 800b32a:	4021      	andge	r1, r4
 800b32c:	2200      	movlt	r2, #0
 800b32e:	4603      	movlt	r3, r0
 800b330:	2200      	movge	r2, #0
 800b332:	bfa8      	it	ge
 800b334:	ea41 0300 	orrge.w	r3, r1, r0
 800b338:	4693      	mov	fp, r2
 800b33a:	469c      	mov	ip, r3
 800b33c:	ec4c bb10 	vmov	d0, fp, ip
 800b340:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800b344:	2933      	cmp	r1, #51	@ 0x33
 800b346:	dd0b      	ble.n	800b360 <trunc+0x5c>
 800b348:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b34c:	d1f6      	bne.n	800b33c <trunc+0x38>
 800b34e:	465a      	mov	r2, fp
 800b350:	4663      	mov	r3, ip
 800b352:	4658      	mov	r0, fp
 800b354:	4621      	mov	r1, r4
 800b356:	f7f4 ff99 	bl	800028c <__adddf3>
 800b35a:	4683      	mov	fp, r0
 800b35c:	468c      	mov	ip, r1
 800b35e:	e7ed      	b.n	800b33c <trunc+0x38>
 800b360:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 800b364:	f04f 33ff 	mov.w	r3, #4294967295
 800b368:	40c3      	lsrs	r3, r0
 800b36a:	ea2b 0603 	bic.w	r6, fp, r3
 800b36e:	46b3      	mov	fp, r6
 800b370:	46a4      	mov	ip, r4
 800b372:	e7e3      	b.n	800b33c <trunc+0x38>
 800b374:	fff00000 	.word	0xfff00000

0800b378 <__ieee754_fmod>:
 800b378:	ec53 2b11 	vmov	r2, r3, d1
 800b37c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800b380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b384:	ea52 040c 	orrs.w	r4, r2, ip
 800b388:	ec51 0b10 	vmov	r0, r1, d0
 800b38c:	461e      	mov	r6, r3
 800b38e:	4617      	mov	r7, r2
 800b390:	4696      	mov	lr, r2
 800b392:	d00c      	beq.n	800b3ae <__ieee754_fmod+0x36>
 800b394:	4c77      	ldr	r4, [pc, #476]	@ (800b574 <__ieee754_fmod+0x1fc>)
 800b396:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800b39a:	45a0      	cmp	r8, r4
 800b39c:	4689      	mov	r9, r1
 800b39e:	d806      	bhi.n	800b3ae <__ieee754_fmod+0x36>
 800b3a0:	4254      	negs	r4, r2
 800b3a2:	4d75      	ldr	r5, [pc, #468]	@ (800b578 <__ieee754_fmod+0x200>)
 800b3a4:	4314      	orrs	r4, r2
 800b3a6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800b3aa:	42ac      	cmp	r4, r5
 800b3ac:	d909      	bls.n	800b3c2 <__ieee754_fmod+0x4a>
 800b3ae:	f7f5 f923 	bl	80005f8 <__aeabi_dmul>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	f7f5 fa49 	bl	800084c <__aeabi_ddiv>
 800b3ba:	ec41 0b10 	vmov	d0, r0, r1
 800b3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c2:	45e0      	cmp	r8, ip
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800b3cc:	dc09      	bgt.n	800b3e2 <__ieee754_fmod+0x6a>
 800b3ce:	dbf4      	blt.n	800b3ba <__ieee754_fmod+0x42>
 800b3d0:	4282      	cmp	r2, r0
 800b3d2:	d8f2      	bhi.n	800b3ba <__ieee754_fmod+0x42>
 800b3d4:	d105      	bne.n	800b3e2 <__ieee754_fmod+0x6a>
 800b3d6:	4b69      	ldr	r3, [pc, #420]	@ (800b57c <__ieee754_fmod+0x204>)
 800b3d8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800b3dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3e0:	e7eb      	b.n	800b3ba <__ieee754_fmod+0x42>
 800b3e2:	4a65      	ldr	r2, [pc, #404]	@ (800b578 <__ieee754_fmod+0x200>)
 800b3e4:	ea19 0f02 	tst.w	r9, r2
 800b3e8:	d148      	bne.n	800b47c <__ieee754_fmod+0x104>
 800b3ea:	f1b8 0f00 	cmp.w	r8, #0
 800b3ee:	d13d      	bne.n	800b46c <__ieee754_fmod+0xf4>
 800b3f0:	4963      	ldr	r1, [pc, #396]	@ (800b580 <__ieee754_fmod+0x208>)
 800b3f2:	4653      	mov	r3, sl
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	dc36      	bgt.n	800b466 <__ieee754_fmod+0xee>
 800b3f8:	4216      	tst	r6, r2
 800b3fa:	d14f      	bne.n	800b49c <__ieee754_fmod+0x124>
 800b3fc:	f1bc 0f00 	cmp.w	ip, #0
 800b400:	d144      	bne.n	800b48c <__ieee754_fmod+0x114>
 800b402:	4a5f      	ldr	r2, [pc, #380]	@ (800b580 <__ieee754_fmod+0x208>)
 800b404:	463b      	mov	r3, r7
 800b406:	2b00      	cmp	r3, #0
 800b408:	dc3d      	bgt.n	800b486 <__ieee754_fmod+0x10e>
 800b40a:	485e      	ldr	r0, [pc, #376]	@ (800b584 <__ieee754_fmod+0x20c>)
 800b40c:	4281      	cmp	r1, r0
 800b40e:	db4a      	blt.n	800b4a6 <__ieee754_fmod+0x12e>
 800b410:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b414:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b418:	485a      	ldr	r0, [pc, #360]	@ (800b584 <__ieee754_fmod+0x20c>)
 800b41a:	4282      	cmp	r2, r0
 800b41c:	db57      	blt.n	800b4ce <__ieee754_fmod+0x156>
 800b41e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b422:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800b426:	1a89      	subs	r1, r1, r2
 800b428:	1b98      	subs	r0, r3, r6
 800b42a:	eba4 070e 	sub.w	r7, r4, lr
 800b42e:	2900      	cmp	r1, #0
 800b430:	d162      	bne.n	800b4f8 <__ieee754_fmod+0x180>
 800b432:	4574      	cmp	r4, lr
 800b434:	bf38      	it	cc
 800b436:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b43a:	2800      	cmp	r0, #0
 800b43c:	bfa4      	itt	ge
 800b43e:	463c      	movge	r4, r7
 800b440:	4603      	movge	r3, r0
 800b442:	ea53 0104 	orrs.w	r1, r3, r4
 800b446:	d0c6      	beq.n	800b3d6 <__ieee754_fmod+0x5e>
 800b448:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b44c:	db69      	blt.n	800b522 <__ieee754_fmod+0x1aa>
 800b44e:	494d      	ldr	r1, [pc, #308]	@ (800b584 <__ieee754_fmod+0x20c>)
 800b450:	428a      	cmp	r2, r1
 800b452:	db6c      	blt.n	800b52e <__ieee754_fmod+0x1b6>
 800b454:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b458:	432b      	orrs	r3, r5
 800b45a:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800b45e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b462:	4620      	mov	r0, r4
 800b464:	e7a9      	b.n	800b3ba <__ieee754_fmod+0x42>
 800b466:	3901      	subs	r1, #1
 800b468:	005b      	lsls	r3, r3, #1
 800b46a:	e7c3      	b.n	800b3f4 <__ieee754_fmod+0x7c>
 800b46c:	4945      	ldr	r1, [pc, #276]	@ (800b584 <__ieee754_fmod+0x20c>)
 800b46e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b472:	2b00      	cmp	r3, #0
 800b474:	ddc0      	ble.n	800b3f8 <__ieee754_fmod+0x80>
 800b476:	3901      	subs	r1, #1
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	e7fa      	b.n	800b472 <__ieee754_fmod+0xfa>
 800b47c:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b480:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b484:	e7b8      	b.n	800b3f8 <__ieee754_fmod+0x80>
 800b486:	3a01      	subs	r2, #1
 800b488:	005b      	lsls	r3, r3, #1
 800b48a:	e7bc      	b.n	800b406 <__ieee754_fmod+0x8e>
 800b48c:	4a3d      	ldr	r2, [pc, #244]	@ (800b584 <__ieee754_fmod+0x20c>)
 800b48e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800b492:	2b00      	cmp	r3, #0
 800b494:	ddb9      	ble.n	800b40a <__ieee754_fmod+0x92>
 800b496:	3a01      	subs	r2, #1
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	e7fa      	b.n	800b492 <__ieee754_fmod+0x11a>
 800b49c:	ea4f 522c 	mov.w	r2, ip, asr #20
 800b4a0:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b4a4:	e7b1      	b.n	800b40a <__ieee754_fmod+0x92>
 800b4a6:	1a40      	subs	r0, r0, r1
 800b4a8:	281f      	cmp	r0, #31
 800b4aa:	dc0a      	bgt.n	800b4c2 <__ieee754_fmod+0x14a>
 800b4ac:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800b4b0:	fa08 f800 	lsl.w	r8, r8, r0
 800b4b4:	fa2a f303 	lsr.w	r3, sl, r3
 800b4b8:	ea43 0308 	orr.w	r3, r3, r8
 800b4bc:	fa0a f400 	lsl.w	r4, sl, r0
 800b4c0:	e7aa      	b.n	800b418 <__ieee754_fmod+0xa0>
 800b4c2:	4b31      	ldr	r3, [pc, #196]	@ (800b588 <__ieee754_fmod+0x210>)
 800b4c4:	1a5b      	subs	r3, r3, r1
 800b4c6:	fa0a f303 	lsl.w	r3, sl, r3
 800b4ca:	2400      	movs	r4, #0
 800b4cc:	e7a4      	b.n	800b418 <__ieee754_fmod+0xa0>
 800b4ce:	1a80      	subs	r0, r0, r2
 800b4d0:	281f      	cmp	r0, #31
 800b4d2:	dc0a      	bgt.n	800b4ea <__ieee754_fmod+0x172>
 800b4d4:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800b4d8:	fa0c fc00 	lsl.w	ip, ip, r0
 800b4dc:	fa27 f606 	lsr.w	r6, r7, r6
 800b4e0:	ea46 060c 	orr.w	r6, r6, ip
 800b4e4:	fa07 fe00 	lsl.w	lr, r7, r0
 800b4e8:	e79d      	b.n	800b426 <__ieee754_fmod+0xae>
 800b4ea:	4e27      	ldr	r6, [pc, #156]	@ (800b588 <__ieee754_fmod+0x210>)
 800b4ec:	1ab6      	subs	r6, r6, r2
 800b4ee:	fa07 f606 	lsl.w	r6, r7, r6
 800b4f2:	f04f 0e00 	mov.w	lr, #0
 800b4f6:	e796      	b.n	800b426 <__ieee754_fmod+0xae>
 800b4f8:	4574      	cmp	r4, lr
 800b4fa:	bf38      	it	cc
 800b4fc:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b500:	2800      	cmp	r0, #0
 800b502:	da05      	bge.n	800b510 <__ieee754_fmod+0x198>
 800b504:	0fe0      	lsrs	r0, r4, #31
 800b506:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b50a:	0064      	lsls	r4, r4, #1
 800b50c:	3901      	subs	r1, #1
 800b50e:	e78b      	b.n	800b428 <__ieee754_fmod+0xb0>
 800b510:	ea50 0307 	orrs.w	r3, r0, r7
 800b514:	f43f af5f 	beq.w	800b3d6 <__ieee754_fmod+0x5e>
 800b518:	0ffb      	lsrs	r3, r7, #31
 800b51a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b51e:	007c      	lsls	r4, r7, #1
 800b520:	e7f4      	b.n	800b50c <__ieee754_fmod+0x194>
 800b522:	0fe1      	lsrs	r1, r4, #31
 800b524:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b528:	0064      	lsls	r4, r4, #1
 800b52a:	3a01      	subs	r2, #1
 800b52c:	e78c      	b.n	800b448 <__ieee754_fmod+0xd0>
 800b52e:	1a89      	subs	r1, r1, r2
 800b530:	2914      	cmp	r1, #20
 800b532:	dc0a      	bgt.n	800b54a <__ieee754_fmod+0x1d2>
 800b534:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800b538:	fa03 f202 	lsl.w	r2, r3, r2
 800b53c:	40cc      	lsrs	r4, r1
 800b53e:	4322      	orrs	r2, r4
 800b540:	410b      	asrs	r3, r1
 800b542:	ea43 0105 	orr.w	r1, r3, r5
 800b546:	4610      	mov	r0, r2
 800b548:	e737      	b.n	800b3ba <__ieee754_fmod+0x42>
 800b54a:	291f      	cmp	r1, #31
 800b54c:	dc07      	bgt.n	800b55e <__ieee754_fmod+0x1e6>
 800b54e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800b552:	40cc      	lsrs	r4, r1
 800b554:	fa03 f202 	lsl.w	r2, r3, r2
 800b558:	4322      	orrs	r2, r4
 800b55a:	462b      	mov	r3, r5
 800b55c:	e7f1      	b.n	800b542 <__ieee754_fmod+0x1ca>
 800b55e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800b562:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800b566:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800b56a:	32e2      	adds	r2, #226	@ 0xe2
 800b56c:	fa43 f202 	asr.w	r2, r3, r2
 800b570:	e7f3      	b.n	800b55a <__ieee754_fmod+0x1e2>
 800b572:	bf00      	nop
 800b574:	7fefffff 	.word	0x7fefffff
 800b578:	7ff00000 	.word	0x7ff00000
 800b57c:	0800bb08 	.word	0x0800bb08
 800b580:	fffffbed 	.word	0xfffffbed
 800b584:	fffffc02 	.word	0xfffffc02
 800b588:	fffffbe2 	.word	0xfffffbe2

0800b58c <_init>:
 800b58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58e:	bf00      	nop
 800b590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b592:	bc08      	pop	{r3}
 800b594:	469e      	mov	lr, r3
 800b596:	4770      	bx	lr

0800b598 <_fini>:
 800b598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59a:	bf00      	nop
 800b59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b59e:	bc08      	pop	{r3}
 800b5a0:	469e      	mov	lr, r3
 800b5a2:	4770      	bx	lr
